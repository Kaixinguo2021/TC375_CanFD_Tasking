	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\.tcp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c'

	
$TC162
	.sdecl	'.zrodata.tcp..105.cnt',data,rom
	.sect	'.zrodata.tcp..105.cnt'
	.align	2
.105.cnt:	.type	object
	.size	.105.cnt,4
	.word	675000
	.sdecl	'.zrodata.tcp..106.cnt',data,rom
	.sect	'.zrodata.tcp..106.cnt'
	.align	2
.106.cnt:	.type	object
	.size	.106.cnt,4
	.word	75000
	.sdecl	'.zrodata.tcp..107.cnt',data,rom
	.sect	'.zrodata.tcp..107.cnt'
	.align	2
.107.cnt:	.type	object
	.size	.107.cnt,4
	.word	7200000
	
	.sdecl	'.text.tcp.tcp_init',code,cluster('tcp_init')
	.sect	'.text.tcp.tcp_init'
	.align	2
	
	.global	tcp_init

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     3   * Transmission Control Protocol for IP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     4   * See also @ref tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     6   * @defgroup tcp_raw TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     7   * @ingroup callbackstyle_api
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     8   * Transmission Control Protocol for IP\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	     9   * @see @ref api
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    11   * Common functions for the TCP implementation, such as functions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    12   * for manipulating the data structures and the TCP timer functions. TCP functions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    13   * related to input and output is found in tcp_in.c and tcp_out.c respectively.\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    14   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    15   * TCP connection setup
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    16   * --------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    17   * The functions used for setting up connections is similar to that of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    18   * the sequential API and of the BSD socket API. A new TCP connection
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    19   * identifier (i.e., a protocol control block - PCB) is created with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    20   * tcp_new() function. This PCB can then be either set to listen for new
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    21   * incoming connections or be explicitly connected to another host.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    22   * - tcp_new()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    23   * - tcp_bind()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    24   * - tcp_listen() and tcp_listen_with_backlog()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    25   * - tcp_accept()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    26   * - tcp_connect()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    27   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    28   * Sending TCP data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    29   * ----------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    30   * TCP data is sent by enqueueing the data with a call to tcp_write() and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    31   * triggering to send by calling tcp_output(). When the data is successfully
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    32   * transmitted to the remote host, the application will be notified with a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    33   * call to a specified callback function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    34   * - tcp_write()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    35   * - tcp_output()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    36   * - tcp_sent()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    37   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    38   * Receiving TCP data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    39   * ------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    40   * TCP data reception is callback based - an application specified
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    41   * callback function is called when new data arrives. When the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    42   * application has taken the data, it has to call the tcp_recved()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    43   * function to indicate that TCP can advertise increase the receive
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    44   * window.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    45   * - tcp_recv()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    46   * - tcp_recved()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    47   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    48   * Application polling
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    49   * -------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    50   * When a connection is idle (i.e., no data is either transmitted or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    51   * received), lwIP will repeatedly poll the application by calling a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    52   * specified callback function. This can be used either as a watchdog
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    53   * timer for killing connections that have stayed idle for too long, or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    54   * as a method of waiting for memory to become available. For instance,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    55   * if a call to tcp_write() has failed because memory wasn't available,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    56   * the application may use the polling functionality to call tcp_write()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    57   * again when the connection has been idle for a while.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    58   * - tcp_poll()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    59   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    60   * Closing and aborting connections
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    61   * --------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    62   * - tcp_close()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    63   * - tcp_abort()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    64   * - tcp_err()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    65   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    66   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    67  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    68  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    69   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    70   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    71   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    72   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    73   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    74   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    75   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    76   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    77   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    78   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    79   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    80   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    81   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    82   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    83   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    84   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    85   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    86   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    87   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    88   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    89   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    90   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    91   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    92   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    93   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    94   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    95   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    96   * Author: Adam Dunkels <adam@sics.se>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    97   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    98   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	    99  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   100  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   102  #if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   103  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   104  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   105  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   106  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   107  #include "lwip/tcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   108  #include "lwip/priv/tcp_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   109  #include "lwip/debug.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   110  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   111  #include "lwip/ip6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   112  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   113  #include "lwip/nd6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   114  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   115  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   116  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   117  #ifdef LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   118  #include LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   119  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   121  #ifndef TCP_LOCAL_PORT_RANGE_START
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   122  /* From http://www.iana.org/assignments/port-numbers:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   123     "The Dynamic and/or Private Ports are those from 49152 through 65535" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   124  #define TCP_LOCAL_PORT_RANGE_START        0xc000
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   125  #define TCP_LOCAL_PORT_RANGE_END          0xffff
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   126  #define TCP_ENSURE_LOCAL_PORT_RANGE(port) ((u16_t)(((port) & (u16_t)~TCP_LOCAL_PORT_RANGE_START) + TCP_LOCAL_PORT_RANGE_START))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   127  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   128  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   129  #if LWIP_TCP_KEEPALIVE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   130  #define TCP_KEEP_DUR(pcb)   ((pcb)->keep_cnt * (pcb)->keep_intvl)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   131  #define TCP_KEEP_INTVL(pcb) ((pcb)->keep_intvl)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   132  #else /* LWIP_TCP_KEEPALIVE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   133  #define TCP_KEEP_DUR(pcb)   TCP_MAXIDLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   134  #define TCP_KEEP_INTVL(pcb) TCP_KEEPINTVL_DEFAULT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   135  #endif /* LWIP_TCP_KEEPALIVE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   136  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   137  /* As initial send MSS, we use TCP_MSS but limit it to 536. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   138  #if TCP_MSS > 536
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   139  #define INITIAL_MSS 536
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   140  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   141  #define INITIAL_MSS TCP_MSS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   142  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   143  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   144  static const char *const tcp_state_str[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   145    "CLOSED",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   146    "LISTEN",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   147    "SYN_SENT",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   148    "SYN_RCVD",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   149    "ESTABLISHED",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   150    "FIN_WAIT_1",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   151    "FIN_WAIT_2",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   152    "CLOSE_WAIT",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   153    "CLOSING",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   154    "LAST_ACK",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   155    "TIME_WAIT"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   156  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   157  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   158  /* last local TCP port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   159  static u16_t tcp_port = TCP_LOCAL_PORT_RANGE_START;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   160  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   161  /* Incremented every coarse grained timer shot (typically every 500 ms). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   162  u32_t tcp_ticks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   163  static const u8_t tcp_backoff[13] =
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   164  { 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7};
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   165  /* Times per slowtmr hits */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   166  static const u8_t tcp_persist_backoff[7] = { 3, 6, 12, 24, 48, 96, 120 };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   168  /* The TCP PCB lists. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   169  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   170  /** List of all TCP PCBs bound but not yet (connected || listening) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   171  struct tcp_pcb *tcp_bound_pcbs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   172  /** List of all TCP PCBs in LISTEN state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   173  union tcp_listen_pcbs_t tcp_listen_pcbs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   174  /** List of all TCP PCBs that are in a state in which
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   175   * they accept or send data. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   176  struct tcp_pcb *tcp_active_pcbs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   177  /** List of all TCP PCBs in TIME-WAIT state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   178  struct tcp_pcb *tcp_tw_pcbs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   180  /** An array with all (non-temporary) PCB lists, mainly used for smaller code size */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   181  struct tcp_pcb **const tcp_pcb_lists[] = {&tcp_listen_pcbs.pcbs, &tcp_bound_pcbs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   182           &tcp_active_pcbs, &tcp_tw_pcbs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   183  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   184  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   185  u8_t tcp_active_pcbs_changed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   186  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   187  /** Timer counter to handle calling slow-timer from tcp_tmr() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   188  static u8_t tcp_timer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   189  static u8_t tcp_timer_ctr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   190  static u16_t tcp_new_port(void);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   192  static err_t tcp_close_shutdown_fin(struct tcp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   193  #if LWIP_TCP_PCB_NUM_EXT_ARGS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   194  static void tcp_ext_arg_invoke_callbacks_destroyed(struct tcp_pcb_ext_args *ext_args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   195  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   196  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   197  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   198   * Initialize this module.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   199   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   200  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   201  tcp_init(void)
; Function tcp_init
.L381:
tcp_init:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   202  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   203  #ifdef LWIP_RAND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   204    tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   205  #endif /* LWIP_RAND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   206  }
	ret
.L934:
	
__tcp_init_function_end:
	.size	tcp_init,__tcp_init_function_end-tcp_init
.L610:
	; End of function
	
	.sdecl	'.text.tcp.tcp_free',code,cluster('tcp_free')
	.sect	'.text.tcp.tcp_free'
	.align	2
	
	.global	tcp_free

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   207  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   208  /** Free a tcp pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   209  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   210  tcp_free(struct tcp_pcb *pcb)
; Function tcp_free
.L383:
tcp_free:	.type	func
	mov.aa	a12,a4
.L1084:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   211  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   212    LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
	ld.bu	d15,[a12]20
.L1897:
	sub.a	a10,#16
.L1082:
	jne	d15,#1,.L2
.L1898:
	movh.a	a15,#@his(.13.str)
	lea	a15,[a15]@los(.13.str)
	st.a	[a10],a15
	mov	d15,#212
	st.w	[a10]4,d15
.L1083:
	fcall	.cocofun_109
.L1085:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1086:
	call	Ifx_Lwip_printf
.L2:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   213  #if LWIP_TCP_PCB_NUM_EXT_ARGS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   214    tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   215  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   216    memp_free(MEMP_TCP_PCB, pcb);
	mov	d4,#1
	mov.aa	a4,a12
.L1088:
	j	memp_free
.L967:
	
__tcp_free_function_end:
	.size	tcp_free,__tcp_free_function_end-tcp_free
.L640:
	; End of function
	
	.sdecl	'.text.tcp..cocofun_109',code,cluster('.cocofun_109')
	.sect	'.text.tcp..cocofun_109'
	.align	2
; Function .cocofun_109
.L385:
.cocofun_109:	.type	func
; Function body .cocofun_109, coco_iter:0
	movh.a	a15,#@his(.14.str)
	lea	a15,[a15]@los(.14.str)
.L2187:
	fret
.L775:
	; End of function
	.sdecl	'.text.tcp.tcp_free_listen',code,cluster('tcp_free_listen')
	.sect	'.text.tcp.tcp_free_listen'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   217  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   218  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   219  /** Free a tcp listen pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   220  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   221  tcp_free_listen(struct tcp_pcb *pcb)
; Function tcp_free_listen
.L387:
tcp_free_listen:	.type	func
	mov.aa	a12,a4
.L1091:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   222  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   223    LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
	ld.bu	d15,[a12]20
.L2082:
	sub.a	a10,#16
.L1089:
	jne	d15,#1,.L3
.L2083:
	movh.a	a15,#@his(.15.str)
	lea	a15,[a15]@los(.15.str)
	st.a	[a10],a15
	mov	d15,#223
	st.w	[a10]4,d15
.L1090:
	fcall	.cocofun_109
.L1092:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1093:
	call	Ifx_Lwip_printf
.L3:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   224  #if LWIP_TCP_PCB_NUM_EXT_ARGS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   225    tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   226  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   227    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
	mov	d4,#2
	mov.aa	a4,a12
.L1094:
	j	memp_free
.L1031:
	
__tcp_free_listen_function_end:
	.size	tcp_free_listen,__tcp_free_listen_function_end-tcp_free_listen
.L720:
	; End of function
	
	.sdecl	'.text.tcp.tcp_tmr',code,cluster('tcp_tmr')
	.sect	'.text.tcp.tcp_tmr'
	.align	2
	
	.global	tcp_tmr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   228  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   229  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   230  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   231   * Called periodically to dispatch TCP timers.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   232   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   233  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   234  tcp_tmr(void)
; Function tcp_tmr
.L389:
tcp_tmr:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   235  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   236    /* Call tcp_fasttmr() every 250 ms */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   237    tcp_fasttmr();
	call	tcp_fasttmr
.L1699:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   238  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   239    if (++tcp_timer & 1) {
	ld.bu	d15,tcp_timer
.L1700:
	add	d15,#1
	st.b	tcp_timer,d15
.L1701:
	ld.bu	d15,tcp_timer
.L1702:
	jz.t	d15:0,.L4
.L1703:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   240      /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   241         tcp_tmr() is called. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   242      tcp_slowtmr();
	j	tcp_slowtmr
.L4:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   243    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   244  }
	ret
.L935:
	
__tcp_tmr_function_end:
	.size	tcp_tmr,__tcp_tmr_function_end-tcp_tmr
.L615:
	; End of function
	
	.sdecl	'.text.tcp.tcp_remove_listener',code,cluster('tcp_remove_listener')
	.sect	'.text.tcp.tcp_remove_listener'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   246  #if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   247  /** Called when a listen pcb is closed. Iterates one pcb list and removes the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   248   * closed listener pcb from pcb->listener if matching.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   249   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   250  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   251  tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
; Function tcp_remove_listener
.L391:
tcp_remove_listener:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   252  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   253    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   254  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   255    LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   257    for (pcb = list; pcb != NULL; pcb = pcb->next) {
	j	.L5
.L6:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   258      if (pcb->listener == lpcb) {
	ld.a	a15,[a4]124
.L2088:
	jne.a	a15,a5,.L7
.L2089:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   259        pcb->listener = NULL;
	mov.a	a15,#0
.L2090:
	st.a	[a4]124,a15
.L7:
	ld.a	a4,[a4]12
.L5:
	jnz.a	a4,.L6
.L2091:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   260      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   261    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   262  }
	ret
.L1033:
	
__tcp_remove_listener_function_end:
	.size	tcp_remove_listener,__tcp_remove_listener_function_end-tcp_remove_listener
.L725:
	; End of function
	
	.sdecl	'.text.tcp.tcp_listen_closed',code,cluster('tcp_listen_closed')
	.sect	'.text.tcp.tcp_listen_closed'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   263  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   264  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   265  /** Called when a listen pcb is closed. Iterates all pcb lists and removes the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   266   * closed listener pcb from pcb->listener if matching.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   267   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   268  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   269  tcp_listen_closed(struct tcp_pcb *pcb)
; Function tcp_listen_closed
.L393:
tcp_listen_closed:	.type	func
	mov.aa	a12,a4
.L1097:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   270  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   271  #if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   272    size_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   273    LWIP_ASSERT("pcb != NULL", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   274    LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
	ld.bu	d15,[a12]20
.L2096:
	sub.a	a10,#16
.L1095:
	jeq	d15,#1,.L8
.L2097:
	movh.a	a15,#@his(.18.str)
	lea	a15,[a15]@los(.18.str)
	st.a	[a10],a15
	mov	d15,#274
	st.w	[a10]4,d15
.L1096:
	fcall	.cocofun_109
.L1098:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1099:
	call	Ifx_Lwip_printf
.L8:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   275    for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   276      tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
	movh.a	a15,#@his(tcp_pcb_lists)
	lea	a15,[a15]@los(tcp_pcb_lists)
.L2098:
	add.a	a15,#4
.L2099:
	mov.a	a13,#2
.L9:
	ld.a	a2,[a15+]
.L2100:
	mov.aa	a5,a12
.L1100:
	ld.a	a4,[a2]
.L2101:
	call	tcp_remove_listener
.L1101:
	loop	a13,.L9
.L2102:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   277    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   278  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   279    LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   280  }
	ret
.L1037:
	
__tcp_listen_closed_function_end:
	.size	tcp_listen_closed,__tcp_listen_closed_function_end-tcp_listen_closed
.L730:
	; End of function
	
	.sdecl	'.text.tcp.tcp_close_shutdown',code,cluster('tcp_close_shutdown')
	.sect	'.text.tcp.tcp_close_shutdown'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   281  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   282  #if TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   283  /** @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   284   * Delay accepting a connection in respect to the listen backlog:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   285   * the number of outstanding connections is increased until
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   286   * tcp_backlog_accepted() is called.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   287   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   288   * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   289   * or else the backlog feature will get out of sync!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   290   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   291   * @param pcb the connection pcb which is not fully accepted yet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   292   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   293  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   294  tcp_backlog_delayed(struct tcp_pcb *pcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   295  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   296    LWIP_ASSERT("pcb != NULL", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   297    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   298    if ((pcb->flags & TF_BACKLOGPEND) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   299      if (pcb->listener != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   300        pcb->listener->accepts_pending++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   301        LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   302        tcp_set_flags(pcb, TF_BACKLOGPEND);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   303      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   304    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   305  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   306  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   307  /** @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   308   * A delayed-accept a connection is accepted (or closed/aborted): decreases
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   309   * the number of outstanding connections after calling tcp_backlog_delayed().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   310   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   311   * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   312   * or else the backlog feature will get out of sync!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   313   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   314   * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   315   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   316  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   317  tcp_backlog_accepted(struct tcp_pcb *pcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   318  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   319    LWIP_ASSERT("pcb != NULL", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   320    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   321    if ((pcb->flags & TF_BACKLOGPEND) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   322      if (pcb->listener != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   323        LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   324        pcb->listener->accepts_pending--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   325        tcp_clear_flags(pcb, TF_BACKLOGPEND);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   326      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   327    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   328  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   329  #endif /* TCP_LISTEN_BACKLOG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   330  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   331  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   332   * Closes the TX side of a connection held by the PCB.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   333   * For tcp_close(), a RST is sent if the application didn't receive all data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   334   * (tcp_recved() not called for all data passed to recv callback).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   335   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   336   * Listening pcbs are freed and may not be referenced any more.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   337   * Connection pcbs are freed if not yet connected and may not be referenced
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   338   * any more. If a connection is established (at least SYN received or in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   339   * a closing state), the connection is closed, and put in a closing state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   340   * The pcb is then automatically freed in tcp_slowtmr(). It is therefore
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   341   * unsafe to reference it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   342   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   343   * @param pcb the tcp_pcb to close
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   344   * @return ERR_OK if connection has been closed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   345   *         another err_t if closing failed and pcb is not freed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   346   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   347  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   348  tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
; Function tcp_close_shutdown
.L395:
tcp_close_shutdown:	.type	func
	sub.a	a10,#16
.L1102:
	mov.aa	a12,a4
.L1104:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   349  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   350    LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   351  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   352    if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
	jeq	d4,#0,.L10
.L2107:
	ld.bu	d15,[a12]20
.L2108:
	jeq	d15,#4,.L11
.L2109:
	jne	d15,#7,.L12
.L11:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   353      if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
	ld.w	d15,[a12]120
.L2110:
	jne	d15,#0,.L13
.L2111:
	ld.hu	d15,[a12]40
.L2112:
	mov	d0,#2144
.L2113:
	jeq	d15,d0,.L14
.L13:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   354        /* Not all data received by application, send RST to tell the remote
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   355           side about this. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   356        LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
	ld.hu	d15,[a12]26
	jnz.t	d15:4,.L15
	movh.a	a2,#@his(.20.str)
	lea	a2,[a2]@los(.20.str)
	st.a	[a10],a2
	mov	d15,#356
	st.w	[a10]4,d15
.L1103:
	fcall	.cocofun_109
.L1105:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1106:
	call	Ifx_Lwip_printf
.L15:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   357  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   358        /* don't call tcp_abort here: we must not deallocate the pcb since
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   359           that might not be expected when calling tcp_close */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   360        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
	ld.w	d4,[a12]80
.L2114:
	ld.w	d5,[a12]36
.L2115:
	lea	a6,[a12]4
.L2116:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   361                pcb->local_port, pcb->remote_port);
	ld.hu	d6,[a12]22
.L2117:
	ld.hu	d7,[a12]24
	mov.aa	a4,a12
.L1107:
	mov.aa	a5,a12
.L1109:
	call	tcp_rst
.L1108:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   362  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   363        tcp_pcb_purge(pcb);
	mov.aa	a4,a12
.L1110:
	call	tcp_pcb_purge
.L1111:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   364        TCP_RMV_ACTIVE(pcb);
	lea	a2,tcp_active_pcbs
	ld.a	a4,[a2]
.L1112:
	jne.a	a4,a12,.L18
	ld.a	a15,[a12]12
	st.a	[a2],a15
	j	.L17
.L19:
	ld.a	a15,[a4]12
	jne.a	a15,a12,.L20
	ld.a	a15,[a12]12
	st.a	[a4]12,a15
	j	.L21
.L20:
	mov.aa	a4,a15
.L18:
	jnz.a	a4,.L19
.L21:
.L17:
	mov.a	a15,#0
	st.a	[a12]12,a15
	mov	d15,#1
	st.b	tcp_active_pcbs_changed,d15
.L2118:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   365        /* Deallocate the pcb since we already sent a RST for it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   366        if (tcp_input_pcb == pcb) {
	ld.a	a15,tcp_input_pcb
.L2119:
	jne.a	a15,a12,.L22
.L2120:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   367          /* prevent using a deallocated pcb: free it from tcp_input later */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   368          tcp_trigger_input_pcb_close();
	call	tcp_trigger_input_pcb_close
.L1113:
	j	.L23
.L14:
.L12:
.L10:
	ld.bu	d15,[a12]20
.L2121:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   369        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   370          tcp_free(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   371        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   372        return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   373      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   374    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   375  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   376    /* - states which free the pcb are handled here,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   377       - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   378    switch (pcb->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   379      case CLOSED:
	jeq	d15,#0,.L24
.L2122:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   380        /* Closing a pcb in the CLOSED state might seem erroneous,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   381         * however, it is in this state once allocated and as yet unused
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   382         * and the user needs some way to free it should the need arise.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   383         * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   384         * or for a pcb that has been used and then entered the CLOSED state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   385         * is erroneous, but this should never happen as the pcb has in those cases
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   386         * been freed, and so any remaining handles are bogus. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   387        if (pcb->local_port != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   388          TCP_RMV(&tcp_bound_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   389        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   390        tcp_free(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   391        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   392      case LISTEN:
	jeq	d15,#1,.L25
.L2123:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   393        tcp_listen_closed(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   394        tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   395        tcp_free_listen(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   396        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   397      case SYN_SENT:
	jeq	d15,#2,.L26
.L2124:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   398        TCP_PCB_REMOVE_ACTIVE(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   399        tcp_free(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   400        MIB2_STATS_INC(mib2.tcpattemptfails);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   401        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   402      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   403        return tcp_close_shutdown_fin(pcb);
	j	tcp_close_shutdown_fin
.L24:
	ld.hu	d15,[a12]22
.L2125:
	jeq	d15,#0,.L28
.L2126:
	ld.a	a2,tcp_bound_pcbs
.L1115:
	jne.a	a2,a12,.L31
	ld.a	a15,[a12]12
	st.a	tcp_bound_pcbs,a15
	j	.L30
.L32:
	ld.a	a15,[a2]12
	jne.a	a15,a12,.L33
	ld.a	a15,[a12]12
	st.a	[a2]12,a15
	j	.L34
.L33:
	mov.aa	a2,a15
.L31:
	jnz.a	a2,.L32
.L34:
.L30:
	mov.a	a15,#0
	st.a	[a12]12,a15
.L2127:
	j	.L35
.L25:
	call	tcp_listen_closed
.L1114:
	lea	a4,tcp_listen_pcbs
.L2128:
	mov.aa	a5,a12
.L1116:
	call	tcp_pcb_remove
.L1117:
	mov.aa	a4,a12
.L1118:
	call	tcp_free_listen
.L1119:
	j	.L36
.L26:
	lea	a4,tcp_active_pcbs
.L1120:
	mov.aa	a5,a12
.L1122:
	call	tcp_pcb_remove
.L1121:
	mov	d15,#1
	st.b	tcp_active_pcbs_changed,d15

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   404    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   405    return ERR_OK;
.L35:
.L28:
.L22:
	mov.aa	a4,a12
.L1123:
	call	tcp_free
.L36:
.L23:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   406  }
	mov	d2,#0
	ret
.L1041:
	
__tcp_close_shutdown_function_end:
	.size	tcp_close_shutdown,__tcp_close_shutdown_function_end-tcp_close_shutdown
.L735:
	; End of function
	
	.sdecl	'.text.tcp.tcp_close_shutdown_fin',code,cluster('tcp_close_shutdown_fin')
	.sect	'.text.tcp.tcp_close_shutdown_fin'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   408  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   409  tcp_close_shutdown_fin(struct tcp_pcb *pcb)
; Function tcp_close_shutdown_fin
.L397:
tcp_close_shutdown_fin:	.type	func
	mov.aa	a15,a4
.L1125:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   410  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   411    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   412    LWIP_ASSERT("pcb != NULL", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   413  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   414    switch (pcb->state) {
	ld.bu	d15,[a15]20
.L2070:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   415      case SYN_RCVD:
	jeq	d15,#3,.L40
.L2071:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   416        err = tcp_send_fin(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   417        if (err == ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   418          tcp_backlog_accepted(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   419          MIB2_STATS_INC(mib2.tcpattemptfails);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   420          pcb->state = FIN_WAIT_1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   421        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   422        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   423      case ESTABLISHED:
	jeq	d15,#4,.L41
.L2072:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   424        err = tcp_send_fin(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   425        if (err == ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   426          MIB2_STATS_INC(mib2.tcpestabresets);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   427          pcb->state = FIN_WAIT_1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   428        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   429        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   430      case CLOSE_WAIT:
	jeq	d15,#7,.L42
.L2073:
	j	.L43
.L41:
.L40:
	call	tcp_send_fin
.L1124:
	mov	d15,d2
.L1126:
	jne	d15,#0,.L44
.L2074:
	mov	d0,#5
	j	.L45
.L42:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   431        err = tcp_send_fin(pcb);
	call	tcp_send_fin
.L1127:
	mov	d15,d2
.L1128:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   432        if (err == ERR_OK) {
	jne	d15,#0,.L46
.L2075:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   433          MIB2_STATS_INC(mib2.tcpestabresets);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   434          pcb->state = LAST_ACK;
	mov	d0,#9

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   435        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   436        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   437      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   438        /* Has already been closed, do nothing. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   439        return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   440    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   441  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   442    if (err == ERR_OK) {
.L45:
	st.b	[a15]20,d0
.L46:
.L44:
	jne	d15,#0,.L47
.L2076:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   443      /* To ensure all data has been sent when tcp_close returns, we have
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   444         to make sure tcp_output doesn't fail.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   445         Since we don't really have to ensure all data has been sent when tcp_close
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   446         returns (unsent data is sent from tcp timer functions, also), we don't care
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   447         for the return value of tcp_output for now. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   448      tcp_output(pcb);
	mov.aa	a4,a15
.L1130:
	call	tcp_output
.L1131:
	j	.L48
.L47:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   449    } else if (err == ERR_MEM) {
	jne	d15,#-1,.L49
.L2077:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   450      /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   451      tcp_set_flags(pcb, TF_CLOSEPEND);
	ld.hu	d15,[a15]26
.L1129:
	or	d15,#8
	st.h	[a15]26,d15
.L43:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   452      /* We have to return ERR_OK from here to indicate to the callers that this
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   453         pcb should not be used any more as it will be freed soon via tcp_tmr.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   454         This is OK here since sending FIN does not guarantee a time frime for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   455         actually freeing the pcb, either (it is left in closure states for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   456         remote ACK or timeout) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   457      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   458    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   459    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   460  }
	mov	d2,#0
	ret
.L49:
.L48:
	mov	d2,d15
	ret
.L1028:
	
__tcp_close_shutdown_fin_function_end:
	.size	tcp_close_shutdown_fin,__tcp_close_shutdown_fin_function_end-tcp_close_shutdown_fin
.L715:
	; End of function
	
	.sdecl	'.text.tcp.tcp_close',code,cluster('tcp_close')
	.sect	'.text.tcp.tcp_close'
	.align	2
	
	.global	tcp_close

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   461  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   462  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   463   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   464   * Closes the connection held by the PCB.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   465   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   466   * Listening pcbs are freed and may not be referenced any more.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   467   * Connection pcbs are freed if not yet connected and may not be referenced
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   468   * any more. If a connection is established (at least SYN received or in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   469   * a closing state), the connection is closed, and put in a closing state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   470   * The pcb is then automatically freed in tcp_slowtmr(). It is therefore
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   471   * unsafe to reference it (unless an error is returned).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   472   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   473   * The function may return ERR_MEM if no memory
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   474   * was available for closing the connection. If so, the application
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   475   * should wait and try again either by using the acknowledgment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   476   * callback or the polling functionality. If the close succeeds, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   477   * function returns ERR_OK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   478   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   479   * @param pcb the tcp_pcb to close
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   480   * @return ERR_OK if connection has been closed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   481   *         another err_t if closing failed and pcb is not freed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   482   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   483  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   484  tcp_close(struct tcp_pcb *pcb)
; Function tcp_close
.L399:
tcp_close:	.type	func
	sub.a	a10,#16
.L1132:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   485  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   486    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   487  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   488    LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a4,.L52
.L1657:
	movh.a	a15,#@his(.21.str)
	lea	a15,[a15]@los(.21.str)
	st.a	[a10],a15
	mov	d15,#488
	st.w	[a10]4,d15
.L1133:
	fcall	.cocofun_109
.L1134:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1135:
	call	Ifx_Lwip_printf
.L1658:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   489    LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   490  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   491    tcp_debug_print_state(pcb->state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   492  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   493    if (pcb->state != LISTEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   494      /* Set a flag not to receive any more data... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   495      tcp_set_flags(pcb, TF_RXCLOSED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   496    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   497    /* ... and close */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   498    return tcp_close_shutdown(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   499  }
	mov	d2,#-16
	ret
.L52:
	ld.bu	d15,[a4]20
.L1659:
	jeq	d15,#1,.L54
.L1660:
	ld.hu	d15,[a4]26
	or	d15,#16
	st.h	[a4]26,d15
.L54:
	mov	d4,#1
	j	tcp_close_shutdown
.L918:
	
__tcp_close_function_end:
	.size	tcp_close,__tcp_close_function_end-tcp_close
.L590:
	; End of function
	
	.sdecl	'.text.tcp.tcp_shutdown',code,cluster('tcp_shutdown')
	.sect	'.text.tcp.tcp_shutdown'
	.align	2
	
	.global	tcp_shutdown

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   500  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   501  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   502   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   503   * Causes all or part of a full-duplex connection of this PCB to be shut down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   504   * This doesn't deallocate the PCB unless shutting down both sides!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   505   * Shutting down both sides is the same as calling tcp_close, so if it succeds
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   506   * (i.e. returns ER_OK), the PCB must not be referenced any more!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   507   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   508   * @param pcb PCB to shutdown
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   509   * @param shut_rx shut down receive side if this is != 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   510   * @param shut_tx shut down send side if this is != 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   511   * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   512   *         another err_t on error.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   513   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   514  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   515  tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
; Function tcp_shutdown
.L401:
tcp_shutdown:	.type	func
	sub.a	a10,#16
.L1136:
	mov.aa	a15,a4
.L1138:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   516  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   517    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   518  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   519    LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
	mov	e8,d5,d4
	jnz.a	a15,.L56
.L1665:
	movh.a	a15,#@his(.23.str)
.L1139:
	lea	a15,[a15]@los(.23.str)
	st.a	[a10],a15
	mov	d15,#519
	st.w	[a10]4,d15
.L1137:
	fcall	.cocofun_109
.L1140:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1141:
	call	Ifx_Lwip_printf
.L1142:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   520  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   521    if (pcb->state == LISTEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   522      return ERR_CONN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   523    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   524    if (shut_rx) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   525      /* shut down the receive side: set a flag not to receive any more data... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   526      tcp_set_flags(pcb, TF_RXCLOSED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   527      if (shut_tx) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   528        /* shutting down the tx AND rx side is the same as closing for the raw API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   529        return tcp_close_shutdown(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   530      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   531      /* ... and free buffered data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   532      if (pcb->refused_data != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   533        pbuf_free(pcb->refused_data);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   534        pcb->refused_data = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   535      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   536    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   537    if (shut_tx) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   538      /* This can't happen twice since if it succeeds, the pcb's state is changed.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   539         Only close in these states as the others directly deallocate the PCB */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   540      switch (pcb->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   541        case SYN_RCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   542        case ESTABLISHED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   543        case CLOSE_WAIT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   544          return tcp_close_shutdown(pcb, (u8_t)shut_rx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   545        default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   546          /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   547            into CLOSED state, where the PCB is deallocated. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   548          return ERR_CONN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   549      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   550    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   551    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   552  }
	mov	d2,#-16
	ret
.L56:
	ld.bu	d15,[a15]20
.L1666:
	jeq	d15,#1,.L58
.L1145:
	jeq	d8,#0,.L59
.L1146:
	ld.hu	d15,[a15]26
	or	d15,#16
	st.h	[a15]26,d15
.L1147:
	jeq	d9,#0,.L60
.L1148:
	mov	d4,#1
	j	.L61
.L60:
	ld.a	a4,[a15]120
.L1143:
	jz.a	a4,.L62
.L1667:
	call	pbuf_free
.L1144:
	mov.a	a2,#0
.L1668:
	st.a	[a15]120,a2
.L62:
.L59:
	jeq	d9,#0,.L63
.L1149:
	ld.bu	d15,[a15]20
.L1669:
	jeq	d15,#3,.L64
.L1670:
	jeq	d15,#4,.L65
.L1671:
	jne	d15,#7,.L67
.L65:
.L64:
	extr.u	d4,d8,#0,#8
.L61:
	mov.aa	a4,a15
.L1150:
	j	tcp_close_shutdown
.L67:
.L58:
	mov	d2,#-11
	ret
.L63:
	mov	d2,#0
	ret
.L920:
	
__tcp_shutdown_function_end:
	.size	tcp_shutdown,__tcp_shutdown_function_end-tcp_shutdown
.L595:
	; End of function
	
	.sdecl	'.text.tcp.tcp_abandon',code,cluster('tcp_abandon')
	.sect	'.text.tcp.tcp_abandon'
	.align	2
	
	.global	tcp_abandon

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   553  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   554  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   555   * Abandons a connection and optionally sends a RST to the remote
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   556   * host.  Deletes the local protocol control block. This is done when
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   557   * a connection is killed because of shortage of memory.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   558   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   559   * @param pcb the tcp_pcb to abort
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   560   * @param reset boolean to indicate whether a reset should be sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   561   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   562  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   563  tcp_abandon(struct tcp_pcb *pcb, int reset)
; Function tcp_abandon
.L403:
tcp_abandon:	.type	func
	sub.a	a10,#16
.L1151:
	mov.aa	a12,a4
.L1153:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   564  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   565    u32_t seqno, ackno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   566  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   567    tcp_err_fn errf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   568  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   569    void *errf_arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   570  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   571    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   572  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   573    LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
	mov	d10,d4
	jnz.a	a12,.L71
.L1154:
	movh.a	a15,#@his(.24.str)
	lea	a15,[a15]@los(.24.str)
	st.a	[a10],a15
	mov	d15,#573
	st.w	[a10]4,d15
.L1152:
	fcall	.cocofun_109
.L1155:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1156:
	j	Ifx_Lwip_printf

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   574  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   575    /* pcb->state LISTEN not allowed here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   576    LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   577                pcb->state != LISTEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   578    /* Figure out on which TCP PCB list we are, and remove us. If we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   579       are in an active state, call the receive function associated with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   580       the PCB with a NULL argument, and send an RST to the remote end. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   581    if (pcb->state == TIME_WAIT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   582      tcp_pcb_remove(&tcp_tw_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   583      tcp_free(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   584    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   585      int send_rst = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   586      u16_t local_port = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   587      enum tcp_state last_state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   588      seqno = pcb->snd_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   589      ackno = pcb->rcv_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   590  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   591      errf = pcb->errf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   592  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   593      errf_arg = pcb->callback_arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   594      if (pcb->state == CLOSED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   595        if (pcb->local_port != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   596          /* bound, not yet opened */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   597          TCP_RMV(&tcp_bound_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   598        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   599      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   600        send_rst = reset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   601        local_port = pcb->local_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   602        TCP_PCB_REMOVE_ACTIVE(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   603      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   604      if (pcb->unacked != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   605        tcp_segs_free(pcb->unacked);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   606      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   607      if (pcb->unsent != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   608        tcp_segs_free(pcb->unsent);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   609      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   610  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   611      if (pcb->ooseq != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   612        tcp_segs_free(pcb->ooseq);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   613      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   614  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   615      tcp_backlog_accepted(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   616      if (send_rst) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   617        LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   618        tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   619      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   620      last_state = pcb->state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   621      tcp_free(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   622      TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
.L89:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   623    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   624  }
	ret
.L71:
	ld.bu	d15,[a12]20
	jne	d15,#1,.L73
	movh.a	a2,#@his(.25.str)
	lea	a2,[a2]@los(.25.str)
	st.a	[a10],a2
	mov	d15,#576
	st.w	[a10]4,d15
.L1157:
	fcall	.cocofun_109
.L1158:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1159:
	call	Ifx_Lwip_printf
.L73:
	ld.bu	d0,[a12]20
.L1903:
	mov	d15,#10
.L1904:
	jne	d15,d0,.L74
.L1905:
	lea	a4,tcp_tw_pcbs
.L1906:
	mov.aa	a5,a12
.L1160:
	call	tcp_pcb_remove
.L1161:
	mov.aa	a4,a12
.L1162:
	j	tcp_free
.L74:
	mov	d15,#0
	ld.w	d9,[a12]80
.L1163:
	mov	d8,d15
	ld.w	d11,[a12]36
.L1164:
	ld.a	a13,[a12]144
.L1165:
	ld.a	a14,[a12]16
.L1166:
	ld.hu	d1,[a12]22
.L1907:
	jne	d0,#0,.L76
.L1908:
	jeq	d1,#0,.L77
.L1909:
	ld.a	a15,tcp_bound_pcbs
.L1167:
	jne.a	a15,a12,.L80
	ld.a	a15,[a12]12
.L1168:
	st.a	tcp_bound_pcbs,a15
	j	.L79
.L81:
	ld.a	a2,[a15]12
	jne.a	a2,a12,.L82
	ld.a	a2,[a12]12
	st.a	[a15]12,a2
	j	.L83
.L82:
	mov.aa	a15,a2
.L80:
	jnz.a	a15,.L81
.L83:
.L79:
	mov.a	a15,#0
	st.a	[a12]12,a15
.L1910:
	j	.L84
.L76:
	mov	d15,d10
	mov.aa	a5,a12
.L1169:
	mov	d8,d1
	lea	a4,tcp_active_pcbs
	call	tcp_pcb_remove
.L1170:
	mov	d0,#1
	st.b	tcp_active_pcbs_changed,d0
.L84:
.L77:
	ld.a	a4,[a12]112
.L1911:
	jz.a	a4,.L85
.L1912:
	call	tcp_segs_free
.L85:
	ld.a	a4,[a12]108
.L1913:
	jz.a	a4,.L86
.L1914:
	call	tcp_segs_free
.L86:
	ld.a	a4,[a12]116
.L1915:
	jz.a	a4,.L87
.L1916:
	call	tcp_segs_free
.L87:
	jeq	d15,#0,.L88
.L1917:
	lea	a6,[a12]4
.L1918:
	ld.hu	d7,[a12]24
	mov.aa	a4,a12
.L1171:
	mov	e4,d11,d9
	mov.aa	a5,a12
.L1172:
	mov	d6,d8
	call	tcp_rst
.L88:
	mov.aa	a4,a12
.L1173:
	call	tcp_free
.L1174:
	jz.a	a13,.L89
.L1919:
	mov	d4,#-13
	mov.aa	a4,a14
.L1175:
	ji	a13
.L970:
	
__tcp_abandon_function_end:
	.size	tcp_abandon,__tcp_abandon_function_end-tcp_abandon
.L645:
	; End of function
	
	.sdecl	'.text.tcp.tcp_abort',code,cluster('tcp_abort')
	.sect	'.text.tcp.tcp_abort'
	.align	2
	
	.global	tcp_abort

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   625  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   626  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   627   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   628   * Aborts the connection by sending a RST (reset) segment to the remote
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   629   * host. The pcb is deallocated. This function never fails.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   630   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   631   * ATTENTION: When calling this from one of the TCP callbacks, make
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   632   * sure you always return ERR_ABRT (and never return ERR_ABRT otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   633   * or you will risk accessing deallocated memory or memory leaks!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   634   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   635   * @param pcb the tcp pcb to abort
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   636   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   637  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   638  tcp_abort(struct tcp_pcb *pcb)
; Function tcp_abort
.L405:
tcp_abort:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   639  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   640    tcp_abandon(pcb, 1);
	mov	d4,#1
	j	tcp_abandon
.L916:
	
__tcp_abort_function_end:
	.size	tcp_abort,__tcp_abort_function_end-tcp_abort
.L585:
	; End of function
	
	.sdecl	'.text.tcp.tcp_bind',code,cluster('tcp_bind')
	.sect	'.text.tcp.tcp_bind'
	.align	2
	
	.global	tcp_bind

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   641  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   642  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   643  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   644   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   645   * Binds the connection to a local port number and IP address. If the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   646   * IP address is not given (i.e., ipaddr == IP_ANY_TYPE), the connection is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   647   * bound to all local IP addresses.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   648   * If another connection is bound to the same port, the function will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   649   * return ERR_USE, otherwise ERR_OK is returned.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   650   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   651   * @param pcb the tcp_pcb to bind (no check is done whether this pcb is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   652   *        already bound!)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   653   * @param ipaddr the local ip address to bind to (use IPx_ADDR_ANY to bind
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   654   *        to any local address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   655   * @param port the local port to bind to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   656   * @return ERR_USE if the port is already in use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   657   *         ERR_VAL if bind failed because the PCB is not in a valid state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   658   *         ERR_OK if bound
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   659   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   660  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   661  tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
; Function tcp_bind
.L407:
tcp_bind:	.type	func
	sub.a	a10,#16
.L1176:
	mov.aa	a12,a4
.L1178:
	mov.aa	a13,a5
.L1179:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   662  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   663    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   664    int max_pcb_list = NUM_TCP_PCB_LISTS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   665    struct tcp_pcb *cpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   666  #if LWIP_IPV6 && LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   667    ip_addr_t zoned_ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   668  #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   669  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   670    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   671  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   672  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   673    /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   674    if (ipaddr == NULL) {
	jnz.a	a13,.L90
.L1566:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   675      ipaddr = IP4_ADDR_ANY;
	lea	a13,ip_addr_any
.L90:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   676    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   677  #else /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   678    LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   679  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   680  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   681    LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a12,.L91
.L1567:
	movh.a	a15,#@his(.27.str)
	lea	a15,[a15]@los(.27.str)
	st.a	[a10],a15
	mov	d15,#681
	st.w	[a10]4,d15
.L1177:
	fcall	.cocofun_109
.L1180:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1181:
	call	Ifx_Lwip_printf
.L1183:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   682  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   683    LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   684  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   685  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   686    /* Unless the REUSEADDR flag is set,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   687       we have to check the pcbs in TIME-WAIT state, also.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   688       We do not dump TIME_WAIT pcb's; they can still be matched by incoming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   689       packets using both local and remote IP addresses and ports to distinguish.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   690     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   691    if (ip_get_option(pcb, SOF_REUSEADDR)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   692      max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   693    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   694  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   695  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   696  #if LWIP_IPV6 && LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   697    /* If the given IP address should have a zone but doesn't, assign one now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   698     * This is legacy support: scope-aware callers should always provide properly
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   699     * zoned source addresses. Do the zone selection before the address-in-use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   700     * check below; as such we have to make a temporary copy of the address. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   701    if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNICAST)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   702      ip_addr_copy(zoned_ipaddr, *ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   703      ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   704      ipaddr = &zoned_ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   705    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   706  #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   707  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   708    if (port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   709      port = tcp_new_port();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   710      if (port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   711        return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   712      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   713    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   714      /* Check if the address already is in use (on all lists) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   715      for (i = 0; i < max_pcb_list; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   716        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   717          if (cpcb->local_port == port) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   718  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   719            /* Omit checking for the same port if both pcbs have REUSEADDR set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   720               For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   721               tcp_connect. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   722            if (!ip_get_option(pcb, SOF_REUSEADDR) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   723                !ip_get_option(cpcb, SOF_REUSEADDR))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   724  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   725            {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   726              /* @todo: check accept_any_ip_version */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   727              if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   728                  (ip_addr_isany(&cpcb->local_ip) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   729                   ip_addr_isany(ipaddr) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   730                   ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   731                return ERR_USE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   732              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   733            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   734          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   735        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   736      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   737    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   738  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   739    if (!ip_addr_isany(ipaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   740  #if LWIP_IPV4 && LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   741        || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   742  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   743       ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   744      ip_addr_set(&pcb->local_ip, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   745    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   746    pcb->local_port = port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   747    TCP_REG(&tcp_bound_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   748    LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   749    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   750  }
	mov	d2,#-16
	ret
.L91:
	ld.bu	d15,[a12]20
	jeq	d15,#0,.L93
	movh.a	a15,#@his(.28.str)
	lea	a15,[a15]@los(.28.str)
	st.a	[a10],a15
	mov	d15,#683
	st.w	[a10]4,d15
.L1182:
	fcall	.cocofun_109
.L1184:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1185:
	call	Ifx_Lwip_printf
.L1186:
	mov	d2,#-6
	ret
.L93:
	jne	d4,#0,.L95
.L1568:
	call	tcp_new_port
.L1187:
	mov	d4,d2
.L1188:
	jne	d4,#0,.L96
.L1569:
	mov	d2,#-2
	ret
.L95:
	movh.a	a2,#@his(tcp_pcb_lists)
	lea	a2,[a2]@los(tcp_pcb_lists)
.L1570:
	mov.a	a4,#3
.L98:
	ld.a	a15,[a2]
.L1571:
	ld.a	a15,[a15]
.L1190:
	j	.L99
.L100:
	ld.hu	d15,[a15]22
.L1572:
	jne	d15,d4,.L101
.L1573:
	ld.w	d15,[a15]
	jeq	d15,#0,.L102
.L1574:
	ld.w	d0,[a13]
	jeq	d0,#0,.L103
.L1575:
	jne	d15,d0,.L104
.L103:
.L102:
	mov	d2,#-8
	ret
.L104:
.L101:
	ld.a	a15,[a15]12
.L99:
	jnz.a	a15,.L100
.L1576:
	add.a	a2,#4
	loop	a4,.L98
.L96:
	ld.w	d15,[a13]
	jeq	d15,#0,.L106
.L1577:
	st.w	[a12],d15
.L106:
	st.h	[a12]22,d4
.L1578:
	ld.a	a15,tcp_bound_pcbs
	st.a	[a12]12,a15
	st.a	tcp_bound_pcbs,a12
	call	tcp_timer_needed
.L1189:
	mov	d2,#0
	ret
.L881:
	
__tcp_bind_function_end:
	.size	tcp_bind,__tcp_bind_function_end-tcp_bind
.L560:
	; End of function
	
	.sdecl	'.text.tcp.tcp_bind_netif',code,cluster('tcp_bind_netif')
	.sect	'.text.tcp.tcp_bind_netif'
	.align	2
	
	.global	tcp_bind_netif

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   751  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   752  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   753   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   754   * Binds the connection to a netif and IP address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   755   * After calling this function, all packets received via this PCB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   756   * are guaranteed to have come in via the specified netif, and all
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   757   * outgoing packets will go out via the specified netif.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   758   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   759   * @param pcb the tcp_pcb to bind.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   760   * @param netif the netif to bind to. Can be NULL.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   761   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   762  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   763  tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
; Function tcp_bind_netif
.L409:
tcp_bind_netif:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   764  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   765    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   766    if (netif != NULL) {
	jz.a	a5,.L108
.L1583:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   767      pcb->netif_idx = netif_get_index(netif);
	ld.bu	d15,[a5]44
.L1584:
	add	d15,#1
	st.b	[a4]8,d15
.L1585:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   768    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   769      pcb->netif_idx = NETIF_NO_INDEX;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   770    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   771  }
	ret
.L108:
	mov	d15,#0
	st.b	[a4]8,d15
.L1586:
	ret
.L889:
	
__tcp_bind_netif_function_end:
	.size	tcp_bind_netif,__tcp_bind_netif_function_end-tcp_bind_netif
.L565:
	; End of function
	
	.sdecl	'.text.tcp.tcp_accept_null',code,cluster('tcp_accept_null')
	.sect	'.text.tcp.tcp_accept_null'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   772  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   773  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   774  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   775   * Default accept callback if no accept callback is specified by the user.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   776   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   777  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   778  tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
; Function tcp_accept_null
.L411:
tcp_accept_null:	.type	func
	sub.a	a10,#16
.L1191:
	mov.aa	a12,a5
.L1193:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   779  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   780    LWIP_UNUSED_ARG(arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   781    LWIP_UNUSED_ARG(err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   782  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   783    LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
	jnz.a	a12,.L110
.L2133:
	movh.a	a15,#@his(.30.str)
	lea	a15,[a15]@los(.30.str)
	st.a	[a10],a15
	mov	d15,#783
	st.w	[a10]4,d15
.L1192:
	fcall	.cocofun_109
.L1194:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1195:
	call	Ifx_Lwip_printf
.L110:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   784  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   785    tcp_abort(pcb);
	mov.aa	a4,a12
.L1196:
	call	tcp_abort
.L1197:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   786  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   787    return ERR_ABRT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   788  }
	mov	d2,#-13
	ret
.L1046:
	
__tcp_accept_null_function_end:
	.size	tcp_accept_null,__tcp_accept_null_function_end-tcp_accept_null
.L740:
	; End of function
	
	.sdecl	'.text.tcp.tcp_listen_with_backlog',code,cluster('tcp_listen_with_backlog')
	.sect	'.text.tcp.tcp_listen_with_backlog'
	.align	2
	
	.global	tcp_listen_with_backlog

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   789  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   790  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   791  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   792   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   793   * Set the state of the connection to be LISTEN, which means that it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   794   * is able to accept incoming connections. The protocol control block
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   795   * is reallocated in order to consume less memory. Setting the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   796   * connection to LISTEN is an irreversible process.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   797   * When an incoming connection is accepted, the function specified with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   798   * the tcp_accept() function will be called. The pcb has to be bound
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   799   * to a local port with the tcp_bind() function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   800   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   801   * The tcp_listen() function returns a new connection identifier, and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   802   * the one passed as an argument to the function will be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   803   * deallocated. The reason for this behavior is that less memory is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   804   * needed for a connection that is listening, so tcp_listen() will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   805   * reclaim the memory needed for the original connection and allocate a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   806   * new smaller memory block for the listening connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   807   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   808   * tcp_listen() may return NULL if no memory was available for the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   809   * listening connection. If so, the memory associated with the pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   810   * passed as an argument to tcp_listen() will not be deallocated.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   811   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   812   * The backlog limits the number of outstanding connections
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   813   * in the listen queue to the value specified by the backlog argument.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   814   * To use it, your need to set TCP_LISTEN_BACKLOG=1 in your lwipopts.h.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   815   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   816   * @param pcb the original tcp_pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   817   * @param backlog the incoming connections queue limit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   818   * @return tcp_pcb used for listening, consumes less memory.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   819   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   820   * @note The original tcp_pcb is freed. This function therefore has to be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   821   *       called like this:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   822   *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   823   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   824  struct tcp_pcb *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   825  tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
; Function tcp_listen_with_backlog
.L413:
tcp_listen_with_backlog:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   826  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   827    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   828    return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
	mov.a	a5,#0
	j	tcp_listen_with_backlog_and_err
.L913:
	
__tcp_listen_with_backlog_function_end:
	.size	tcp_listen_with_backlog,__tcp_listen_with_backlog_function_end-tcp_listen_with_backlog
.L580:
	; End of function
	
	.sdecl	'.text.tcp.tcp_listen_with_backlog_and_err',code,cluster('tcp_listen_with_backlog_and_err')
	.sect	'.text.tcp.tcp_listen_with_backlog_and_err'
	.align	2
	
	.global	tcp_listen_with_backlog_and_err

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   829  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   830  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   831  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   832   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   833   * Set the state of the connection to be LISTEN, which means that it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   834   * is able to accept incoming connections. The protocol control block
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   835   * is reallocated in order to consume less memory. Setting the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   836   * connection to LISTEN is an irreversible process.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   837   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   838   * @param pcb the original tcp_pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   839   * @param backlog the incoming connections queue limit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   840   * @param err when NULL is returned, this contains the error reason
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   841   * @return tcp_pcb used for listening, consumes less memory.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   842   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   843   * @note The original tcp_pcb is freed. This function therefore has to be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   844   *       called like this:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   845   *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   846   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   847  struct tcp_pcb *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   848  tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
; Function tcp_listen_with_backlog_and_err
.L415:
tcp_listen_with_backlog_and_err:	.type	func
	sub.a	a10,#16
.L1198:
	mov.aa	a15,a4
.L1200:
	mov.aa	a12,a5
.L1201:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   849  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   850    struct tcp_pcb_listen *lpcb = NULL;
	mov.a	a13,#0
.L1202:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   851    err_t res;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   852  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   853    LWIP_UNUSED_ARG(backlog);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   854  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   855    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   856  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   857    LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
	jnz.a	a15,.L113
.L1623:
	movh.a	a2,#@his(.31.str)
	lea	a2,[a2]@los(.31.str)
	st.a	[a10],a2
	mov	d15,#857
	st.w	[a10]4,d15
.L1199:
	fcall	.cocofun_110
.L1203:
	st.a	[a10]8,a2
	mov	d15,#-16
	j	.L114
.L113:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   858    LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
	ld.bu	d15,[a15]20
	jeq	d15,#0,.L115
	movh.a	a15,#@his(.32.str)
.L1205:
	lea	a15,[a15]@los(.32.str)
	st.a	[a10],a15
	mov	d15,#858
	st.w	[a10]4,d15
.L1204:
	fcall	.cocofun_109
.L1206:
	mov	d15,#-15
	st.a	[a10]8,a15

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   859  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   860    /* already listening? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   861    if (pcb->state == LISTEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   862      lpcb = (struct tcp_pcb_listen *)pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   863      res = ERR_ALREADY;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   864      goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   865    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   866  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   867    if (ip_get_option(pcb, SOF_REUSEADDR)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   868      /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   869         is declared (listen-/connection-pcb), we have to make sure now that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   870         this port is only used once for every local IP. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   871      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   872        if ((lpcb->local_port == pcb->local_port) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   873            ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   874          /* this address/port is already used */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   875          lpcb = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   876          res = ERR_USE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   877          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   878        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   879      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   880    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   881  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   882    lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   883    if (lpcb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   884      res = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   885      goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   886    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   887    lpcb->callback_arg = pcb->callback_arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   888    lpcb->local_port = pcb->local_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   889    lpcb->state = LISTEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   890    lpcb->prio = pcb->prio;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   891    lpcb->so_options = pcb->so_options;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   892    lpcb->netif_idx = NETIF_NO_INDEX;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   893    lpcb->ttl = pcb->ttl;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   894    lpcb->tos = pcb->tos;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   895  #if LWIP_IPV4 && LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   896    IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   897  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   898    ip_addr_copy(lpcb->local_ip, pcb->local_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   899    if (pcb->local_port != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   900      TCP_RMV(&tcp_bound_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   901    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   902  #if LWIP_TCP_PCB_NUM_EXT_ARGS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   903    /* copy over ext_args to listening pcb  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   904    memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   905  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   906    tcp_free(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   907  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   908    lpcb->accept = tcp_accept_null;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   909  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   910  #if TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   911    lpcb->accepts_pending = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   912    tcp_backlog_set(lpcb, backlog);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   913  #endif /* TCP_LISTEN_BACKLOG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   914    TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   915    res = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   916  done:
.L114:
	fcall	.cocofun_108
.L1207:
	call	Ifx_Lwip_printf
.L1208:
	j	.L116
.L115:
	mov	d4,#2
	call	memp_malloc
.L1209:
	mov.aa	a13,a2
.L1214:
	jnz.a	a13,.L117
.L1624:
	mov	d15,#-1
	j	.L118
.L117:
	ld.a	a2,[a15]16
.L1210:
	st.a	[a13]16,a2
.L1625:
	ld.hu	d15,[a15]22
.L1626:
	st.h	[a13]22,d15
.L1627:
	mov	d15,#1
	st.b	[a13]20,d15
.L1628:
	ld.bu	d15,[a15]21
.L1629:
	st.b	[a13]21,d15
.L1630:
	ld.bu	d15,[a15]9
.L1631:
	st.b	[a13]9,d15
.L1632:
	mov	d15,#0
	st.b	[a13]8,d15
.L1633:
	ld.bu	d15,[a15]11
.L1634:
	st.b	[a13]11,d15
.L1635:
	ld.bu	d15,[a15]10
.L1636:
	st.b	[a13]10,d15
.L1637:
	ld.w	d15,[a15]
	st.w	[a13],d15
.L1638:
	ld.hu	d15,[a15]22
.L1639:
	jeq	d15,#0,.L119
.L1640:
	fcall	.cocofun_112
.L119:
	mov.aa	a4,a15
.L1216:
	call	tcp_free
.L1217:
	movh.a	a15,#@his(tcp_accept_null)
.L1215:
	lea	a15,[a15]@los(tcp_accept_null)
.L1641:
	st.a	[a13]24,a15
.L1642:
	ld.a	a15,tcp_listen_pcbs
	st.a	[a13]12,a15
	st.a	tcp_listen_pcbs,a13
	call	tcp_timer_needed
.L1643:
	mov	d15,#0
.L118:
.L116:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   917    if (err != NULL) {
	jz.a	a12,.L126
.L1644:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   918      *err = res;
	st.b	[a12],d15
.L126:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   919    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   920    return (struct tcp_pcb *)lpcb;
	mov.aa	a2,a13
.L1218:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   921  }
	ret
.L904:
	
__tcp_listen_with_backlog_and_err_function_end:
	.size	tcp_listen_with_backlog_and_err,__tcp_listen_with_backlog_and_err_function_end-tcp_listen_with_backlog_and_err
.L575:
	; End of function
	
	.sdecl	'.text.tcp..cocofun_112',code,cluster('.cocofun_112')
	.sect	'.text.tcp..cocofun_112'
	.align	2
; Function .cocofun_112
.L417:
.cocofun_112:	.type	func
; Function body .cocofun_112, coco_iter:0
	ld.a	a2,tcp_bound_pcbs
.L1212:
	jne.a	a2,a15,.L122
	ld.a	a2,[a15]12
.L1213:
	st.a	tcp_bound_pcbs,a2
	j	.L121
.L123:
	ld.a	a4,[a2]12
	jne.a	a4,a15,.L124
	ld.a	a4,[a15]12
	st.a	[a2]12,a4
	j	.L125
.L124:
	mov.aa	a2,a4
.L122:
	jnz.a	a2,.L123
.L125:
.L121:
	mov.a	a2,#0
	st.a	[a15]12,a2
.L2202:
	fret
.L790:
	; End of function
	.sdecl	'.text.tcp.tcp_update_rcv_ann_wnd',code,cluster('tcp_update_rcv_ann_wnd')
	.sect	'.text.tcp.tcp_update_rcv_ann_wnd'
	.align	2
	
	.global	tcp_update_rcv_ann_wnd

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   923  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   924   * Update the state that tracks the available window space to advertise.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   925   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   926   * Returns how much extra window would be advertised if we sent an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   927   * update now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   928   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   929  u32_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   930  tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
; Function tcp_update_rcv_ann_wnd
.L419:
tcp_update_rcv_ann_wnd:	.type	func
	sub.a	a10,#16
.L1219:
	mov.aa	a15,a4
.L1221:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   931  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   932    u32_t new_right_edge;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   933  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   934    LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
	jnz.a	a15,.L128
.L1924:
	movh.a	a2,#@his(.33.str)
	lea	a2,[a2]@los(.33.str)
	st.a	[a10],a2
	mov	d15,#934
	st.w	[a10]4,d15
.L1220:
	fcall	.cocofun_110
.L1222:
	st.a	[a10]8,a2
	fcall	.cocofun_108
.L1223:
	call	Ifx_Lwip_printf
.L128:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   935    new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   936  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   937    if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
	mov	d3,#1072
	ld.hu	d1,[a15]50
.L1925:
	ld.hu	d0,[a15]40
.L1926:
	min.u	d1,d1,d3
	ld.w	d15,[a15]36
.L1927:
	ld.w	d8,[a15]44
.L1928:
	add	d2,d15,d0
.L1225:
	add	d1,d8
	sub	d1,d2,d1
.L1929:
	jlt	d1,#0,.L129
.L1930:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   938      /* we can advertise more window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   939      pcb->rcv_ann_wnd = pcb->rcv_wnd;
	st.h	[a15]42,d0
.L1931:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   940      return new_right_edge - pcb->rcv_ann_right_edge;
	ld.w	d15,[a15]44
.L1932:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   941    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   942      if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   943        /* Can happen due to other end sending out of advertised window,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   944         * but within actual available (but not yet advertised) window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   945        pcb->rcv_ann_wnd = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   946      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   947        /* keep the right edge of window constant */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   948        u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   949  #if !LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   950        LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   951  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   952        pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   953      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   954      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   955    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   956  }
	sub	d2,d15
	ret
.L129:
	sub	d0,d15,d8
.L1933:
	jlt	d0,#1,.L131
.L1934:
	mov	d15,#0
	st.h	[a15]42,d15
.L1935:
	j	.L132
.L131:
	sub	d8,d15
.L1936:
	mov.u	d15,#65535
	jge.u	d15,d8,.L133
	movh.a	a2,#@his(.34.str)
	lea	a2,[a2]@los(.34.str)
	st.a	[a10],a2
	mov	d15,#950
	st.w	[a10]4,d15
.L1224:
	fcall	.cocofun_110
.L1226:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L133:
	st.h	[a15]42,d8
.L132:
	mov	d2,#0
	ret
.L980:
	
__tcp_update_rcv_ann_wnd_function_end:
	.size	tcp_update_rcv_ann_wnd,__tcp_update_rcv_ann_wnd_function_end-tcp_update_rcv_ann_wnd
.L650:
	; End of function
	
	.sdecl	'.text.tcp.tcp_recved',code,cluster('tcp_recved')
	.sect	'.text.tcp.tcp_recved'
	.align	2
	
	.global	tcp_recved

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   957  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   958  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   959   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   960   * This function should be called by the application when it has
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   961   * processed the data. The purpose is to advertise a larger window
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   962   * when the data has been processed.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   963   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   964   * @param pcb the tcp_pcb for which data is read
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   965   * @param len the amount of bytes that have been read by the application
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   966   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   967  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   968  tcp_recved(struct tcp_pcb *pcb, u16_t len)
; Function tcp_recved
.L421:
tcp_recved:	.type	func
	sub.a	a10,#16
.L1227:
	mov.aa	a12,a4
.L1229:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   969  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   970    u32_t wnd_inflation;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   971    tcpwnd_size_t rcv_wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   972  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   973    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   974  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   975    LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
	mov	d8,d4
	jnz.a	a12,.L135
.L1230:
	movh.a	a15,#@his(.35.str)
	lea	a15,[a15]@los(.35.str)
	st.a	[a10],a15
	mov	d15,#975
	st.w	[a10]4,d15
.L1228:
	fcall	.cocofun_109
.L1231:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1232:
	j	Ifx_Lwip_printf
.L135:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   976  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   977    /* pcb->state LISTEN not allowed here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   978    LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
	ld.bu	d15,[a12]20
	jne	d15,#1,.L137
	movh.a	a15,#@his(.36.str)
	lea	a15,[a15]@los(.36.str)
	st.a	[a10],a15
	mov	d15,#978
	st.w	[a10]4,d15
.L1233:
	fcall	.cocofun_109
.L1234:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1235:
	call	Ifx_Lwip_printf
.L137:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   979                pcb->state != LISTEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   980  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   981    rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
	ld.hu	d15,[a12]40
.L1554:
	add	d8,d15
.L1236:
	extr.u	d0,d8,#0,#16
.L1237:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   982    if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
	mov	d1,#2144
.L1555:
	jlt.u	d1,d0,.L138
.L1556:
	jge.u	d0,d15,.L139
.L138:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   983      /* window got too big or tcpwnd_size_t overflow */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   984      LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   985      pcb->rcv_wnd = TCP_WND_MAX(pcb);
	st.h	[a12]40,d1
.L1557:
	j	.L140
.L139:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   986    } else  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   987      pcb->rcv_wnd = rcv_wnd;
	st.h	[a12]40,d0
.L140:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   988    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   989  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   990    wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
	mov.aa	a4,a12
.L1239:
	call	tcp_update_rcv_ann_wnd
.L1238:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   991  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   992    /* If the change in the right edge of window is significant (default
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   993     * watermark is TCP_WND/4), then send an explicit update now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   994     * Otherwise wait for a packet to be sent in the normal course of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   995     * events (or more window to be available later) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   996    if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
	mov	d15,#536
.L1558:
	jlt.u	d2,d15,.L141
.L1559:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   997      tcp_ack_now(pcb);
	ld.hu	d15,[a12]26
.L1560:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   998      tcp_output(pcb);
	mov.aa	a4,a12
.L1240:
	or	d15,#2
	st.h	[a12]26,d15
.L1561:
	j	tcp_output
.L141:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	   999    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1000  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1001    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1002                            len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1003  }
	ret
.L873:
	
__tcp_recved_function_end:
	.size	tcp_recved,__tcp_recved_function_end-tcp_recved
.L555:
	; End of function
	
	.sdecl	'.text.tcp.tcp_new_port',code,cluster('tcp_new_port')
	.sect	'.text.tcp.tcp_new_port'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1004  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1005  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1006   * Allocate a new local TCP port.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1007   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1008   * @return a new (free) local TCP port number
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1009   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1010  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1011  tcp_new_port(void)
; Function tcp_new_port
.L423:
tcp_new_port:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1012  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1013    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1014    u16_t n = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1015    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1016  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1017  again:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1018    tcp_port++;
	mov	d0,#0
	ld.hu	d1,tcp_port

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1019    if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1020      tcp_port = TCP_LOCAL_PORT_RANGE_START;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1021    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1022    /* Check all PCB lists. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1023    for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1024      for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1025        if (pcb->local_port == tcp_port) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1026          n++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1027          if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
.L142:
	add	d1,#1
	extr.u	d1,d1,#0,#16
.L2052:
	mov.u	d15,#65535
.L2053:
	mov.u	d2,#49152
.L2054:
	eq	d15,d1,d15
.L2055:
	cmov	d1,d15,d2
.L2056:
	mov	d2,#0
	j	.L144
.L145:
	movh.a	a15,#@his(tcp_pcb_lists)
	lea	a15,[a15]@los(tcp_pcb_lists)
.L2057:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L2058:
	ld.a	a15,[a15]
.L1241:
	j	.L146
.L147:
	ld.hu	d15,[a15]22
.L2059:
	jne	d15,d1,.L148
.L2060:
	add	d0,#1
.L2061:
	mov	d15,#16383
.L2062:
	jge.u	d15,d0,.L142
.L2063:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1028            return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1029          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1030          goto again;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1031        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1032      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1033    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1034    return tcp_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1035  }
	mov	d2,#0
	j	.L149
.L148:
	ld.a	a15,[a15]12
.L146:
	jnz.a	a15,.L147
.L2064:
	add	d2,#1
.L144:
	jlt.u	d2,#4,.L145
.L2065:
	mov	d2,d1
.L149:
	st.h	tcp_port,d1
	ret
.L1024:
	
__tcp_new_port_function_end:
	.size	tcp_new_port,__tcp_new_port_function_end-tcp_new_port
.L710:
	; End of function
	
	.sdecl	'.text.tcp.tcp_connect',code,cluster('tcp_connect')
	.sect	'.text.tcp.tcp_connect'
	.align	2
	
	.global	tcp_connect

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1036  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1037  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1038   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1039   * Connects to another host. The function given as the "connected"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1040   * argument will be called when the connection has been established.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1041   *  Sets up the pcb to connect to the remote host and sends the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1042   * initial SYN segment which opens the connection. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1043   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1044   * The tcp_connect() function returns immediately; it does not wait for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1045   * the connection to be properly setup. Instead, it will call the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1046   * function specified as the fourth argument (the "connected" argument)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1047   * when the connection is established. If the connection could not be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1048   * properly established, either because the other host refused the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1049   * connection or because the other host didn't answer, the "err"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1050   * callback function of this pcb (registered with tcp_err, see below)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1051   * will be called.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1052   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1053   * The tcp_connect() function can return ERR_MEM if no memory is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1054   * available for enqueueing the SYN segment. If the SYN indeed was
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1055   * enqueued successfully, the tcp_connect() function returns ERR_OK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1056   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1057   * @param pcb the tcp_pcb used to establish the connection
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1058   * @param ipaddr the remote ip address to connect to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1059   * @param port the remote tcp port to connect to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1060   * @param connected callback function to call when connected (on error,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1061                      the err calback will be called)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1062   * @return ERR_VAL if invalid arguments are given
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1063   *         ERR_OK if connect request has been sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1064   *         other err_t values if connect request couldn't be sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1065   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1066  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1067  tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
; Function tcp_connect
.L425:
tcp_connect:	.type	func
	sub.a	a10,#16
.L1242:
	mov.aa	a15,a4
.L1243:
	mov.aa	a12,a6
.L1248:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1068              tcp_connected_fn connected)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1069  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1070    struct netif *netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1071    err_t ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1072    u32_t iss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1073    u16_t old_local_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1074  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1075    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1076  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1077    LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a15,.L151
.L1591:
	movh.a	a15,#@his(.39.str)
.L1244:
	lea	a15,[a15]@los(.39.str)
	mov	d15,#1077
	j	.L152
.L151:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1078    LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
	jnz.a	a5,.L153
.L1592:
	mov	d15,#1078
	movh.a	a15,#@his(.40.str)
.L1245:
	lea	a15,[a15]@los(.40.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1079  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1080    LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1081  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1082    LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1083    ip_addr_set(&pcb->remote_ip, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1084    pcb->remote_port = port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1085  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1086    if (pcb->netif_idx != NETIF_NO_INDEX) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1087      netif = netif_get_by_index(pcb->netif_idx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1088    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1089      /* check if we have a route to the remote host */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1090      netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1091    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1092    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1093      /* Don't even try to send a SYN packet if we have no route since that will fail. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1094      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1095    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1096  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1097    /* check if local IP has been assigned to pcb, if not, get one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1098    if (ip_addr_isany(&pcb->local_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1099      const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1100      if (local_ip == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1101        return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1102      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1103      ip_addr_copy(pcb->local_ip, *local_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1104    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1105  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1106  #if LWIP_IPV6 && LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1107    /* If the given IP address should have a zone but doesn't, assign one now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1108     * Given that we already have the target netif, this is easy and cheap. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1109    if (IP_IS_V6(&pcb->remote_ip) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1110        ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1111      ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1112    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1113  #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1114  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1115    old_local_port = pcb->local_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1116    if (pcb->local_port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1117      pcb->local_port = tcp_new_port();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1118      if (pcb->local_port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1119        return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1120      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1121    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1122  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1123      if (ip_get_option(pcb, SOF_REUSEADDR)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1124        /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1125           now that the 5-tuple is unique. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1126        struct tcp_pcb *cpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1127        int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1128        /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1129        for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1130          for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1131            if ((cpcb->local_port == pcb->local_port) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1132                (cpcb->remote_port == port) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1133                ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1134                ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1135              /* linux returns EISCONN here, but ERR_USE should be OK for us */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1136              return ERR_USE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1137            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1138          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1139        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1140      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1141  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1142    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1143  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1144    iss = tcp_next_iss(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1145    pcb->rcv_nxt = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1146    pcb->snd_nxt = iss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1147    pcb->lastack = iss - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1148    pcb->snd_wl2 = iss - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1149    pcb->snd_lbb = iss - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1150    /* Start with a window that does not need scaling. When window scaling is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1151       enabled and used, the window is enlarged when both sides agree on scaling. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1152    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1153    pcb->rcv_ann_right_edge = pcb->rcv_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1154    pcb->snd_wnd = TCP_WND;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1155    /* As initial send MSS, we use TCP_MSS but limit it to 536.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1156       The send MSS is updated when an MSS option is received. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1157    pcb->mss = INITIAL_MSS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1158  #if TCP_CALCULATE_EFF_SEND_MSS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1159    pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1160  #endif /* TCP_CALCULATE_EFF_SEND_MSS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1161    pcb->cwnd = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1162  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1163    pcb->connected = connected;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1164  #else /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1165    LWIP_UNUSED_ARG(connected);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1166  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1168    /* Send a SYN together with the MSS option. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1169    ret = tcp_enqueue_flags(pcb, TCP_SYN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1170    if (ret == ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1171      /* SYN segment was enqueued, changed the pcbs state now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1172      pcb->state = SYN_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1173      if (old_local_port != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1174        TCP_RMV(&tcp_bound_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1175      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1176      TCP_REG_ACTIVE(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1177      MIB2_STATS_INC(mib2.tcpactiveopens);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1178  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1179      tcp_output(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1180    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1181    return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1182  }
.L152:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_109
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1246:
	call	Ifx_Lwip_printf
.L1247:
	mov	d2,#-16
	ret
.L153:
	ld.bu	d15,[a15]20
	jeq	d15,#0,.L155
	movh.a	a15,#@his(.41.str)
.L1250:
	lea	a15,[a15]@los(.41.str)
	st.a	[a10],a15
	mov	d15,#1080
	st.w	[a10]4,d15
.L1249:
	fcall	.cocofun_109
.L1251:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1252:
	call	Ifx_Lwip_printf
.L1253:
	mov	d2,#-10
	ret
.L155:
	ld.w	d15,[a5]
	st.w	[a15]4,d15
.L1593:
	st.h	[a15]24,d4
.L1594:
	ld.bu	d4,[a15]8
.L1255:
	jeq	d4,#0,.L157
.L1595:
	call	netif_get_by_index
.L1254:
	j	.L158
.L157:
	lea	a4,[a15]4
.L1256:
	call	ip4_route
.L158:
	mov.aa	a13,a2
.L1257:
	jz.a	a13,.L159
.L1596:
	ld.w	d15,[a15]
	jne	d15,#0,.L160
.L903:
	ld.w	d15,[a13]4
	st.w	[a15],d15
.L1597:
	j	.L161
.L159:
	mov	d2,#-4
	ret
.L161:
.L160:
	ld.hu	d8,[a15]22
.L1598:
	jne	d8,#0,.L163
.L1599:
	call	tcp_new_port
.L1600:
	st.h	[a15]22,d2
.L1601:
	jne	d2,#0,.L164
.L1602:
	mov	d2,#-2
	ret
.L164:
.L163:
	mov.aa	a4,a15
.L1258:
	call	tcp_next_iss
.L1259:
	mov	d15,#0
	st.w	[a15]36,d15
.L1603:
	st.w	[a15]80,d2
.L1604:
	add	d2,#-1
	st.w	[a15]68,d2
.L1260:
	st.w	[a15]88,d2
.L1605:
	st.w	[a15]92,d2
.L1606:
	mov	d0,#2144
	st.h	[a15]42,d0
.L1607:
	st.h	[a15]40,d0
.L1608:
	st.w	[a15]44,d15
.L1609:
	st.h	[a15]96,d0
.L1610:
	mov	d4,#536
	st.h	[a15]50,d4
.L1611:
	lea	a5,[a15]4
	mov.aa	a4,a13
.L1261:
	call	tcp_eff_send_mss_netif
.L1262:
	st.h	[a15]50,d2
.L1612:
	mov	d15,#1
	st.h	[a15]72,d15
.L1613:
	st.a	[a15]136,a12
.L1614:
	mov	d4,#2
	mov.aa	a4,a15
.L1263:
	call	tcp_enqueue_flags
.L1264:
	mov	d15,d2
.L1266:
	jne	d15,#0,.L166
.L1615:
	mov	d0,#2
	st.b	[a15]20,d0
.L1616:
	jeq	d8,#0,.L167
.L1617:
	fcall	.cocofun_112
.L167:
	ld.a	a2,tcp_active_pcbs
	st.a	[a15]12,a2
	st.a	tcp_active_pcbs,a15
	call	tcp_timer_needed
.L1267:
	mov	d0,#1
	st.b	tcp_active_pcbs_changed,d0
.L1618:
	mov.aa	a4,a15
.L1268:
	call	tcp_output
.L166:
	mov	d2,d15
	ret
.L893:
	
__tcp_connect_function_end:
	.size	tcp_connect,__tcp_connect_function_end-tcp_connect
.L570:
	; End of function
	
	.sdecl	'.text.tcp.tcp_slowtmr',code,cluster('tcp_slowtmr')
	.sect	'.text.tcp.tcp_slowtmr'
	.align	2
	
	.global	tcp_slowtmr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1183  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1184  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1185   * Called every 500 ms and implements the retransmission timer and the timer that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1186   * removes PCBs that have been in TIME-WAIT for enough time. It also increments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1187   * various timers such as the inactivity timer in each PCB.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1188   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1189   * Automatically called from tcp_tmr().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1190   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1191  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1192  tcp_slowtmr(void)
; Function tcp_slowtmr
.L427:
tcp_slowtmr:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1193  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1194    struct tcp_pcb *pcb, *prev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1195    tcpwnd_size_t eff_wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1196    u8_t pcb_remove;      /* flag if a PCB should be removed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1197    u8_t pcb_reset;       /* flag if a RST should be sent when removing */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1198    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1199  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1200    err = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1201  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1202    ++tcp_ticks;
	ld.w	d15,tcp_ticks
.L1708:
	sub.a	a10,#16
.L1269:
	add	d15,#1
	st.w	tcp_ticks,d15
.L1709:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1203    ++tcp_timer_ctr;
	ld.bu	d15,tcp_timer_ctr
.L1710:
	add	d15,#1
	st.b	tcp_timer_ctr,d15

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1204  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1205  tcp_slowtmr_start:
.L175:
.L176:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1206    /* Steps through all of the active PCBs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1207    prev = NULL;
	mov.a	a12,#0
.L1270:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1208    pcb = tcp_active_pcbs;
	ld.a	a15,tcp_active_pcbs
.L1272:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1209    if (pcb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1210      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
	j	.L177

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1211    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1212    while (pcb != NULL) {
.L178:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1213      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1214      LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
	ld.bu	d15,[a15]20
	jne	d15,#0,.L179
	movh.a	a2,#@his(.45.str)
	lea	a2,[a2]@los(.45.str)
	st.a	[a10],a2
	mov	d15,#1214
	st.w	[a10]4,d15
.L1271:
	fcall	.cocofun_110
.L1273:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L179:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1215      LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
	ld.bu	d15,[a15]20
	jne	d15,#1,.L180
	movh.a	a2,#@his(.46.str)
	lea	a2,[a2]@los(.46.str)
	st.a	[a10],a2
	mov	d15,#1215
	st.w	[a10]4,d15
.L1274:
	fcall	.cocofun_110
.L1275:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L180:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1216      LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
	ld.bu	d0,[a15]20
	mov	d15,#10
	jne	d15,d0,.L181
	movh.a	a2,#@his(.47.str)
	lea	a2,[a2]@los(.47.str)
	st.a	[a10],a2
	mov	d15,#1216
	st.w	[a10]4,d15
.L1276:
	fcall	.cocofun_110
.L1277:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L181:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1217      if (pcb->last_timer == tcp_timer_ctr) {
	ld.bu	d15,tcp_timer_ctr
.L1711:
	ld.bu	d0,[a15]30
.L1712:
	jne	d15,d0,.L182
.L1713:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1218        /* skip this pcb, we have already processed it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1219        prev = pcb;
	mov.aa	a12,a15
.L1714:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1220        pcb = pcb->next;
	ld.a	a15,[a15]12
.L1715:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1221        continue;
	j	.L183
.L182:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1222      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1223      pcb->last_timer = tcp_timer_ctr;
	st.b	[a15]30,d15
.L1716:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1224  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1225      pcb_remove = 0;
	mov	d8,#0
.L1279:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1226      pcb_reset = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1228      if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
	ld.bu	d15,[a15]20
.L1717:
	mov	d9,d8
.L1280:
	jne	d15,#2,.L184
.L1718:
	ld.bu	d0,[a15]66
.L1719:
	jge.u	d0,#6,.L185
.L184:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1229        ++pcb_remove;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1230        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1231      } else if (pcb->nrtx >= TCP_MAXRTX) {
	ld.bu	d0,[a15]66
.L1720:
	jge.u	d0,#12,.L186
.L1721:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1232        ++pcb_remove;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1233        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1234      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1235        if (pcb->persist_backoff > 0) {
	ld.bu	d15,[a15]153
.L1722:
	jeq	d15,#0,.L187
.L1723:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1236          LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
	ld.w	d15,[a15]112
	jeq	d15,#0,.L188
	movh.a	a2,#@his(.50.str)
	lea	a2,[a2]@los(.50.str)
	st.a	[a10],a2
	mov	d15,#1236
	st.w	[a10]4,d15
.L1278:
	fcall	.cocofun_110
.L1281:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L188:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1237          LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
	ld.w	d15,[a15]108
	jne	d15,#0,.L189
	movh.a	a2,#@his(.51.str)
	lea	a2,[a2]@los(.51.str)
	st.a	[a10],a2
	mov	d15,#1237
	st.w	[a10]4,d15
.L1282:
	fcall	.cocofun_110
.L1297:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L189:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1238          if (pcb->persist_probe >= TCP_MAXRTX) {
	ld.bu	d15,[a15]154
.L1724:
	jlt.u	d15,#12,.L190
.L186:
.L185:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1239            ++pcb_remove; /* max probes reached */
	mov	d8,#1
	j	.L191
.L190:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1240          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1241            u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
	ld.bu	d15,[a15]153
.L1725:
	lea	a2,tcp_persist_backoff
.L1726:
	addsc.a	a2,a2,d15,#0
.L1727:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1242            if (pcb->persist_cnt < backoff_cnt) {
	ld.bu	d15,[a15]152
.L1728:
	ld.bu	d0,[a2]-1
.L1283:
	jge.u	d15,d0,.L192
.L1729:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1243              pcb->persist_cnt++;
	add	d15,#1
	st.b	[a15]152,d15
.L192:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1244            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1245            if (pcb->persist_cnt >= backoff_cnt) {
	ld.bu	d15,[a15]152
.L1730:
	jlt.u	d15,d0,.L193
.L946:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1246              int next_slot = 1; /* increment timer to next slot */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1247              /* If snd_wnd is zero, send 1 byte probes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1248              if (pcb->snd_wnd == 0) {
	ld.hu	d4,[a15]96
.L1731:
	mov	d15,#1
.L1285:
	jne	d4,#0,.L194
.L1732:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1249                if (tcp_zero_window_probe(pcb) != ERR_OK) {
	mov.aa	a4,a15
.L1287:
	call	tcp_zero_window_probe
.L1284:
	jeq	d2,#0,.L195
.L1733:
	j	.L196
.L194:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1250                  next_slot = 0; /* try probe again with current slot */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1251                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1252                /* snd_wnd not fully closed, split unsent head and fill window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1253              } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1254                if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
	mov.aa	a4,a15
.L1289:
	call	tcp_split_unsent_seg
.L1288:
	jne	d2,#0,.L197
.L1734:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1255                  if (tcp_output(pcb) == ERR_OK) {
	mov.aa	a4,a15
.L1290:
	call	tcp_output
.L1291:
	jne	d2,#0,.L198
.L196:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1256                    /* sending will cancel persist timer, else retry with current slot */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1257                    next_slot = 0;
	mov	d15,#0
.L198:
.L197:
.L195:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1258                  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1259                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1260              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1261              if (next_slot) {
	jeq	d15,#0,.L199
.L1735:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1262                pcb->persist_cnt = 0;
	mov	d15,#0
	st.b	[a15]152,d15
.L1286:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1263                if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
	ld.bu	d15,[a15]153
.L1736:
	jge.u	d15,#7,.L200
.L1737:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1264                  pcb->persist_backoff++;
	add	d15,#1
	st.b	[a15]153,d15
.L944:
	j	.L201
.L187:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1265                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1266              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1267            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1268          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1269        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1270          /* Increase the retransmission timer if it is running */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1271          if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
	ld.h	d15,[a15]48
	extr.u	d0,d15,#0,#16
.L1738:
	mov	d1,#32767
.L1739:
	jge.u	d0,d1,.L202
.L1740:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1272            ++pcb->rtime;
	add	d15,#1
	st.h	[a15]48,d15
.L202:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1273          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1274  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1275          if (pcb->rtime >= pcb->rto) {
	ld.h	d15,[a15]48
.L1741:
	ld.h	d0,[a15]64
.L1742:
	jlt	d15,d0,.L203
.L1743:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1276            /* Time for a retransmission. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1277            LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_slowtmr: rtime %"S16_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1278                                        " pcb->rto %"S16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1279                                        pcb->rtime, pcb->rto));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1280            /* If prepare phase fails but we have unsent data but no unacked data,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1281               still execute the backoff calculations below, as this means we somehow
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1282               failed to send segment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1283            if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
	mov.aa	a4,a15
.L1292:
	call	tcp_rexmit_rto_prepare
.L1293:
	jeq	d2,#0,.L204
.L1744:
	ld.w	d15,[a15]112
.L1745:
	jne	d15,#0,.L205
.L1746:
	ld.w	d15,[a15]108
.L1747:
	jeq	d15,#0,.L206
.L204:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1284              /* Double retransmission time-out unless we are trying to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1285               * connect to somebody (i.e., we are in SYN_SENT). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1286              if (pcb->state != SYN_SENT) {
	ld.bu	d15,[a15]20
.L1748:
	jeq	d15,#2,.L207
.L948:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1287                u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1288                int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
	ld.h	d15,[a15]60
.L1749:
	ld.h	d0,[a15]62
.L1750:
	sha	d15,#-3
	movh.a	a2,#@his(tcp_backoff)
.L1751:
	add	d0,d15
	ld.bu	d15,[a15]66
.L1752:
	lea	a2,[a2]@los(tcp_backoff)
.L1753:
	min.u	d15,d15,#12
.L1754:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L1755:
	sha	d0,d0,d15
.L1756:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1289                pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
	mov	d15,#32767
.L1757:
	min	d15,d0,d15
	st.h	[a15]64,d15
.L207:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1290              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1291  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1292              /* Reset the retransmission timer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1293              pcb->rtime = 0;
	mov	d15,#0
	st.h	[a15]48,d15
.L1758:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1294  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1295              /* Reduce congestion window and ssthresh. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1296              eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
	ld.hu	d15,[a15]72
	ld.hu	d0,[a15]96
	min.u	d15,d15,d0
.L1294:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1297              pcb->ssthresh = eff_wnd >> 1;
	sha	d15,#-1
	st.h	[a15]74,d15
.L1295:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1298              if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
	ld.hu	d0,[a15]50
.L1759:
	sha	d0,#1
.L1760:
	extr.u	d0,d0,#0,#16
.L1761:
	jge.u	d15,d0,.L208
.L1762:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1299                pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
	st.h	[a15]74,d0
.L208:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1300              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1301              pcb->cwnd = pcb->mss;
	ld.hu	d15,[a15]50
.L1763:
	st.h	[a15]72,d15
.L1764:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1302              LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1303                                           " ssthresh %"TCPWNDSIZE_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1304                                           pcb->cwnd, pcb->ssthresh));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1305              pcb->bytes_acked = 0;
	mov	d15,#0
	st.h	[a15]106,d15
.L1765:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1306  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1307              /* The following needs to be called AFTER cwnd is set to one
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1308                 mss - STJ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1309              tcp_rexmit_rto_commit(pcb);
	mov.aa	a4,a15
.L1296:
	call	tcp_rexmit_rto_commit
.L206:
.L205:
.L203:
.L201:
.L200:
.L199:
.L193:
.L191:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1310            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1311          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1312        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1313      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1314      /* Check if this PCB has stayed too long in FIN-WAIT-2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1315      if (pcb->state == FIN_WAIT_2) {
	ld.bu	d0,[a15]20
.L1766:
	jne	d0,#6,.L209
.L1767:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1316        /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1317        if (pcb->flags & TF_RXCLOSED) {
	ld.hu	d15,[a15]26
.L1768:
	jz.t	d15:4,.L210
.L1769:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1318          /* PCB was fully closed (either through close() or SHUT_RDWR):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1319             normal FIN-WAIT timeout handling. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1320          if ((u32_t)(tcp_ticks - pcb->tmr) >
	fcall	.cocofun_114
.L210:
.L209:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1321              TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1322            ++pcb_remove;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1323            LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1324          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1325        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1326      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1327  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1328      /* Check if KEEPALIVE should be sent */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1329      if (ip_get_option(pcb, SOF_KEEPALIVE) &&
	ld.bu	d15,[a15]9
	jz.t	d15:3,.L211
.L1770:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1330          ((pcb->state == ESTABLISHED) ||
	jeq	d0,#4,.L212
.L1771:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1331           (pcb->state == CLOSE_WAIT))) {
	jne	d0,#7,.L213
.L212:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1332        if ((u32_t)(tcp_ticks - pcb->tmr) >
	ld.w	d2,tcp_ticks
.L1772:
	ld.w	d15,[a15]32
.L1773:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1333            (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
	ld.w	d1,[a15]148
.L1774:
	sub	d2,d15
	ld.w	d15,.105.cnt
.L1775:
	mov	d0,#500
.L1776:
	add	d15,d1
.L1777:
	div.u	e4,d15,d0
.L1778:
	jge.u	d4,d2,.L214
.L1779:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1334          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1335          ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1336          LWIP_DEBUGF(TCP_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1337  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1338          ++pcb_remove;
	add	d8,#1
.L1780:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1339          ++pcb_reset;
	mov	d9,#1
	j	.L215
.L214:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1340        } else if ((u32_t)(tcp_ticks - pcb->tmr) >
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1341                   (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
	ld.bu	d15,[a15]155
.L1781:
	ld.w	d3,.106.cnt
.L1782:
	madd	d15,d1,d15,d3
.L1783:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1342                   / TCP_SLOW_INTERVAL) {
	div.u	e0,d15,d0
.L1784:
	jge.u	d0,d2,.L216
.L1785:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1343          err = tcp_keepalive(pcb);
	mov.aa	a4,a15
.L1299:
	call	tcp_keepalive
.L1300:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1344          if (err == ERR_OK) {
	jne	d2,#0,.L217
.L1786:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1345            pcb->keep_cnt_sent++;
	ld.bu	d15,[a15]155
.L1787:
	add	d15,#1
	st.b	[a15]155,d15
.L217:
.L216:
.L215:
.L213:
.L211:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1346          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1347        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1348      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1349  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1350      /* If this PCB has queued out of sequence data, but has been
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1351         inactive for too long, will drop the data (it will eventually
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1352         be retransmitted). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1353  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1354      if (pcb->ooseq != NULL &&
	ld.w	d15,[a15]116
.L1788:
	jeq	d15,#0,.L218
.L1789:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1355          (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
	fcall	.cocofun_116
.L1298:
	ld.h	d15,[a15]64
.L1302:
	mul	d15,d15,#6
.L1790:
	jlt.u	d0,d15,.L219
.L1791:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1356        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1357        tcp_free_ooseq(pcb);
	mov.aa	a4,a15
.L1301:
	call	tcp_free_ooseq
.L219:
.L218:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1358      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1359  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1360  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1361      /* Check if this PCB has stayed too long in SYN-RCVD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1362      if (pcb->state == SYN_RCVD) {
	ld.bu	d0,[a15]20
.L1792:
	jne	d0,#3,.L220
.L1793:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1363        if ((u32_t)(tcp_ticks - pcb->tmr) >
	fcall	.cocofun_114
.L220:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1364            TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1365          ++pcb_remove;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1366          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1367        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1368      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1369  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1370      /* Check if this PCB has stayed too long in LAST-ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1371      if (pcb->state == LAST_ACK) {
	mov	d15,#9
.L1794:
	jne	d15,d0,.L221
.L1795:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1372        if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
	fcall	.cocofun_115
.L1303:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1373          ++pcb_remove;
	add	d8,d15
.L221:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1374          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1375        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1376      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1377  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1378      /* If the PCB should be removed, do it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1379      if (pcb_remove) {
	jeq	d8,#0,.L222
.L949:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1380        struct tcp_pcb *pcb2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1381  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1382        tcp_err_fn err_fn = pcb->errf;
	ld.a	a13,[a15]144
.L1306:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1383  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1384        void *err_arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1385        enum tcp_state last_state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1386        tcp_pcb_purge(pcb);
	mov.aa	a4,a15
.L1307:
	call	tcp_pcb_purge
.L1308:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1387        /* Remove PCB from tcp_active_pcbs list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1388        if (prev != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1389          LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
	ld.a	a2,tcp_active_pcbs
.L1796:
	jz.a	a12,.L223
.L1797:
	jne.a	a15,a2,.L224
.L1798:
	movh.a	a2,#@his(.61.str)
	lea	a2,[a2]@los(.61.str)
	st.a	[a10],a2
	mov	d15,#1389
	st.w	[a10]4,d15
.L1305:
	fcall	.cocofun_110
.L1309:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L224:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1390          prev->next = pcb->next;
	ld.a	a2,[a15]12
.L1799:
	st.a	[a12]12,a2
.L1800:
	j	.L225
.L223:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1391        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1392          /* This PCB was the first. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1393          LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
	jeq.a	a2,a15,.L226
.L1801:
	movh.a	a2,#@his(.62.str)
	lea	a2,[a2]@los(.62.str)
	st.a	[a10],a2
	mov	d15,#1393
	st.w	[a10]4,d15
.L1310:
	fcall	.cocofun_110
.L1311:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L226:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1394          tcp_active_pcbs = pcb->next;
	ld.a	a2,[a15]12
.L1802:
	st.a	tcp_active_pcbs,a2
.L225:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1395        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1396  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1397        if (pcb_reset) {
	jeq	d9,#0,.L227
.L1803:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1398          tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
	ld.w	d4,[a15]80
.L1804:
	ld.w	d5,[a15]36
.L1805:
	lea	a6,[a15]4
.L1806:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1399                  pcb->local_port, pcb->remote_port);
	ld.hu	d6,[a15]22
.L1807:
	ld.hu	d7,[a15]24
	mov.aa	a4,a15
.L1313:
	mov.aa	a5,a15
.L1314:
	call	tcp_rst
.L227:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1400        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1401  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1402        err_arg = pcb->callback_arg;
	ld.a	a14,[a15]16
.L1315:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1403        last_state = pcb->state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1404        pcb2 = pcb;
	mov.aa	a4,a15
.L1316:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1405        pcb = pcb->next;
	ld.a	a15,[a15]12
.L1808:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1406        tcp_free(pcb2);
	call	tcp_free
.L1317:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1408        tcp_active_pcbs_changed = 0;
	mov	d15,#0
	st.b	tcp_active_pcbs_changed,d15
.L1809:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1409        TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
	jz.a	a13,.L228
.L1810:
	mov	d4,#-13
	mov.aa	a4,a14
.L1318:
	calli	a13
.L228:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1410        if (tcp_active_pcbs_changed) {
	ld.bu	d15,tcp_active_pcbs_changed
.L1811:
	jeq	d15,#0,.L229
.L1812:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1411          goto tcp_slowtmr_start;
	j	.L176
.L222:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1412        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1413      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1414        /* get the 'next' element now and work with 'prev' below (in case of abort) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1415        prev = pcb;
	mov.aa	a12,a15
.L1813:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1416        pcb = pcb->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1417  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1418        /* We check if we should poll the connection. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1419        ++prev->polltmr;
	ld.bu	d15,[a12]28
.L1814:
	ld.a	a15,[a15]12
.L1815:
	add	d15,#1
	st.b	[a12]28,d15
.L1816:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1420        if (prev->polltmr >= prev->pollinterval) {
	ld.bu	d15,[a12]28
.L1817:
	ld.bu	d0,[a12]29
.L1818:
	jlt.u	d15,d0,.L230
.L1819:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1421          prev->polltmr = 0;
	mov	d15,#0
	st.b	[a12]28,d15
.L1820:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1422          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1423          tcp_active_pcbs_changed = 0;
	st.b	tcp_active_pcbs_changed,d15
.L1821:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1424          TCP_EVENT_POLL(prev, err);
	ld.a	a2,[a12]140
	jz.a	a2,.L231
	ld.a	a4,[a12]16
	mov.aa	a5,a12
.L1319:
	calli	a2
.L1320:
	j	.L232
.L231:
	mov	d2,#0
.L232:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1425          if (tcp_active_pcbs_changed) {
	ld.bu	d15,tcp_active_pcbs_changed
.L1822:
	jne	d15,#0,.L175
.L1823:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1426            goto tcp_slowtmr_start;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1427          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1428          /* if err == ERR_ABRT, 'prev' is already deallocated */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1429          if (err == ERR_OK) {
	jne	d2,#0,.L233
.L1824:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1430            tcp_output(prev);
	mov.aa	a4,a12
.L1321:
	call	tcp_output
.L233:
.L230:
.L229:
.L183:
.L177:
	jnz.a	a15,.L178
.L1825:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1431          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1432        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1433      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1434    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1436  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1437    /* Steps through all of the TIME-WAIT PCBs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1438    prev = NULL;
	mov.a	a12,#0
.L1826:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1439    pcb = tcp_tw_pcbs;
	lea	a13,tcp_tw_pcbs
	ld.a	a15,[a13]
.L1827:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1440    while (pcb != NULL) {
	j	.L234
.L235:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1441      LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
	ld.bu	d0,[a15]20
	mov	d15,#10
	jeq	d15,d0,.L236
	movh.a	a2,#@his(.64.str)
	lea	a2,[a2]@los(.64.str)
	st.a	[a10],a2
	mov	d15,#1441
	st.w	[a10]4,d15
.L1312:
	fcall	.cocofun_110
.L1322:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L236:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1442      pcb_remove = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1443  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1444      /* Check if this PCB has stayed long enough in TIME-WAIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1445      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
	fcall	.cocofun_115
.L1324:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1446        ++pcb_remove;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1447      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1448  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1449      /* If the PCB should be removed, do it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1450      if (pcb_remove) {
	jeq	d15,#0,.L237
.L953:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1451        struct tcp_pcb *pcb2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1452        tcp_pcb_purge(pcb);
	mov.aa	a4,a15
.L1325:
	call	tcp_pcb_purge
.L1326:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1453        /* Remove PCB from tcp_tw_pcbs list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1454        if (prev != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1455          LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
	ld.a	a2,[a13]
.L1828:
	jz.a	a12,.L238
.L1829:
	jne.a	a15,a2,.L239
.L1830:
	movh.a	a2,#@his(.65.str)
	lea	a2,[a2]@los(.65.str)
	st.a	[a10],a2
	mov	d15,#1455
	st.w	[a10]4,d15
.L1323:
	fcall	.cocofun_110
.L1327:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L239:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1456          prev->next = pcb->next;
	ld.a	a2,[a15]12
.L1831:
	st.a	[a12]12,a2
.L1832:
	j	.L240
.L238:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1457        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1458          /* This PCB was the first. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1459          LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
	jeq.a	a2,a15,.L241
.L1833:
	movh.a	a2,#@his(.66.str)
	lea	a2,[a2]@los(.66.str)
	st.a	[a10],a2
	mov	d15,#1459
	st.w	[a10]4,d15
.L1328:
	fcall	.cocofun_110
.L1329:
	st.a	[a10]8,a2
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L241:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1460          tcp_tw_pcbs = pcb->next;
	ld.a	a2,[a15]12
.L1834:
	st.a	[a13],a2
.L240:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1461        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1462        pcb2 = pcb;
	mov.aa	a4,a15
.L1330:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1463        pcb = pcb->next;
	ld.a	a15,[a15]12
.L1835:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1464        tcp_free(pcb2);
	call	tcp_free
.L954:
	j	.L242
.L237:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1465      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1466        prev = pcb;
	mov.aa	a12,a15
.L1836:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1467        pcb = pcb->next;
	ld.a	a15,[a15]12
.L242:
.L234:
	jnz.a	a15,.L235
.L1837:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1468      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1469    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1470  }
	ret
.L936:
	
__tcp_slowtmr_function_end:
	.size	tcp_slowtmr,__tcp_slowtmr_function_end-tcp_slowtmr
.L620:
	; End of function
	
	.sdecl	'.text.tcp..cocofun_116',code,cluster('.cocofun_116')
	.sect	'.text.tcp..cocofun_116'
	.align	2
; Function .cocofun_116
.L429:
.cocofun_116:	.type	func
; Function body .cocofun_116, coco_iter:1
	ld.w	d0,tcp_ticks
.L2224:
	ld.w	d15,[a15]32
.L2225:
	sub	d0,d15
	fret
.L810:
	; End of function
	.sdecl	'.text.tcp..cocofun_115',code,cluster('.cocofun_115')
	.sect	'.text.tcp..cocofun_115'
	.align	2
; Function .cocofun_115
.L431:
.cocofun_115:	.type	func
; Function body .cocofun_115, coco_iter:0
	fcall	.cocofun_116
.L1304:
	ge.u	d15,d0,#241
	fret
.L805:
	; End of function
	.sdecl	'.text.tcp..cocofun_114',code,cluster('.cocofun_114')
	.sect	'.text.tcp..cocofun_114'
	.align	2
; Function .cocofun_114
.L433:
.cocofun_114:	.type	func
; Function body .cocofun_114, coco_iter:0
	ld.w	d1,tcp_ticks
.L2212:
	ld.w	d15,[a15]32
.L2213:
	sub	d1,d15
.L2214:
	ge.u	d15,d1,#41
.L2215:
	add	d8,d15
	fret
.L800:
	; End of function
	.sdecl	'.text.tcp..cocofun_110',code,cluster('.cocofun_110')
	.sect	'.text.tcp..cocofun_110'
	.align	2
; Function .cocofun_110
.L435:
.cocofun_110:	.type	func
; Function body .cocofun_110, coco_iter:0
	movh.a	a2,#@his(.14.str)
	lea	a2,[a2]@los(.14.str)
.L2192:
	fret
.L780:
	; End of function
	.sdecl	'.text.tcp..cocofun_108',code,cluster('.cocofun_108')
	.sect	'.text.tcp..cocofun_108'
	.align	2
; Function .cocofun_108
.L437:
.cocofun_108:	.type	func
; Function body .cocofun_108, coco_iter:0
	movh.a	a4,#@his(.12.str)
.L1087:
	lea	a4,[a4]@los(.12.str)
.L2182:
	fret
.L770:
	; End of function
	.sdecl	'.text.tcp.tcp_fasttmr',code,cluster('tcp_fasttmr')
	.sect	'.text.tcp.tcp_fasttmr'
	.align	2
	
	.global	tcp_fasttmr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1471  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1472  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1473   * Is called every TCP_FAST_INTERVAL (250 ms) and process data previously
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1474   * "refused" by upper layer (application) and sends delayed ACKs or pending FINs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1475   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1476   * Automatically called from tcp_tmr().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1477   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1478  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1479  tcp_fasttmr(void)
; Function tcp_fasttmr
.L439:
tcp_fasttmr:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1480  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1481    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1482  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1483    ++tcp_timer_ctr;
	ld.bu	d15,tcp_timer_ctr
.L1842:
	add	d15,#1
	st.b	tcp_timer_ctr,d15

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1484  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1485  tcp_fasttmr_start:
.L243:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1486    pcb = tcp_active_pcbs;
	ld.a	a15,tcp_active_pcbs
.L1331:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1487  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1488    while (pcb != NULL) {
	j	.L244
.L245:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1489      if (pcb->last_timer != tcp_timer_ctr) {
	ld.bu	d15,tcp_timer_ctr
.L1843:
	ld.bu	d0,[a15]30
.L1844:
	jeq	d15,d0,.L246
.L958:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1490        struct tcp_pcb *next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1491        pcb->last_timer = tcp_timer_ctr;
	st.b	[a15]30,d15
.L1845:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1492        /* send delayed ACKs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1493        if (pcb->flags & TF_ACK_DELAY) {
	ld.hu	d15,[a15]26
.L1846:
	jz.t	d15:0,.L247
.L1847:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1494          LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1495          tcp_ack_now(pcb);
	or	d15,#2
	st.h	[a15]26,d15
.L1848:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1496          tcp_output(pcb);
	mov.aa	a4,a15
.L1332:
	call	tcp_output
.L1333:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1497          tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
	ld.hu	d15,[a15]26
	mov.u	d0,#65532
	and	d15,d0
	st.h	[a15]26,d15
.L247:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1498        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1499        /* send pending FIN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1500        if (pcb->flags & TF_CLOSEPEND) {
	ld.hu	d15,[a15]26
.L1849:
	jz.t	d15:3,.L248
.L1850:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1501          LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1502          tcp_clear_flags(pcb, TF_CLOSEPEND);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1503          tcp_close_shutdown_fin(pcb);
	mov.u	d0,#65527
	mov.aa	a4,a15
.L1334:
	and	d15,d0
	st.h	[a15]26,d15
.L1851:
	call	tcp_close_shutdown_fin
.L248:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1504        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1505  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1506        next = pcb->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1507  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1508        /* If there is data which was previously "refused" by upper layer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1509        if (pcb->refused_data != NULL) {
	ld.w	d15,[a15]120
.L1852:
	ld.a	a12,[a15]12
.L1335:
	jeq	d15,#0,.L249
.L1853:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1510          tcp_active_pcbs_changed = 0;
	mov	d15,#0
	st.b	tcp_active_pcbs_changed,d15
.L1854:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1511          tcp_process_refused_data(pcb);
	mov.aa	a4,a15
.L1336:
	call	tcp_process_refused_data
.L1337:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1512          if (tcp_active_pcbs_changed) {
	ld.bu	d15,tcp_active_pcbs_changed
.L1855:
	jne	d15,#0,.L243
.L249:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1513            /* application callback has changed the pcb list: restart the loop */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1514            goto tcp_fasttmr_start;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1515          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1516        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1517        pcb = next;
	mov.aa	a15,a12
.L959:
	j	.L250
.L246:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1518      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1519        pcb = pcb->next;
	ld.a	a15,[a15]12
.L250:
.L244:
	jnz.a	a15,.L245
.L1856:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1520      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1521    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1522  }
	ret
.L956:
	
__tcp_fasttmr_function_end:
	.size	tcp_fasttmr,__tcp_fasttmr_function_end-tcp_fasttmr
.L625:
	; End of function
	
	.sdecl	'.text.tcp.tcp_txnow',code,cluster('tcp_txnow')
	.sect	'.text.tcp.tcp_txnow'
	.align	2
	
	.global	tcp_txnow

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1523  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1524  /** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1525  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1526  tcp_txnow(void)
; Function tcp_txnow
.L441:
tcp_txnow:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1527  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1528    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1529  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1530    for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
	ld.a	a15,tcp_active_pcbs
.L1338:
	j	.L251
.L252:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1531      if (pcb->flags & TF_NAGLEMEMERR) {
	ld.hu	d15,[a15]26
.L1861:
	jz.t	d15:7,.L253
.L1862:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1532        tcp_output(pcb);
	mov.aa	a4,a15
.L1339:
	call	tcp_output
.L253:
	ld.a	a15,[a15]12
.L251:
	jnz.a	a15,.L252
.L1863:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1533      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1534    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1535  }
	ret
.L961:
	
__tcp_txnow_function_end:
	.size	tcp_txnow,__tcp_txnow_function_end-tcp_txnow
.L630:
	; End of function
	
	.sdecl	'.text.tcp.tcp_process_refused_data',code,cluster('tcp_process_refused_data')
	.sect	'.text.tcp.tcp_process_refused_data'
	.align	2
	
	.global	tcp_process_refused_data

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1536  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1537  /** Pass pcb->refused_data to the recv callback */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1538  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1539  tcp_process_refused_data(struct tcp_pcb *pcb)
; Function tcp_process_refused_data
.L443:
tcp_process_refused_data:	.type	func
	sub.a	a10,#16
.L1340:
	mov.aa	a15,a4
.L1342:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1540  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1541  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1542    struct pbuf *rest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1543  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1544  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1545    LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a15,.L254
.L1941:
	movh.a	a15,#@his(.69.str)
.L1343:
	lea	a15,[a15]@los(.69.str)
	st.a	[a10],a15
	mov	d15,#1545
	st.w	[a10]4,d15
.L1341:
	fcall	.cocofun_109
.L1344:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1345:
	call	Ifx_Lwip_printf
.L1942:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1546  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1547  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1548    while (pcb->refused_data != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1549  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1550    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1551      err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1552      u8_t refused_flags = pcb->refused_data->flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1553      /* set pcb->refused_data to NULL in case the callback frees it and then
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1554         closes the pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1555      struct pbuf *refused_data = pcb->refused_data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1556  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1557      pbuf_split_64k(refused_data, &rest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1558      pcb->refused_data = rest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1559  #else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1560      pcb->refused_data = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1561  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1562      /* Notify again application with data previously received. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1563      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1564      TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1565      if (err == ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1566        /* did refused_data include a FIN? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1567        if ((refused_flags & PBUF_FLAG_TCP_FIN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1568  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1569            && (rest == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1570  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1571           ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1572          /* correct rcv_wnd as the application won't call tcp_recved()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1573             for the FIN's seqno */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1574          if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1575            pcb->rcv_wnd++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1576          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1577          TCP_EVENT_CLOSED(pcb, err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1578          if (err == ERR_ABRT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1579            return ERR_ABRT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1580          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1581        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1582      } else if (err == ERR_ABRT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1583        /* if err == ERR_ABRT, 'pcb' is already deallocated */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1584        /* Drop incoming packets because pcb is "full" (only if the incoming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1585           segment contains data). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1586        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1587        return ERR_ABRT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1588      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1589        /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1590  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1591        if (rest != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1592          pbuf_cat(refused_data, rest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1593        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1594  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1595        pcb->refused_data = refused_data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1596        return ERR_INPROGRESS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1597      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1598    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1599    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1600  }
	mov	d2,#-16
	ret
.L254:
	ld.a	a12,[a15]120
.L1943:
	mov.a	a2,#0
.L1944:
	ld.bu	d15,[a12]13
.L1347:
	st.a	[a15]120,a2
.L1945:
	ld.a	a2,[a15]132
	jz.a	a2,.L256
	ld.a	a4,[a15]16
.L1346:
	mov	d4,#0
	mov.aa	a5,a15
.L1349:
	mov.aa	a6,a12
	calli	a2
.L1350:
	j	.L257
.L256:
	mov.a	a4,#0
.L1351:
	mov	d4,#0
	mov.aa	a5,a15
.L1352:
	mov.aa	a6,a12
	call	tcp_recv_null
.L257:
	jne	d2,#0,.L258
.L1946:
	jz.t	d15:5,.L259
.L1947:
	ld.hu	d15,[a15]40
.L1348:
	mov	d0,#2144
.L1948:
	jeq	d15,d0,.L260
.L1949:
	add	d15,#1
	st.h	[a15]40,d15
.L260:
	ld.a	a2,[a15]132
	jz.a	a2,.L261
	ld.a	a4,[a15]16
	mov.a	a6,#0
	mov	d4,#0
	mov.aa	a5,a15
.L1353:
	calli	a2
.L261:
	mov	d15,#-13
.L1354:
	jne	d15,d2,.L263
.L1355:
	j	.L264
.L258:
	mov	d15,#-13
.L1356:
	jne	d15,d2,.L265
.L264:
	mov	d2,#-13
	ret
.L265:
	st.a	[a15]120,a12
.L1950:
	mov	d2,#-5
	ret
.L263:
.L259:
	mov	d2,#0
	ret
.L984:
	
__tcp_process_refused_data_function_end:
	.size	tcp_process_refused_data,__tcp_process_refused_data_function_end-tcp_process_refused_data
.L655:
	; End of function
	
	.sdecl	'.text.tcp.tcp_segs_free',code,cluster('tcp_segs_free')
	.sect	'.text.tcp.tcp_segs_free'
	.align	2
	
	.global	tcp_segs_free

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1601  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1602  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1603   * Deallocates a list of TCP segments (tcp_seg structures).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1604   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1605   * @param seg tcp_seg list of TCP segments to free
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1606   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1607  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1608  tcp_segs_free(struct tcp_seg *seg)
; Function tcp_segs_free
.L445:
tcp_segs_free:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1609  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1610    while (seg != NULL) {
	j	.L269
.L270:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1611      struct tcp_seg *next = seg->next;
	ld.a	a15,[a4]
.L1358:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1612      tcp_seg_free(seg);
	call	tcp_seg_free
.L1357:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1613      seg = next;
	mov.aa	a4,a15
.L269:
	jnz.a	a4,.L270
.L1994:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1614    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1615  }
	ret
.L995:
	
__tcp_segs_free_function_end:
	.size	tcp_segs_free,__tcp_segs_free_function_end-tcp_segs_free
.L670:
	; End of function
	
	.sdecl	'.text.tcp.tcp_seg_free',code,cluster('tcp_seg_free')
	.sect	'.text.tcp.tcp_seg_free'
	.align	2
	
	.global	tcp_seg_free

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1616  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1617  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1618   * Frees a TCP segment (tcp_seg structure).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1619   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1620   * @param seg single tcp_seg to free
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1621   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1622  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1623  tcp_seg_free(struct tcp_seg *seg)
; Function tcp_seg_free
.L447:
tcp_seg_free:	.type	func
	mov.aa	a15,a4
.L1360:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1624  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1625    if (seg != NULL) {
	jz.a	a15,.L271
.L1999:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1626      if (seg->p != NULL) {
	ld.a	a4,[a15]4
.L1359:
	jz.a	a4,.L272
.L2000:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1627        pbuf_free(seg->p);
	call	pbuf_free
.L272:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1628  #if TCP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1629        seg->p = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1630  #endif /* TCP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1631      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1632      memp_free(MEMP_TCP_SEG, seg);
	mov	d4,#3
	mov.aa	a4,a15
.L1361:
	j	memp_free
.L271:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1633    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1634  }
	ret
.L999:
	
__tcp_seg_free_function_end:
	.size	tcp_seg_free,__tcp_seg_free_function_end-tcp_seg_free
.L675:
	; End of function
	
	.sdecl	'.text.tcp.tcp_setprio',code,cluster('tcp_setprio')
	.sect	'.text.tcp.tcp_setprio'
	.align	2
	
	.global	tcp_setprio

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1635  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1636  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1637   * @ingroup tcp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1638   * Sets the priority of a connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1639   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1640   * @param pcb the tcp_pcb to manipulate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1641   * @param prio new priority
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1642   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1643  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1644  tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
; Function tcp_setprio
.L449:
tcp_setprio:	.type	func
	sub.a	a10,#16
.L1362:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1645  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1646    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1647  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1648    LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
	jnz.a	a4,.L273
.L1676:
	movh.a	a15,#@his(.72.str)
	lea	a15,[a15]@los(.72.str)
	st.a	[a10],a15
	mov	d15,#1648
	st.w	[a10]4,d15
.L1363:
	fcall	.cocofun_109
.L1364:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1365:
	j	Ifx_Lwip_printf
.L273:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1649  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1650    pcb->prio = prio;
	st.b	[a4]21,d4
.L1677:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1651  }
	ret
.L924:
	
__tcp_setprio_function_end:
	.size	tcp_setprio,__tcp_setprio_function_end-tcp_setprio
.L600:
	; End of function
	
	.sdecl	'.text.tcp.tcp_seg_copy',code,cluster('tcp_seg_copy')
	.sect	'.text.tcp.tcp_seg_copy'
	.align	2
	
	.global	tcp_seg_copy

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1652  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1653  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1654  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1655   * Returns a copy of the given TCP segment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1656   * The pbuf and data are not copied, only the pointers
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1657   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1658   * @param seg the old tcp_seg
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1659   * @return a copy of seg
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1660   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1661  struct tcp_seg *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1662  tcp_seg_copy(struct tcp_seg *seg)
; Function tcp_seg_copy
.L451:
tcp_seg_copy:	.type	func
	sub.a	a10,#16
.L1366:
	mov.aa	a12,a4
.L1368:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1663  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1664    struct tcp_seg *cseg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1665  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1666    LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
	jnz.a	a12,.L275
.L2005:
	movh.a	a15,#@his(.73.str)
	lea	a15,[a15]@los(.73.str)
	st.a	[a10],a15
	mov	d15,#1666
	st.w	[a10]4,d15
.L1367:
	fcall	.cocofun_109
.L1369:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1370:
	call	Ifx_Lwip_printf
.L275:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1667  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1668    cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
	mov	d4,#3
	call	memp_malloc
.L1371:
	mov.aa	a15,a2
.L1373:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1669    if (cseg == NULL) {
	jnz.a	a15,.L276
.L2006:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1670      return NULL;
	mov.a	a2,#0
.L1372:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1671    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1672    SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1673    pbuf_ref(cseg->p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1674    return cseg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1675  }
	ret
.L276:
	mov	d4,#20
	mov.aa	a4,a15
.L1374:
	mov.aa	a5,a12
.L1376:
	call	memcpy
.L1375:
	ld.a	a4,[a15]4
	call	pbuf_ref
.L2007:
	mov.aa	a2,a15
.L1377:
	ret
.L1001:
	
__tcp_seg_copy_function_end:
	.size	tcp_seg_copy,__tcp_seg_copy_function_end-tcp_seg_copy
.L680:
	; End of function
	
	.sdecl	'.text.tcp.tcp_recv_null',code,cluster('tcp_recv_null')
	.sect	'.text.tcp.tcp_recv_null'
	.align	2
	
	.global	tcp_recv_null

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1676  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1677  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1678  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1679  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1680   * Default receive callback that is called if the user didn't register
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1681   * a recv callback for the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1682   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1683  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1684  tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
; Function tcp_recv_null
.L453:
tcp_recv_null:	.type	func
	sub.a	a10,#16
.L1378:
	mov.aa	a15,a6
.L1380:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1685  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1686    LWIP_UNUSED_ARG(arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1687  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1688    LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a5,.L279
.L2028:
	movh.a	a15,#@his(.74.str)
.L1381:
	lea	a15,[a15]@los(.74.str)
	st.a	[a10],a15
	mov	d15,#1688
	st.w	[a10]4,d15
.L1379:
	fcall	.cocofun_109
.L1382:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1383:
	call	Ifx_Lwip_printf
.L1384:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1689  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1690    if (p != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1691      tcp_recved(pcb, p->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1692      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1693    } else if (err == ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1694      return tcp_close(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1695    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1696    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1697  }
	mov	d2,#-16
	ret
.L279:
	jz.a	a15,.L281
.L2029:
	ld.hu	d4,[a15]8
.L1386:
	mov.aa	a4,a5
.L1385:
	call	tcp_recved
.L1387:
	mov.aa	a4,a15
.L1388:
	call	pbuf_free
.L1389:
	j	.L282
.L281:
	jne	d4,#0,.L283
.L2030:
	mov.aa	a4,a5
.L1390:
	j	tcp_close
.L283:
.L282:
	mov	d2,#0
	ret
.L1012:
	
__tcp_recv_null_function_end:
	.size	tcp_recv_null,__tcp_recv_null_function_end-tcp_recv_null
.L695:
	; End of function
	
	.sdecl	'.text.tcp.tcp_kill_prio',code,cluster('tcp_kill_prio')
	.sect	'.text.tcp.tcp_kill_prio'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1698  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1699  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1700  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1701   * Kills the oldest active connection that has a lower priority than 'prio'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1702   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1703   * @param prio minimum priority
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1704   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1705  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1706  tcp_kill_prio(u8_t prio)
; Function tcp_kill_prio
.L455:
tcp_kill_prio:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1707  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1708    struct tcp_pcb *pcb, *inactive;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1709    u32_t inactivity;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1710    u8_t mprio;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1712    mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
	min.u	d15,d4,#127
.L1391:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1713  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1714    /* We want to kill connections with a lower prio, so bail out if 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1715     * supplied prio is 0 - there can never be a lower prio
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1716     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1717    if (mprio == 0) {
	jeq	d15,#0,.L286
.L2138:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1718      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1719    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1720  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1721    /* We only want kill connections with a lower prio, so decrement prio by one 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1722     * and start searching for oldest connection with same or lower priority than mprio.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1723     * We want to find the connections with the lowest possible prio, and among
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1724     * these the one with the longest inactivity time.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1725     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1726    mprio--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1727  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1728    inactivity = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1729    inactive = NULL;
	mov	d0,#0
	mov.a	a4,#0
.L1393:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1730    for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
	add	d15,#-1
	ld.a	a15,tcp_active_pcbs
.L1394:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1731          /* lower prio is always a kill candidate */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1732      if ((pcb->prio < mprio) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1733          /* longer inactivity is also a kill candidate */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1734          ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
	ld.w	d1,tcp_ticks
.L2139:
	j	.L287
.L288:
	ld.bu	d2,[a15]21
.L2140:
	jlt.u	d2,d15,.L289
.L2141:
	jne	d15,d2,.L290
.L2142:
	ld.w	d3,[a15]32
.L2143:
	sub	d3,d1,d3
.L2144:
	jlt.u	d3,d0,.L291
.L289:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1735        inactivity = tcp_ticks - pcb->tmr;
	ld.w	d15,[a15]32
.L1392:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1736        inactive   = pcb;
	mov.aa	a4,a15
.L2145:
	sub	d0,d1,d15
.L2146:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1737        mprio      = pcb->prio;
	mov	d15,d2
.L291:
.L290:
	ld.a	a15,[a15]12
.L287:
	jnz.a	a15,.L288
.L2147:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1738      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1739    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1740    if (inactive != NULL) {
	jz.a	a4,.L292
.L2148:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1741      LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1742                              (void *)inactive, inactivity));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1743      tcp_abort(inactive);
	j	tcp_abort
.L292:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1744    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1745  }
.L286:
	ret
.L1050:
	
__tcp_kill_prio_function_end:
	.size	tcp_kill_prio,__tcp_kill_prio_function_end-tcp_kill_prio
.L745:
	; End of function
	
	.sdecl	'.text.tcp.tcp_kill_state',code,cluster('tcp_kill_state')
	.sect	'.text.tcp.tcp_kill_state'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1746  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1747  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1748   * Kills the oldest connection that is in specific state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1749   * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1750   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1751  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1752  tcp_kill_state(enum tcp_state state)
; Function tcp_kill_state
.L457:
tcp_kill_state:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1753  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1754    struct tcp_pcb *pcb, *inactive;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1755    u32_t inactivity;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1756  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1757    LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1758  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1759    inactivity = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1760    inactive = NULL;
	mov	d1,#0
	mov.a	a4,#0
.L1396:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1761    /* Go through the list of active pcbs and get the oldest pcb that is in state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1762       CLOSING/LAST_ACK. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1763    for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
	ld.a	a15,tcp_active_pcbs
.L1397:
	j	.L293

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1764      if (pcb->state == state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1765        if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1766          inactivity = tcp_ticks - pcb->tmr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1767          inactive = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1768        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1769      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1770    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1771    if (inactive != NULL) {
.L297:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1772      LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1773                              tcp_state_str[state], (void *)inactive, inactivity));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1774      /* Don't send a RST, since no data is lost. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1775      tcp_abandon(inactive, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1776    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1777  }
	ret
.L294:
	ld.bu	d15,[a15]20
.L2153:
	jne	d15,d4,.L295
.L2154:
	fcall	.cocofun_113
.L295:
	ld.a	a15,[a15]12
.L293:
	jnz.a	a15,.L294
.L2155:
	jz.a	a4,.L297
.L2156:
	mov	d4,#0
.L1398:
	j	tcp_abandon
.L1056:
	
__tcp_kill_state_function_end:
	.size	tcp_kill_state,__tcp_kill_state_function_end-tcp_kill_state
.L750:
	; End of function
	
	.sdecl	'.text.tcp..cocofun_113',code,cluster('.cocofun_113')
	.sect	'.text.tcp..cocofun_113'
	.align	2
; Function .cocofun_113
.L459:
.cocofun_113:	.type	func
; Function body .cocofun_113, coco_iter:0
	fcall	.cocofun_116
.L1395:
	jlt.u	d0,d1,.L296
.L2207:
	mov	d1,d0
	mov.aa	a4,a15
.L296:
	fret
.L795:
	; End of function
	.sdecl	'.text.tcp.tcp_kill_timewait',code,cluster('tcp_kill_timewait')
	.sect	'.text.tcp.tcp_kill_timewait'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1778  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1779  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1780   * Kills the oldest connection that is in TIME_WAIT state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1781   * Called from tcp_alloc() if no more connections are available.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1782   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1783  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1784  tcp_kill_timewait(void)
; Function tcp_kill_timewait
.L461:
tcp_kill_timewait:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1785  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1786    struct tcp_pcb *pcb, *inactive;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1787    u32_t inactivity;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1788  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1789    inactivity = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1790    inactive = NULL;
	mov	d1,#0
	mov.a	a4,#0
.L1399:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1791    /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1792    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
	ld.a	a15,tcp_tw_pcbs
.L1400:
	j	.L298

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1793      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1794        inactivity = tcp_ticks - pcb->tmr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1795        inactive = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1796      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1797    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1798    if (inactive != NULL) {
.L301:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1799      LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1800                              (void *)inactive, inactivity));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1801      tcp_abort(inactive);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1802    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1803  }
	ret
.L299:
	fcall	.cocofun_113
.L2161:
	ld.a	a15,[a15]12
.L298:
	jnz.a	a15,.L299
.L2162:
	jz.a	a4,.L301
.L2163:
	j	tcp_abort
.L1062:
	
__tcp_kill_timewait_function_end:
	.size	tcp_kill_timewait,__tcp_kill_timewait_function_end-tcp_kill_timewait
.L755:
	; End of function
	
	.sdecl	'.text.tcp.tcp_handle_closepend',code,cluster('tcp_handle_closepend')
	.sect	'.text.tcp.tcp_handle_closepend'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1804  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1805  /* Called when allocating a pcb fails.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1806   * In this case, we want to handle all pcbs that want to close first: if we can
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1807   * now send the FIN (which failed before), the pcb might be in a state that is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1808   * OK for us to now free it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1809   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1810  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1811  tcp_handle_closepend(void)
; Function tcp_handle_closepend
.L463:
tcp_handle_closepend:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1812  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1813    struct tcp_pcb *pcb = tcp_active_pcbs;
	ld.a	a4,tcp_active_pcbs
.L1401:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1814  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1815    while (pcb != NULL) {
	j	.L302
.L303:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1816      struct tcp_pcb *next = pcb->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1817      /* send pending FIN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1818      if (pcb->flags & TF_CLOSEPEND) {
	ld.hu	d15,[a4]26
.L2168:
	ld.a	a15,[a4]12
.L1402:
	jz.t	d15:3,.L304
.L2169:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1819        LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1820        tcp_clear_flags(pcb, TF_CLOSEPEND);
	mov.u	d0,#65527
	and	d15,d0
	st.h	[a4]26,d15
.L2170:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1821        tcp_close_shutdown_fin(pcb);
	call	tcp_close_shutdown_fin
.L304:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1822      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1823      pcb = next;
	mov.aa	a4,a15
.L302:
	jnz.a	a4,.L303
.L2171:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1824    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1825  }
	ret
.L1066:
	
__tcp_handle_closepend_function_end:
	.size	tcp_handle_closepend,__tcp_handle_closepend_function_end-tcp_handle_closepend
.L760:
	; End of function
	
	.sdecl	'.text.tcp.tcp_alloc',code,cluster('tcp_alloc')
	.sect	'.text.tcp.tcp_alloc'
	.align	2
	
	.global	tcp_alloc

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1826  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1827  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1828   * Allocate a new tcp_pcb structure.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1829   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1830   * @param prio priority for the new pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1831   * @return a new tcp_pcb that initially is in state CLOSED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1832   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1833  struct tcp_pcb *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1834  tcp_alloc(u8_t prio)
; Function tcp_alloc
.L465:
tcp_alloc:	.type	func
	mov	d8,d4
.L1404:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1835  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1836    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1837  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1838    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1839  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1840    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
	mov	d4,#1
	call	memp_malloc
.L1403:
	mov.aa	a15,a2
.L1406:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1841    if (pcb == NULL) {
	jnz.a	a15,.L305
.L1868:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1842      /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1843      tcp_handle_closepend();
	call	tcp_handle_closepend
.L1405:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1844  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1845      /* Try killing oldest connection in TIME-WAIT. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1846      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1847      tcp_kill_timewait();
	call	tcp_kill_timewait
.L1869:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1848      /* Try to allocate a tcp_pcb again. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1849      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
	mov	d4,#1
	call	memp_malloc
.L1407:
	mov.aa	a15,a2
.L1409:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1850      if (pcb == NULL) {
	jnz.a	a15,.L306
.L1870:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1851        /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1852        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1853        tcp_kill_state(LAST_ACK);
	mov	d4,#9
	call	tcp_kill_state
.L1408:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1854        /* Try to allocate a tcp_pcb again. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1855        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
	mov	d4,#1
	call	memp_malloc
.L1410:
	mov.aa	a15,a2
.L1412:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1856        if (pcb == NULL) {
	jnz.a	a15,.L307
.L1871:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1857          /* Try killing oldest connection in CLOSING. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1858          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1859          tcp_kill_state(CLOSING);
	mov	d4,#8
	call	tcp_kill_state
.L1411:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1860          /* Try to allocate a tcp_pcb again. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1861          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
	mov	d4,#1
	call	memp_malloc
.L1413:
	mov.aa	a15,a2
.L1415:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1862          if (pcb == NULL) {
	jnz.a	a15,.L308
.L1872:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1863            /* Try killing oldest active connection with lower priority than the new one. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1864            LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1865            tcp_kill_prio(prio);
	mov	d4,d8
	call	tcp_kill_prio
.L1414:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1866            /* Try to allocate a tcp_pcb again. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1867            pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
	mov	d4,#1
	call	memp_malloc
.L1416:
	mov.aa	a15,a2
.L1417:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1868            if (pcb != NULL) {
	fcall	.cocofun_111
.L308:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1869              /* adjust err stats: memp_malloc failed multiple times before */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1870              MEMP_STATS_DEC(err, MEMP_TCP_PCB);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1871            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1872          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1873          if (pcb != NULL) {
	fcall	.cocofun_111
.L307:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1874            /* adjust err stats: memp_malloc failed multiple times before */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1875            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1876          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1877        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1878        if (pcb != NULL) {
	fcall	.cocofun_111
.L306:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1879          /* adjust err stats: memp_malloc failed multiple times before */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1880          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1881        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1882      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1883      if (pcb != NULL) {
	fcall	.cocofun_111
.L305:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1884        /* adjust err stats: memp_malloc failed above */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1885        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1886      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1887    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1888    if (pcb != NULL) {
	jz.a	a15,.L313
.L1873:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1889      /* zero out the whole pcb, so there is no need to initialize members to zero */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1890      memset(pcb, 0, sizeof(struct tcp_pcb));
	mov	d4,#0
	mov.aa	a4,a15
.L1419:
	mov	d5,#156
	call	memset
.L1420:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1891      pcb->prio = prio;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1892      pcb->snd_buf = TCP_SND_BUF;
	mov	d0,#1072
	st.b	[a15]21,d8
.L1874:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1893      /* Start with a window that does not need scaling. When window scaling is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1894         enabled and used, the window is enlarged when both sides agree on scaling. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1895      pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
	mov	d15,#2144
	st.h	[a15]100,d0
.L1875:
	st.h	[a15]42,d15
.L1876:
	st.h	[a15]40,d15
.L1877:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1896      pcb->ttl = TCP_TTL;
	mov	d15,#255
	st.b	[a15]11,d15
.L1878:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1897      /* As initial send MSS, we use TCP_MSS but limit it to 536.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1898         The send MSS is updated when an MSS option is received. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1899      pcb->mss = INITIAL_MSS;
	mov	d15,#536
	st.h	[a15]50,d15
.L1879:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1900      pcb->rto = 3000 / TCP_SLOW_INTERVAL;
	mov	d15,#6
	st.h	[a15]64,d15
.L1880:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1901      pcb->sv = 3000 / TCP_SLOW_INTERVAL;
	st.h	[a15]62,d15
.L1881:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1902      pcb->rtime = -1;
	mov	d15,#-1
	st.h	[a15]48,d15
.L1882:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1903      pcb->cwnd = 1;
	mov	d15,#1
	st.h	[a15]72,d15
.L1883:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1904      pcb->tmr = tcp_ticks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1905      pcb->last_timer = tcp_timer_ctr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1907      /* RFC 5681 recommends setting ssthresh abritrarily high and gives an example
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1908      of using the largest advertised receive window.  We've seen complications with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1909      receiving TCPs that use window scaling and/or window auto-tuning where the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1910      initial advertised window is very small and then grows rapidly once the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1911      connection is established. To avoid these complications, we set ssthresh to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1912      largest effective cwnd (amount of in-flight data) that the sender can have. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1913      pcb->ssthresh = TCP_SND_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1914  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1915  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1916      pcb->recv = tcp_recv_null;
	movh.a	a2,#@his(tcp_recv_null)
.L1884:
	ld.w	d15,tcp_ticks
.L1885:
	st.w	[a15]32,d15
.L1886:
	lea	a2,[a2]@los(tcp_recv_null)
.L1887:
	ld.bu	d15,tcp_timer_ctr
.L1888:
	st.b	[a15]30,d15
.L1889:
	st.h	[a15]74,d0
.L1890:
	st.a	[a15]132,a2
.L1891:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1917  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1918  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1919      /* Init KEEPALIVE timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1920      pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
	ld.w	d15,.107.cnt
.L1892:
	st.w	[a15]148,d15
.L313:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1921  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1922  #if LWIP_TCP_KEEPALIVE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1923      pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1924      pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1925  #endif /* LWIP_TCP_KEEPALIVE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1926    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1927    return pcb;
	mov.aa	a2,a15
.L1421:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1928  }
	ret
.L963:
	
__tcp_alloc_function_end:
	.size	tcp_alloc,__tcp_alloc_function_end-tcp_alloc
.L635:
	; End of function
	
	.sdecl	'.text.tcp..cocofun_111',code,cluster('.cocofun_111')
	.sect	'.text.tcp..cocofun_111'
	.align	2
; Function .cocofun_111
.L467:
.cocofun_111:	.type	func
; Function body .cocofun_111, coco_iter:0
	jz.a	a15,.L309
.L2197:
	movh.a	a2,#@his(lwip_stats+172)
.L1418:
	ld.a	a2,[a2]@los(lwip_stats+172)
	ld.hu	d15,[+a2]4
	add	d15,#-1
	st.h	[a2],d15
.L309:
	fret
.L785:
	; End of function
	.sdecl	'.text.tcp.tcp_new',code,cluster('tcp_new')
	.sect	'.text.tcp.tcp_new'
	.align	2
	
	.global	tcp_new

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1929  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1930  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1931   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1932   * Creates a new TCP protocol control block but doesn't place it on
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1933   * any of the TCP PCB lists.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1934   * The pcb is not put on any list until binding using tcp_bind().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1935   * If memory is not available for creating the new pcb, NULL is returned.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1936   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1937   * @internal: Maybe there should be a idle TCP PCB list where these
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1938   * PCBs are put on. Port reservation using tcp_bind() is implemented but
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1939   * allocated pcbs that are not bound can't be killed automatically if wanting
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1940   * to allocate a pcb with higher prio (@see tcp_kill_prio())
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1941   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1942   * @return a new tcp_pcb that initially is in state CLOSED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1943   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1944  struct tcp_pcb *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1945  tcp_new(void)
; Function tcp_new
.L469:
tcp_new:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1946  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1947    return tcp_alloc(TCP_PRIO_NORMAL);
	mov	d4,#64
	j	tcp_alloc
.L842:
	
__tcp_new_function_end:
	.size	tcp_new,__tcp_new_function_end-tcp_new
.L515:
	; End of function
	
	.sdecl	'.text.tcp.tcp_new_ip_type',code,cluster('tcp_new_ip_type')
	.sect	'.text.tcp.tcp_new_ip_type'
	.align	2
	
	.global	tcp_new_ip_type

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1948  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1949  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1950  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1951   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1952   * Creates a new TCP protocol control block but doesn't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1953   * place it on any of the TCP PCB lists.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1954   * The pcb is not put on any list until binding using tcp_bind().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1955   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1956   * @param type IP address type, see @ref lwip_ip_addr_type definitions.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1957   * If you want to listen to IPv4 and IPv6 (dual-stack) connections,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1958   * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1959   * @return a new tcp_pcb that initially is in state CLOSED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1960   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1961  struct tcp_pcb *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1962  tcp_new_ip_type(u8_t type)
; Function tcp_new_ip_type
.L471:
tcp_new_ip_type:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1963  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1964    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1965    pcb = tcp_alloc(TCP_PRIO_NORMAL);
	mov	d4,#64
.L1422:
	j	tcp_alloc
.L843:
	
__tcp_new_ip_type_function_end:
	.size	tcp_new_ip_type,__tcp_new_ip_type_function_end-tcp_new_ip_type
.L520:
	; End of function
	
	.sdecl	'.text.tcp.tcp_arg',code,cluster('tcp_arg')
	.sect	'.text.tcp.tcp_arg'
	.align	2
	
	.global	tcp_arg

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1966  #if LWIP_IPV4 && LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1967    if (pcb != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1968      IP_SET_TYPE_VAL(pcb->local_ip, type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1969      IP_SET_TYPE_VAL(pcb->remote_ip, type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1970    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1971  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1972    LWIP_UNUSED_ARG(type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1973  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1974    return pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1975  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1976  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1977  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1978   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1979   * Specifies the program specific state that should be passed to all
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1980   * other callback functions. The "pcb" argument is the current TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1981   * connection control block, and the "arg" argument is the argument
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1982   * that will be passed to the callbacks.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1983   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1984   * @param pcb tcp_pcb to set the callback argument
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1985   * @param arg void pointer argument to pass to callback functions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1986   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1987  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1988  tcp_arg(struct tcp_pcb *pcb, void *arg)
; Function tcp_arg
.L473:
tcp_arg:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1989  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1990    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1991    /* This function is allowed to be called for both listen pcbs and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1992       connection pcbs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1993    if (pcb != NULL) {
	jz.a	a4,.L317
.L1522:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1994      pcb->callback_arg = arg;
	st.a	[a4]16,a5
.L317:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1995    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1996  }
	ret
.L847:
	
__tcp_arg_function_end:
	.size	tcp_arg,__tcp_arg_function_end-tcp_arg
.L525:
	; End of function
	
	.sdecl	'.text.tcp.tcp_recv',code,cluster('tcp_recv')
	.sect	'.text.tcp.tcp_recv'
	.align	2
	
	.global	tcp_recv

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1997  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1998  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  1999  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2000   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2001   * Sets the callback function that will be called when new data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2002   * arrives. The callback function will be passed a NULL pbuf to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2003   * indicate that the remote host has closed the connection. If the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2004   * callback function returns ERR_OK or ERR_ABRT it must have
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2005   * freed the pbuf, otherwise it must not have freed it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2006   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2007   * @param pcb tcp_pcb to set the recv callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2008   * @param recv callback function to call for this pcb when data is received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2009   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2010  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2011  tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
; Function tcp_recv
.L475:
tcp_recv:	.type	func
	sub.a	a10,#16
.L1423:
	mov.aa	a12,a4
.L1425:
	mov.aa	a13,a5
.L1426:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2012  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2013    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2014    if (pcb != NULL) {
	jz.a	a12,.L318
.L1527:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2015      LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
	ld.bu	d15,[a12]20
	jne	d15,#1,.L319
	movh.a	a15,#@his(.84.str)
	lea	a15,[a15]@los(.84.str)
	st.a	[a10],a15
	mov	d15,#2015
	st.w	[a10]4,d15
.L1424:
	fcall	.cocofun_109
.L1427:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1428:
	call	Ifx_Lwip_printf
.L319:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2016      pcb->recv = recv;
	st.a	[a12]132,a13
.L318:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2017    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2018  }
	ret
.L851:
	
__tcp_recv_function_end:
	.size	tcp_recv,__tcp_recv_function_end-tcp_recv
.L530:
	; End of function
	
	.sdecl	'.text.tcp.tcp_sent',code,cluster('tcp_sent')
	.sect	'.text.tcp.tcp_sent'
	.align	2
	
	.global	tcp_sent

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2019  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2020  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2021   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2022   * Specifies the callback function that should be called when data has
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2023   * successfully been received (i.e., acknowledged) by the remote
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2024   * host. The len argument passed to the callback function gives the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2025   * amount bytes that was acknowledged by the last acknowledgment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2026   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2027   * @param pcb tcp_pcb to set the sent callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2028   * @param sent callback function to call for this pcb when data is successfully sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2029   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2030  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2031  tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
; Function tcp_sent
.L477:
tcp_sent:	.type	func
	sub.a	a10,#16
.L1429:
	mov.aa	a12,a4
.L1431:
	mov.aa	a13,a5
.L1432:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2032  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2033    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2034    if (pcb != NULL) {
	jz.a	a12,.L320
.L1532:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2035      LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
	ld.bu	d15,[a12]20
	jne	d15,#1,.L321
	movh.a	a15,#@his(.85.str)
	lea	a15,[a15]@los(.85.str)
	st.a	[a10],a15
	mov	d15,#2035
	st.w	[a10]4,d15
.L1430:
	fcall	.cocofun_109
.L1433:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1434:
	call	Ifx_Lwip_printf
.L321:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2036      pcb->sent = sent;
	st.a	[a12]128,a13
.L320:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2037    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2038  }
	ret
.L855:
	
__tcp_sent_function_end:
	.size	tcp_sent,__tcp_sent_function_end-tcp_sent
.L535:
	; End of function
	
	.sdecl	'.text.tcp.tcp_err',code,cluster('tcp_err')
	.sect	'.text.tcp.tcp_err'
	.align	2
	
	.global	tcp_err

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2039  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2040  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2041   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2042   * Used to specify the function that should be called when a fatal error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2043   * has occurred on the connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2044   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2045   * If a connection is aborted because of an error, the application is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2046   * alerted of this event by the err callback. Errors that might abort a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2047   * connection are when there is a shortage of memory. The callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2048   * function to be called is set using the tcp_err() function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2049   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2050   * @note The corresponding pcb is already freed when this callback is called!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2051   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2052   * @param pcb tcp_pcb to set the err callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2053   * @param err callback function to call for this pcb when a fatal error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2054   *        has occurred on the connection
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2055   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2056  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2057  tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
; Function tcp_err
.L479:
tcp_err:	.type	func
	sub.a	a10,#16
.L1435:
	mov.aa	a12,a4
.L1437:
	mov.aa	a13,a5
.L1438:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2058  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2059    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2060    if (pcb != NULL) {
	jz.a	a12,.L322
.L1537:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2061      LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
	ld.bu	d15,[a12]20
	jne	d15,#1,.L323
	movh.a	a15,#@his(.86.str)
	lea	a15,[a15]@los(.86.str)
	st.a	[a10],a15
	mov	d15,#2061
	st.w	[a10]4,d15
.L1436:
	fcall	.cocofun_109
.L1439:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1440:
	call	Ifx_Lwip_printf
.L323:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2062      pcb->errf = err;
	st.a	[a12]144,a13
.L322:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2063    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2064  }
	ret
.L859:
	
__tcp_err_function_end:
	.size	tcp_err,__tcp_err_function_end-tcp_err
.L540:
	; End of function
	
	.sdecl	'.text.tcp.tcp_accept',code,cluster('tcp_accept')
	.sect	'.text.tcp.tcp_accept'
	.align	2
	
	.global	tcp_accept

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2065  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2066  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2067   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2068   * Used for specifying the function that should be called when a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2069   * LISTENing connection has been connected to another host.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2070   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2071   * @param pcb tcp_pcb to set the accept callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2072   * @param accept callback function to call for this pcb when LISTENing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2073   *        connection has been connected to another host
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2074   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2075  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2076  tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
; Function tcp_accept
.L481:
tcp_accept:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2077  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2078    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2079    if ((pcb != NULL) && (pcb->state == LISTEN)) {
	jz.a	a4,.L324
.L1542:
	ld.bu	d15,[a4]20
.L1543:
	jne	d15,#1,.L325
.L867:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2080      struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2081      lpcb->accept = accept;
	st.a	[a4]24,a5
.L325:
.L324:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2082    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2083  }
	ret
.L863:
	
__tcp_accept_function_end:
	.size	tcp_accept,__tcp_accept_function_end-tcp_accept
.L545:
	; End of function
	
	.sdecl	'.text.tcp.tcp_poll',code,cluster('tcp_poll')
	.sect	'.text.tcp.tcp_poll'
	.align	2
	
	.global	tcp_poll

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2084  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2085  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2086  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2087  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2088   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2089   * Specifies the polling interval and the callback function that should
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2090   * be called to poll the application. The interval is specified in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2091   * number of TCP coarse grained timer shots, which typically occurs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2092   * twice a second. An interval of 10 means that the application would
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2093   * be polled every 5 seconds.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2094   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2095   * When a connection is idle (i.e., no data is either transmitted or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2096   * received), lwIP will repeatedly poll the application by calling a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2097   * specified callback function. This can be used either as a watchdog
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2098   * timer for killing connections that have stayed idle for too long, or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2099   * as a method of waiting for memory to become available. For instance,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2100   * if a call to tcp_write() has failed because memory wasn't available,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2101   * the application may use the polling functionality to call tcp_write()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2102   * again when the connection has been idle for a while.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2103   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2104  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2105  tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
; Function tcp_poll
.L483:
tcp_poll:	.type	func
	sub.a	a10,#16
.L1441:
	mov.aa	a12,a4
.L1443:
	mov.aa	a13,a5
.L1444:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2106  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2107    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2108  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2109    LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
	mov	d8,d4
	jnz.a	a12,.L326
.L1445:
	movh.a	a15,#@his(.87.str)
	lea	a15,[a15]@los(.87.str)
	st.a	[a10],a15
	mov	d15,#2109
	st.w	[a10]4,d15
.L1442:
	fcall	.cocofun_109
.L1446:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1447:
	j	Ifx_Lwip_printf
.L326:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2110    LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
	ld.bu	d15,[a12]20
	jne	d15,#1,.L328
	movh.a	a15,#@his(.88.str)
	lea	a15,[a15]@los(.88.str)
	st.a	[a10],a15
	mov	d15,#2110
	st.w	[a10]4,d15
.L1448:
	fcall	.cocofun_109
.L1449:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1450:
	call	Ifx_Lwip_printf
.L328:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2111  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2112  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2113    pcb->poll = poll;
	st.a	[a12]140,a13
.L1548:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2114  #else /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2115    LWIP_UNUSED_ARG(poll);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2116  #endif /* LWIP_CALLBACK_API */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2117    pcb->pollinterval = interval;
	st.b	[a12]29,d8
.L1549:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2118  }
	ret
.L868:
	
__tcp_poll_function_end:
	.size	tcp_poll,__tcp_poll_function_end-tcp_poll
.L550:
	; End of function
	
	.sdecl	'.text.tcp.tcp_pcb_purge',code,cluster('tcp_pcb_purge')
	.sect	'.text.tcp.tcp_pcb_purge'
	.align	2
	
	.global	tcp_pcb_purge

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2119  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2120  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2121   * Purges a TCP PCB. Removes any buffered data and frees the buffer memory
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2122   * (pcb->ooseq, pcb->unsent and pcb->unacked are freed).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2123   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2124   * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2125   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2126  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2127  tcp_pcb_purge(struct tcp_pcb *pcb)
; Function tcp_pcb_purge
.L485:
tcp_pcb_purge:	.type	func
	sub.a	a10,#16
.L1451:
	mov.aa	a15,a4
.L1453:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2128  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2129    LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
	jnz.a	a15,.L329
.L1955:
	movh.a	a15,#@his(.89.str)
.L1454:
	lea	a15,[a15]@los(.89.str)
	st.a	[a10],a15
	mov	d15,#2129
	st.w	[a10]4,d15
.L1452:
	fcall	.cocofun_109
.L1455:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1456:
	j	Ifx_Lwip_printf
.L329:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2130  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2131    if (pcb->state != CLOSED &&
	ld.bu	d15,[a15]20
.L1956:
	jeq	d15,#0,.L331
.L1957:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2132        pcb->state != TIME_WAIT &&
	mov	d0,#10
.L1958:
	jeq	d15,d0,.L332
.L1959:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2133        pcb->state != LISTEN) {
	jeq	d15,#1,.L333
.L1960:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2135      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2136  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2137      tcp_backlog_accepted(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2138  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2139      if (pcb->refused_data != NULL) {
	ld.a	a4,[a15]120
.L1457:
	jz.a	a4,.L334
.L1961:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2140        LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2141        pbuf_free(pcb->refused_data);
	call	pbuf_free
.L1962:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2142        pcb->refused_data = NULL;
	mov.a	a2,#0
.L1963:
	st.a	[a15]120,a2
.L334:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2143      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2144      if (pcb->unsent != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2145        LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2146      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2147      if (pcb->unacked != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2148        LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2149      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2150  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2151      if (pcb->ooseq != NULL) {
	ld.w	d15,[a15]116
.L1964:
	jeq	d15,#0,.L335
.L1965:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2152        LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2153        tcp_free_ooseq(pcb);
	mov.aa	a4,a15
.L1458:
	call	tcp_free_ooseq
.L335:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2154      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2155  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2156  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2157      /* Stop the retransmission timer as it will expect data on unacked
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2158         queue if it fires */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2159      pcb->rtime = -1;
	mov	d15,#-1
	st.h	[a15]48,d15
.L1966:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2160  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2161      tcp_segs_free(pcb->unsent);
	ld.a	a4,[a15]108
	call	tcp_segs_free
.L1967:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2162      tcp_segs_free(pcb->unacked);
	ld.a	a4,[a15]112
	call	tcp_segs_free
.L1968:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2163      pcb->unacked = pcb->unsent = NULL;
	mov.a	a2,#0
.L1969:
	st.a	[a15]108,a2
.L1970:
	st.a	[a15]112,a2
.L1971:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2164  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2165      pcb->unsent_oversize = 0;
	mov	d15,#0
	st.h	[a15]104,d15
.L333:
.L332:
.L331:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2166  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2167    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2168  }
	ret
.L988:
	
__tcp_pcb_purge_function_end:
	.size	tcp_pcb_purge,__tcp_pcb_purge_function_end-tcp_pcb_purge
.L660:
	; End of function
	
	.sdecl	'.text.tcp.tcp_pcb_remove',code,cluster('tcp_pcb_remove')
	.sect	'.text.tcp.tcp_pcb_remove'
	.align	2
	
	.global	tcp_pcb_remove

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2169  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2170  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2171   * Purges the PCB and removes it from a PCB list. Any delayed ACKs are sent first.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2172   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2173   * @param pcblist PCB list to purge.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2174   * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2175   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2176  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2177  tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
; Function tcp_pcb_remove
.L487:
tcp_pcb_remove:	.type	func
	sub.a	a10,#16
.L1459:
	mov.aa	a12,a4
.L1461:
	mov.aa	a13,a5
.L1462:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2178  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2179    LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
	jnz.a	a13,.L336
.L1976:
	movh.a	a2,#@his(.95.str)
	lea	a2,[a2]@los(.95.str)
	st.a	[a10],a2
	mov	d15,#2179
	st.w	[a10]4,d15
.L1460:
	fcall	.cocofun_109
.L1463:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1464:
	call	Ifx_Lwip_printf
.L336:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2180    LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
	jnz.a	a12,.L337
.L1977:
	movh.a	a15,#@his(.96.str)
	lea	a15,[a15]@los(.96.str)
	st.a	[a10],a15
	mov	d15,#2180
	st.w	[a10]4,d15
.L1465:
	fcall	.cocofun_109
.L1466:
	st.a	[a10]8,a15
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L337:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2182    TCP_RMV(pcblist, pcb);
	ld.a	a15,[a12]
	jne.a	a15,a13,.L340
	ld.a	a15,[a13]12
	st.a	[a12],a15
	j	.L339
.L341:
	ld.a	a15,[a2]12
	jne.a	a15,a13,.L342
	ld.a	a15,[a13]12
	st.a	[a2]12,a15
	j	.L343
.L342:
.L340:
	mov.aa	a2,a15
.L1468:
	jnz.a	a2,.L341
.L343:
.L339:
	mov.a	a15,#0
	st.a	[a13]12,a15
.L1978:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2183  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2184    tcp_pcb_purge(pcb);
	mov.aa	a4,a13
.L1469:
	call	tcp_pcb_purge
.L1470:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2185  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2186    /* if there is an outstanding delayed ACKs, send it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2187    if ((pcb->state != TIME_WAIT) &&
	ld.bu	d15,[a13]20
.L1979:
	mov	d0,#10
.L1980:
	jeq	d15,d0,.L344
.L1981:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2188        (pcb->state != LISTEN) &&
	jeq	d15,#1,.L345
.L1982:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2189        (pcb->flags & TF_ACK_DELAY)) {
	ld.hu	d15,[a13]26
.L1983:
	jz.t	d15:0,.L346
.L1984:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2190      tcp_ack_now(pcb);
	or	d15,#2
	st.h	[a13]26,d15
.L1985:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2191      tcp_output(pcb);
	mov.aa	a4,a13
.L1471:
	call	tcp_output
.L346:
.L345:
.L344:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2192    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2193  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2194    if (pcb->state != LISTEN) {
	ld.bu	d15,[a13]20
.L1986:
	jeq	d15,#1,.L347
.L1987:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2195      LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
	ld.w	d15,[a13]108
	jeq	d15,#0,.L348
	movh.a	a15,#@his(.97.str)
	lea	a15,[a15]@los(.97.str)
	st.a	[a10],a15
	mov	d15,#2195
	st.w	[a10]4,d15
.L1467:
	fcall	.cocofun_109
.L1472:
	st.a	[a10]8,a15
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L348:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2196      LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
	ld.w	d15,[a13]112
	jeq	d15,#0,.L349
	movh.a	a15,#@his(.98.str)
	lea	a15,[a15]@los(.98.str)
	st.a	[a10],a15
	mov	d15,#2196
	st.w	[a10]4,d15
.L1473:
	fcall	.cocofun_109
.L1474:
	st.a	[a10]8,a15
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L349:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2197  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2198      LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
	ld.w	d15,[a13]116
	jeq	d15,#0,.L350
	movh.a	a15,#@his(.99.str)
	lea	a15,[a15]@los(.99.str)
	st.a	[a10],a15
	mov	d15,#2198
	st.w	[a10]4,d15
.L1475:
	fcall	.cocofun_109
.L1476:
	st.a	[a10]8,a15
	fcall	.cocofun_108
	call	Ifx_Lwip_printf
.L350:
.L347:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2199  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2200    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2201  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2202    pcb->state = CLOSED;
	mov	d15,#0
	st.b	[a13]20,d15
.L1988:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2203    /* reset the local port to prevent the pcb from being 'bound' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2204    pcb->local_port = 0;
	st.h	[a13]22,d15
.L1989:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2205  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2206    LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2207  }
	ret
.L990:
	
__tcp_pcb_remove_function_end:
	.size	tcp_pcb_remove,__tcp_pcb_remove_function_end-tcp_pcb_remove
.L665:
	; End of function
	
	.sdecl	'.text.tcp.tcp_next_iss',code,cluster('tcp_next_iss')
	.sect	'.text.tcp.tcp_next_iss'
	.align	2
	
	.global	tcp_next_iss

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2208  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2209  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2210   * Calculates a new initial sequence number for new connections.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2211   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2212   * @return u32_t pseudo random sequence number
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2213   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2214  u32_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2215  tcp_next_iss(struct tcp_pcb *pcb)
; Function tcp_next_iss
.L489:
tcp_next_iss:	.type	func
	sub.a	a10,#16
.L1477:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2216  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2217  #ifdef LWIP_HOOK_TCP_ISN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2218    LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2219    return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2220  #else /* LWIP_HOOK_TCP_ISN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2221    static u32_t iss = 6510;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2222  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2223    LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
	jnz.a	a4,.L351
.L2012:
	movh.a	a15,#@his(.101.str)
	lea	a15,[a15]@los(.101.str)
	st.a	[a10],a15
	mov	d15,#2223
	st.w	[a10]4,d15
.L1478:
	fcall	.cocofun_109
.L1479:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1480:
	call	Ifx_Lwip_printf
.L351:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2224    LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2225  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2226    iss += tcp_ticks;       /* XXX */
	ld.w	d2,_999001_iss
.L2013:
	ld.w	d15,tcp_ticks
.L2014:
	add	d2,d15
	st.w	_999001_iss,d2
.L2015:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2227    return iss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2228  #endif /* LWIP_HOOK_TCP_ISN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2229  }
	ret
.L1004:
	
__tcp_next_iss_function_end:
	.size	tcp_next_iss,__tcp_next_iss_function_end-tcp_next_iss
.L685:
	; End of function
	
	.sdecl	'.text.tcp.tcp_eff_send_mss_netif',code,cluster('tcp_eff_send_mss_netif')
	.sect	'.text.tcp.tcp_eff_send_mss_netif'
	.align	2
	
	.global	tcp_eff_send_mss_netif

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2231  #if TCP_CALCULATE_EFF_SEND_MSS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2232  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2233   * Calculates the effective send mss that can be used for a specific IP address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2234   * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2235   * netif (if not NULL).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2236   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2237  u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2238  tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
; Function tcp_eff_send_mss_netif
.L491:
tcp_eff_send_mss_netif:	.type	func
	sub.a	a10,#16
.L1481:
	mov	d8,d4
	mov.aa	a12,a4
.L1483:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2239  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2240    u16_t mss_s;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2241    u16_t mtu;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2242  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2243    LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2244  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2245    LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
	jnz.a	a5,.L353
.L2020:
	movh.a	a15,#@his(.102.str)
	lea	a15,[a15]@los(.102.str)
	st.a	[a10],a15
	mov	d15,#2245
	st.w	[a10]4,d15
.L1482:
	fcall	.cocofun_109
.L1484:
	st.a	[a10]8,a15
	fcall	.cocofun_108
.L1485:
	call	Ifx_Lwip_printf
.L353:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2246  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2247  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2248  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2249    if (IP_IS_V6(dest))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2250  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2251    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2252      /* First look in destination cache, to see if there is a Path MTU. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2253      mtu = nd6_get_destination_mtu(ip_2_ip6(dest), outif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2254    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2255  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2256    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2257  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2258  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2259  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2260    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2261      if (outif == NULL) {
	jz.a	a12,.L354
.L2021:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2262        return sendmss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2263      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2264      mtu = outif->mtu;
	ld.hu	d15,[a12]32
.L1486:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2265    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2266  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2267  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2268    if (mtu != 0) {
	jeq	d15,#0,.L355
.L1011:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2269      u16_t offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2270  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2271  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2272      if (IP_IS_V6(dest))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2273  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2274      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2275        offset = IP6_HLEN + TCP_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2276      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2277  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2278      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2279  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2280  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2281  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2282      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2283        offset = IP_HLEN + TCP_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2284      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2285  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2286      mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
	mov	d0,#40
.L2022:
	jge.u	d0,d15,.L356
.L2023:
	add	d15,d15,#-40
	j	.L357
.L356:
	mov	d15,#0
.L357:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2287      /* RFC 1122, chap 4.2.2.6:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2288       * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2289       * We correct for TCP options in tcp_write(), and don't support IP options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2290       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2291      sendmss = LWIP_MIN(sendmss, mss_s);
	min.u	d8,d8,d15
.L355:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2292    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2293    return sendmss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2294  }
.L354:
	mov	d2,d8
	ret
.L1006:
	
__tcp_eff_send_mss_netif_function_end:
	.size	tcp_eff_send_mss_netif,__tcp_eff_send_mss_netif_function_end-tcp_eff_send_mss_netif
.L690:
	; End of function
	
	.sdecl	'.text.tcp.tcp_netif_ip_addr_changed_pcblist',code,cluster('tcp_netif_ip_addr_changed_pcblist')
	.sect	'.text.tcp.tcp_netif_ip_addr_changed_pcblist'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2295  #endif /* TCP_CALCULATE_EFF_SEND_MSS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2296  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2297  /** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2298  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2299  tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
; Function tcp_netif_ip_addr_changed_pcblist
.L493:
tcp_netif_ip_addr_changed_pcblist:	.type	func
	sub.a	a10,#8
.L1487:
	mov.aa	a12,a4
.L1488:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2300  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2301    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2302    pcb = pcb_list;
	mov.aa	a15,a5
.L1489:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2303  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2304    LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2305  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2306    while (pcb != NULL) {
	j	.L359
.L360:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2307      /* PCB bound to current local interface address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2308      if (ip_addr_cmp(&pcb->local_ip, old_addr)
	ld.w	d0,[a12]
	ld.w	d15,[a15]
.L1074:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2309  #if LWIP_AUTOIP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2310          /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2311          && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2312  #endif /* LWIP_AUTOIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2313         ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2314        /* this connection must be aborted */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2315        struct tcp_pcb *next = pcb->next;
	ld.a	a13,[a15]12
.L1075:
	jne	d15,d0,.L361
.L1076:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2316        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
	st.a	[a10],a15
	movh.a	a4,#@his(.104.str)
	lea	a4,[a4]@los(.104.str)
	call	Ifx_Lwip_printf
.L2176:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2317        tcp_abort(pcb);
	mov.aa	a4,a15
.L1490:
	call	tcp_abort
.L361:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2318        pcb = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2319      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2320        pcb = pcb->next;
	mov.aa	a15,a13
.L359:
	jnz.a	a15,.L360
.L2177:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2321      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2322    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2323  }
	ret
.L1069:
	
__tcp_netif_ip_addr_changed_pcblist_function_end:
	.size	tcp_netif_ip_addr_changed_pcblist,__tcp_netif_ip_addr_changed_pcblist_function_end-tcp_netif_ip_addr_changed_pcblist
.L765:
	; End of function
	
	.sdecl	'.text.tcp.tcp_netif_ip_addr_changed',code,cluster('tcp_netif_ip_addr_changed')
	.sect	'.text.tcp.tcp_netif_ip_addr_changed'
	.align	2
	
	.global	tcp_netif_ip_addr_changed

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2324  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2325  /** This function is called from netif.c when address is changed or netif is removed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2326   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2327   * @param old_addr IP address of the netif before change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2328   * @param new_addr IP address of the netif after change or NULL if netif has been removed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2329   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2330  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2331  tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
; Function tcp_netif_ip_addr_changed
.L495:
tcp_netif_ip_addr_changed:	.type	func
	mov.aa	a12,a4
.L1493:
	mov.aa	a13,a5
.L1494:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2332  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2333    struct tcp_pcb_listen *lpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2334  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2335    if (!ip_addr_isany(old_addr)) {
	jz.a	a12,.L362
.L2035:
	ld.w	d15,[a12]
	jeq	d15,#0,.L363
.L2036:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2336      tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
	ld.a	a5,tcp_active_pcbs
.L1491:
	call	tcp_netif_ip_addr_changed_pcblist
.L1492:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2337      tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
	ld.a	a5,tcp_bound_pcbs
	mov.aa	a4,a12
.L1495:
	call	tcp_netif_ip_addr_changed_pcblist
.L1496:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2338  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2339      if (!ip_addr_isany(new_addr)) {
	jz.a	a13,.L364
.L2037:
	ld.w	d15,[a13]
	jeq	d15,#0,.L365
.L2038:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2340        /* PCB bound to current local interface address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2341        for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
	ld.a	a15,tcp_listen_pcbs
.L1497:
	j	.L366
.L367:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2342          /* PCB bound to current local interface address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2343          if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
	ld.w	d15,[a15]
	ld.w	d0,[a12]
.L2039:
	jne	d15,d0,.L368
.L2040:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2344            /* The PCB is listening to the old ipaddr and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2345              * is set to listen to the new one instead */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2346            ip_addr_copy(lpcb->local_ip, *new_addr);
	ld.w	d15,[a13]
	st.w	[a15],d15
.L368:
	ld.a	a15,[a15]12
.L366:
	jnz.a	a15,.L367
.L365:
.L364:
.L363:
.L362:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2347          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2348        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2349      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2350    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2351  }
	ret
.L1018:
	
__tcp_netif_ip_addr_changed_function_end:
	.size	tcp_netif_ip_addr_changed,__tcp_netif_ip_addr_changed_function_end-tcp_netif_ip_addr_changed
.L700:
	; End of function
	
	.sdecl	'.text.tcp.tcp_debug_state_str',code,cluster('tcp_debug_state_str')
	.sect	'.text.tcp.tcp_debug_state_str'
	.align	2
	
	.global	tcp_debug_state_str

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2352  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2353  const char *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2354  tcp_debug_state_str(enum tcp_state s)
; Function tcp_debug_state_str
.L497:
tcp_debug_state_str:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2355  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2356    return tcp_state_str[s];
	movh.a	a15,#@his(tcp_state_str)
	lea	a15,[a15]@los(tcp_state_str)
.L1508:
	addsc.a	a15,a15,d4,#2
	ld.a	a2,[a15]
.L1509:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2357  }
	ret
.L838:
	
__tcp_debug_state_str_function_end:
	.size	tcp_debug_state_str,__tcp_debug_state_str_function_end-tcp_debug_state_str
.L510:
	; End of function
	
	.sdecl	'.text.tcp.tcp_tcp_get_tcp_addrinfo',code,cluster('tcp_tcp_get_tcp_addrinfo')
	.sect	'.text.tcp.tcp_tcp_get_tcp_addrinfo'
	.align	2
	
	.global	tcp_tcp_get_tcp_addrinfo

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2358  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2359  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2360  tcp_tcp_get_tcp_addrinfo(struct tcp_pcb *pcb, int local, ip_addr_t *addr, u16_t *port)
; Function tcp_tcp_get_tcp_addrinfo
.L499:
tcp_tcp_get_tcp_addrinfo:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2361  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2362    if (pcb) {
	jz.a	a4,.L370
.L1682:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2363      if (local) {
	jeq	d4,#0,.L371
.L1683:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2364        if (addr) {
	jz.a	a5,.L372
.L1684:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2365          *addr = pcb->local_ip;
	ld.w	d15,[a4]
.L1685:
	st.w	[a5],d15
.L372:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2366        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2367        if (port) {
	jz.a	a6,.L373
.L1686:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2368          *port = pcb->local_port;
	ld.hu	d15,[a4]22
.L1687:
	j	.L374
.L371:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2369        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2370      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2371        if (addr) {
	jz.a	a5,.L375
.L1688:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2372          *addr = pcb->remote_ip;
	ld.w	d15,[a4]4
.L1689:
	st.w	[a5],d15
.L375:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2373        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2374        if (port) {
	jz.a	a6,.L376
.L1690:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2375          *port = pcb->remote_port;
	ld.hu	d15,[a4]24
.L374:
	st.h	[a6],d15
.L376:
.L373:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2376        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2377      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2378      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2379    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2380    return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2381  }
	mov	d2,#0
	ret
.L370:
	mov	d2,#-6
	ret
.L927:
	
__tcp_tcp_get_tcp_addrinfo_function_end:
	.size	tcp_tcp_get_tcp_addrinfo,__tcp_tcp_get_tcp_addrinfo_function_end-tcp_tcp_get_tcp_addrinfo
.L605:
	; End of function
	
	.sdecl	'.text.tcp.tcp_free_ooseq',code,cluster('tcp_free_ooseq')
	.sect	'.text.tcp.tcp_free_ooseq'
	.align	2
	
	.global	tcp_free_ooseq

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2383  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2384  /* Free all ooseq pbufs (and possibly reset SACK state) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2385  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2386  tcp_free_ooseq(struct tcp_pcb *pcb)
; Function tcp_free_ooseq
.L501:
tcp_free_ooseq:	.type	func
	mov.aa	a15,a4
.L1499:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2387  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2388    if (pcb->ooseq) {
	ld.a	a4,[a15]116
.L1498:
	jz.a	a4,.L379
.L2045:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2389      tcp_segs_free(pcb->ooseq);
	call	tcp_segs_free
.L2046:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2390      pcb->ooseq = NULL;
	mov.a	a2,#0
.L2047:
	st.a	[a15]116,a2
.L379:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2391  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2392      memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2393  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2394    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2395  }
	ret
.L1022:
	
__tcp_free_ooseq_function_end:
	.size	tcp_free_ooseq,__tcp_free_ooseq_function_end-tcp_free_ooseq
.L705:
	; End of function
	
	.sdecl	'.zrodata.tcp..1.str',data,rom
	.sect	'.zrodata.tcp..1.str'
.1.str:	.type	object
	.size	.1.str,7
	.byte	67,76,79,83
	.byte	69,68
	.space	1
	.sdecl	'.zrodata.tcp..2.str',data,rom
	.sect	'.zrodata.tcp..2.str'
.2.str:	.type	object
	.size	.2.str,7
	.byte	76,73,83,84
	.byte	69,78
	.space	1
	.sdecl	'.rodata.tcp..3.str',data,rom
	.sect	'.rodata.tcp..3.str'
.3.str:	.type	object
	.size	.3.str,9
	.byte	83,89,78,95
	.byte	83,69,78,84
	.space	1
	.sdecl	'.rodata.tcp..4.str',data,rom
	.sect	'.rodata.tcp..4.str'
.4.str:	.type	object
	.size	.4.str,9
	.byte	83,89,78,95
	.byte	82,67,86,68
	.space	1
	.sdecl	'.rodata.tcp..5.str',data,rom
	.sect	'.rodata.tcp..5.str'
.5.str:	.type	object
	.size	.5.str,12
	.byte	69,83,84,65
	.byte	66,76,73,83
	.byte	72,69,68
	.space	1
	.sdecl	'.rodata.tcp..6.str',data,rom
	.sect	'.rodata.tcp..6.str'
.6.str:	.type	object
	.size	.6.str,11
	.byte	70,73,78,95
	.byte	87,65,73,84
	.byte	95,49
	.space	1
	.sdecl	'.rodata.tcp..7.str',data,rom
	.sect	'.rodata.tcp..7.str'
.7.str:	.type	object
	.size	.7.str,11
	.byte	70,73,78,95
	.byte	87,65,73,84
	.byte	95,50
	.space	1
	.sdecl	'.rodata.tcp..8.str',data,rom
	.sect	'.rodata.tcp..8.str'
.8.str:	.type	object
	.size	.8.str,11
	.byte	67,76,79,83
	.byte	69,95,87,65
	.byte	73,84
	.space	1
	.sdecl	'.zrodata.tcp..9.str',data,rom
	.sect	'.zrodata.tcp..9.str'
.9.str:	.type	object
	.size	.9.str,8
	.byte	67,76,79,83
	.byte	73,78,71
	.space	1
	.sdecl	'.rodata.tcp..10.str',data,rom
	.sect	'.rodata.tcp..10.str'
.10.str:	.type	object
	.size	.10.str,9
	.byte	76,65,83,84
	.byte	95,65,67,75
	.space	1
	.sdecl	'.rodata.tcp..11.str',data,rom
	.sect	'.rodata.tcp..11.str'
.11.str:	.type	object
	.size	.11.str,10
	.byte	84,73,77,69
	.byte	95,87,65,73
	.byte	84
	.space	1
	.sdecl	'.rodata.tcp.tcp_state_str',data,rom,cluster('tcp_state_str')
	.sect	'.rodata.tcp.tcp_state_str'
	.align	4
tcp_state_str:	.type	object
	.size	tcp_state_str,44
	.word	.1.str,.2.str,.3.str,.4.str
	.word	.5.str,.6.str,.7.str,.8.str
	.word	.9.str,.10.str,.11.str
	.sdecl	'.zdata.tcp.tcp_port',data,cluster('tcp_port')
	.sect	'.zdata.tcp.tcp_port'
	.align	2
tcp_port:	.type	object
	.size	tcp_port,2
	.half	49152
	.sdecl	'.zbss.tcp.tcp_ticks',data,cluster('tcp_ticks')
	.sect	'.zbss.tcp.tcp_ticks'
	.global	tcp_ticks
	.align	2
tcp_ticks:	.type	object
	.size	tcp_ticks,4
	.space	4
	.sdecl	'.rodata.tcp.tcp_backoff',data,rom,cluster('tcp_backoff')
	.sect	'.rodata.tcp.tcp_backoff'
tcp_backoff:	.type	object
	.size	tcp_backoff,13
	.byte	1,2,3,4
	.byte	5,6,7,7
	.byte	7,7,7,7
	.byte	7
	.sdecl	'.zrodata.tcp.tcp_persist_backoff',data,rom,cluster('tcp_persist_backoff')
	.sect	'.zrodata.tcp.tcp_persist_backoff'
tcp_persist_backoff:	.type	object
	.size	tcp_persist_backoff,7
	.byte	3,6,12,24
	.byte	48,96,120
	.sdecl	'.zbss.tcp.tcp_bound_pcbs',data,cluster('tcp_bound_pcbs')
	.sect	'.zbss.tcp.tcp_bound_pcbs'
	.global	tcp_bound_pcbs
	.align	4
tcp_bound_pcbs:	.type	object
	.size	tcp_bound_pcbs,4
	.space	4
	.sdecl	'.zbss.tcp.tcp_listen_pcbs',data,cluster('tcp_listen_pcbs')
	.sect	'.zbss.tcp.tcp_listen_pcbs'
	.global	tcp_listen_pcbs
	.align	4
tcp_listen_pcbs:	.type	object
	.size	tcp_listen_pcbs,4
	.space	4
	.sdecl	'.zbss.tcp.tcp_active_pcbs',data,cluster('tcp_active_pcbs')
	.sect	'.zbss.tcp.tcp_active_pcbs'
	.global	tcp_active_pcbs
	.align	4
tcp_active_pcbs:	.type	object
	.size	tcp_active_pcbs,4
	.space	4
	.sdecl	'.zbss.tcp.tcp_tw_pcbs',data,cluster('tcp_tw_pcbs')
	.sect	'.zbss.tcp.tcp_tw_pcbs'
	.global	tcp_tw_pcbs
	.align	4
tcp_tw_pcbs:	.type	object
	.size	tcp_tw_pcbs,4
	.space	4
	.sdecl	'.rodata.tcp.tcp_pcb_lists',data,rom,cluster('tcp_pcb_lists')
	.sect	'.rodata.tcp.tcp_pcb_lists'
	.global	tcp_pcb_lists
	.align	4
tcp_pcb_lists:	.type	object
	.size	tcp_pcb_lists,16
	.word	tcp_listen_pcbs,tcp_bound_pcbs,tcp_active_pcbs,tcp_tw_pcbs
	.sdecl	'.zbss.tcp.tcp_active_pcbs_changed',data,cluster('tcp_active_pcbs_changed')
	.sect	'.zbss.tcp.tcp_active_pcbs_changed'
	.global	tcp_active_pcbs_changed
tcp_active_pcbs_changed:	.type	object
	.size	tcp_active_pcbs_changed,1
	.space	1
	.sdecl	'.zbss.tcp.tcp_timer',data,cluster('tcp_timer')
	.sect	'.zbss.tcp.tcp_timer'
tcp_timer:	.type	object
	.size	tcp_timer,1
	.space	1
	.sdecl	'.zbss.tcp.tcp_timer_ctr',data,cluster('tcp_timer_ctr')
	.sect	'.zbss.tcp.tcp_timer_ctr'
tcp_timer_ctr:	.type	object
	.size	tcp_timer_ctr,1
	.space	1
	.sdecl	'.rodata.tcp..12.str',data,rom
	.sect	'.rodata.tcp..12.str'
.12.str:	.type	object
	.size	.12.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.tcp..13.str',data,rom
	.sect	'.rodata.tcp..13.str'
.13.str:	.type	object
	.size	.13.str,17
	.byte	116,99,112,95
	.byte	102,114,101,101
	.byte	58,32,76,73
	.byte	83,84,69,78
	.space	1
	.sdecl	'.rodata.tcp..14.str',data,rom
	.sect	'.rodata.tcp..14.str'
.14.str:	.type	object
	.size	.14.str,46
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	116,99,112,46
	.byte	99
	.space	1
	.sdecl	'.rodata.tcp..15.str',data,rom
	.sect	'.rodata.tcp..15.str'
.15.str:	.type	object
	.size	.15.str,25
	.byte	116,99,112,95
	.byte	102,114,101,101
	.byte	95,108,105,115
	.byte	116,101,110,58
	.byte	32,33,76,73
	.byte	83,84,69,78
	.space	1
	.sdecl	'.rodata.tcp..18.str',data,rom
	.sect	'.rodata.tcp..18.str'
.18.str:	.type	object
	.size	.18.str,21
	.byte	112,99,98,45
	.byte	62,115,116,97
	.byte	116,101,32,61
	.byte	61,32,76,73
	.byte	83,84,69,78
	.space	1
	.sdecl	'.rodata.tcp..20.str',data,rom
	.sect	'.rodata.tcp..20.str'
.20.str:	.type	object
	.size	.20.str,25
	.byte	112,99,98,45
	.byte	62,102,108,97
	.byte	103,115,32,38
	.byte	32,84,70,95
	.byte	82,88,67,76
	.byte	79,83,69,68
	.space	1
	.sdecl	'.rodata.tcp..21.str',data,rom
	.sect	'.rodata.tcp..21.str'
.21.str:	.type	object
	.size	.21.str,23
	.byte	116,99,112,95
	.byte	99,108,111,115
	.byte	101,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.tcp..23.str',data,rom
	.sect	'.rodata.tcp..23.str'
.23.str:	.type	object
	.size	.23.str,26
	.byte	116,99,112,95
	.byte	115,104,117,116
	.byte	100,111,119,110
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.tcp..24.str',data,rom
	.sect	'.rodata.tcp..24.str'
.24.str:	.type	object
	.size	.24.str,25
	.byte	116,99,112,95
	.byte	97,98,97,110
	.byte	100,111,110,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,99,98
	.space	1
	.sdecl	'.rodata.tcp..25.str',data,rom
	.sect	'.rodata.tcp..25.str'
.25.str:	.type	object
	.size	.25.str,49
	.byte	100,111,110,39
	.byte	116,32,99,97
	.byte	108,108,32,116
	.byte	99,112,95,97
	.byte	98,111,114,116
	.byte	47,116,99,112
	.byte	95,97,98,97
	.byte	110,100,111,110
	.byte	32,102,111,114
	.byte	32,108,105,115
	.byte	116,101,110,45
	.byte	112,99,98,115
	.space	1
	.sdecl	'.rodata.tcp..27.str',data,rom
	.sect	'.rodata.tcp..27.str'
.27.str:	.type	object
	.size	.27.str,22
	.byte	116,99,112,95
	.byte	98,105,110,100
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.tcp..28.str',data,rom
	.sect	'.rodata.tcp..28.str'
.28.str:	.type	object
	.size	.28.str,40
	.byte	116,99,112,95
	.byte	98,105,110,100
	.byte	58,32,99,97
	.byte	110,32,111,110
	.byte	108,121,32,98
	.byte	105,110,100,32
	.byte	105,110,32,115
	.byte	116,97,116,101
	.byte	32,67,76,79
	.byte	83,69,68
	.space	1
	.sdecl	'.rodata.tcp..30.str',data,rom
	.sect	'.rodata.tcp..30.str'
.30.str:	.type	object
	.size	.30.str,29
	.byte	116,99,112,95
	.byte	97,99,99,101
	.byte	112,116,95,110
	.byte	117,108,108,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,99,98
	.space	1
	.sdecl	'.rodata.tcp..31.str',data,rom
	.sect	'.rodata.tcp..31.str'
.31.str:	.type	object
	.size	.31.str,45
	.byte	116,99,112,95
	.byte	108,105,115,116
	.byte	101,110,95,119
	.byte	105,116,104,95
	.byte	98,97,99,107
	.byte	108,111,103,95
	.byte	97,110,100,95
	.byte	101,114,114,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,99,98
	.space	1
	.sdecl	'.rodata.tcp..32.str',data,rom
	.sect	'.rodata.tcp..32.str'
.32.str:	.type	object
	.size	.32.str,55
	.byte	116,99,112,95
	.byte	108,105,115,116
	.byte	101,110,95,119
	.byte	105,116,104,95
	.byte	98,97,99,107
	.byte	108,111,103,95
	.byte	97,110,100,95
	.byte	101,114,114,58
	.byte	32,112,99,98
	.byte	32,97,108,114
	.byte	101,97,100,121
	.byte	32,99,111,110
	.byte	110,101,99,116
	.byte	101,100
	.space	1
	.sdecl	'.rodata.tcp..33.str',data,rom
	.sect	'.rodata.tcp..33.str'
.33.str:	.type	object
	.size	.33.str,36
	.byte	116,99,112,95
	.byte	117,112,100,97
	.byte	116,101,95,114
	.byte	99,118,95,97
	.byte	110,110,95,119
	.byte	110,100,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp..34.str',data,rom
	.sect	'.rodata.tcp..34.str'
.34.str:	.type	object
	.size	.34.str,26
	.byte	110,101,119,95
	.byte	114,99,118,95
	.byte	97,110,110,95
	.byte	119,110,100,32
	.byte	60,61,32,48
	.byte	120,102,102,102
	.byte	102
	.space	1
	.sdecl	'.rodata.tcp..35.str',data,rom
	.sect	'.rodata.tcp..35.str'
.35.str:	.type	object
	.size	.35.str,24
	.byte	116,99,112,95
	.byte	114,101,99,118
	.byte	101,100,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp..36.str',data,rom
	.sect	'.rodata.tcp..36.str'
.36.str:	.type	object
	.size	.36.str,38
	.byte	100,111,110,39
	.byte	116,32,99,97
	.byte	108,108,32,116
	.byte	99,112,95,114
	.byte	101,99,118,101
	.byte	100,32,102,111
	.byte	114,32,108,105
	.byte	115,116,101,110
	.byte	45,112,99,98
	.byte	115
	.space	1
	.sdecl	'.rodata.tcp..39.str',data,rom
	.sect	'.rodata.tcp..39.str'
.39.str:	.type	object
	.size	.39.str,25
	.byte	116,99,112,95
	.byte	99,111,110,110
	.byte	101,99,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,99,98
	.space	1
	.sdecl	'.rodata.tcp..40.str',data,rom
	.sect	'.rodata.tcp..40.str'
.40.str:	.type	object
	.size	.40.str,28
	.byte	116,99,112,95
	.byte	99,111,110,110
	.byte	101,99,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,105,112,97
	.byte	100,100,114
	.space	1
	.sdecl	'.rodata.tcp..41.str',data,rom
	.sect	'.rodata.tcp..41.str'
.41.str:	.type	object
	.size	.41.str,48
	.byte	116,99,112,95
	.byte	99,111,110,110
	.byte	101,99,116,58
	.byte	32,99,97,110
	.byte	32,111,110,108
	.byte	121,32,99,111
	.byte	110,110,101,99
	.byte	116,32,102,114
	.byte	111,109,32,115
	.byte	116,97,116,101
	.byte	32,67,76,79
	.byte	83,69,68
	.space	1
	.sdecl	'.rodata.tcp..45.str',data,rom
	.sect	'.rodata.tcp..45.str'
.45.str:	.type	object
	.size	.45.str,42
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,97,99,116
	.byte	105,118,101,32
	.byte	112,99,98,45
	.byte	62,115,116,97
	.byte	116,101,32,33
	.byte	61,32,67,76
	.byte	79,83,69,68
	.byte	10
	.space	1
	.sdecl	'.rodata.tcp..46.str',data,rom
	.sect	'.rodata.tcp..46.str'
.46.str:	.type	object
	.size	.46.str,42
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,97,99,116
	.byte	105,118,101,32
	.byte	112,99,98,45
	.byte	62,115,116,97
	.byte	116,101,32,33
	.byte	61,32,76,73
	.byte	83,84,69,78
	.byte	10
	.space	1
	.sdecl	'.rodata.tcp..47.str',data,rom
	.sect	'.rodata.tcp..47.str'
.47.str:	.type	object
	.size	.47.str,45
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,97,99,116
	.byte	105,118,101,32
	.byte	112,99,98,45
	.byte	62,115,116,97
	.byte	116,101,32,33
	.byte	61,32,84,73
	.byte	77,69,45,87
	.byte	65,73,84,10
	.space	1
	.sdecl	'.rodata.tcp..50.str',data,rom
	.sect	'.rodata.tcp..50.str'
.50.str:	.type	object
	.size	.50.str,50
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,105,109,114
	.byte	58,32,112,101
	.byte	114,115,105,115
	.byte	116,32,116,105
	.byte	99,107,105,110
	.byte	103,32,119,105
	.byte	116,104,32,105
	.byte	110,45,102,108
	.byte	105,103,104,116
	.byte	32,100,97,116
	.byte	97
	.space	1
	.sdecl	'.rodata.tcp..51.str',data,rom
	.sect	'.rodata.tcp..51.str'
.51.str:	.type	object
	.size	.51.str,53
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,105,109,114
	.byte	58,32,112,101
	.byte	114,115,105,115
	.byte	116,32,116,105
	.byte	99,107,105,110
	.byte	103,32,119,105
	.byte	116,104,32,101
	.byte	109,112,116,121
	.byte	32,115,101,110
	.byte	100,32,98,117
	.byte	102,102,101,114
	.space	1
	.sdecl	'.rodata.tcp..61.str',data,rom
	.sect	'.rodata.tcp..61.str'
.61.str:	.type	object
	.size	.61.str,43
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,109,105,100
	.byte	100,108,101,32
	.byte	116,99,112,32
	.byte	33,61,32,116
	.byte	99,112,95,97
	.byte	99,116,105,118
	.byte	101,95,112,99
	.byte	98,115
	.space	1
	.sdecl	'.rodata.tcp..62.str',data,rom
	.sect	'.rodata.tcp..62.str'
.62.str:	.type	object
	.size	.62.str,42
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,102,105,114
	.byte	115,116,32,112
	.byte	99,98,32,61
	.byte	61,32,116,99
	.byte	112,95,97,99
	.byte	116,105,118,101
	.byte	95,112,99,98
	.byte	115
	.space	1
	.sdecl	'.rodata.tcp..64.str',data,rom
	.sect	'.rodata.tcp..64.str'
.64.str:	.type	object
	.size	.64.str,47
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,84,73,77
	.byte	69,45,87,65
	.byte	73,84,32,112
	.byte	99,98,45,62
	.byte	115,116,97,116
	.byte	101,32,61,61
	.byte	32,84,73,77
	.byte	69,45,87,65
	.byte	73,84
	.space	1
	.sdecl	'.rodata.tcp..65.str',data,rom
	.sect	'.rodata.tcp..65.str'
.65.str:	.type	object
	.size	.65.str,39
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,109,105,100
	.byte	100,108,101,32
	.byte	116,99,112,32
	.byte	33,61,32,116
	.byte	99,112,95,116
	.byte	119,95,112,99
	.byte	98,115
	.space	1
	.sdecl	'.rodata.tcp..66.str',data,rom
	.sect	'.rodata.tcp..66.str'
.66.str:	.type	object
	.size	.66.str,38
	.byte	116,99,112,95
	.byte	115,108,111,119
	.byte	116,109,114,58
	.byte	32,102,105,114
	.byte	115,116,32,112
	.byte	99,98,32,61
	.byte	61,32,116,99
	.byte	112,95,116,119
	.byte	95,112,99,98
	.byte	115
	.space	1
	.sdecl	'.rodata.tcp..69.str',data,rom
	.sect	'.rodata.tcp..69.str'
.69.str:	.type	object
	.size	.69.str,38
	.byte	116,99,112,95
	.byte	112,114,111,99
	.byte	101,115,115,95
	.byte	114,101,102,117
	.byte	115,101,100,95
	.byte	100,97,116,97
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.tcp..72.str',data,rom
	.sect	'.rodata.tcp..72.str'
.72.str:	.type	object
	.size	.72.str,25
	.byte	116,99,112,95
	.byte	115,101,116,112
	.byte	114,105,111,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,99,98
	.space	1
	.sdecl	'.rodata.tcp..73.str',data,rom
	.sect	'.rodata.tcp..73.str'
.73.str:	.type	object
	.size	.73.str,26
	.byte	116,99,112,95
	.byte	115,101,103,95
	.byte	99,111,112,121
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,115,101
	.byte	103
	.space	1
	.sdecl	'.rodata.tcp..74.str',data,rom
	.sect	'.rodata.tcp..74.str'
.74.str:	.type	object
	.size	.74.str,27
	.byte	116,99,112,95
	.byte	114,101,99,118
	.byte	95,110,117,108
	.byte	108,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.tcp..84.str',data,rom
	.sect	'.rodata.tcp..84.str'
.84.str:	.type	object
	.size	.84.str,39
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	115,111,99,107
	.byte	101,116,32,115
	.byte	116,97,116,101
	.byte	32,102,111,114
	.byte	32,114,101,99
	.byte	118,32,99,97
	.byte	108,108,98,97
	.byte	99,107
	.space	1
	.sdecl	'.rodata.tcp..85.str',data,rom
	.sect	'.rodata.tcp..85.str'
.85.str:	.type	object
	.size	.85.str,39
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	115,111,99,107
	.byte	101,116,32,115
	.byte	116,97,116,101
	.byte	32,102,111,114
	.byte	32,115,101,110
	.byte	116,32,99,97
	.byte	108,108,98,97
	.byte	99,107
	.space	1
	.sdecl	'.rodata.tcp..86.str',data,rom
	.sect	'.rodata.tcp..86.str'
.86.str:	.type	object
	.size	.86.str,38
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	115,111,99,107
	.byte	101,116,32,115
	.byte	116,97,116,101
	.byte	32,102,111,114
	.byte	32,101,114,114
	.byte	32,99,97,108
	.byte	108,98,97,99
	.byte	107
	.space	1
	.sdecl	'.rodata.tcp..87.str',data,rom
	.sect	'.rodata.tcp..87.str'
.87.str:	.type	object
	.size	.87.str,22
	.byte	116,99,112,95
	.byte	112,111,108,108
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.tcp..88.str',data,rom
	.sect	'.rodata.tcp..88.str'
.88.str:	.type	object
	.size	.88.str,30
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	115,111,99,107
	.byte	101,116,32,115
	.byte	116,97,116,101
	.byte	32,102,111,114
	.byte	32,112,111,108
	.byte	108
	.space	1
	.sdecl	'.rodata.tcp..89.str',data,rom
	.sect	'.rodata.tcp..89.str'
.89.str:	.type	object
	.size	.89.str,27
	.byte	116,99,112,95
	.byte	112,99,98,95
	.byte	112,117,114,103
	.byte	101,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.tcp..95.str',data,rom
	.sect	'.rodata.tcp..95.str'
.95.str:	.type	object
	.size	.95.str,28
	.byte	116,99,112,95
	.byte	112,99,98,95
	.byte	114,101,109,111
	.byte	118,101,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp..96.str',data,rom
	.sect	'.rodata.tcp..96.str'
.96.str:	.type	object
	.size	.96.str,32
	.byte	116,99,112,95
	.byte	112,99,98,95
	.byte	114,101,109,111
	.byte	118,101,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98,108
	.byte	105,115,116
	.space	1
	.sdecl	'.rodata.tcp..97.str',data,rom
	.sect	'.rodata.tcp..97.str'
.97.str:	.type	object
	.size	.97.str,24
	.byte	117,110,115,101
	.byte	110,116,32,115
	.byte	101,103,109,101
	.byte	110,116,115,32
	.byte	108,101,97,107
	.byte	105,110,103
	.space	1
	.sdecl	'.rodata.tcp..98.str',data,rom
	.sect	'.rodata.tcp..98.str'
.98.str:	.type	object
	.size	.98.str,25
	.byte	117,110,97,99
	.byte	107,101,100,32
	.byte	115,101,103,109
	.byte	101,110,116,115
	.byte	32,108,101,97
	.byte	107,105,110,103
	.space	1
	.sdecl	'.rodata.tcp..99.str',data,rom
	.sect	'.rodata.tcp..99.str'
.99.str:	.type	object
	.size	.99.str,23
	.byte	111,111,115,101
	.byte	113,32,115,101
	.byte	103,109,101,110
	.byte	116,115,32,108
	.byte	101,97,107,105
	.byte	110,103
	.space	1
	.sdecl	'.zdata.tcp._999001_iss',data,cluster('_999001_iss')
	.sect	'.zdata.tcp._999001_iss'
	.align	2
_999001_iss:	.type	object
	.size	_999001_iss,4
	.word	6510
	.sdecl	'.rodata.tcp..101.str',data,rom
	.sect	'.rodata.tcp..101.str'
.101.str:	.type	object
	.size	.101.str,26
	.byte	116,99,112,95
	.byte	110,101,120,116
	.byte	95,105,115,115
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.tcp..102.str',data,rom
	.sect	'.rodata.tcp..102.str'
.102.str:	.type	object
	.size	.102.str,39
	.byte	116,99,112,95
	.byte	101,102,102,95
	.byte	115,101,110,100
	.byte	95,109,115,115
	.byte	95,110,101,116
	.byte	105,102,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	100,115,116,95
	.byte	105,112
	.space	1
	.sdecl	'.rodata.tcp..104.str',data,rom
	.sect	'.rodata.tcp..104.str'
.104.str:	.type	object
	.size	.104.str,39
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,105,112
	.byte	97,100,100,114
	.byte	58,32,97,98
	.byte	111,114,116,105
	.byte	110,103,32,84
	.byte	67,80,32,112
	.byte	99,98,32,37
	.byte	112,10
	.space	1
	.calls	'__INDIRECT__','tcp_recv_null'
	.calls	'__INDIRECT__','tcp_accept_null'
	.calls	'tcp_free','Ifx_Lwip_printf'
	.calls	'tcp_free','memp_free'
	.calls	'tcp_free_listen','Ifx_Lwip_printf'
	.calls	'tcp_free_listen','memp_free'
	.calls	'tcp_tmr','tcp_fasttmr'
	.calls	'tcp_tmr','tcp_slowtmr'
	.calls	'tcp_listen_closed','Ifx_Lwip_printf'
	.calls	'tcp_listen_closed','tcp_remove_listener'
	.calls	'tcp_close_shutdown','Ifx_Lwip_printf'
	.calls	'tcp_close_shutdown','tcp_rst'
	.calls	'tcp_close_shutdown','tcp_pcb_purge'
	.calls	'tcp_close_shutdown','tcp_trigger_input_pcb_close'
	.calls	'tcp_close_shutdown','tcp_listen_closed'
	.calls	'tcp_close_shutdown','tcp_pcb_remove'
	.calls	'tcp_close_shutdown','tcp_free_listen'
	.calls	'tcp_close_shutdown','tcp_free'
	.calls	'tcp_close_shutdown','tcp_close_shutdown_fin'
	.calls	'tcp_close_shutdown_fin','tcp_send_fin'
	.calls	'tcp_close_shutdown_fin','tcp_output'
	.calls	'tcp_close','Ifx_Lwip_printf'
	.calls	'tcp_close','tcp_close_shutdown'
	.calls	'tcp_shutdown','Ifx_Lwip_printf'
	.calls	'tcp_shutdown','tcp_close_shutdown'
	.calls	'tcp_shutdown','pbuf_free'
	.calls	'tcp_abandon','Ifx_Lwip_printf'
	.calls	'tcp_abandon','tcp_pcb_remove'
	.calls	'tcp_abandon','tcp_free'
	.calls	'tcp_abandon','tcp_segs_free'
	.calls	'tcp_abandon','tcp_rst'
	.calls	'tcp_abandon','__INDIRECT__'
	.calls	'tcp_abort','tcp_abandon'
	.calls	'tcp_bind','Ifx_Lwip_printf'
	.calls	'tcp_bind','tcp_new_port'
	.calls	'tcp_bind','tcp_timer_needed'
	.calls	'tcp_accept_null','Ifx_Lwip_printf'
	.calls	'tcp_accept_null','tcp_abort'
	.calls	'tcp_listen_with_backlog','tcp_listen_with_backlog_and_err'
	.calls	'tcp_listen_with_backlog_and_err','Ifx_Lwip_printf'
	.calls	'tcp_listen_with_backlog_and_err','memp_malloc'
	.calls	'tcp_listen_with_backlog_and_err','tcp_free'
	.calls	'tcp_listen_with_backlog_and_err','tcp_timer_needed'
	.calls	'tcp_update_rcv_ann_wnd','Ifx_Lwip_printf'
	.calls	'tcp_recved','Ifx_Lwip_printf'
	.calls	'tcp_recved','tcp_update_rcv_ann_wnd'
	.calls	'tcp_recved','tcp_output'
	.calls	'tcp_connect','Ifx_Lwip_printf'
	.calls	'tcp_connect','netif_get_by_index'
	.calls	'tcp_connect','ip4_route'
	.calls	'tcp_connect','tcp_new_port'
	.calls	'tcp_connect','tcp_next_iss'
	.calls	'tcp_connect','tcp_eff_send_mss_netif'
	.calls	'tcp_connect','tcp_enqueue_flags'
	.calls	'tcp_connect','tcp_timer_needed'
	.calls	'tcp_connect','tcp_output'
	.calls	'tcp_slowtmr','Ifx_Lwip_printf'
	.calls	'tcp_slowtmr','tcp_zero_window_probe'
	.calls	'tcp_slowtmr','tcp_split_unsent_seg'
	.calls	'tcp_slowtmr','tcp_output'
	.calls	'tcp_slowtmr','tcp_rexmit_rto_prepare'
	.calls	'tcp_slowtmr','tcp_rexmit_rto_commit'
	.calls	'tcp_slowtmr','tcp_keepalive'
	.calls	'tcp_slowtmr','tcp_free_ooseq'
	.calls	'tcp_slowtmr','tcp_pcb_purge'
	.calls	'tcp_slowtmr','tcp_rst'
	.calls	'tcp_slowtmr','tcp_free'
	.calls	'tcp_slowtmr','__INDIRECT__'
	.calls	'tcp_fasttmr','tcp_output'
	.calls	'tcp_fasttmr','tcp_close_shutdown_fin'
	.calls	'tcp_fasttmr','tcp_process_refused_data'
	.calls	'tcp_txnow','tcp_output'
	.calls	'tcp_process_refused_data','Ifx_Lwip_printf'
	.calls	'tcp_process_refused_data','__INDIRECT__'
	.calls	'tcp_process_refused_data','tcp_recv_null'
	.calls	'tcp_segs_free','tcp_seg_free'
	.calls	'tcp_seg_free','pbuf_free'
	.calls	'tcp_seg_free','memp_free'
	.calls	'tcp_setprio','Ifx_Lwip_printf'
	.calls	'tcp_seg_copy','Ifx_Lwip_printf'
	.calls	'tcp_seg_copy','memp_malloc'
	.calls	'tcp_seg_copy','memcpy'
	.calls	'tcp_seg_copy','pbuf_ref'
	.calls	'tcp_recv_null','Ifx_Lwip_printf'
	.calls	'tcp_recv_null','tcp_recved'
	.calls	'tcp_recv_null','pbuf_free'
	.calls	'tcp_recv_null','tcp_close'
	.calls	'tcp_kill_prio','tcp_abort'
	.calls	'tcp_kill_state','tcp_abandon'
	.calls	'tcp_kill_timewait','tcp_abort'
	.calls	'tcp_handle_closepend','tcp_close_shutdown_fin'
	.calls	'tcp_alloc','memp_malloc'
	.calls	'tcp_alloc','tcp_handle_closepend'
	.calls	'tcp_alloc','tcp_kill_timewait'
	.calls	'tcp_alloc','tcp_kill_state'
	.calls	'tcp_alloc','tcp_kill_prio'
	.calls	'tcp_alloc','memset'
	.calls	'tcp_new','tcp_alloc'
	.calls	'tcp_new_ip_type','tcp_alloc'
	.calls	'tcp_recv','Ifx_Lwip_printf'
	.calls	'tcp_sent','Ifx_Lwip_printf'
	.calls	'tcp_err','Ifx_Lwip_printf'
	.calls	'tcp_poll','Ifx_Lwip_printf'
	.calls	'tcp_pcb_purge','Ifx_Lwip_printf'
	.calls	'tcp_pcb_purge','pbuf_free'
	.calls	'tcp_pcb_purge','tcp_free_ooseq'
	.calls	'tcp_pcb_purge','tcp_segs_free'
	.calls	'tcp_pcb_remove','Ifx_Lwip_printf'
	.calls	'tcp_pcb_remove','tcp_pcb_purge'
	.calls	'tcp_pcb_remove','tcp_output'
	.calls	'tcp_next_iss','Ifx_Lwip_printf'
	.calls	'tcp_eff_send_mss_netif','Ifx_Lwip_printf'
	.calls	'tcp_netif_ip_addr_changed_pcblist','Ifx_Lwip_printf'
	.calls	'tcp_netif_ip_addr_changed_pcblist','tcp_abort'
	.calls	'tcp_netif_ip_addr_changed','tcp_netif_ip_addr_changed_pcblist'
	.calls	'tcp_free_ooseq','tcp_segs_free'
	.calls	'tcp_free','.cocofun_109'
	.calls	'tcp_free','.cocofun_108'
	.calls	'tcp_free_listen','.cocofun_109'
	.calls	'tcp_free_listen','.cocofun_108'
	.calls	'tcp_listen_closed','.cocofun_109'
	.calls	'tcp_listen_closed','.cocofun_108'
	.calls	'tcp_close_shutdown','.cocofun_109'
	.calls	'tcp_close_shutdown','.cocofun_108'
	.calls	'tcp_close','.cocofun_109'
	.calls	'tcp_close','.cocofun_108'
	.calls	'tcp_shutdown','.cocofun_109'
	.calls	'tcp_shutdown','.cocofun_108'
	.calls	'tcp_abandon','.cocofun_109'
	.calls	'tcp_abandon','.cocofun_108'
	.calls	'tcp_bind','.cocofun_109'
	.calls	'tcp_bind','.cocofun_108'
	.calls	'tcp_accept_null','.cocofun_109'
	.calls	'tcp_accept_null','.cocofun_108'
	.calls	'tcp_listen_with_backlog_and_err','.cocofun_110'
	.calls	'tcp_listen_with_backlog_and_err','.cocofun_109'
	.calls	'tcp_listen_with_backlog_and_err','.cocofun_108'
	.calls	'tcp_listen_with_backlog_and_err','.cocofun_112'
	.calls	'tcp_update_rcv_ann_wnd','.cocofun_110'
	.calls	'tcp_update_rcv_ann_wnd','.cocofun_108'
	.calls	'tcp_recved','.cocofun_109'
	.calls	'tcp_recved','.cocofun_108'
	.calls	'tcp_connect','.cocofun_109'
	.calls	'tcp_connect','.cocofun_108'
	.calls	'tcp_connect','.cocofun_112'
	.calls	'tcp_slowtmr','.cocofun_110'
	.calls	'tcp_slowtmr','.cocofun_108'
	.calls	'tcp_slowtmr','.cocofun_114'
	.calls	'tcp_slowtmr','.cocofun_116'
	.calls	'tcp_slowtmr','.cocofun_115'
	.calls	'.cocofun_115','.cocofun_116'
	.calls	'tcp_process_refused_data','.cocofun_109'
	.calls	'tcp_process_refused_data','.cocofun_108'
	.calls	'tcp_setprio','.cocofun_109'
	.calls	'tcp_setprio','.cocofun_108'
	.calls	'tcp_seg_copy','.cocofun_109'
	.calls	'tcp_seg_copy','.cocofun_108'
	.calls	'tcp_recv_null','.cocofun_109'
	.calls	'tcp_recv_null','.cocofun_108'
	.calls	'tcp_kill_state','.cocofun_113'
	.calls	'.cocofun_113','.cocofun_116'
	.calls	'tcp_kill_timewait','.cocofun_113'
	.calls	'tcp_alloc','.cocofun_111'
	.calls	'tcp_recv','.cocofun_109'
	.calls	'tcp_recv','.cocofun_108'
	.calls	'tcp_sent','.cocofun_109'
	.calls	'tcp_sent','.cocofun_108'
	.calls	'tcp_err','.cocofun_109'
	.calls	'tcp_err','.cocofun_108'
	.calls	'tcp_poll','.cocofun_109'
	.calls	'tcp_poll','.cocofun_108'
	.calls	'tcp_pcb_purge','.cocofun_109'
	.calls	'tcp_pcb_purge','.cocofun_108'
	.calls	'tcp_pcb_remove','.cocofun_109'
	.calls	'tcp_pcb_remove','.cocofun_108'
	.calls	'tcp_next_iss','.cocofun_109'
	.calls	'tcp_next_iss','.cocofun_108'
	.calls	'tcp_eff_send_mss_netif','.cocofun_109'
	.calls	'tcp_eff_send_mss_netif','.cocofun_108'
	.calls	'tcp_init','',0
	.calls	'tcp_free','',16
	.calls	'.cocofun_109','',0
	.calls	'tcp_free_listen','',16
	.calls	'tcp_tmr','',0
	.calls	'tcp_remove_listener','',0
	.calls	'tcp_listen_closed','',16
	.calls	'tcp_close_shutdown','',16
	.calls	'tcp_close_shutdown_fin','',0
	.calls	'tcp_close','',16
	.calls	'tcp_shutdown','',16
	.calls	'tcp_abandon','',16
	.calls	'tcp_abort','',0
	.calls	'tcp_bind','',16
	.calls	'tcp_bind_netif','',0
	.calls	'tcp_accept_null','',16
	.calls	'tcp_listen_with_backlog','',0
	.calls	'tcp_listen_with_backlog_and_err','',16
	.calls	'.cocofun_112','',0
	.calls	'tcp_update_rcv_ann_wnd','',16
	.calls	'tcp_recved','',16
	.calls	'tcp_new_port','',0
	.calls	'tcp_connect','',16
	.calls	'tcp_slowtmr','',16
	.calls	'.cocofun_116','',0
	.calls	'.cocofun_115','',0
	.calls	'.cocofun_114','',0
	.calls	'.cocofun_110','',0
	.calls	'.cocofun_108','',0
	.calls	'tcp_fasttmr','',0
	.calls	'tcp_txnow','',0
	.calls	'tcp_process_refused_data','',16
	.calls	'tcp_segs_free','',0
	.calls	'tcp_seg_free','',0
	.calls	'tcp_setprio','',16
	.calls	'tcp_seg_copy','',16
	.calls	'tcp_recv_null','',16
	.calls	'tcp_kill_prio','',0
	.calls	'tcp_kill_state','',0
	.calls	'.cocofun_113','',0
	.calls	'tcp_kill_timewait','',0
	.calls	'tcp_handle_closepend','',0
	.calls	'tcp_alloc','',0
	.calls	'.cocofun_111','',0
	.calls	'tcp_new','',0
	.calls	'tcp_new_ip_type','',0
	.calls	'tcp_arg','',0
	.calls	'tcp_recv','',16
	.calls	'tcp_sent','',16
	.calls	'tcp_err','',16
	.calls	'tcp_accept','',0
	.calls	'tcp_poll','',16
	.calls	'tcp_pcb_purge','',16
	.calls	'tcp_pcb_remove','',16
	.calls	'tcp_next_iss','',16
	.calls	'tcp_eff_send_mss_netif','',16
	.calls	'tcp_netif_ip_addr_changed_pcblist','',8
	.calls	'tcp_netif_ip_addr_changed','',0
	.calls	'tcp_debug_state_str','',0
	.calls	'tcp_tcp_get_tcp_addrinfo','',0
	.extern	Ifx_Lwip_printf
	.extern	lwip_stats
	.extern	memp_malloc
	.extern	memp_free
	.extern	pbuf_ref
	.extern	pbuf_free
	.extern	ip_addr_any
	.extern	netif_get_by_index
	.extern	ip4_route
	.extern	tcp_output
	.extern	tcp_rexmit_rto_prepare
	.extern	tcp_rexmit_rto_commit
	.extern	tcp_input_pcb
	.extern	tcp_send_fin
	.extern	tcp_enqueue_flags
	.extern	tcp_rst
	.extern	tcp_keepalive
	.extern	tcp_split_unsent_seg
	.extern	tcp_zero_window_probe
	.extern	tcp_trigger_input_pcb_close
	.extern	tcp_timer_needed
	.extern	memcpy
	.extern	memset
	.extern	__INDIRECT__
	.calls	'tcp_free_ooseq','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L503:
	.word	6177
	.half	3
	.word	.L504
	.byte	4
.L502:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L505
.L886:
	.byte	2
	.byte	'int',0,4,5,3
	.word	158
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	165
	.byte	0
.L1039:
	.byte	2
	.byte	'unsigned int',0,4,7,6
	.word	207
	.byte	7
	.word	207
	.byte	8
	.byte	'__cmpswapw',0
	.word	223
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	228
	.byte	9
	.byte	'value',0
	.word	207
	.byte	9
	.byte	'compare',0
	.word	207
	.byte	0
.L880:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	293
.L837:
	.byte	7
	.word	301
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	285
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	306
	.byte	12,1,123,37,0,13
	.byte	'void',0
.L849:
	.byte	7
	.word	354
	.byte	14,2,52,9,1,15
	.byte	'MEMP_UDP_PCB',0,0,15
	.byte	'MEMP_TCP_PCB',0,1,15
	.byte	'MEMP_TCP_PCB_LISTEN',0,2,15
	.byte	'MEMP_TCP_SEG',0,3,15
	.byte	'MEMP_REASSDATA',0,4,15
	.byte	'MEMP_FRAG_PBUF',0,5,15
	.byte	'MEMP_SYS_TIMEOUT',0,6,15
	.byte	'MEMP_PBUF',0,7,15
	.byte	'MEMP_PBUF_POOL',0,8,15
	.byte	'MEMP_POOL_256',0,9,15
	.byte	'MEMP_POOL_512',0,10,15
	.byte	'MEMP_POOL_1512',0,11,15
	.byte	'MEMP_MAX',0,12,0,10
	.byte	'memp_malloc',0,2,147,1,7
	.word	360
	.byte	1,1,1,1,11
	.byte	'type',0,2,147,1,26
	.word	365
	.byte	0,16
	.byte	'memp_free',0,2,149,1,7,1,1,1,1,11
	.byte	'type',0,2,149,1,24
	.word	365
	.byte	11
	.byte	'mem',0,2,149,1,36
	.word	360
	.byte	0
.L839:
	.byte	17
	.byte	'tcp_state',0,3,56,6,1,15
	.byte	'CLOSED',0,0,15
	.byte	'LISTEN',0,1,15
	.byte	'SYN_SENT',0,2,15
	.byte	'SYN_RCVD',0,3,15
	.byte	'ESTABLISHED',0,4,15
	.byte	'FIN_WAIT_1',0,5,15
	.byte	'FIN_WAIT_2',0,6,15
	.byte	'CLOSE_WAIT',0,7,15
	.byte	'CLOSING',0,8,15
	.byte	'LAST_ACK',0,9,15
	.byte	'TIME_WAIT',0,10,0
.L875:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L844:
	.byte	2
	.byte	'unsigned char',0,1,8,18
	.byte	'pbuf',0,4,186,1,8,16,19
	.byte	'next',0
	.word	.L1015-.L503
	.byte	4,2,35,0,19
	.byte	'payload',0
	.word	360
	.byte	4,2,35,4,19
	.byte	'tot_len',0
	.word	809
	.byte	2,2,35,8,19
	.byte	'len',0
	.word	809
	.byte	2,2,35,10,19
	.byte	'type_internal',0
	.word	831
	.byte	1,2,35,12,19
	.byte	'flags',0
	.word	831
	.byte	1,2,35,13,19
	.byte	'ref',0
	.word	831
	.byte	1,2,35,14,19
	.byte	'if_idx',0
	.word	831
	.byte	1,2,35,15,0
.L1015:
	.byte	7
	.word	848
	.byte	16
	.byte	'pbuf_ref',0,4,164,2,6,1,1,1,1,11
	.byte	'p',0,4,164,2,28
	.word	988
	.byte	0,10
	.byte	'pbuf_free',0,4,165,2,6
	.word	831
	.byte	1,1,1,1,11
	.byte	'p',0,4,165,2,29
	.word	988
	.byte	0
.L877:
	.byte	2
	.byte	'unsigned long int',0,4,7,18
	.byte	'ip4_addr',0,6,51,8,4,19
	.byte	'addr',0
	.word	1058
	.byte	4,2,35,0,0,20
	.word	285
	.byte	1,1,5
	.word	988
	.byte	5
	.word	.L899-.L503
	.byte	0,7
	.word	1108
	.byte	21
	.byte	'netif_input_fn',0,5,178,1,17
	.word	1126
	.byte	3
	.word	1079
	.byte	7
	.word	1155
	.byte	20
	.word	285
	.byte	1,1,5
	.word	.L899-.L503
	.byte	5
	.word	988
	.byte	5
	.word	1160
	.byte	0,7
	.word	1165
	.byte	21
	.byte	'netif_output_fn',0,5,189,1,17
	.word	1188
	.byte	20
	.word	285
	.byte	1,1,5
	.word	.L899-.L503
	.byte	5
	.word	988
	.byte	0,7
	.word	1218
	.byte	21
	.byte	'netif_linkoutput_fn',0,5,212,1,17
	.word	1236
	.byte	22,6
	.word	831
	.byte	23,5,0,22,2
	.word	293
	.byte	23,1,0,18
	.byte	'netif',0,5,132,2,8,48,19
	.byte	'next',0
	.word	.L899-.L503
	.byte	4,2,35,0,19
	.byte	'ip_addr',0
	.word	1079
	.byte	4,2,35,4,19
	.byte	'netmask',0
	.word	1079
	.byte	4,2,35,8,19
	.byte	'gw',0
	.word	1079
	.byte	4,2,35,12,19
	.byte	'input',0
	.word	1131
	.byte	4,2,35,16,19
	.byte	'output',0
	.word	1193
	.byte	4,2,35,20,19
	.byte	'linkoutput',0
	.word	1241
	.byte	4,2,35,24,19
	.byte	'state',0
	.word	360
	.byte	4,2,35,28,19
	.byte	'mtu',0
	.word	809
	.byte	2,2,35,32,19
	.byte	'hwaddr',0
	.word	1270
	.byte	6,2,35,34,19
	.byte	'hwaddr_len',0
	.word	831
	.byte	1,2,35,40,19
	.byte	'flags',0
	.word	831
	.byte	1,2,35,41,19
	.byte	'name',0
	.word	1279
	.byte	2,2,35,42,19
	.byte	'num',0
	.word	831
	.byte	1,2,35,44,19
	.byte	'rs_count',0
	.word	831
	.byte	1,2,35,45,0
.L899:
	.byte	7
	.word	1288
	.byte	10
	.byte	'netif_get_by_index',0,5,169,4,15
	.word	1536
	.byte	1,1,1,1,11
	.byte	'idx',0,5,169,4,39
	.word	831
	.byte	0,7
	.word	1108
	.byte	7
	.word	1165
	.byte	7
	.word	1218
	.byte	3
	.word	1079
	.byte	7
	.word	1602
	.byte	10
	.byte	'ip4_route',0,7,65,15
	.word	1536
	.byte	1,1,1,1,11
	.byte	'dest',0,7,65,43
	.word	1607
	.byte	0,2
	.byte	'short int',0,2,5,18
	.byte	'tcp_hdr',0,10,56,8,20,19
	.byte	'src',0
	.word	809
	.byte	2,2,35,0,19
	.byte	'dest',0
	.word	809
	.byte	2,2,35,2,19
	.byte	'seqno',0
	.word	1058
	.byte	4,2,35,4,19
	.byte	'ackno',0
	.word	1058
	.byte	4,2,35,8,19
	.byte	'_hdrlen_rsvd_flags',0
	.word	809
	.byte	2,2,35,12,19
	.byte	'wnd',0
	.word	809
	.byte	2,2,35,14,19
	.byte	'chksum',0
	.word	809
	.byte	2,2,35,16,19
	.byte	'urgp',0
	.word	809
	.byte	2,2,35,18,0,7
	.word	1661
	.byte	18
	.byte	'tcp_seg',0,9,253,1,8,20,19
	.byte	'next',0
	.word	.L996-.L503
	.byte	4,2,35,0,19
	.byte	'p',0
	.word	988
	.byte	4,2,35,4,19
	.byte	'len',0
	.word	809
	.byte	2,2,35,8,19
	.byte	'oversize_left',0
	.word	809
	.byte	2,2,35,10,19
	.byte	'flags',0
	.word	831
	.byte	1,2,35,12,19
	.byte	'tcphdr',0
	.word	1803
	.byte	4,2,35,16,0
.L996:
	.byte	7
	.word	1808
	.byte	20
	.word	285
	.byte	1,1,5
	.word	360
	.byte	5
	.word	.L841-.L503
	.byte	5
	.word	285
	.byte	0,7
	.word	1920
.L865:
	.byte	21
	.byte	'tcp_accept_fn',0,8,70,17
	.word	1943
	.byte	18
	.byte	'tcp_pcb_listen',0,8,223,1,8,28,19
	.byte	'local_ip',0
	.word	1079
	.byte	4,2,35,0,19
	.byte	'remote_ip',0
	.word	1079
	.byte	4,2,35,4,19
	.byte	'netif_idx',0
	.word	831
	.byte	1,2,35,8,19
	.byte	'so_options',0
	.word	831
	.byte	1,2,35,9,19
	.byte	'tos',0
	.word	831
	.byte	1,2,35,10,19
	.byte	'ttl',0
	.word	831
	.byte	1,2,35,11,19
	.byte	'next',0
	.word	.L910-.L503
	.byte	4,2,35,12,19
	.byte	'callback_arg',0
	.word	360
	.byte	4,2,35,16,19
	.byte	'state',0
	.word	667
	.byte	1,2,35,20,19
	.byte	'prio',0
	.word	831
	.byte	1,2,35,21,19
	.byte	'local_port',0
	.word	809
	.byte	2,2,35,22,19
	.byte	'accept',0
	.word	1948
	.byte	4,2,35,24,0
.L910:
	.byte	7
	.word	1970
	.byte	20
	.word	285
	.byte	1,1,5
	.word	360
	.byte	5
	.word	.L841-.L503
	.byte	5
	.word	809
	.byte	0,7
	.word	2200
.L857:
	.byte	21
	.byte	'tcp_sent_fn',0,8,96,17
	.word	2223
	.byte	20
	.word	285
	.byte	1,1,5
	.word	360
	.byte	5
	.word	.L841-.L503
	.byte	5
	.word	988
	.byte	5
	.word	285
	.byte	0,7
	.word	2248
.L853:
	.byte	21
	.byte	'tcp_recv_fn',0,8,82,17
	.word	2276
.L897:
	.byte	21
	.byte	'tcp_connected_fn',0,8,134,1,17
	.word	1943
	.byte	20
	.word	285
	.byte	1,1,5
	.word	360
	.byte	5
	.word	.L841-.L503
	.byte	0,7
	.word	2327
.L870:
	.byte	21
	.byte	'tcp_poll_fn',0,8,108,17
	.word	2345
	.byte	24,1,1,5
	.word	360
	.byte	5
	.word	285
	.byte	0,7
	.word	2370
.L861:
	.byte	21
	.byte	'tcp_err_fn',0,8,120,17
	.word	2384
	.byte	18
	.byte	'tcp_pcb',0,8,242,1,8,156,1,19
	.byte	'local_ip',0
	.word	1079
	.byte	4,2,35,0,19
	.byte	'remote_ip',0
	.word	1079
	.byte	4,2,35,4,19
	.byte	'netif_idx',0
	.word	831
	.byte	1,2,35,8,19
	.byte	'so_options',0
	.word	831
	.byte	1,2,35,9,19
	.byte	'tos',0
	.word	831
	.byte	1,2,35,10,19
	.byte	'ttl',0
	.word	831
	.byte	1,2,35,11,19
	.byte	'next',0
	.word	.L841-.L503
	.byte	4,2,35,12,19
	.byte	'callback_arg',0
	.word	360
	.byte	4,2,35,16,19
	.byte	'state',0
	.word	667
	.byte	1,2,35,20,19
	.byte	'prio',0
	.word	831
	.byte	1,2,35,21,19
	.byte	'local_port',0
	.word	809
	.byte	2,2,35,22,19
	.byte	'remote_port',0
	.word	809
	.byte	2,2,35,24,19
	.byte	'flags',0
	.word	809
	.byte	2,2,35,26,19
	.byte	'polltmr',0
	.word	831
	.byte	1,2,35,28,19
	.byte	'pollinterval',0
	.word	831
	.byte	1,2,35,29,19
	.byte	'last_timer',0
	.word	831
	.byte	1,2,35,30,19
	.byte	'tmr',0
	.word	1058
	.byte	4,2,35,32,19
	.byte	'rcv_nxt',0
	.word	1058
	.byte	4,2,35,36,19
	.byte	'rcv_wnd',0
	.word	809
	.byte	2,2,35,40,19
	.byte	'rcv_ann_wnd',0
	.word	809
	.byte	2,2,35,42,19
	.byte	'rcv_ann_right_edge',0
	.word	1058
	.byte	4,2,35,44,19
	.byte	'rtime',0
	.word	1648
	.byte	2,2,35,48,19
	.byte	'mss',0
	.word	809
	.byte	2,2,35,50,19
	.byte	'rttest',0
	.word	1058
	.byte	4,2,35,52,19
	.byte	'rtseq',0
	.word	1058
	.byte	4,2,35,56,19
	.byte	'sa',0
	.word	1648
	.byte	2,2,35,60,19
	.byte	'sv',0
	.word	1648
	.byte	2,2,35,62,19
	.byte	'rto',0
	.word	1648
	.byte	2,2,35,64,19
	.byte	'nrtx',0
	.word	831
	.byte	1,2,35,66,19
	.byte	'dupacks',0
	.word	831
	.byte	1,2,35,67,19
	.byte	'lastack',0
	.word	1058
	.byte	4,2,35,68,19
	.byte	'cwnd',0
	.word	809
	.byte	2,2,35,72,19
	.byte	'ssthresh',0
	.word	809
	.byte	2,2,35,74,19
	.byte	'rto_end',0
	.word	1058
	.byte	4,2,35,76,19
	.byte	'snd_nxt',0
	.word	1058
	.byte	4,2,35,80,19
	.byte	'snd_wl1',0
	.word	1058
	.byte	4,2,35,84,19
	.byte	'snd_wl2',0
	.word	1058
	.byte	4,2,35,88,19
	.byte	'snd_lbb',0
	.word	1058
	.byte	4,2,35,92,19
	.byte	'snd_wnd',0
	.word	809
	.byte	2,2,35,96,19
	.byte	'snd_wnd_max',0
	.word	809
	.byte	2,2,35,98,19
	.byte	'snd_buf',0
	.word	809
	.byte	2,2,35,100,19
	.byte	'snd_queuelen',0
	.word	809
	.byte	2,2,35,102,19
	.byte	'unsent_oversize',0
	.word	809
	.byte	2,2,35,104,19
	.byte	'bytes_acked',0
	.word	809
	.byte	2,2,35,106,19
	.byte	'unsent',0
	.word	1915
	.byte	4,2,35,108,19
	.byte	'unacked',0
	.word	1915
	.byte	4,2,35,112,19
	.byte	'ooseq',0
	.word	1915
	.byte	4,2,35,116,19
	.byte	'refused_data',0
	.word	988
	.byte	4,2,35,120,19
	.byte	'listener',0
	.word	2195
	.byte	4,2,35,124,19
	.byte	'sent',0
	.word	2228
	.byte	4,3,35,128,1,19
	.byte	'recv',0
	.word	2281
	.byte	4,3,35,132,1,19
	.byte	'connected',0
	.word	2301
	.byte	4,3,35,136,1,19
	.byte	'poll',0
	.word	2350
	.byte	4,3,35,140,1,19
	.byte	'errf',0
	.word	2389
	.byte	4,3,35,144,1,19
	.byte	'keep_idle',0
	.word	1058
	.byte	4,3,35,148,1,19
	.byte	'persist_cnt',0
	.word	831
	.byte	1,3,35,152,1,19
	.byte	'persist_backoff',0
	.word	831
	.byte	1,3,35,153,1,19
	.byte	'persist_probe',0
	.word	831
	.byte	1,3,35,154,1,19
	.byte	'keep_cnt_sent',0
	.word	831
	.byte	1,3,35,155,1,0
.L841:
	.byte	7
	.word	2408
	.byte	7
	.word	1920
	.byte	7
	.word	2200
	.byte	7
	.word	2248
	.byte	7
	.word	1920
	.byte	7
	.word	2327
	.byte	7
	.word	2370
	.byte	3
	.word	1079
.L883:
	.byte	7
	.word	3505
	.byte	3
	.word	1288
.L891:
	.byte	7
	.word	3515
.L907:
	.byte	7
	.word	285
	.byte	10
	.byte	'tcp_output',0,8,222,3,18
	.word	285
	.byte	1,1,1,1,11
	.byte	'pcb',0,8,222,3,47
	.word	3470
	.byte	0
.L930:
	.byte	7
	.word	1079
.L932:
	.byte	7
	.word	809
	.byte	10
	.byte	'tcp_rexmit_rto_prepare',0,9,84,18
	.word	285
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,84,57
	.word	3470
	.byte	0,16
	.byte	'tcp_rexmit_rto_commit',0,9,85,18,1,1,1,1,11
	.byte	'pcb',0,9,85,56
	.word	3470
	.byte	0
.L991:
	.byte	7
	.word	3470
	.byte	10
	.byte	'tcp_send_fin',0,9,206,3,7
	.word	285
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,206,3,36
	.word	3470
	.byte	0,10
	.byte	'tcp_enqueue_flags',0,9,207,3,7
	.word	285
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,207,3,41
	.word	3470
	.byte	11
	.byte	'flags',0,9,207,3,51
	.word	831
	.byte	0,3
	.word	2408
	.byte	7
	.word	3774
	.byte	16
	.byte	'tcp_rst',0,9,211,3,6,1,1,1,1,11
	.byte	'pcb',0,9,211,3,36
	.word	3779
	.byte	11
	.byte	'seqno',0,9,211,3,47
	.word	1058
	.byte	11
	.byte	'ackno',0,9,211,3,60
	.word	1058
	.byte	11
	.byte	'local_ip',0,9,212,3,25
	.word	3510
	.byte	11
	.byte	'remote_ip',0,9,212,3,52
	.word	3510
	.byte	11
	.byte	'local_port',0,9,213,3,14
	.word	809
	.byte	11
	.byte	'remote_port',0,9,213,3,32
	.word	809
	.byte	0,10
	.byte	'tcp_keepalive',0,9,217,3,7
	.word	285
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,217,3,37
	.word	3470
	.byte	0,10
	.byte	'tcp_split_unsent_seg',0,9,218,3,7
	.word	285
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,218,3,44
	.word	3470
	.byte	11
	.byte	'split',0,9,218,3,55
	.word	809
	.byte	0,10
	.byte	'tcp_zero_window_probe',0,9,219,3,7
	.word	285
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,219,3,45
	.word	3470
	.byte	0,25
	.byte	'tcp_trigger_input_pcb_close',0,9,220,3,7,1,1,1,1,25
	.byte	'tcp_timer_needed',0,9,249,3,6,1,1,1,1,26
	.word	360
	.byte	3
	.word	354
	.byte	7
	.word	4144
	.byte	26
	.word	4149
	.byte	10
	.byte	'memcpy',0,11,53,17
	.word	360
	.byte	1,1,1,1,27,11,53,33
	.word	4139
	.byte	27,11,53,56
	.word	4154
	.byte	27,11,53,68
	.word	207
	.byte	0,10
	.byte	'memset',0,11,56,17
	.word	360
	.byte	1,1,1,1,27,11,56,33
	.word	360
	.byte	27,11,56,36
	.word	158
	.byte	27,11,56,41
	.word	207
	.byte	0,28
	.byte	'__INDIRECT__',0,12,1,1,1,1,1,21
	.byte	'__wchar_t',0,12,1,1
	.word	1648
	.byte	21
	.byte	'__size_t',0,12,1,1
	.word	207
	.byte	21
	.byte	'__ptrdiff_t',0,12,1,1
	.word	158
	.byte	29,1,7
	.word	4322
	.byte	21
	.byte	'__codeptr',0,12,1,1
	.word	4324
	.byte	21
	.byte	'__intptr_t',0,12,1,1
	.word	158
	.byte	21
	.byte	'__uintptr_t',0,12,1,1
	.word	207
	.byte	21
	.byte	'size_t',0,13,24,25
	.word	207
	.byte	21
	.byte	'uint8',0,14,108,29
	.word	831
	.byte	21
	.byte	'uint16',0,14,112,29
	.word	809
	.byte	21
	.byte	'uint32',0,14,116,29
	.word	1058
	.byte	21
	.byte	'sint8',0,14,125,29
	.word	285
	.byte	21
	.byte	'sint16',0,14,129,1,29
	.word	1648
	.byte	2
	.byte	'long int',0,4,5,21
	.byte	'sint32',0,14,134,1,29
	.word	4475
	.byte	2
	.byte	'long long int',0,8,5,21
	.byte	'sint64',0,14,141,1,29
	.word	4503
	.byte	2
	.byte	'float',0,4,4,21
	.byte	'float32',0,14,170,1,29
	.word	4536
	.byte	21
	.byte	'pvoid',0,15,54,28
	.word	360
	.byte	21
	.byte	'Ifx_TickTime',0,15,76,28
	.word	4503
	.byte	21
	.byte	'u8_t',0,1,85,16
	.word	831
	.byte	21
	.byte	'u16_t',0,1,86,16
	.word	809
	.byte	21
	.byte	'u32_t',0,1,87,16
	.word	1058
	.byte	21
	.byte	's8_t',0,1,88,16
	.word	285
	.byte	21
	.byte	's16_t',0,1,89,16
	.word	1648
	.byte	21
	.byte	'intmax_t',0,16,198,2,41
	.word	4503
	.byte	21
	.byte	'mem_size_t',0,17,55,15
	.word	809
	.byte	21
	.byte	'memp_t',0,2,56,3
	.word	365
	.byte	18
	.byte	'stats_proto',0,18,64,8,24,19
	.byte	'xmit',0
	.word	809
	.byte	2,2,35,0,19
	.byte	'recv',0
	.word	809
	.byte	2,2,35,2,19
	.byte	'fw',0
	.word	809
	.byte	2,2,35,4,19
	.byte	'drop',0
	.word	809
	.byte	2,2,35,6,19
	.byte	'chkerr',0
	.word	809
	.byte	2,2,35,8,19
	.byte	'lenerr',0
	.word	809
	.byte	2,2,35,10,19
	.byte	'memerr',0
	.word	809
	.byte	2,2,35,12,19
	.byte	'rterr',0
	.word	809
	.byte	2,2,35,14,19
	.byte	'proterr',0
	.word	809
	.byte	2,2,35,16,19
	.byte	'opterr',0
	.word	809
	.byte	2,2,35,18,19
	.byte	'err',0
	.word	809
	.byte	2,2,35,20,19
	.byte	'cachehit',0
	.word	809
	.byte	2,2,35,22,0,18
	.byte	'stats_mem',0,18,98,8,16,19
	.byte	'name',0
	.word	306
	.byte	4,2,35,0,19
	.byte	'err',0
	.word	809
	.byte	2,2,35,4,19
	.byte	'avail',0
	.word	809
	.byte	2,2,35,6,19
	.byte	'used',0
	.word	809
	.byte	2,2,35,8,19
	.byte	'max',0
	.word	809
	.byte	2,2,35,10,19
	.byte	'illegal',0
	.word	809
	.byte	2,2,35,12,0,7
	.word	4916
	.byte	22,48
	.word	5018
	.byte	23,11,0,18
	.byte	'stats_',0,18,232,1,8,216,1,19
	.byte	'link',0
	.word	4717
	.byte	24,2,35,0,19
	.byte	'etharp',0
	.word	4717
	.byte	24,2,35,24,19
	.byte	'ip_frag',0
	.word	4717
	.byte	24,2,35,48,19
	.byte	'ip',0
	.word	4717
	.byte	24,2,35,72,19
	.byte	'icmp',0
	.word	4717
	.byte	24,2,35,96,19
	.byte	'udp',0
	.word	4717
	.byte	24,2,35,120,19
	.byte	'tcp',0
	.word	4717
	.byte	24,3,35,144,1,19
	.byte	'memp',0
	.word	5023
	.byte	48,3,35,168,1,0,30
	.byte	'lwip_stats',0,18,176,2,22
	.word	5032
	.byte	1,1,21
	.byte	'tcpwnd_size_t',0,3,53,15
	.word	809
	.byte	21
	.byte	'err_t',0,19,96,14
	.word	285
	.byte	24,1,1,5
	.word	988
	.byte	0,7
	.word	5220
	.byte	21
	.byte	'pbuf_free_custom_fn',0,4,242,1,16
	.word	5229
	.byte	21
	.byte	'ip4_addr_t',0,6,57,25
	.word	1079
	.byte	21
	.byte	'ip_addr_t',0,20,142,2,20
	.word	1079
	.byte	3
	.word	1079
	.byte	30
	.byte	'ip_addr_any',0,20,241,2,24
	.word	5301
	.byte	1,1,18
	.byte	'link_changed_s',0,5,213,4,10,1,19
	.byte	'state',0
	.word	831
	.byte	1,2,35,0,0,18
	.byte	'status_changed_s',0,5,219,4,10,1,19
	.byte	'state',0
	.word	831
	.byte	1,2,35,0,0,18
	.byte	'ipv4_changed_s',0,5,225,4,10,12,19
	.byte	'old_address',0
	.word	3510
	.byte	4,2,35,0,19
	.byte	'old_netmask',0
	.word	3510
	.byte	4,2,35,4,19
	.byte	'old_gw',0
	.word	3510
	.byte	4,2,35,8,0,18
	.byte	'ipv6_set_s',0,5,233,4,10,8,19
	.byte	'addr_index',0
	.word	285
	.byte	1,2,35,0,19
	.byte	'old_address',0
	.word	3510
	.byte	4,2,35,4,0,18
	.byte	'ipv6_addr_state_changed_s',0,5,241,4,10,8,19
	.byte	'addr_index',0
	.word	285
	.byte	1,2,35,0,19
	.byte	'old_state',0
	.word	831
	.byte	1,2,35,1,19
	.byte	'address',0
	.word	3510
	.byte	4,2,35,4,0,31,5,210,4,9,12,19
	.byte	'link_changed',0
	.word	5329
	.byte	1,2,35,0,19
	.byte	'status_changed',0
	.word	5366
	.byte	1,2,35,0,19
	.byte	'ipv4_changed',0
	.word	5405
	.byte	12,2,35,0,19
	.byte	'ipv6_set',0
	.word	5485
	.byte	8,2,35,0,19
	.byte	'ipv6_addr_state_changed',0
	.word	5544
	.byte	8,2,35,0,0,3
	.word	5633
	.byte	7
	.word	5759
	.byte	24,1,1,5
	.word	1536
	.byte	5
	.word	809
	.byte	5
	.word	5764
	.byte	0,7
	.word	5769
	.byte	21
	.byte	'netif_ext_callback_fn',0,5,132,5,16
	.word	5788
	.byte	18
	.byte	'ip4_addr_packed',0,21,53,8,4,19
	.byte	'addr',0
	.word	1058
	.byte	4,2,35,0,0,21
	.byte	'ip4_addr_p_t',0,21,61,32
	.word	5824
	.byte	24,1,1,5
	.word	831
	.byte	5
	.word	360
	.byte	0,7
	.word	5881
	.byte	21
	.byte	'tcp_extarg_callback_pcb_destroyed_fn',0,8,173,1,16
	.word	5895
	.byte	20
	.word	285
	.byte	1,1,5
	.word	831
	.byte	5
	.word	2195
	.byte	5
	.word	3470
	.byte	0,7
	.word	5946
	.byte	21
	.byte	'tcp_extarg_callback_passive_open_fn',0,8,182,1,17
	.word	5969
	.byte	21
	.byte	'tcpflags_t',0,8,206,1,15
	.word	809
	.byte	30
	.byte	'tcp_input_pcb',0,9,198,2,24
	.word	3470
	.byte	1,1
.L1077:
	.byte	32
	.byte	'tcp_listen_pcbs_t',0,9,203,2,7,4,19
	.byte	'listen_pcbs',0
	.word	2195
	.byte	4,2,35,0,19
	.byte	'pcbs',0
	.word	3470
	.byte	4,2,35,0,0,22,16
	.word	3669
	.byte	23,3,0
.L1078:
	.byte	3
	.word	6124
	.byte	22,44
	.word	306
	.byte	23,10,0
.L1079:
	.byte	3
	.word	6138
	.byte	22,13
	.word	831
	.byte	23,12,0
.L1080:
	.byte	3
	.word	6152
	.byte	22,7
	.word	831
	.byte	23,6,0
.L1081:
	.byte	3
	.word	6166
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L504:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,59,0,3,8,0,0,14,4,1,58,15,59,15,57
	.byte	15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,17,4,1,3
	.byte	8,58,15,59,15,57,15,11,15,0,0,18,19,1,3,8,58,15,59,15,57,15,11,15,0,0,19,13,0,3,8,73,19,11,15,56,9,0,0
	.byte	20,21,1,73,19,54,15,39,12,0,0,21,22,0,3,8,58,15,59,15,57,15,73,19,0,0,22,1,1,11,15,73,19,0,0,23,33,0,47
	.byte	15,0,0,24,21,1,54,15,39,12,0,0,25,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,26,55,0,73,19
	.byte	0,0,27,5,0,58,15,59,15,57,15,73,19,0,0,28,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,29,21,0,54
	.byte	15,0,0,30,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,31,23,1,58,15,59,15,57,15,11,15,0,0,32,23,1
	.byte	3,8,58,15,59,15,57,15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L505:
	.word	.L1501-.L1500
.L1500:
	.half	3
	.word	.L1503-.L1502
.L1502:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'cc.h',0,1,0,0
	.byte	'memp.h',0,2,0,0
	.byte	'tcpbase.h',0,2,0,0
	.byte	'pbuf.h',0,2,0,0
	.byte	'netif.h',0,2,0,0
	.byte	'ip4_addr.h',0,2,0,0
	.byte	'ip4.h',0,2,0,0
	.byte	'tcp.h',0,2,0,0
	.byte	'tcp_priv.h',0,3,0,0
	.byte	'tcp.h',0,4,0,0
	.byte	'string.h',0,5,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0
	.byte	'stddef.h',0,5,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Ifx_Types.h',0,6,0,0
	.byte	'stdint.h',0,5,0,0
	.byte	'mem.h',0,2,0,0
	.byte	'stats.h',0,2,0,0
	.byte	'err.h',0,2,0,0
	.byte	'ip_addr.h',0,2,0,0
	.byte	'ip4.h',0,4,0,0,0
.L1503:
.L1501:
	.sdecl	'.debug_info',debug,cluster('tcp_debug_state_str')
	.sect	'.debug_info'
.L506:
	.word	233
	.half	3
	.word	.L507
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L509,.L508
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_debug_state_str',0,1,178,18,1
	.word	.L837
	.byte	1,1,1
	.word	.L497,.L838,.L496
	.byte	4
	.byte	's',0,1,178,18,36
	.word	.L839,.L840
	.byte	5
	.word	.L497,.L838
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_debug_state_str')
	.sect	'.debug_abbrev'
.L507:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_debug_state_str')
	.sect	'.debug_line'
.L508:
	.word	.L1505-.L1504
.L1504:
	.half	3
	.word	.L1507-.L1506
.L1506:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1507:
	.byte	5,10,7,0,5,2
	.word	.L497
	.byte	3,179,18,1,5,23,9
	.half	.L1508-.L497
	.byte	1,5,1,9
	.half	.L1509-.L1508
	.byte	3,1,1,7,9
	.half	.L510-.L1509
	.byte	0,1,1
.L1505:
	.sdecl	'.debug_ranges',debug,cluster('tcp_debug_state_str')
	.sect	'.debug_ranges'
.L509:
	.word	-1,.L497,0,.L510-.L497,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_new')
	.sect	'.debug_info'
.L511:
	.word	206
	.half	3
	.word	.L512
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L514,.L513
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_new',0,1,153,15,1
	.word	.L841
	.byte	1,1,1
	.word	.L469,.L842,.L468
	.byte	4
	.word	.L469,.L842
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_new')
	.sect	'.debug_abbrev'
.L512:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_new')
	.sect	'.debug_line'
.L513:
	.word	.L1511-.L1510
.L1510:
	.half	3
	.word	.L1513-.L1512
.L1512:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1513:
	.byte	5,20,7,0,5,2
	.word	.L469
	.byte	3,154,15,1,5,1,9
	.half	.L515-.L469
	.byte	3,1,0,1,1
.L1511:
	.sdecl	'.debug_ranges',debug,cluster('tcp_new')
	.sect	'.debug_ranges'
.L514:
	.word	-1,.L469,0,.L515-.L469,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_new_ip_type')
	.sect	'.debug_info'
.L516:
	.word	250
	.half	3
	.word	.L517
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L519,.L518
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_new_ip_type',0,1,170,15,1
	.word	.L841
	.byte	1,1,1
	.word	.L471,.L843,.L470
	.byte	4
	.byte	'type',0,1,170,15,22
	.word	.L844,.L845
	.byte	5
	.word	.L471,.L843
	.byte	6
	.byte	'pcb',0,1,172,15,19
	.word	.L841,.L846
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_new_ip_type')
	.sect	'.debug_abbrev'
.L517:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_new_ip_type')
	.sect	'.debug_line'
.L518:
	.word	.L1515-.L1514
.L1514:
	.half	3
	.word	.L1517-.L1516
.L1516:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1517:
	.byte	5,19,7,0,5,2
	.word	.L471
	.byte	3,172,15,1,5,1,9
	.half	.L520-.L471
	.byte	3,10,0,1,1
.L1515:
	.sdecl	'.debug_ranges',debug,cluster('tcp_new_ip_type')
	.sect	'.debug_ranges'
.L519:
	.word	-1,.L471,0,.L520-.L471,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_arg')
	.sect	'.debug_info'
.L521:
	.word	236
	.half	3
	.word	.L522
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L524,.L523
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_arg',0,1,196,15,1,1,1,1
	.word	.L473,.L847,.L472
	.byte	4
	.byte	'pcb',0,1,196,15,25
	.word	.L841,.L848
	.byte	4
	.byte	'arg',0,1,196,15,36
	.word	.L849,.L850
	.byte	5
	.word	.L473,.L847
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_arg')
	.sect	'.debug_abbrev'
.L522:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_arg')
	.sect	'.debug_line'
.L523:
	.word	.L1519-.L1518
.L1518:
	.half	3
	.word	.L1521-.L1520
.L1520:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1521:
	.byte	5,3,7,0,5,2
	.word	.L473
	.byte	3,200,15,1,5,23,7,9
	.half	.L1522-.L473
	.byte	3,1,1,5,1,9
	.half	.L317-.L1522
	.byte	3,2,1,7,9
	.half	.L525-.L317
	.byte	0,1,1
.L1519:
	.sdecl	'.debug_ranges',debug,cluster('tcp_arg')
	.sect	'.debug_ranges'
.L524:
	.word	-1,.L473,0,.L525-.L473,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_recv')
	.sect	'.debug_info'
.L526:
	.word	238
	.half	3
	.word	.L527
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L529,.L528
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_recv',0,1,219,15,1,1,1,1
	.word	.L475,.L851,.L474
	.byte	4
	.byte	'pcb',0,1,219,15,26
	.word	.L841,.L852
	.byte	4
	.byte	'recv',0,1,219,15,43
	.word	.L853,.L854
	.byte	5
	.word	.L475,.L851
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_recv')
	.sect	'.debug_abbrev'
.L527:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_recv')
	.sect	'.debug_line'
.L528:
	.word	.L1524-.L1523
.L1523:
	.half	3
	.word	.L1526-.L1525
.L1525:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1526:
	.byte	5,1,7,0,5,2
	.word	.L475
	.byte	3,218,15,1,5,3,9
	.half	.L1426-.L475
	.byte	3,3,1,5,5,7,9
	.half	.L1527-.L1426
	.byte	3,1,1,5,15,9
	.half	.L319-.L1527
	.byte	3,1,1,5,1,9
	.half	.L318-.L319
	.byte	3,2,1,7,9
	.half	.L530-.L318
	.byte	0,1,1
.L1524:
	.sdecl	'.debug_ranges',debug,cluster('tcp_recv')
	.sect	'.debug_ranges'
.L529:
	.word	-1,.L475,0,.L530-.L475,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_sent')
	.sect	'.debug_info'
.L531:
	.word	238
	.half	3
	.word	.L532
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L534,.L533
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_sent',0,1,239,15,1,1,1,1
	.word	.L477,.L855,.L476
	.byte	4
	.byte	'pcb',0,1,239,15,26
	.word	.L841,.L856
	.byte	4
	.byte	'sent',0,1,239,15,43
	.word	.L857,.L858
	.byte	5
	.word	.L477,.L855
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_sent')
	.sect	'.debug_abbrev'
.L532:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_sent')
	.sect	'.debug_line'
.L533:
	.word	.L1529-.L1528
.L1528:
	.half	3
	.word	.L1531-.L1530
.L1530:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1531:
	.byte	5,1,7,0,5,2
	.word	.L477
	.byte	3,238,15,1,5,3,9
	.half	.L1432-.L477
	.byte	3,3,1,5,5,7,9
	.half	.L1532-.L1432
	.byte	3,1,1,5,15,9
	.half	.L321-.L1532
	.byte	3,1,1,5,1,9
	.half	.L320-.L321
	.byte	3,2,1,7,9
	.half	.L535-.L320
	.byte	0,1,1
.L1529:
	.sdecl	'.debug_ranges',debug,cluster('tcp_sent')
	.sect	'.debug_ranges'
.L534:
	.word	-1,.L477,0,.L535-.L477,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_err')
	.sect	'.debug_info'
.L536:
	.word	236
	.half	3
	.word	.L537
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L539,.L538
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_err',0,1,137,16,1,1,1,1
	.word	.L479,.L859,.L478
	.byte	4
	.byte	'pcb',0,1,137,16,25
	.word	.L841,.L860
	.byte	4
	.byte	'err',0,1,137,16,41
	.word	.L861,.L862
	.byte	5
	.word	.L479,.L859
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_err')
	.sect	'.debug_abbrev'
.L537:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_err')
	.sect	'.debug_line'
.L538:
	.word	.L1534-.L1533
.L1533:
	.half	3
	.word	.L1536-.L1535
.L1535:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1536:
	.byte	5,1,7,0,5,2
	.word	.L479
	.byte	3,136,16,1,5,3,9
	.half	.L1438-.L479
	.byte	3,3,1,5,5,7,9
	.half	.L1537-.L1438
	.byte	3,1,1,5,15,9
	.half	.L323-.L1537
	.byte	3,1,1,5,1,9
	.half	.L322-.L323
	.byte	3,2,1,7,9
	.half	.L540-.L322
	.byte	0,1,1
.L1534:
	.sdecl	'.debug_ranges',debug,cluster('tcp_err')
	.sect	'.debug_ranges'
.L539:
	.word	-1,.L479,0,.L540-.L479,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_accept')
	.sect	'.debug_info'
.L541:
	.word	252
	.half	3
	.word	.L542
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L544,.L543
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_accept',0,1,156,16,1,1,1,1
	.word	.L481,.L863,.L480
	.byte	4
	.byte	'pcb',0,1,156,16,28
	.word	.L841,.L864
	.byte	4
	.byte	'accept',0,1,156,16,47
	.word	.L865,.L866
	.byte	5
	.word	.L481,.L863
	.byte	6
	.word	.L867,.L324
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_accept')
	.sect	'.debug_abbrev'
.L542:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,0,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_accept')
	.sect	'.debug_line'
.L543:
	.word	.L1539-.L1538
.L1538:
	.half	3
	.word	.L1541-.L1540
.L1540:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1541:
	.byte	5,7,7,0,5,2
	.word	.L481
	.byte	3,158,16,1,5,28,7,9
	.half	.L1542-.L481
	.byte	1,5,36,9
	.half	.L1543-.L1542
	.byte	1,5,18,7,9
	.half	.L867-.L1543
	.byte	3,2,1,5,1,9
	.half	.L324-.L867
	.byte	3,2,1,7,9
	.half	.L545-.L324
	.byte	0,1,1
.L1539:
	.sdecl	'.debug_ranges',debug,cluster('tcp_accept')
	.sect	'.debug_ranges'
.L544:
	.word	-1,.L481,0,.L545-.L481,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_poll')
	.sect	'.debug_info'
.L546:
	.word	260
	.half	3
	.word	.L547
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L549,.L548
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_poll',0,1,185,16,1,1,1,1
	.word	.L483,.L868,.L482
	.byte	4
	.byte	'pcb',0,1,185,16,26
	.word	.L841,.L869
	.byte	4
	.byte	'poll',0,1,185,16,43
	.word	.L870,.L871
	.byte	4
	.byte	'interval',0,1,185,16,54
	.word	.L844,.L872
	.byte	5
	.word	.L483,.L868
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_poll')
	.sect	'.debug_abbrev'
.L547:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_poll')
	.sect	'.debug_line'
.L548:
	.word	.L1545-.L1544
.L1544:
	.half	3
	.word	.L1547-.L1546
.L1546:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1547:
	.byte	5,1,7,0,5,2
	.word	.L483
	.byte	3,184,16,1,5,3,9
	.half	.L1444-.L483
	.byte	3,4,1,7,9
	.half	.L1445-.L1444
	.byte	1,9
	.half	.L326-.L1445
	.byte	3,1,1,5,13,9
	.half	.L328-.L326
	.byte	3,3,1,5,21,9
	.half	.L1548-.L328
	.byte	3,4,1,5,1,9
	.half	.L1549-.L1548
	.byte	3,1,1,7,9
	.half	.L550-.L1549
	.byte	0,1,1
.L1545:
	.sdecl	'.debug_ranges',debug,cluster('tcp_poll')
	.sect	'.debug_ranges'
.L549:
	.word	-1,.L483,0,.L550-.L483,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_recved')
	.sect	'.debug_info'
.L551:
	.word	288
	.half	3
	.word	.L552
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L554,.L553
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_recved',0,1,200,7,1,1,1,1
	.word	.L421,.L873,.L420
	.byte	4
	.byte	'pcb',0,1,200,7,28
	.word	.L841,.L874
	.byte	4
	.byte	'len',0,1,200,7,39
	.word	.L875,.L876
	.byte	5
	.word	.L421,.L873
	.byte	6
	.byte	'wnd_inflation',0,1,202,7,9
	.word	.L877,.L878
	.byte	6
	.byte	'rcv_wnd',0,1,203,7,17
	.word	.L875,.L879
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_recved')
	.sect	'.debug_abbrev'
.L552:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_recved')
	.sect	'.debug_line'
.L553:
	.word	.L1551-.L1550
.L1550:
	.half	3
	.word	.L1553-.L1552
.L1552:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1553:
	.byte	5,1,7,0,5,2
	.word	.L421
	.byte	3,199,7,1,5,3,9
	.half	.L1229-.L421
	.byte	3,7,1,7,9
	.half	.L1230-.L1229
	.byte	1,9
	.half	.L135-.L1230
	.byte	3,3,1,5,32,9
	.half	.L137-.L135
	.byte	3,3,1,5,42,9
	.half	.L1554-.L137
	.byte	1,5,13,9
	.half	.L1236-.L1554
	.byte	1,5,18,9
	.half	.L1237-.L1236
	.byte	3,1,1,5,7,9
	.half	.L1555-.L1237
	.byte	1,5,48,7,9
	.half	.L1556-.L1555
	.byte	1,5,18,7,9
	.half	.L138-.L1556
	.byte	3,3,1,5,36,9
	.half	.L1557-.L138
	.byte	1,5,18,9
	.half	.L139-.L1557
	.byte	3,2,1,5,42,9
	.half	.L140-.L139
	.byte	3,3,1,5,24,9
	.half	.L1238-.L140
	.byte	3,6,1,5,3,9
	.half	.L1558-.L1238
	.byte	1,5,5,7,9
	.half	.L1559-.L1558
	.byte	3,1,1,5,16,9
	.half	.L1560-.L1559
	.byte	3,1,1,5,5,9
	.half	.L1240-.L1560
	.byte	3,127,1,5,16,9
	.half	.L1561-.L1240
	.byte	3,1,1,5,1,7,9
	.half	.L141-.L1561
	.byte	3,5,1,7,9
	.half	.L555-.L141
	.byte	0,1,1
.L1551:
	.sdecl	'.debug_ranges',debug,cluster('tcp_recved')
	.sect	'.debug_ranges'
.L554:
	.word	-1,.L421,0,.L555-.L421,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_bind')
	.sect	'.debug_info'
.L556:
	.word	296
	.half	3
	.word	.L557
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L559,.L558
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_bind',0,1,149,5,1
	.word	.L880
	.byte	1,1,1
	.word	.L407,.L881,.L406
	.byte	4
	.byte	'pcb',0,1,149,5,26
	.word	.L841,.L882
	.byte	4
	.byte	'ipaddr',0,1,149,5,48
	.word	.L883,.L884
	.byte	4
	.byte	'port',0,1,149,5,62
	.word	.L875,.L885
	.byte	5
	.word	.L407,.L881
	.byte	6
	.byte	'i',0,1,151,5,7
	.word	.L886,.L887
	.byte	6
	.byte	'cpcb',0,1,153,5,19
	.word	.L841,.L888
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_bind')
	.sect	'.debug_abbrev'
.L557:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_bind')
	.sect	'.debug_line'
.L558:
	.word	.L1563-.L1562
.L1562:
	.half	3
	.word	.L1565-.L1564
.L1564:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1565:
	.byte	5,1,7,0,5,2
	.word	.L407
	.byte	3,148,5,1,5,3,9
	.half	.L1179-.L407
	.byte	3,13,1,5,14,7,9
	.half	.L1566-.L1179
	.byte	3,1,1,5,3,9
	.half	.L90-.L1566
	.byte	3,6,1,7,9
	.half	.L1567-.L90
	.byte	1,5,1,9
	.half	.L1183-.L1567
	.byte	3,197,0,1,5,3,7,9
	.half	.L91-.L1183
	.byte	3,189,127,1,5,1,9
	.half	.L1186-.L91
	.byte	3,195,0,1,5,3,7,9
	.half	.L93-.L1186
	.byte	3,86,1,5,24,7,9
	.half	.L1568-.L93
	.byte	3,1,1,5,10,9
	.half	.L1187-.L1568
	.byte	1,5,5,9
	.half	.L1188-.L1187
	.byte	3,1,1,5,14,7,9
	.half	.L1569-.L1188
	.byte	3,1,1,5,1,3,39,1,5,20,7,9
	.half	.L95-.L1569
	.byte	3,94,1,5,33,9
	.half	.L1570-.L95
	.byte	3,127,1,9
	.half	.L98-.L1570
	.byte	3,1,1,5,19,9
	.half	.L1571-.L98
	.byte	1,5,50,9
	.half	.L1190-.L1571
	.byte	1,5,17,9
	.half	.L100-.L1190
	.byte	3,1,1,5,9,9
	.half	.L1572-.L100
	.byte	1,5,18,7,9
	.half	.L1573-.L1572
	.byte	3,11,1,9
	.half	.L1574-.L1573
	.byte	3,1,1,9
	.half	.L1575-.L1574
	.byte	3,1,1,5,22,7,9
	.half	.L102-.L1575
	.byte	3,1,1,5,1,3,19,1,5,63,7,9
	.half	.L101-.L102
	.byte	3,94,1,5,50,9
	.half	.L99-.L101
	.byte	1,5,36,7,9
	.half	.L1576-.L99
	.byte	3,127,1,5,33,1,5,8,7,9
	.half	.L96-.L1576
	.byte	3,24,1,5,5,9
	.half	.L1577-.L96
	.byte	3,5,1,5,19,9
	.half	.L106-.L1577
	.byte	3,2,1,5,3,9
	.half	.L1578-.L106
	.byte	3,1,1,5,10,9
	.half	.L1189-.L1578
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L560-.L1189
	.byte	0,1,1
.L1563:
	.sdecl	'.debug_ranges',debug,cluster('tcp_bind')
	.sect	'.debug_ranges'
.L559:
	.word	-1,.L407,0,.L560-.L407,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_bind_netif')
	.sect	'.debug_info'
.L561:
	.word	245
	.half	3
	.word	.L562
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L564,.L563
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_bind_netif',0,1,251,5,1,1,1,1
	.word	.L409,.L889,.L408
	.byte	4
	.byte	'pcb',0,1,251,5,32
	.word	.L841,.L890
	.byte	4
	.byte	'netif',0,1,251,5,57
	.word	.L891,.L892
	.byte	5
	.word	.L409,.L889
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_bind_netif')
	.sect	'.debug_abbrev'
.L562:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_bind_netif')
	.sect	'.debug_line'
.L563:
	.word	.L1580-.L1579
.L1579:
	.half	3
	.word	.L1582-.L1581
.L1581:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1582:
	.byte	5,3,7,0,5,2
	.word	.L409
	.byte	3,253,5,1,5,22,7,9
	.half	.L1583-.L409
	.byte	3,1,1,5,20,9
	.half	.L1584-.L1583
	.byte	1,5,1,9
	.half	.L1585-.L1584
	.byte	3,4,1,5,22,7,9
	.half	.L108-.L1585
	.byte	3,126,1,5,20,1,5,1,9
	.half	.L1586-.L108
	.byte	3,2,1,7,9
	.half	.L565-.L1586
	.byte	0,1,1
.L1580:
	.sdecl	'.debug_ranges',debug,cluster('tcp_bind_netif')
	.sect	'.debug_ranges'
.L564:
	.word	-1,.L409,0,.L565-.L409,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_connect')
	.sect	'.debug_info'
.L566:
	.word	351
	.half	3
	.word	.L567
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L569,.L568
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_connect',0,1,171,8,1
	.word	.L880
	.byte	1,1,1
	.word	.L425,.L893,.L424
	.byte	4
	.byte	'pcb',0,1,171,8,29
	.word	.L841,.L894
	.byte	4
	.byte	'ipaddr',0,1,171,8,51
	.word	.L883,.L895
	.byte	4
	.byte	'port',0,1,171,8,65
	.word	.L875,.L896
	.byte	4
	.byte	'connected',0,1,172,8,30
	.word	.L897,.L898
	.byte	5
	.word	.L425,.L893
	.byte	6
	.byte	'netif',0,1,174,8,17
	.word	.L899,.L900
	.byte	6
	.byte	'ret',0,1,175,8,9
	.word	.L880,.L901
	.byte	6
	.byte	'iss',0,1,176,8,9
	.word	.L877,.L902
	.byte	7
	.word	.L903,.L160
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_connect')
	.sect	'.debug_abbrev'
.L567:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_connect')
	.sect	'.debug_line'
.L568:
	.word	.L1588-.L1587
.L1587:
	.half	3
	.word	.L1590-.L1589
.L1589:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1590:
	.byte	5,1,7,0,5,2
	.word	.L425
	.byte	3,170,8,1,5,3,9
	.half	.L1248-.L425
	.byte	3,10,1,7,9
	.half	.L1591-.L1248
	.byte	1,9
	.half	.L151-.L1591
	.byte	3,1,1,7,9
	.half	.L1592-.L151
	.byte	1,5,1,9
	.half	.L1247-.L1592
	.byte	3,232,0,1,5,3,7,9
	.half	.L153-.L1247
	.byte	3,154,127,1,5,1,9
	.half	.L1253-.L153
	.byte	3,230,0,1,5,3,7,9
	.half	.L155-.L1253
	.byte	3,157,127,1,5,20,9
	.half	.L1593-.L155
	.byte	3,1,1,5,10,9
	.half	.L1594-.L1593
	.byte	3,2,1,5,3,9
	.half	.L1255-.L1594
	.byte	1,5,35,7,9
	.half	.L1595-.L1255
	.byte	3,1,1,5,47,9
	.half	.L1254-.L1595
	.byte	1,5,13,9
	.half	.L157-.L1254
	.byte	3,3,1,5,11,9
	.half	.L158-.L157
	.byte	1,5,3,9
	.half	.L1257-.L158
	.byte	3,2,1,5,7,7,9
	.half	.L1596-.L1257
	.byte	3,6,1,5,5,9
	.half	.L903-.L1596
	.byte	3,5,1,9
	.half	.L1597-.L903
	.byte	3,125,1,5,14,9
	.half	.L159-.L1597
	.byte	3,1,1,5,1,3,209,0,1,5,23,7,9
	.half	.L160-.L159
	.byte	3,189,127,1,5,3,9
	.half	.L1598-.L160
	.byte	3,1,1,5,35,7,9
	.half	.L1599-.L1598
	.byte	3,1,1,5,21,9
	.half	.L1600-.L1599
	.byte	1,5,5,9
	.half	.L1601-.L1600
	.byte	3,1,1,5,14,7,9
	.half	.L1602-.L1601
	.byte	3,1,1,5,1,3,63,1,5,22,7,9
	.half	.L163-.L1602
	.byte	3,90,1,5,18,9
	.half	.L1259-.L163
	.byte	3,1,1,5,16,1,9
	.half	.L1603-.L1259
	.byte	3,1,1,5,22,9
	.half	.L1604-.L1603
	.byte	3,1,1,5,16,1,9
	.half	.L1260-.L1604
	.byte	3,1,1,9
	.half	.L1605-.L1260
	.byte	3,1,1,5,35,9
	.half	.L1606-.L1605
	.byte	3,3,1,5,16,9
	.half	.L1607-.L1606
	.byte	1,5,27,9
	.half	.L1608-.L1607
	.byte	3,1,1,5,16,9
	.half	.L1609-.L1608
	.byte	3,1,1,5,14,9
	.half	.L1610-.L1609
	.byte	3,3,1,5,12,1,5,58,9
	.half	.L1611-.L1610
	.byte	3,2,1,5,12,9
	.half	.L1262-.L1611
	.byte	1,5,15,9
	.half	.L1612-.L1262
	.byte	3,2,1,5,13,1,5,18,9
	.half	.L1613-.L1612
	.byte	3,2,1,5,32,9
	.half	.L1614-.L1613
	.byte	3,6,1,5,7,9
	.half	.L1264-.L1614
	.byte	1,5,3,9
	.half	.L1266-.L1264
	.byte	3,1,1,5,18,7,9
	.half	.L1615-.L1266
	.byte	3,2,1,5,16,1,5,5,9
	.half	.L1616-.L1615
	.byte	3,1,1,5,7,7,9
	.half	.L1617-.L1616
	.byte	3,1,1,5,5,9
	.half	.L167-.L1617
	.byte	3,2,1,5,16,9
	.half	.L1618-.L167
	.byte	3,3,1,5,3,9
	.half	.L166-.L1618
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L570-.L166
	.byte	0,1,1
.L1588:
	.sdecl	'.debug_ranges',debug,cluster('tcp_connect')
	.sect	'.debug_ranges'
.L569:
	.word	-1,.L425,0,.L570-.L425,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_listen_with_backlog_and_err')
	.sect	'.debug_info'
.L571:
	.word	317
	.half	3
	.word	.L572
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L574,.L573
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_listen_with_backlog_and_err',0,1,208,6,1
	.word	.L841
	.byte	1,1,1
	.word	.L415,.L904,.L414
	.byte	4
	.byte	'pcb',0,1,208,6,49
	.word	.L841,.L905
	.byte	4
	.byte	'backlog',0,1,208,6,59
	.word	.L844,.L906
	.byte	4
	.byte	'err',0,1,208,6,75
	.word	.L907,.L908
	.byte	5
	.word	.L909
	.byte	6
	.byte	'lpcb',0,1,210,6,26
	.word	.L910,.L911
	.byte	6
	.byte	'res',0,1,211,6,9
	.word	.L880,.L912
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_listen_with_backlog_and_err')
	.sect	'.debug_abbrev'
.L572:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_listen_with_backlog_and_err')
	.sect	'.debug_line'
.L573:
	.word	.L1620-.L1619
.L1619:
	.half	3
	.word	.L1622-.L1621
.L1621:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1622:
	.byte	5,1,7,0,5,2
	.word	.L415
	.byte	3,207,6,1,5,31,9
	.half	.L1201-.L415
	.byte	3,2,1,5,3,9
	.half	.L1202-.L1201
	.byte	3,7,1,7,9
	.half	.L1623-.L1202
	.byte	1,9
	.half	.L113-.L1623
	.byte	3,1,1,5,47,9
	.half	.L115-.L113
	.byte	3,24,1,5,8,9
	.half	.L1209-.L115
	.byte	1,5,3,9
	.half	.L1214-.L1209
	.byte	3,1,1,5,9,7,9
	.half	.L1624-.L1214
	.byte	3,1,1,5,5,3,1,1,5,27,9
	.half	.L117-.L1624
	.byte	3,2,1,5,22,9
	.half	.L1210-.L117
	.byte	1,5,25,9
	.half	.L1625-.L1210
	.byte	3,1,1,5,20,9
	.half	.L1626-.L1625
	.byte	1,5,17,9
	.half	.L1627-.L1626
	.byte	3,1,1,5,15,1,5,19,9
	.half	.L1628-.L1627
	.byte	3,1,1,5,14,9
	.half	.L1629-.L1628
	.byte	1,5,25,9
	.half	.L1630-.L1629
	.byte	3,1,1,5,20,9
	.half	.L1631-.L1630
	.byte	1,5,21,9
	.half	.L1632-.L1631
	.byte	3,1,1,5,19,1,5,18,9
	.half	.L1633-.L1632
	.byte	3,1,1,5,13,9
	.half	.L1634-.L1633
	.byte	1,5,18,9
	.half	.L1635-.L1634
	.byte	3,1,1,5,13,9
	.half	.L1636-.L1635
	.byte	1,5,3,9
	.half	.L1637-.L1636
	.byte	3,4,1,5,10,9
	.half	.L1638-.L1637
	.byte	3,1,1,5,3,9
	.half	.L1639-.L1638
	.byte	1,5,5,7,9
	.half	.L1640-.L1639
	.byte	3,1,1,5,12,9
	.half	.L119-.L1640
	.byte	3,6,1,5,18,9
	.half	.L1217-.L119
	.byte	3,2,1,5,16,9
	.half	.L1641-.L1217
	.byte	1,5,3,9
	.half	.L1642-.L1641
	.byte	3,6,1,5,7,9
	.half	.L1643-.L1642
	.byte	3,1,1,5,3,9
	.half	.L116-.L1643
	.byte	3,2,1,5,10,7,9
	.half	.L1644-.L116
	.byte	3,1,1,5,3,9
	.half	.L126-.L1644
	.byte	3,2,1,5,1,9
	.half	.L1218-.L126
	.byte	3,1,1,7,9
	.half	.L575-.L1218
	.byte	0,1,1
.L1620:
	.sdecl	'.debug_ranges',debug,cluster('tcp_listen_with_backlog_and_err')
	.sect	'.debug_ranges'
.L574:
	.word	-1,.L415,0,.L575-.L415,0,0
.L909:
	.word	-1,.L415,0,.L904-.L415,-1,.L417,0,.L790-.L417,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_listen_with_backlog')
	.sect	'.debug_info'
.L576:
	.word	260
	.half	3
	.word	.L577
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L579,.L578
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_listen_with_backlog',0,1,185,6,1
	.word	.L841
	.byte	1,1,1
	.word	.L413,.L913,.L412
	.byte	4
	.byte	'pcb',0,1,185,6,41
	.word	.L841,.L914
	.byte	4
	.byte	'backlog',0,1,185,6,51
	.word	.L844,.L915
	.byte	5
	.word	.L413,.L913
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_listen_with_backlog')
	.sect	'.debug_abbrev'
.L577:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_listen_with_backlog')
	.sect	'.debug_line'
.L578:
	.word	.L1646-.L1645
.L1645:
	.half	3
	.word	.L1648-.L1647
.L1647:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1648:
	.byte	5,56,7,0,5,2
	.word	.L413
	.byte	3,187,6,1,5,1,9
	.half	.L580-.L413
	.byte	3,1,0,1,1
.L1646:
	.sdecl	'.debug_ranges',debug,cluster('tcp_listen_with_backlog')
	.sect	'.debug_ranges'
.L579:
	.word	-1,.L413,0,.L580-.L413,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_abort')
	.sect	'.debug_info'
.L581:
	.word	221
	.half	3
	.word	.L582
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L584,.L583
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_abort',0,1,254,4,1,1,1,1
	.word	.L405,.L916,.L404
	.byte	4
	.byte	'pcb',0,1,254,4,27
	.word	.L841,.L917
	.byte	5
	.word	.L405,.L916
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_abort')
	.sect	'.debug_abbrev'
.L582:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_abort')
	.sect	'.debug_line'
.L583:
	.word	.L1650-.L1649
.L1649:
	.half	3
	.word	.L1652-.L1651
.L1651:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1652:
	.byte	5,20,7,0,5,2
	.word	.L405
	.byte	3,255,4,1,5,1,9
	.half	.L585-.L405
	.byte	3,1,0,1,1
.L1650:
	.sdecl	'.debug_ranges',debug,cluster('tcp_abort')
	.sect	'.debug_ranges'
.L584:
	.word	-1,.L405,0,.L585-.L405,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_close')
	.sect	'.debug_info'
.L586:
	.word	225
	.half	3
	.word	.L587
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L589,.L588
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_close',0,1,228,3,1
	.word	.L880
	.byte	1,1,1
	.word	.L399,.L918,.L398
	.byte	4
	.byte	'pcb',0,1,228,3,27
	.word	.L841,.L919
	.byte	5
	.word	.L399,.L918
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_close')
	.sect	'.debug_abbrev'
.L587:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_close')
	.sect	'.debug_line'
.L588:
	.word	.L1654-.L1653
.L1653:
	.half	3
	.word	.L1656-.L1655
.L1655:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1656:
	.byte	5,1,7,0,5,2
	.word	.L399
	.byte	3,227,3,1,5,3,9
	.half	.L1132-.L399
	.byte	3,4,1,7,9
	.half	.L1657-.L1132
	.byte	1,5,1,9
	.half	.L1658-.L1657
	.byte	3,11,1,5,10,7,9
	.half	.L52-.L1658
	.byte	3,122,1,5,3,9
	.half	.L1659-.L52
	.byte	1,5,5,7,9
	.half	.L1660-.L1659
	.byte	3,2,1,5,34,9
	.half	.L54-.L1660
	.byte	3,3,1,5,1,9
	.half	.L590-.L54
	.byte	3,1,0,1,1
.L1654:
	.sdecl	'.debug_ranges',debug,cluster('tcp_close')
	.sect	'.debug_ranges'
.L589:
	.word	-1,.L399,0,.L590-.L399,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_shutdown')
	.sect	'.debug_info'
.L591:
	.word	270
	.half	3
	.word	.L592
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L594,.L593
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_shutdown',0,1,131,4,1
	.word	.L880
	.byte	1,1,1
	.word	.L401,.L920,.L400
	.byte	4
	.byte	'pcb',0,1,131,4,30
	.word	.L841,.L921
	.byte	4
	.byte	'shut_rx',0,1,131,4,39
	.word	.L886,.L922
	.byte	4
	.byte	'shut_tx',0,1,131,4,52
	.word	.L886,.L923
	.byte	5
	.word	.L401,.L920
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_shutdown')
	.sect	'.debug_abbrev'
.L592:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_shutdown')
	.sect	'.debug_line'
.L593:
	.word	.L1662-.L1661
.L1661:
	.half	3
	.word	.L1664-.L1663
.L1663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1664:
	.byte	5,1,7,0,5,2
	.word	.L401
	.byte	3,130,4,1,5,3,9
	.half	.L1138-.L401
	.byte	3,4,1,7,9
	.half	.L1665-.L1138
	.byte	1,5,1,9
	.half	.L1142-.L1665
	.byte	3,33,1,5,10,7,9
	.half	.L56-.L1142
	.byte	3,97,1,5,3,9
	.half	.L1666-.L56
	.byte	1,7,9
	.half	.L1145-.L1666
	.byte	3,3,1,5,5,7,9
	.half	.L1146-.L1145
	.byte	3,2,1,9
	.half	.L1147-.L1146
	.byte	3,1,1,5,38,7,9
	.half	.L1148-.L1147
	.byte	3,2,1,5,7,1,5,12,9
	.half	.L60-.L1148
	.byte	3,3,1,5,5,9
	.half	.L1143-.L60
	.byte	1,5,20,7,9
	.half	.L1667-.L1143
	.byte	3,1,1,5,27,9
	.half	.L1144-.L1667
	.byte	3,1,1,5,25,9
	.half	.L1668-.L1144
	.byte	1,5,3,9
	.half	.L59-.L1668
	.byte	3,3,1,5,16,7,9
	.half	.L1149-.L59
	.byte	3,3,1,5,12,9
	.half	.L1669-.L1149
	.byte	3,1,1,7,9
	.half	.L1670-.L1669
	.byte	3,1,1,7,9
	.half	.L1671-.L1670
	.byte	3,1,1,5,40,7,9
	.half	.L64-.L1671
	.byte	3,1,1,5,16,9
	.half	.L58-.L64
	.byte	3,4,1,5,1,3,4,1,5,10,7,9
	.half	.L63-.L58
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L595-.L63
	.byte	0,1,1
.L1662:
	.sdecl	'.debug_ranges',debug,cluster('tcp_shutdown')
	.sect	'.debug_ranges'
.L594:
	.word	-1,.L401,0,.L595-.L401,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_setprio')
	.sect	'.debug_info'
.L596:
	.word	241
	.half	3
	.word	.L597
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L599,.L598
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_setprio',0,1,236,12,1,1,1,1
	.word	.L449,.L924,.L448
	.byte	4
	.byte	'pcb',0,1,236,12,29
	.word	.L841,.L925
	.byte	4
	.byte	'prio',0,1,236,12,39
	.word	.L844,.L926
	.byte	5
	.word	.L449,.L924
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_setprio')
	.sect	'.debug_abbrev'
.L597:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_setprio')
	.sect	'.debug_line'
.L598:
	.word	.L1673-.L1672
.L1672:
	.half	3
	.word	.L1675-.L1674
.L1674:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1675:
	.byte	5,1,7,0,5,2
	.word	.L449
	.byte	3,235,12,1,5,3,9
	.half	.L1362-.L449
	.byte	3,4,1,7,9
	.half	.L1676-.L1362
	.byte	1,5,13,9
	.half	.L273-.L1676
	.byte	3,2,1,5,1,9
	.half	.L1677-.L273
	.byte	3,1,1,7,9
	.half	.L600-.L1677
	.byte	0,1,1
.L1673:
	.sdecl	'.debug_ranges',debug,cluster('tcp_setprio')
	.sect	'.debug_ranges'
.L599:
	.word	-1,.L449,0,.L600-.L449,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_tcp_get_tcp_addrinfo')
	.sect	'.debug_info'
.L601:
	.word	295
	.half	3
	.word	.L602
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L604,.L603
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_tcp_get_tcp_addrinfo',0,1,184,18,1
	.word	.L880
	.byte	1,1,1
	.word	.L499,.L927,.L498
	.byte	4
	.byte	'pcb',0,1,184,18,42
	.word	.L841,.L928
	.byte	4
	.byte	'local',0,1,184,18,51
	.word	.L886,.L929
	.byte	4
	.byte	'addr',0,1,184,18,69
	.word	.L930,.L931
	.byte	4
	.byte	'port',0,1,184,18,82
	.word	.L932,.L933
	.byte	5
	.word	.L499,.L927
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_tcp_get_tcp_addrinfo')
	.sect	'.debug_abbrev'
.L602:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_tcp_get_tcp_addrinfo')
	.sect	'.debug_line'
.L603:
	.word	.L1679-.L1678
.L1678:
	.half	3
	.word	.L1681-.L1680
.L1680:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1681:
	.byte	5,3,7,0,5,2
	.word	.L499
	.byte	3,185,18,1,5,5,7,9
	.half	.L1682-.L499
	.byte	3,1,1,5,7,7,9
	.half	.L1683-.L1682
	.byte	3,1,1,5,20,7,9
	.half	.L1684-.L1683
	.byte	3,1,1,5,10,9
	.half	.L1685-.L1684
	.byte	1,5,7,9
	.half	.L372-.L1685
	.byte	3,2,1,5,20,7,9
	.half	.L1686-.L372
	.byte	3,1,1,5,7,9
	.half	.L1687-.L1686
	.byte	3,127,1,9
	.half	.L371-.L1687
	.byte	3,4,1,5,20,7,9
	.half	.L1688-.L371
	.byte	3,1,1,5,10,9
	.half	.L1689-.L1688
	.byte	1,5,7,9
	.half	.L375-.L1689
	.byte	3,2,1,5,20,7,9
	.half	.L1690-.L375
	.byte	3,1,1,5,15,9
	.half	.L374-.L1690
	.byte	1,5,12,9
	.half	.L373-.L374
	.byte	3,3,1,5,1,3,3,1,5,10,7,9
	.half	.L370-.L373
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L605-.L370
	.byte	0,1,1
.L1679:
	.sdecl	'.debug_ranges',debug,cluster('tcp_tcp_get_tcp_addrinfo')
	.sect	'.debug_ranges'
.L604:
	.word	-1,.L499,0,.L605-.L499,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_init')
	.sect	'.debug_info'
.L606:
	.word	203
	.half	3
	.word	.L607
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L609,.L608
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_init',0,1,201,1,1,1,1,1
	.word	.L381,.L934,.L380
	.byte	4
	.word	.L381,.L934
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_init')
	.sect	'.debug_abbrev'
.L607:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_init')
	.sect	'.debug_line'
.L608:
	.word	.L1692-.L1691
.L1691:
	.half	3
	.word	.L1694-.L1693
.L1693:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1694:
	.byte	5,1,7,0,5,2
	.word	.L381
	.byte	3,205,1,1,7,9
	.half	.L610-.L381
	.byte	0,1,1
.L1692:
	.sdecl	'.debug_ranges',debug,cluster('tcp_init')
	.sect	'.debug_ranges'
.L609:
	.word	-1,.L381,0,.L610-.L381,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_tmr')
	.sect	'.debug_info'
.L611:
	.word	202
	.half	3
	.word	.L612
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L614,.L613
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_tmr',0,1,234,1,1,1,1,1
	.word	.L389,.L935,.L388
	.byte	4
	.word	.L389,.L935
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_tmr')
	.sect	'.debug_abbrev'
.L612:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_tmr')
	.sect	'.debug_line'
.L613:
	.word	.L1696-.L1695
.L1695:
	.half	3
	.word	.L1698-.L1697
.L1697:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1698:
	.byte	5,14,7,0,5,2
	.word	.L389
	.byte	3,236,1,1,5,9,9
	.half	.L1699-.L389
	.byte	3,2,1,5,7,9
	.half	.L1700-.L1699
	.byte	1,5,9,9
	.half	.L1701-.L1700
	.byte	1,5,3,9
	.half	.L1702-.L1701
	.byte	1,5,16,7,9
	.half	.L1703-.L1702
	.byte	3,3,1,5,1,7,9
	.half	.L4-.L1703
	.byte	3,2,1,7,9
	.half	.L615-.L4
	.byte	0,1,1
.L1696:
	.sdecl	'.debug_ranges',debug,cluster('tcp_tmr')
	.sect	'.debug_ranges'
.L614:
	.word	-1,.L389,0,.L615-.L389,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_slowtmr')
	.sect	'.debug_info'
.L616:
	.word	497
	.half	3
	.word	.L617
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L619,.L618
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_slowtmr',0,1,168,9,1,1,1,1
	.word	.L427,.L936,.L426
	.byte	4
	.word	.L937
	.byte	5
	.byte	'pcb',0,1,170,9,19
	.word	.L841,.L938
	.byte	5
	.byte	'prev',0,1,170,9,25
	.word	.L841,.L939
	.byte	5
	.byte	'eff_wnd',0,1,171,9,17
	.word	.L875,.L940
	.byte	5
	.byte	'pcb_remove',0,1,172,9,8
	.word	.L844,.L941
	.byte	5
	.byte	'pcb_reset',0,1,173,9,8
	.word	.L844,.L942
	.byte	5
	.byte	'err',0,1,174,9,9
	.word	.L880,.L943
	.byte	6
	.word	.L190,.L944
	.byte	5
	.byte	'backoff_cnt',0,1,217,9,16
	.word	.L844,.L945
	.byte	6
	.word	.L946,.L944
	.byte	5
	.byte	'next_slot',0,1,222,9,17
	.word	.L886,.L947
	.byte	0,0,7
	.word	.L948,.L207
	.byte	6
	.word	.L949,.L222
	.byte	5
	.byte	'pcb2',0,1,228,10,23
	.word	.L841,.L950
	.byte	5
	.byte	'err_fn',0,1,230,10,18
	.word	.L861,.L951
	.byte	5
	.byte	'err_arg',0,1,232,10,13
	.word	.L849,.L952
	.byte	0,6
	.word	.L953,.L954
	.byte	5
	.byte	'pcb2',0,1,171,11,23
	.word	.L841,.L955
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_slowtmr')
	.sect	'.debug_abbrev'
.L617:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,11,1,17,1
	.byte	18,1,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_slowtmr')
	.sect	'.debug_line'
.L618:
	.word	.L1705-.L1704
.L1704:
	.half	3
	.word	.L1707-.L1706
.L1706:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1707:
	.byte	5,5,7,0,5,2
	.word	.L427
	.byte	3,177,9,1,5,1,9
	.half	.L1708-.L427
	.byte	3,118,1,5,3,9
	.half	.L1269-.L1708
	.byte	3,10,1,5,5,9
	.half	.L1709-.L1269
	.byte	3,1,1,5,3,9
	.half	.L1710-.L1709
	.byte	1,5,8,9
	.half	.L176-.L1710
	.byte	3,4,1,5,9,9
	.half	.L1270-.L176
	.byte	3,1,1,5,5,9
	.half	.L1272-.L1270
	.byte	3,2,1,9
	.half	.L178-.L1272
	.byte	3,4,1,9
	.half	.L179-.L178
	.byte	3,1,1,9
	.half	.L180-.L179
	.byte	3,1,1,5,28,9
	.half	.L181-.L180
	.byte	3,1,1,5,12,9
	.half	.L1711-.L181
	.byte	1,5,5,9
	.half	.L1712-.L1711
	.byte	1,5,12,7,9
	.half	.L1713-.L1712
	.byte	3,2,1,5,16,9
	.half	.L1714-.L1713
	.byte	3,1,1,5,7,9
	.half	.L1715-.L1714
	.byte	3,1,1,5,21,9
	.half	.L182-.L1715
	.byte	3,2,1,5,16,9
	.half	.L1716-.L182
	.byte	3,2,1,5,12,9
	.half	.L1279-.L1716
	.byte	3,3,1,5,15,9
	.half	.L1717-.L1279
	.byte	3,126,1,5,9,9
	.half	.L1280-.L1717
	.byte	3,2,1,5,38,7,9
	.half	.L1718-.L1280
	.byte	1,5,45,9
	.half	.L1719-.L1718
	.byte	1,5,19,7,9
	.half	.L184-.L1719
	.byte	3,3,1,5,12,9
	.half	.L1720-.L184
	.byte	1,5,14,7,9
	.half	.L1721-.L1720
	.byte	3,4,1,5,7,9
	.half	.L1722-.L1721
	.byte	1,5,9,7,9
	.half	.L1723-.L1722
	.byte	3,1,1,9
	.half	.L188-.L1723
	.byte	3,1,1,5,16,9
	.half	.L189-.L188
	.byte	3,1,1,5,9,9
	.half	.L1724-.L189
	.byte	1,5,11,7,9
	.half	.L185-.L1724
	.byte	3,1,1,5,23,1,5,53,9
	.half	.L190-.L185
	.byte	3,2,1,5,30,9
	.half	.L1725-.L190
	.byte	1,5,49,9
	.half	.L1726-.L1725
	.byte	1,5,18,9
	.half	.L1727-.L1726
	.byte	3,1,1,5,49,9
	.half	.L1728-.L1727
	.byte	3,127,1,5,11,9
	.half	.L1283-.L1728
	.byte	3,1,1,5,29,7,9
	.half	.L1729-.L1283
	.byte	3,1,1,5,18,9
	.half	.L192-.L1729
	.byte	3,2,1,5,11,9
	.half	.L1730-.L192
	.byte	1,5,20,7,9
	.half	.L946-.L1730
	.byte	3,3,1,5,27,9
	.half	.L1731-.L946
	.byte	3,126,1,5,13,9
	.half	.L1285-.L1731
	.byte	3,2,1,5,41,7,9
	.half	.L1732-.L1285
	.byte	3,1,1,5,15,9
	.half	.L1284-.L1732
	.byte	1,7,9
	.half	.L1733-.L1284
	.byte	1,5,55,9
	.half	.L194-.L1733
	.byte	3,5,1,5,15,9
	.half	.L1288-.L194
	.byte	1,5,32,7,9
	.half	.L1734-.L1288
	.byte	3,1,1,5,17,9
	.half	.L1291-.L1734
	.byte	1,5,29,7,9
	.half	.L196-.L1291
	.byte	3,2,1,5,13,9
	.half	.L195-.L196
	.byte	3,4,1,5,34,7,9
	.half	.L1735-.L195
	.byte	3,1,1,5,32,1,5,22,9
	.half	.L1286-.L1735
	.byte	3,1,1,5,15,9
	.half	.L1736-.L1286
	.byte	1,5,37,7,9
	.half	.L1737-.L1736
	.byte	3,1,1,5,11,9
	.half	.L944-.L1737
	.byte	3,104,1,5,38,9
	.half	.L187-.L944
	.byte	3,31,1,5,48,9
	.half	.L1738-.L187
	.byte	1,5,46,9
	.half	.L1739-.L1738
	.byte	1,5,11,7,9
	.half	.L1740-.L1739
	.byte	3,1,1,5,16,9
	.half	.L202-.L1740
	.byte	3,3,1,5,30,9
	.half	.L1741-.L202
	.byte	1,5,9,9
	.half	.L1742-.L1741
	.byte	1,5,39,7,9
	.half	.L1743-.L1742
	.byte	3,8,1,5,15,9
	.half	.L1293-.L1743
	.byte	1,5,63,7,9
	.half	.L1744-.L1293
	.byte	1,5,59,9
	.half	.L1745-.L1744
	.byte	1,5,89,7,9
	.half	.L1746-.L1745
	.byte	1,5,98,9
	.half	.L1747-.L1746
	.byte	1,5,20,7,9
	.half	.L204-.L1747
	.byte	3,3,1,5,13,9
	.half	.L1748-.L204
	.byte	1,5,35,7,9
	.half	.L948-.L1748
	.byte	3,2,1,5,51,9
	.half	.L1749-.L948
	.byte	1,5,40,9
	.half	.L1750-.L1749
	.byte	1,5,60,1,5,46,9
	.half	.L1751-.L1750
	.byte	1,5,34,3,127,1,5,60,9
	.half	.L1752-.L1751
	.byte	3,1,1,5,34,9
	.half	.L1753-.L1752
	.byte	3,127,1,5,71,9
	.half	.L1754-.L1753
	.byte	3,1,1,5,57,9
	.half	.L1755-.L1754
	.byte	1,5,33,9
	.half	.L1756-.L1755
	.byte	3,1,1,5,24,9
	.half	.L1757-.L1756
	.byte	1,5,26,9
	.half	.L207-.L1757
	.byte	3,4,1,5,24,1,5,23,9
	.half	.L1758-.L207
	.byte	3,3,1,5,37,9
	.half	.L1294-.L1758
	.byte	3,1,1,5,27,1,5,52,9
	.half	.L1295-.L1294
	.byte	3,1,1,5,58,9
	.half	.L1759-.L1295
	.byte	1,5,33,9
	.half	.L1760-.L1759
	.byte	1,5,13,9
	.half	.L1761-.L1760
	.byte	1,5,29,7,9
	.half	.L1762-.L1761
	.byte	3,1,1,5,28,9
	.half	.L208-.L1762
	.byte	3,2,1,5,23,9
	.half	.L1763-.L208
	.byte	1,5,32,9
	.half	.L1764-.L1763
	.byte	3,4,1,5,30,1,5,35,9
	.half	.L1765-.L1764
	.byte	3,4,1,5,12,9
	.half	.L191-.L1765
	.byte	3,6,1,5,5,9
	.half	.L1766-.L191
	.byte	1,5,14,7,9
	.half	.L1767-.L1766
	.byte	3,2,1,5,7,9
	.half	.L1768-.L1767
	.byte	1,5,21,7,9
	.half	.L1769-.L1768
	.byte	3,3,1,5,9,9
	.half	.L209-.L1769
	.byte	3,9,1,5,10,9
	.half	.L1770-.L209
	.byte	3,1,1,5,22,7,9
	.half	.L1771-.L1770
	.byte	3,1,1,5,19,7,9
	.half	.L212-.L1771
	.byte	3,1,1,5,34,9
	.half	.L1772-.L212
	.byte	1,5,15,9
	.half	.L1773-.L1772
	.byte	3,1,1,5,29,9
	.half	.L1774-.L1773
	.byte	3,127,1,3,1,1,5,50,9
	.half	.L1775-.L1774
	.byte	1,5,27,9
	.half	.L1776-.L1775
	.byte	1,5,48,9
	.half	.L1777-.L1776
	.byte	1,5,7,9
	.half	.L1778-.L1777
	.byte	3,127,1,5,9,7,9
	.half	.L1779-.L1778
	.byte	3,6,1,9
	.half	.L1780-.L1779
	.byte	3,1,1,5,21,3,127,1,5,39,9
	.half	.L214-.L1780
	.byte	3,3,1,5,57,9
	.half	.L1781-.L214
	.byte	1,5,34,9
	.half	.L1782-.L1781
	.byte	1,5,18,9
	.half	.L1783-.L1782
	.byte	3,1,1,5,14,9
	.half	.L1784-.L1783
	.byte	3,126,1,5,29,7,9
	.half	.L1785-.L1784
	.byte	3,3,1,5,9,9
	.half	.L1300-.L1785
	.byte	3,1,1,5,14,7,9
	.half	.L1786-.L1300
	.byte	3,1,1,5,29,9
	.half	.L1787-.L1786
	.byte	1,5,12,9
	.half	.L211-.L1787
	.byte	3,9,1,5,9,9
	.half	.L1788-.L211
	.byte	1,5,10,7,9
	.half	.L1789-.L1788
	.byte	3,1,1,5,44,9
	.half	.L1298-.L1789
	.byte	1,5,50,9
	.half	.L1302-.L1298
	.byte	1,5,31,9
	.half	.L1790-.L1302
	.byte	1,5,22,7,9
	.half	.L1791-.L1790
	.byte	3,2,1,5,12,9
	.half	.L218-.L1791
	.byte	3,5,1,5,5,9
	.half	.L1792-.L218
	.byte	1,5,19,7,9
	.half	.L1793-.L1792
	.byte	3,1,1,5,23,9
	.half	.L220-.L1793
	.byte	3,8,1,5,5,9
	.half	.L1794-.L220
	.byte	1,5,19,7,9
	.half	.L1795-.L1794
	.byte	3,1,1,5,9,9
	.half	.L1303-.L1795
	.byte	3,1,1,5,5,9
	.half	.L221-.L1303
	.byte	3,6,1,5,30,7,9
	.half	.L949-.L221
	.byte	3,3,1,5,21,9
	.half	.L1306-.L949
	.byte	3,4,1,5,9,9
	.half	.L1308-.L1306
	.byte	3,3,1,5,7,9
	.half	.L1796-.L1308
	.byte	3,127,1,5,9,7,9
	.half	.L1797-.L1796
	.byte	3,1,1,7,9
	.half	.L1798-.L1797
	.byte	1,5,25,9
	.half	.L224-.L1798
	.byte	3,1,1,5,20,9
	.half	.L1799-.L224
	.byte	1,5,31,9
	.half	.L1800-.L1799
	.byte	1,5,9,9
	.half	.L223-.L1800
	.byte	3,3,1,7,9
	.half	.L1801-.L223
	.byte	1,5,30,9
	.half	.L226-.L1801
	.byte	3,1,1,5,25,9
	.half	.L1802-.L226
	.byte	1,5,7,9
	.half	.L225-.L1802
	.byte	3,3,1,5,25,7,9
	.half	.L1803-.L225
	.byte	3,1,1,5,39,9
	.half	.L1804-.L1803
	.byte	1,5,70,9
	.half	.L1805-.L1804
	.byte	1,5,20,9
	.half	.L1806-.L1805
	.byte	3,1,1,5,37,9
	.half	.L1807-.L1806
	.byte	1,5,20,9
	.half	.L227-.L1807
	.byte	3,3,1,5,12,9
	.half	.L1315-.L227
	.byte	3,2,1,5,16,9
	.half	.L1316-.L1315
	.byte	3,1,1,9
	.half	.L1808-.L1316
	.byte	3,1,1,5,33,9
	.half	.L1317-.L1808
	.byte	3,2,1,5,31,1,5,7,9
	.half	.L1809-.L1317
	.byte	3,1,1,7,9
	.half	.L1810-.L1809
	.byte	1,5,11,9
	.half	.L228-.L1810
	.byte	3,1,1,5,7,9
	.half	.L1811-.L228
	.byte	1,5,9,7,9
	.half	.L1812-.L1811
	.byte	3,1,1,5,12,9
	.half	.L222-.L1812
	.byte	3,4,1,5,13,9
	.half	.L1813-.L222
	.byte	3,4,1,5,16,9
	.half	.L1814-.L1813
	.byte	3,125,1,5,7,9
	.half	.L1815-.L1814
	.byte	3,3,1,5,15,9
	.half	.L1816-.L1815
	.byte	3,1,1,5,32,9
	.half	.L1817-.L1816
	.byte	1,5,7,9
	.half	.L1818-.L1817
	.byte	1,5,25,7,9
	.half	.L1819-.L1818
	.byte	3,1,1,5,23,1,5,33,9
	.half	.L1820-.L1819
	.byte	3,2,1,5,9,9
	.half	.L1821-.L1820
	.byte	3,1,1,5,13,9
	.half	.L232-.L1821
	.byte	3,1,1,5,9,9
	.half	.L1822-.L232
	.byte	1,7,9
	.half	.L1823-.L1822
	.byte	3,4,1,5,22,7,9
	.half	.L1824-.L1823
	.byte	3,1,1,5,21,9
	.half	.L177-.L1824
	.byte	3,166,126,1,5,8,7,9
	.half	.L1825-.L177
	.byte	3,226,1,1,5,9,9
	.half	.L1826-.L1825
	.byte	3,1,1,5,21,9
	.half	.L1827-.L1826
	.byte	3,1,1,5,5,9
	.half	.L235-.L1827
	.byte	3,1,1,5,17,9
	.half	.L236-.L235
	.byte	3,4,1,5,5,9
	.half	.L1324-.L236
	.byte	3,5,1,5,21,7,9
	.half	.L953-.L1324
	.byte	3,2,1,5,9,9
	.half	.L1326-.L953
	.byte	3,3,1,5,7,9
	.half	.L1828-.L1326
	.byte	3,127,1,5,9,7,9
	.half	.L1829-.L1828
	.byte	3,1,1,7,9
	.half	.L1830-.L1829
	.byte	1,5,25,9
	.half	.L239-.L1830
	.byte	3,1,1,5,20,9
	.half	.L1831-.L239
	.byte	1,5,31,9
	.half	.L1832-.L1831
	.byte	1,5,9,9
	.half	.L238-.L1832
	.byte	3,3,1,7,9
	.half	.L1833-.L238
	.byte	1,5,26,9
	.half	.L241-.L1833
	.byte	3,1,1,5,21,9
	.half	.L1834-.L241
	.byte	1,5,12,9
	.half	.L240-.L1834
	.byte	3,2,1,5,16,9
	.half	.L1330-.L240
	.byte	3,1,1,9
	.half	.L1835-.L1330
	.byte	3,1,1,5,17,9
	.half	.L954-.L1835
	.byte	3,126,1,5,12,9
	.half	.L237-.L954
	.byte	3,4,1,5,16,9
	.half	.L1836-.L237
	.byte	3,1,1,5,21,9
	.half	.L234-.L1836
	.byte	3,101,1,5,1,7,9
	.half	.L1837-.L234
	.byte	3,30,1,7,9
	.half	.L620-.L1837
	.byte	0,1,1
.L1705:
	.sdecl	'.debug_ranges',debug,cluster('tcp_slowtmr')
	.sect	'.debug_ranges'
.L619:
	.word	-1,.L427,0,.L620-.L427,0,0
.L937:
	.word	-1,.L427,0,.L936-.L427,-1,.L429,0,.L810-.L429,-1,.L431,0,.L805-.L431,-1,.L433,0,.L800-.L433,-1,.L435,0
	.word	.L780-.L435,-1,.L437,0,.L770-.L437,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_fasttmr')
	.sect	'.debug_info'
.L621:
	.word	252
	.half	3
	.word	.L622
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L624,.L623
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_fasttmr',0,1,199,11,1,1,1,1
	.word	.L439,.L956,.L438
	.byte	4
	.word	.L439,.L956
	.byte	5
	.byte	'pcb',0,1,201,11,19
	.word	.L841,.L957
	.byte	4
	.word	.L958,.L959
	.byte	5
	.byte	'next',0,1,210,11,23
	.word	.L841,.L960
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_fasttmr')
	.sect	'.debug_abbrev'
.L622:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_fasttmr')
	.sect	'.debug_line'
.L623:
	.word	.L1839-.L1838
.L1838:
	.half	3
	.word	.L1841-.L1840
.L1840:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1841:
	.byte	5,5,7,0,5,2
	.word	.L439
	.byte	3,202,11,1,5,3,9
	.half	.L1842-.L439
	.byte	1,5,9,9
	.half	.L243-.L1842
	.byte	3,3,1,5,21,9
	.half	.L1331-.L243
	.byte	3,2,1,5,28,9
	.half	.L245-.L1331
	.byte	3,1,1,5,12,9
	.half	.L1843-.L245
	.byte	1,5,5,9
	.half	.L1844-.L1843
	.byte	1,5,23,7,9
	.half	.L958-.L1844
	.byte	3,2,1,5,14,9
	.half	.L1845-.L958
	.byte	3,2,1,5,7,9
	.half	.L1846-.L1845
	.byte	1,5,9,7,9
	.half	.L1847-.L1846
	.byte	3,2,1,5,20,9
	.half	.L1848-.L1847
	.byte	3,1,1,5,9,9
	.half	.L1333-.L1848
	.byte	3,1,1,5,14,9
	.half	.L247-.L1333
	.byte	3,3,1,5,7,9
	.half	.L1849-.L247
	.byte	1,5,9,7,9
	.half	.L1850-.L1849
	.byte	3,2,1,5,32,3,1,1,5,9,9
	.half	.L1334-.L1850
	.byte	3,127,1,5,32,9
	.half	.L1851-.L1334
	.byte	3,1,1,5,14,9
	.half	.L248-.L1851
	.byte	3,6,1,5,17,9
	.half	.L1852-.L248
	.byte	3,125,1,5,7,9
	.half	.L1335-.L1852
	.byte	3,3,1,5,35,7,9
	.half	.L1853-.L1335
	.byte	3,1,1,5,33,1,5,34,9
	.half	.L1854-.L1853
	.byte	3,1,1,5,13,9
	.half	.L1337-.L1854
	.byte	3,1,1,5,9,9
	.half	.L1855-.L1337
	.byte	1,5,11,7,9
	.half	.L249-.L1855
	.byte	3,5,1,5,17,9
	.half	.L959-.L249
	.byte	1,5,16,9
	.half	.L246-.L959
	.byte	3,2,1,5,21,9
	.half	.L244-.L246
	.byte	3,97,1,5,1,7,9
	.half	.L1856-.L244
	.byte	3,34,1,7,9
	.half	.L625-.L1856
	.byte	0,1,1
.L1839:
	.sdecl	'.debug_ranges',debug,cluster('tcp_fasttmr')
	.sect	'.debug_ranges'
.L624:
	.word	-1,.L439,0,.L625-.L439,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_txnow')
	.sect	'.debug_info'
.L626:
	.word	222
	.half	3
	.word	.L627
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L629,.L628
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_txnow',0,1,246,11,1,1,1,1
	.word	.L441,.L961,.L440
	.byte	4
	.word	.L441,.L961
	.byte	5
	.byte	'pcb',0,1,248,11,19
	.word	.L841,.L962
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_txnow')
	.sect	'.debug_abbrev'
.L627:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_txnow')
	.sect	'.debug_line'
.L628:
	.word	.L1858-.L1857
.L1857:
	.half	3
	.word	.L1860-.L1859
.L1859:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1860:
	.byte	5,14,7,0,5,2
	.word	.L441
	.byte	3,249,11,1,5,42,9
	.half	.L1338-.L441
	.byte	1,5,12,9
	.half	.L252-.L1338
	.byte	3,1,1,5,5,9
	.half	.L1861-.L252
	.byte	1,5,18,7,9
	.half	.L1862-.L1861
	.byte	3,1,1,5,53,9
	.half	.L253-.L1862
	.byte	3,126,1,5,42,9
	.half	.L251-.L253
	.byte	1,5,1,7,9
	.half	.L1863-.L251
	.byte	3,5,1,7,9
	.half	.L630-.L1863
	.byte	0,1,1
.L1858:
	.sdecl	'.debug_ranges',debug,cluster('tcp_txnow')
	.sect	'.debug_ranges'
.L629:
	.word	-1,.L441,0,.L630-.L441,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_alloc')
	.sect	'.debug_info'
.L631:
	.word	240
	.half	3
	.word	.L632
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L634,.L633
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_alloc',0,1,170,14,1
	.word	.L841
	.byte	1,1,1
	.word	.L465,.L963,.L464
	.byte	4
	.byte	'prio',0,1,170,14,16
	.word	.L844,.L964
	.byte	5
	.word	.L965
	.byte	6
	.byte	'pcb',0,1,172,14,19
	.word	.L841,.L966
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_alloc')
	.sect	'.debug_abbrev'
.L632:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_alloc')
	.sect	'.debug_line'
.L633:
	.word	.L1865-.L1864
.L1864:
	.half	3
	.word	.L1867-.L1866
.L1866:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1867:
	.byte	5,1,7,0,5,2
	.word	.L465
	.byte	3,169,14,1,5,39,9
	.half	.L1404-.L465
	.byte	3,6,1,5,7,9
	.half	.L1403-.L1404
	.byte	1,5,3,9
	.half	.L1406-.L1403
	.byte	3,1,1,5,25,7,9
	.half	.L1868-.L1406
	.byte	3,2,1,5,22,9
	.half	.L1405-.L1868
	.byte	3,4,1,5,41,9
	.half	.L1869-.L1405
	.byte	3,2,1,5,9,9
	.half	.L1407-.L1869
	.byte	1,5,5,9
	.half	.L1409-.L1407
	.byte	3,1,1,5,22,7,9
	.half	.L1870-.L1409
	.byte	3,3,1,5,43,9
	.half	.L1408-.L1870
	.byte	3,2,1,5,11,9
	.half	.L1410-.L1408
	.byte	1,5,7,9
	.half	.L1412-.L1410
	.byte	3,1,1,5,24,7,9
	.half	.L1871-.L1412
	.byte	3,3,1,5,45,9
	.half	.L1411-.L1871
	.byte	3,2,1,5,13,9
	.half	.L1413-.L1411
	.byte	1,5,9,9
	.half	.L1415-.L1413
	.byte	3,1,1,5,25,7,9
	.half	.L1872-.L1415
	.byte	3,3,1,5,47,9
	.half	.L1414-.L1872
	.byte	3,2,1,5,15,9
	.half	.L1416-.L1414
	.byte	1,5,11,9
	.half	.L1417-.L1416
	.byte	3,1,1,5,9,9
	.half	.L308-.L1417
	.byte	3,5,1,5,7,9
	.half	.L307-.L308
	.byte	3,5,1,5,5,9
	.half	.L306-.L307
	.byte	3,5,1,5,3,9
	.half	.L305-.L306
	.byte	3,5,1,5,17,7,9
	.half	.L1873-.L305
	.byte	3,2,1,5,20,1,9
	.half	.L1420-.L1873
	.byte	3,2,1,5,15,3,127,1,5,37,9
	.half	.L1874-.L1420
	.byte	3,4,1,5,18,3,125,1,5,37,9
	.half	.L1875-.L1874
	.byte	3,3,1,5,18,9
	.half	.L1876-.L1875
	.byte	1,5,16,9
	.half	.L1877-.L1876
	.byte	3,1,1,5,14,1,5,16,9
	.half	.L1878-.L1877
	.byte	3,3,1,5,14,1,5,21,9
	.half	.L1879-.L1878
	.byte	3,1,1,5,14,1,5,13,9
	.half	.L1880-.L1879
	.byte	3,1,1,5,18,9
	.half	.L1881-.L1880
	.byte	3,1,1,5,16,1,5,17,9
	.half	.L1882-.L1881
	.byte	3,1,1,5,15,1,5,17,9
	.half	.L1883-.L1882
	.byte	3,13,1,5,16,9
	.half	.L1884-.L1883
	.byte	3,116,1,5,14,9
	.half	.L1885-.L1884
	.byte	1,5,17,9
	.half	.L1886-.L1885
	.byte	3,12,1,5,23,9
	.half	.L1887-.L1886
	.byte	3,117,1,5,21,9
	.half	.L1888-.L1887
	.byte	1,5,19,9
	.half	.L1889-.L1888
	.byte	3,8,1,5,15,9
	.half	.L1890-.L1889
	.byte	3,3,1,5,23,9
	.half	.L1891-.L1890
	.byte	3,4,1,5,21,9
	.half	.L1892-.L1891
	.byte	1,5,3,9
	.half	.L313-.L1892
	.byte	3,7,1,5,1,9
	.half	.L1421-.L313
	.byte	3,1,1,7,9
	.half	.L635-.L1421
	.byte	0,1,1
.L1865:
	.sdecl	'.debug_ranges',debug,cluster('tcp_alloc')
	.sect	'.debug_ranges'
.L634:
	.word	-1,.L465,0,.L635-.L465,0,0
.L965:
	.word	-1,.L465,0,.L963-.L465,-1,.L467,0,.L785-.L467,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_free')
	.sect	'.debug_info'
.L636:
	.word	216
	.half	3
	.word	.L637
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L639,.L638
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_free',0,1,210,1,1,1,1,1
	.word	.L383,.L967,.L382
	.byte	4
	.byte	'pcb',0,1,210,1,26
	.word	.L841,.L968
	.byte	5
	.word	.L969
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_free')
	.sect	'.debug_abbrev'
.L637:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_free')
	.sect	'.debug_line'
.L638:
	.word	.L1894-.L1893
.L1893:
	.half	3
	.word	.L1896-.L1895
.L1895:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1896:
	.byte	5,1,7,0,5,2
	.word	.L383
	.byte	3,209,1,1,5,3,9
	.half	.L1084-.L383
	.byte	3,2,1,5,1,9
	.half	.L1897-.L1084
	.byte	3,126,1,5,3,9
	.half	.L1082-.L1897
	.byte	3,2,1,7,9
	.half	.L1898-.L1082
	.byte	1,5,13,9
	.half	.L2-.L1898
	.byte	3,4,1,5,27,1,5,1,9
	.half	.L640-.L2
	.byte	3,1,0,1,1
.L1894:
	.sdecl	'.debug_ranges',debug,cluster('tcp_free')
	.sect	'.debug_ranges'
.L639:
	.word	-1,.L383,0,.L640-.L383,0,0
.L969:
	.word	-1,.L383,0,.L967-.L383,-1,.L385,0,.L775-.L385,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_abandon')
	.sect	'.debug_info'
.L641:
	.word	412
	.half	3
	.word	.L642
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L644,.L643
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_abandon',0,1,179,4,1,1,1,1
	.word	.L403,.L970,.L402
	.byte	4
	.byte	'pcb',0,1,179,4,29
	.word	.L841,.L971
	.byte	4
	.byte	'reset',0,1,179,4,38
	.word	.L886,.L972
	.byte	5
	.word	.L403,.L970
	.byte	6
	.byte	'seqno',0,1,181,4,9
	.word	.L877,.L973
	.byte	6
	.byte	'ackno',0,1,181,4,16
	.word	.L877,.L974
	.byte	6
	.byte	'errf',0,1,183,4,14
	.word	.L861,.L975
	.byte	6
	.byte	'errf_arg',0,1,185,4,9
	.word	.L849,.L976
	.byte	5
	.word	.L74,.L970
	.byte	6
	.byte	'send_rst',0,1,201,4,9
	.word	.L886,.L977
	.byte	6
	.byte	'local_port',0,1,202,4,11
	.word	.L875,.L978
	.byte	5
	.word	.L81,.L79
	.byte	6
	.byte	'tcp_tmp_pcb',0,1,213,4,9
	.word	.L841,.L979
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_abandon')
	.sect	'.debug_abbrev'
.L642:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_abandon')
	.sect	'.debug_line'
.L643:
	.word	.L1900-.L1899
.L1899:
	.half	3
	.word	.L1902-.L1901
.L1901:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1902:
	.byte	5,1,7,0,5,2
	.word	.L403
	.byte	3,178,4,1,5,3,9
	.half	.L1153-.L403
	.byte	3,10,1,7,9
	.half	.L1154-.L1153
	.byte	1,5,1,9
	.half	.L89-.L1154
	.byte	3,51,1,5,3,7,9
	.half	.L71-.L89
	.byte	3,80,1,5,10,9
	.half	.L73-.L71
	.byte	3,5,1,5,21,9
	.half	.L1903-.L73
	.byte	1,5,3,9
	.half	.L1904-.L1903
	.byte	1,5,21,7,9
	.half	.L1905-.L1904
	.byte	3,1,1,5,34,9
	.half	.L1906-.L1905
	.byte	1,5,14,9
	.half	.L1161-.L1906
	.byte	3,1,1,5,18,9
	.half	.L74-.L1161
	.byte	3,2,1,5,16,3,3,1,5,22,9
	.half	.L1163-.L74
	.byte	3,126,1,5,16,3,3,1,5,15,9
	.half	.L1164-.L1163
	.byte	3,2,1,5,19,9
	.half	.L1165-.L1164
	.byte	3,2,1,5,14,9
	.half	.L1166-.L1165
	.byte	3,2,1,5,5,9
	.half	.L1907-.L1166
	.byte	3,127,1,5,7,7,9
	.half	.L1908-.L1907
	.byte	3,1,1,5,9,7,9
	.half	.L1909-.L1908
	.byte	3,2,1,5,7,9
	.half	.L1910-.L1909
	.byte	3,126,1,5,16,9
	.half	.L76-.L1910
	.byte	3,5,1,5,7,3,2,1,5,18,9
	.half	.L1169-.L76
	.byte	3,127,1,5,7,3,1,1,5,12,9
	.half	.L77-.L1169
	.byte	3,2,1,5,5,9
	.half	.L1911-.L77
	.byte	1,5,24,7,9
	.half	.L1912-.L1911
	.byte	3,1,1,5,12,9
	.half	.L85-.L1912
	.byte	3,2,1,5,5,9
	.half	.L1913-.L85
	.byte	1,5,24,7,9
	.half	.L1914-.L1913
	.byte	3,1,1,5,12,9
	.half	.L86-.L1914
	.byte	3,3,1,5,5,9
	.half	.L1915-.L86
	.byte	1,5,24,7,9
	.half	.L1916-.L1915
	.byte	3,1,1,5,5,9
	.half	.L87-.L1916
	.byte	3,4,1,5,54,7,9
	.half	.L1917-.L87
	.byte	3,2,1,5,82,9
	.half	.L1918-.L1917
	.byte	1,5,14,9
	.half	.L88-.L1918
	.byte	3,3,1,5,5,9
	.half	.L1174-.L88
	.byte	3,1,1,7,9
	.half	.L1919-.L1174
	.byte	1,5,1,9
	.half	.L645-.L1919
	.byte	3,2,0,1,1
.L1900:
	.sdecl	'.debug_ranges',debug,cluster('tcp_abandon')
	.sect	'.debug_ranges'
.L644:
	.word	-1,.L403,0,.L645-.L403,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_update_rcv_ann_wnd')
	.sect	'.debug_info'
.L646:
	.word	306
	.half	3
	.word	.L647
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L649,.L648
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_update_rcv_ann_wnd',0,1,162,7,1
	.word	.L877
	.byte	1,1,1
	.word	.L419,.L980,.L418
	.byte	4
	.byte	'pcb',0,1,162,7,40
	.word	.L841,.L981
	.byte	5
	.word	.L419,.L980
	.byte	6
	.byte	'new_right_edge',0,1,164,7,9
	.word	.L877,.L982
	.byte	5
	.word	.L131,.L132
	.byte	6
	.byte	'new_rcv_ann_wnd',0,1,180,7,13
	.word	.L877,.L983
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_update_rcv_ann_wnd')
	.sect	'.debug_abbrev'
.L647:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_update_rcv_ann_wnd')
	.sect	'.debug_line'
.L648:
	.word	.L1921-.L1920
.L1920:
	.half	3
	.word	.L1923-.L1922
.L1922:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1923:
	.byte	5,1,7,0,5,2
	.word	.L419
	.byte	3,161,7,1,5,3,9
	.half	.L1221-.L419
	.byte	3,4,1,7,9
	.half	.L1924-.L1221
	.byte	1,5,7,9
	.half	.L128-.L1924
	.byte	3,3,1,5,38,9
	.half	.L1925-.L128
	.byte	3,126,1,5,7,9
	.half	.L1926-.L1925
	.byte	3,2,1,5,23,3,126,1,5,7,9
	.half	.L1927-.L1926
	.byte	3,2,1,5,33,9
	.half	.L1928-.L1927
	.byte	3,126,1,5,7,9
	.half	.L1225-.L1928
	.byte	3,2,1,5,3,9
	.half	.L1929-.L1225
	.byte	1,5,22,7,9
	.half	.L1930-.L1929
	.byte	3,2,1,5,32,9
	.half	.L1931-.L1930
	.byte	3,1,1,5,27,9
	.half	.L1932-.L1931
	.byte	1,5,1,3,16,1,5,9,7,9
	.half	.L129-.L1932
	.byte	3,114,1,5,5,9
	.half	.L1933-.L129
	.byte	1,5,26,7,9
	.half	.L1934-.L1933
	.byte	3,3,1,5,24,1,5,27,9
	.half	.L1935-.L1934
	.byte	1,5,55,9
	.half	.L131-.L1935
	.byte	3,3,1,5,7,9
	.half	.L1936-.L131
	.byte	3,2,1,5,24,9
	.half	.L133-.L1936
	.byte	3,2,1,5,12,9
	.half	.L132-.L133
	.byte	3,2,1,5,1,3,2,1,7,9
	.half	.L650-.L132
	.byte	0,1,1
.L1921:
	.sdecl	'.debug_ranges',debug,cluster('tcp_update_rcv_ann_wnd')
	.sect	'.debug_ranges'
.L649:
	.word	-1,.L419,0,.L650-.L419,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_process_refused_data')
	.sect	'.debug_info'
.L651:
	.word	295
	.half	3
	.word	.L652
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L654,.L653
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_process_refused_data',0,1,131,12,1
	.word	.L880
	.byte	1,1,1
	.word	.L443,.L984,.L442
	.byte	4
	.byte	'pcb',0,1,131,12,42
	.word	.L841,.L985
	.byte	5
	.word	.L443,.L984
	.byte	5
	.word	.L254,.L259
	.byte	6
	.byte	'err',0,1,143,12,11
	.word	.L880,.L986
	.byte	6
	.byte	'refused_flags',0,1,144,12,10
	.word	.L844,.L987
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_process_refused_data')
	.sect	'.debug_abbrev'
.L652:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_process_refused_data')
	.sect	'.debug_line'
.L653:
	.word	.L1938-.L1937
.L1937:
	.half	3
	.word	.L1940-.L1939
.L1939:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1940:
	.byte	5,1,7,0,5,2
	.word	.L443
	.byte	3,130,12,1,5,3,9
	.half	.L1342-.L443
	.byte	3,6,1,7,9
	.half	.L1941-.L1342
	.byte	1,5,1,9
	.half	.L1942-.L1941
	.byte	3,55,1,5,29,7,9
	.half	.L254-.L1942
	.byte	3,80,1,5,25,9
	.half	.L1943-.L254
	.byte	3,8,1,5,43,9
	.half	.L1944-.L1943
	.byte	3,120,1,5,23,9
	.half	.L1347-.L1944
	.byte	3,8,1,5,5,9
	.half	.L1945-.L1347
	.byte	3,4,1,9
	.half	.L257-.L1945
	.byte	3,1,1,5,7,7,9
	.half	.L1946-.L257
	.byte	3,2,1,5,16,7,9
	.half	.L1947-.L1946
	.byte	3,7,1,5,29,9
	.half	.L1348-.L1947
	.byte	1,5,9,9
	.half	.L1948-.L1348
	.byte	1,5,23,7,9
	.half	.L1949-.L1948
	.byte	3,1,1,5,9,9
	.half	.L260-.L1949
	.byte	3,2,1,5,20,9
	.half	.L261-.L260
	.byte	3,1,1,5,9,9
	.half	.L1354-.L261
	.byte	1,5,11,7,9
	.half	.L1355-.L1354
	.byte	3,1,1,5,23,9
	.half	.L258-.L1355
	.byte	3,3,1,5,12,9
	.half	.L1356-.L258
	.byte	1,5,14,7,9
	.half	.L264-.L1356
	.byte	3,5,1,5,1,3,13,1,5,25,7,9
	.half	.L265-.L264
	.byte	3,123,1,5,14,9
	.half	.L1950-.L265
	.byte	3,1,1,5,1,3,4,1,5,10,7,9
	.half	.L259-.L1950
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L655-.L259
	.byte	0,1,1
.L1938:
	.sdecl	'.debug_ranges',debug,cluster('tcp_process_refused_data')
	.sect	'.debug_ranges'
.L654:
	.word	-1,.L443,0,.L655-.L443,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_pcb_purge')
	.sect	'.debug_info'
.L656:
	.word	225
	.half	3
	.word	.L657
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L659,.L658
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_pcb_purge',0,1,207,16,1,1,1,1
	.word	.L485,.L988,.L484
	.byte	4
	.byte	'pcb',0,1,207,16,31
	.word	.L841,.L989
	.byte	5
	.word	.L485,.L988
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_pcb_purge')
	.sect	'.debug_abbrev'
.L657:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_pcb_purge')
	.sect	'.debug_line'
.L658:
	.word	.L1952-.L1951
.L1951:
	.half	3
	.word	.L1954-.L1953
.L1953:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1954:
	.byte	5,1,7,0,5,2
	.word	.L485
	.byte	3,206,16,1,5,3,9
	.half	.L1453-.L485
	.byte	3,2,1,7,9
	.half	.L1955-.L1453
	.byte	1,5,10,9
	.half	.L329-.L1955
	.byte	3,2,1,5,7,9
	.half	.L1956-.L329
	.byte	1,5,21,7,9
	.half	.L1957-.L1956
	.byte	3,1,1,5,18,9
	.half	.L1958-.L1957
	.byte	1,7,9
	.half	.L1959-.L1958
	.byte	3,1,1,5,12,7,9
	.half	.L1960-.L1959
	.byte	3,6,1,5,5,9
	.half	.L1457-.L1960
	.byte	1,5,20,7,9
	.half	.L1961-.L1457
	.byte	3,2,1,5,27,9
	.half	.L1962-.L1961
	.byte	3,1,1,5,25,9
	.half	.L1963-.L1962
	.byte	1,5,12,9
	.half	.L334-.L1963
	.byte	3,9,1,5,5,9
	.half	.L1964-.L334
	.byte	1,5,22,7,9
	.half	.L1965-.L1964
	.byte	3,2,1,5,18,9
	.half	.L335-.L1965
	.byte	3,6,1,5,16,1,5,22,9
	.half	.L1966-.L335
	.byte	3,2,1,9
	.half	.L1967-.L1966
	.byte	3,1,1,5,34,9
	.half	.L1968-.L1967
	.byte	3,1,1,5,32,9
	.half	.L1969-.L1968
	.byte	1,5,18,9
	.half	.L1970-.L1969
	.byte	1,5,28,9
	.half	.L1971-.L1970
	.byte	3,2,1,5,26,1,5,1,9
	.half	.L331-.L1971
	.byte	3,3,1,7,9
	.half	.L660-.L331
	.byte	0,1,1
.L1952:
	.sdecl	'.debug_ranges',debug,cluster('tcp_pcb_purge')
	.sect	'.debug_ranges'
.L659:
	.word	-1,.L485,0,.L660-.L485,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_pcb_remove')
	.sect	'.debug_info'
.L661:
	.word	283
	.half	3
	.word	.L662
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L664,.L663
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_pcb_remove',0,1,129,17,1,1,1,1
	.word	.L487,.L990,.L486
	.byte	4
	.byte	'pcblist',0,1,129,17,33
	.word	.L991,.L992
	.byte	4
	.byte	'pcb',0,1,129,17,58
	.word	.L841,.L993
	.byte	5
	.word	.L487,.L990
	.byte	5
	.word	.L341,.L339
	.byte	6
	.byte	'tcp_tmp_pcb',0,1,134,17,3
	.word	.L841,.L994
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_pcb_remove')
	.sect	'.debug_abbrev'
.L662:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_pcb_remove')
	.sect	'.debug_line'
.L663:
	.word	.L1973-.L1972
.L1972:
	.half	3
	.word	.L1975-.L1974
.L1974:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1975:
	.byte	5,1,7,0,5,2
	.word	.L487
	.byte	3,128,17,1,5,3,9
	.half	.L1462-.L487
	.byte	3,2,1,7,9
	.half	.L1976-.L1462
	.byte	1,9
	.half	.L336-.L1976
	.byte	3,1,1,7,9
	.half	.L1977-.L336
	.byte	1,9
	.half	.L337-.L1977
	.byte	3,2,1,5,17,9
	.half	.L1978-.L337
	.byte	3,2,1,5,11,9
	.half	.L1470-.L1978
	.byte	3,3,1,5,22,9
	.half	.L1979-.L1470
	.byte	1,5,7,9
	.half	.L1980-.L1979
	.byte	1,5,19,7,9
	.half	.L1981-.L1980
	.byte	3,1,1,5,11,7,9
	.half	.L1982-.L1981
	.byte	3,1,1,5,19,9
	.half	.L1983-.L1982
	.byte	1,5,5,7,9
	.half	.L1984-.L1983
	.byte	3,1,1,5,16,9
	.half	.L1985-.L1984
	.byte	3,1,1,5,10,9
	.half	.L344-.L1985
	.byte	3,3,1,5,3,9
	.half	.L1986-.L344
	.byte	1,5,5,7,9
	.half	.L1987-.L1986
	.byte	3,1,1,9
	.half	.L348-.L1987
	.byte	3,1,1,9
	.half	.L349-.L348
	.byte	3,2,1,5,16,9
	.half	.L347-.L349
	.byte	3,4,1,5,14,1,5,19,9
	.half	.L1988-.L347
	.byte	3,2,1,5,1,9
	.half	.L1989-.L1988
	.byte	3,3,1,7,9
	.half	.L665-.L1989
	.byte	0,1,1
.L1973:
	.sdecl	'.debug_ranges',debug,cluster('tcp_pcb_remove')
	.sect	'.debug_ranges'
.L664:
	.word	-1,.L487,0,.L665-.L487,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_segs_free')
	.sect	'.debug_info'
.L666:
	.word	254
	.half	3
	.word	.L667
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L669,.L668
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_segs_free',0,1,200,12,1,1,1,1
	.word	.L445,.L995,.L444
	.byte	4
	.byte	'seg',0,1,200,12,31
	.word	.L996,.L997
	.byte	5
	.word	.L445,.L995
	.byte	5
	.word	.L270,.L269
	.byte	6
	.byte	'next',0,1,203,12,21
	.word	.L996,.L998
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_segs_free')
	.sect	'.debug_abbrev'
.L667:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_segs_free')
	.sect	'.debug_line'
.L668:
	.word	.L1991-.L1990
.L1990:
	.half	3
	.word	.L1993-.L1992
.L1992:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1993:
	.byte	5,21,7,0,5,2
	.word	.L445
	.byte	3,201,12,1,5,31,9
	.half	.L270-.L445
	.byte	3,1,1,5,18,9
	.half	.L1358-.L270
	.byte	3,1,1,5,9,9
	.half	.L1357-.L1358
	.byte	3,1,1,5,21,9
	.half	.L269-.L1357
	.byte	3,125,1,5,1,7,9
	.half	.L1994-.L269
	.byte	3,5,1,7,9
	.half	.L670-.L1994
	.byte	0,1,1
.L1991:
	.sdecl	'.debug_ranges',debug,cluster('tcp_segs_free')
	.sect	'.debug_ranges'
.L669:
	.word	-1,.L445,0,.L670-.L445,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_seg_free')
	.sect	'.debug_info'
.L671:
	.word	224
	.half	3
	.word	.L672
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L674,.L673
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_seg_free',0,1,215,12,1,1,1,1
	.word	.L447,.L999,.L446
	.byte	4
	.byte	'seg',0,1,215,12,30
	.word	.L996,.L1000
	.byte	5
	.word	.L447,.L999
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_seg_free')
	.sect	'.debug_abbrev'
.L672:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_seg_free')
	.sect	'.debug_line'
.L673:
	.word	.L1996-.L1995
.L1995:
	.half	3
	.word	.L1998-.L1997
.L1997:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L1998:
	.byte	5,1,7,0,5,2
	.word	.L447
	.byte	3,214,12,1,5,3,9
	.half	.L1360-.L447
	.byte	3,2,1,5,12,7,9
	.half	.L1999-.L1360
	.byte	3,1,1,5,5,9
	.half	.L1359-.L1999
	.byte	1,5,20,7,9
	.half	.L2000-.L1359
	.byte	3,1,1,5,15,9
	.half	.L272-.L2000
	.byte	3,5,1,5,29,1,5,1,9
	.half	.L271-.L272
	.byte	3,2,1,7,9
	.half	.L675-.L271
	.byte	0,1,1
.L1996:
	.sdecl	'.debug_ranges',debug,cluster('tcp_seg_free')
	.sect	'.debug_ranges'
.L674:
	.word	-1,.L447,0,.L675-.L447,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_seg_copy')
	.sect	'.debug_info'
.L676:
	.word	247
	.half	3
	.word	.L677
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L679,.L678
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_seg_copy',0,1,254,12,1
	.word	.L996
	.byte	1,1,1
	.word	.L451,.L1001,.L450
	.byte	4
	.byte	'seg',0,1,254,12,30
	.word	.L996,.L1002
	.byte	5
	.word	.L451,.L1001
	.byte	6
	.byte	'cseg',0,1,128,13,19
	.word	.L996,.L1003
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_seg_copy')
	.sect	'.debug_abbrev'
.L677:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_seg_copy')
	.sect	'.debug_line'
.L678:
	.word	.L2002-.L2001
.L2001:
	.half	3
	.word	.L2004-.L2003
.L2003:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2004:
	.byte	5,1,7,0,5,2
	.word	.L451
	.byte	3,253,12,1,5,3,9
	.half	.L1368-.L451
	.byte	3,4,1,7,9
	.half	.L2005-.L1368
	.byte	1,5,40,9
	.half	.L275-.L2005
	.byte	3,2,1,5,8,9
	.half	.L1371-.L275
	.byte	1,5,3,9
	.half	.L1373-.L1371
	.byte	3,1,1,5,12,7,9
	.half	.L2006-.L1373
	.byte	3,1,1,5,1,9
	.half	.L1372-.L2006
	.byte	3,5,1,5,3,7,9
	.half	.L276-.L1372
	.byte	3,125,1,5,16,9
	.half	.L1375-.L276
	.byte	3,1,1,5,3,9
	.half	.L2007-.L1375
	.byte	3,1,1,5,1,9
	.half	.L1377-.L2007
	.byte	3,1,1,7,9
	.half	.L680-.L1377
	.byte	0,1,1
.L2002:
	.sdecl	'.debug_ranges',debug,cluster('tcp_seg_copy')
	.sect	'.debug_ranges'
.L679:
	.word	-1,.L451,0,.L680-.L451,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_next_iss')
	.sect	'.debug_info'
.L681:
	.word	248
	.half	3
	.word	.L682
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L684,.L683
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_next_iss',0,1,167,17,1
	.word	.L877
	.byte	1,1,1
	.word	.L489,.L1004,.L488
	.byte	4
	.byte	'pcb',0,1,167,17,30
	.word	.L841,.L1005
	.byte	5
	.word	.L489,.L1004
	.byte	6
	.byte	'iss',0,1,173,17,16
	.word	.L877
	.byte	5,3
	.word	_999001_iss
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_next_iss')
	.sect	'.debug_abbrev'
.L682:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_next_iss')
	.sect	'.debug_line'
.L683:
	.word	.L2009-.L2008
.L2008:
	.half	3
	.word	.L2011-.L2010
.L2010:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2011:
	.byte	5,1,7,0,5,2
	.word	.L489
	.byte	3,166,17,1,5,3,9
	.half	.L1477-.L489
	.byte	3,8,1,7,9
	.half	.L2012-.L1477
	.byte	1,9
	.half	.L351-.L2012
	.byte	3,3,1,5,10,9
	.half	.L2013-.L351
	.byte	1,5,7,9
	.half	.L2014-.L2013
	.byte	1,5,1,9
	.half	.L2015-.L2014
	.byte	3,3,1,7,9
	.half	.L685-.L2015
	.byte	0,1,1
.L2009:
	.sdecl	'.debug_ranges',debug,cluster('tcp_next_iss')
	.sect	'.debug_ranges'
.L684:
	.word	-1,.L489,0,.L685-.L489,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_eff_send_mss_netif')
	.sect	'.debug_info'
.L686:
	.word	306
	.half	3
	.word	.L687
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L689,.L688
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_eff_send_mss_netif',0,1,190,17,1
	.word	.L875
	.byte	1,1,1
	.word	.L491,.L1006,.L490
	.byte	4
	.byte	'sendmss',0,1,190,17,30
	.word	.L875,.L1007
	.byte	4
	.byte	'outif',0,1,190,17,53
	.word	.L899,.L1008
	.byte	4
	.byte	'dest',0,1,190,17,77
	.word	.L883,.L1009
	.byte	5
	.word	.L491,.L1006
	.byte	6
	.byte	'mtu',0,1,193,17,9
	.word	.L875,.L1010
	.byte	7
	.word	.L1011,.L354
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_eff_send_mss_netif')
	.sect	'.debug_abbrev'
.L687:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_eff_send_mss_netif')
	.sect	'.debug_line'
.L688:
	.word	.L2017-.L2016
.L2016:
	.half	3
	.word	.L2019-.L2018
.L2018:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2019:
	.byte	5,1,7,0,5,2
	.word	.L491
	.byte	3,189,17,1,5,3,9
	.half	.L1483-.L491
	.byte	3,7,1,7,9
	.half	.L2020-.L1483
	.byte	1,5,5,9
	.half	.L353-.L2020
	.byte	3,16,1,5,16,7,9
	.half	.L2021-.L353
	.byte	3,3,1,5,3,9
	.half	.L1486-.L2021
	.byte	3,4,1,5,20,7,9
	.half	.L1011-.L1486
	.byte	3,18,1,5,13,9
	.half	.L2022-.L1011
	.byte	1,5,42,7,9
	.half	.L2023-.L2022
	.byte	1,5,52,1,5,28,9
	.half	.L356-.L2023
	.byte	1,5,15,9
	.half	.L357-.L356
	.byte	3,5,1,5,3,9
	.half	.L354-.L357
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L690-.L354
	.byte	0,1,1
.L2017:
	.sdecl	'.debug_ranges',debug,cluster('tcp_eff_send_mss_netif')
	.sect	'.debug_ranges'
.L689:
	.word	-1,.L491,0,.L690-.L491,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_recv_null')
	.sect	'.debug_info'
.L691:
	.word	278
	.half	3
	.word	.L692
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L694,.L693
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_recv_null',0,1,148,13,1
	.word	.L880
	.byte	1,1,1
	.word	.L453,.L1012,.L452
	.byte	4
	.byte	'arg',0,1,148,13,21
	.word	.L849,.L1013
	.byte	4
	.byte	'pcb',0,1,148,13,42
	.word	.L841,.L1014
	.byte	4
	.byte	'p',0,1,148,13,60
	.word	.L1015,.L1016
	.byte	4
	.byte	'err',0,1,148,13,69
	.word	.L880,.L1017
	.byte	5
	.word	.L453,.L1012
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_recv_null')
	.sect	'.debug_abbrev'
.L692:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_recv_null')
	.sect	'.debug_line'
.L693:
	.word	.L2025-.L2024
.L2024:
	.half	3
	.word	.L2027-.L2026
.L2026:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2027:
	.byte	5,1,7,0,5,2
	.word	.L453
	.byte	3,147,13,1,5,3,9
	.half	.L1380-.L453
	.byte	3,4,1,7,9
	.half	.L2028-.L1380
	.byte	1,5,1,9
	.half	.L1384-.L2028
	.byte	3,9,1,5,3,7,9
	.half	.L279-.L1384
	.byte	3,121,1,5,22,7,9
	.half	.L2029-.L279
	.byte	3,1,1,5,15,9
	.half	.L1387-.L2029
	.byte	3,1,1,5,32,9
	.half	.L1389-.L1387
	.byte	3,127,1,5,10,9
	.half	.L281-.L1389
	.byte	3,2,1,5,22,7,9
	.half	.L2030-.L281
	.byte	3,1,1,5,10,9
	.half	.L282-.L2030
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L695-.L282
	.byte	0,1,1
.L2025:
	.sdecl	'.debug_ranges',debug,cluster('tcp_recv_null')
	.sect	'.debug_ranges'
.L694:
	.word	-1,.L453,0,.L695-.L453,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_netif_ip_addr_changed')
	.sect	'.debug_info'
.L696:
	.word	283
	.half	3
	.word	.L697
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L699,.L698
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_netif_ip_addr_changed',0,1,155,18,1,1,1,1
	.word	.L495,.L1018,.L494
	.byte	4
	.byte	'old_addr',0,1,155,18,44
	.word	.L883,.L1019
	.byte	4
	.byte	'new_addr',0,1,155,18,71
	.word	.L883,.L1020
	.byte	5
	.word	.L495,.L1018
	.byte	6
	.byte	'lpcb',0,1,157,18,26
	.word	.L910,.L1021
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_netif_ip_addr_changed')
	.sect	'.debug_abbrev'
.L697:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_netif_ip_addr_changed')
	.sect	'.debug_line'
.L698:
	.word	.L2032-.L2031
.L2031:
	.half	3
	.word	.L2034-.L2033
.L2033:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2034:
	.byte	5,1,7,0,5,2
	.word	.L495
	.byte	3,154,18,1,5,8,9
	.half	.L1494-.L495
	.byte	3,4,1,7,9
	.half	.L2035-.L1494
	.byte	1,5,49,9
	.half	.L2036-.L2035
	.byte	3,1,1,9
	.half	.L1492-.L2036
	.byte	3,1,1,5,10,9
	.half	.L1496-.L1492
	.byte	3,2,1,7,9
	.half	.L2037-.L1496
	.byte	1,5,34,9
	.half	.L2038-.L2037
	.byte	3,2,1,5,60,9
	.half	.L1497-.L2038
	.byte	1,5,13,9
	.half	.L367-.L1497
	.byte	3,2,1,5,9,9
	.half	.L2039-.L367
	.byte	1,5,11,7,9
	.half	.L2040-.L2039
	.byte	3,3,1,5,73,9
	.half	.L368-.L2040
	.byte	3,123,1,5,60,9
	.half	.L366-.L368
	.byte	1,5,1,7,9
	.half	.L362-.L366
	.byte	3,10,1,7,9
	.half	.L700-.L362
	.byte	0,1,1
.L2032:
	.sdecl	'.debug_ranges',debug,cluster('tcp_netif_ip_addr_changed')
	.sect	'.debug_ranges'
.L699:
	.word	-1,.L495,0,.L700-.L495,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_free_ooseq')
	.sect	'.debug_info'
.L701:
	.word	226
	.half	3
	.word	.L702
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L704,.L703
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_free_ooseq',0,1,210,18,1,1,1,1
	.word	.L501,.L1022,.L500
	.byte	4
	.byte	'pcb',0,1,210,18,32
	.word	.L841,.L1023
	.byte	5
	.word	.L501,.L1022
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_free_ooseq')
	.sect	'.debug_abbrev'
.L702:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_free_ooseq')
	.sect	'.debug_line'
.L703:
	.word	.L2042-.L2041
.L2041:
	.half	3
	.word	.L2044-.L2043
.L2043:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2044:
	.byte	5,1,7,0,5,2
	.word	.L501
	.byte	3,209,18,1,5,10,9
	.half	.L1499-.L501
	.byte	3,2,1,5,3,9
	.half	.L1498-.L1499
	.byte	1,5,22,7,9
	.half	.L2045-.L1498
	.byte	3,1,1,5,18,9
	.half	.L2046-.L2045
	.byte	3,1,1,5,16,9
	.half	.L2047-.L2046
	.byte	1,5,1,9
	.half	.L379-.L2047
	.byte	3,5,1,7,9
	.half	.L705-.L379
	.byte	0,1,1
.L2042:
	.sdecl	'.debug_ranges',debug,cluster('tcp_free_ooseq')
	.sect	'.debug_ranges'
.L704:
	.word	-1,.L501,0,.L705-.L501,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_new_port')
	.sect	'.debug_info'
.L706:
	.word	258
	.half	3
	.word	.L707
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L709,.L708
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_new_port',0,1,243,7,1
	.word	.L875
	.byte	1,1
	.word	.L423,.L1024,.L422
	.byte	4
	.word	.L423,.L1024
	.byte	5
	.byte	'i',0,1,245,7,8
	.word	.L844,.L1025
	.byte	5
	.byte	'n',0,1,246,7,9
	.word	.L875,.L1026
	.byte	5
	.byte	'pcb',0,1,247,7,19
	.word	.L841,.L1027
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_new_port')
	.sect	'.debug_abbrev'
.L707:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_new_port')
	.sect	'.debug_line'
.L708:
	.word	.L2049-.L2048
.L2048:
	.half	3
	.word	.L2051-.L2050
.L2050:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2051:
	.byte	5,11,7,0,5,2
	.word	.L423
	.byte	3,245,7,1,5,3,3,4,1,5,11,9
	.half	.L142-.L423
	.byte	1,5,19,9
	.half	.L2052-.L142
	.byte	3,1,1,5,14,9
	.half	.L2053-.L2052
	.byte	3,1,1,5,3,9
	.half	.L2054-.L2053
	.byte	3,127,1,5,14,9
	.half	.L2055-.L2054
	.byte	3,1,1,5,10,9
	.half	.L2056-.L2055
	.byte	3,3,1,5,36,1,5,17,9
	.half	.L145-.L2056
	.byte	3,1,1,5,30,9
	.half	.L2057-.L145
	.byte	1,5,16,9
	.half	.L2058-.L2057
	.byte	1,5,46,9
	.half	.L1241-.L2058
	.byte	1,5,14,9
	.half	.L147-.L1241
	.byte	3,1,1,5,7,9
	.half	.L2059-.L147
	.byte	1,5,10,7,9
	.half	.L2060-.L2059
	.byte	3,1,1,5,43,9
	.half	.L2061-.L2060
	.byte	3,1,1,5,9,9
	.half	.L2062-.L2061
	.byte	1,5,1,7,9
	.half	.L2063-.L2062
	.byte	3,8,1,5,11,3,121,1,5,57,9
	.half	.L148-.L2063
	.byte	3,124,1,5,46,9
	.half	.L146-.L148
	.byte	1,5,39,7,9
	.half	.L2064-.L146
	.byte	3,127,1,5,36,9
	.half	.L144-.L2064
	.byte	1,5,1,7,9
	.half	.L2065-.L144
	.byte	3,12,1,9
	.half	.L710-.L2065
	.byte	0,1,1
.L2049:
	.sdecl	'.debug_ranges',debug,cluster('tcp_new_port')
	.sect	'.debug_ranges'
.L709:
	.word	-1,.L423,0,.L710-.L423,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_close_shutdown_fin')
	.sect	'.debug_info'
.L711:
	.word	255
	.half	3
	.word	.L712
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L714,.L713
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_close_shutdown_fin',0,1,153,3,1
	.word	.L880
	.byte	1,1
	.word	.L397,.L1028,.L396
	.byte	4
	.byte	'pcb',0,1,153,3,40
	.word	.L841,.L1029
	.byte	5
	.word	.L397,.L1028
	.byte	6
	.byte	'err',0,1,155,3,9
	.word	.L880,.L1030
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_close_shutdown_fin')
	.sect	'.debug_abbrev'
.L712:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_close_shutdown_fin')
	.sect	'.debug_line'
.L713:
	.word	.L2067-.L2066
.L2066:
	.half	3
	.word	.L2069-.L2068
.L2068:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2069:
	.byte	5,1,7,0,5,2
	.word	.L397
	.byte	3,152,3,1,5,14,9
	.half	.L1125-.L397
	.byte	3,5,1,5,10,9
	.half	.L2070-.L1125
	.byte	3,1,1,7,9
	.half	.L2071-.L2070
	.byte	3,8,1,7,9
	.half	.L2072-.L2071
	.byte	3,7,1,7,9
	.half	.L2073-.L2072
	.byte	1,5,26,9
	.half	.L40-.L2073
	.byte	3,122,1,5,11,9
	.half	.L1124-.L40
	.byte	1,5,7,9
	.half	.L1126-.L1124
	.byte	3,1,1,5,22,7,9
	.half	.L2074-.L1126
	.byte	3,2,1,5,7,3,2,1,5,26,9
	.half	.L42-.L2074
	.byte	3,2,1,5,11,9
	.half	.L1127-.L42
	.byte	1,5,7,9
	.half	.L1128-.L1127
	.byte	3,1,1,5,22,7,9
	.half	.L2075-.L1128
	.byte	3,2,1,5,20,9
	.half	.L45-.L2075
	.byte	1,5,3,9
	.half	.L44-.L45
	.byte	3,8,1,5,16,7,9
	.half	.L2076-.L44
	.byte	3,6,1,5,20,9
	.half	.L1131-.L2076
	.byte	1,5,10,9
	.half	.L47-.L1131
	.byte	3,1,1,5,5,7,9
	.half	.L2077-.L47
	.byte	3,2,1,5,12,9
	.half	.L43-.L2077
	.byte	3,6,1,5,1,3,3,1,5,3,7,9
	.half	.L48-.L43
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L715-.L48
	.byte	0,1,1
.L2067:
	.sdecl	'.debug_ranges',debug,cluster('tcp_close_shutdown_fin')
	.sect	'.debug_ranges'
.L714:
	.word	-1,.L397,0,.L715-.L397,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_free_listen')
	.sect	'.debug_info'
.L716:
	.word	226
	.half	3
	.word	.L717
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L719,.L718
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_free_listen',0,1,221,1,1,1,1
	.word	.L387,.L1031,.L386
	.byte	4
	.byte	'pcb',0,1,221,1,33
	.word	.L841,.L1032
	.byte	5
	.word	.L387,.L1031
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_free_listen')
	.sect	'.debug_abbrev'
.L717:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_free_listen')
	.sect	'.debug_line'
.L718:
	.word	.L2079-.L2078
.L2078:
	.half	3
	.word	.L2081-.L2080
.L2080:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2081:
	.byte	5,1,7,0,5,2
	.word	.L387
	.byte	3,220,1,1,5,3,9
	.half	.L1091-.L387
	.byte	3,2,1,5,1,9
	.half	.L2082-.L1091
	.byte	3,126,1,5,3,9
	.half	.L1089-.L2082
	.byte	3,2,1,7,9
	.half	.L2083-.L1089
	.byte	1,5,13,9
	.half	.L3-.L2083
	.byte	3,4,1,5,34,1,5,1,9
	.half	.L720-.L3
	.byte	3,1,0,1,1
.L2079:
	.sdecl	'.debug_ranges',debug,cluster('tcp_free_listen')
	.sect	'.debug_ranges'
.L719:
	.word	-1,.L387,0,.L720-.L387,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_remove_listener')
	.sect	'.debug_info'
.L721:
	.word	267
	.half	3
	.word	.L722
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L724,.L723
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_remove_listener',0,1,251,1,1,1,1
	.word	.L391,.L1033,.L390
	.byte	4
	.byte	'list',0,1,251,1,37
	.word	.L841,.L1034
	.byte	4
	.byte	'lpcb',0,1,251,1,66
	.word	.L910,.L1035
	.byte	5
	.word	.L391,.L1033
	.byte	6
	.byte	'pcb',0,1,253,1,19
	.word	.L841,.L1036
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_remove_listener')
	.sect	'.debug_abbrev'
.L722:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_remove_listener')
	.sect	'.debug_line'
.L723:
	.word	.L2085-.L2084
.L2084:
	.half	3
	.word	.L2087-.L2086
.L2086:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2087:
	.byte	5,31,7,0,5,2
	.word	.L391
	.byte	3,128,2,1,5,12,9
	.half	.L6-.L391
	.byte	3,1,1,5,5,9
	.half	.L2088-.L6
	.byte	1,5,23,7,9
	.half	.L2089-.L2088
	.byte	3,1,1,5,21,9
	.half	.L2090-.L2089
	.byte	1,5,42,9
	.half	.L7-.L2090
	.byte	3,126,1,5,31,9
	.half	.L5-.L7
	.byte	1,5,1,7,9
	.half	.L2091-.L5
	.byte	3,5,1,7,9
	.half	.L725-.L2091
	.byte	0,1,1
.L2085:
	.sdecl	'.debug_ranges',debug,cluster('tcp_remove_listener')
	.sect	'.debug_ranges'
.L724:
	.word	-1,.L391,0,.L725-.L391,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_listen_closed')
	.sect	'.debug_info'
.L726:
	.word	244
	.half	3
	.word	.L727
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L729,.L728
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_listen_closed',0,1,141,2,1,1,1
	.word	.L393,.L1037,.L392
	.byte	4
	.byte	'pcb',0,1,141,2,35
	.word	.L841,.L1038
	.byte	5
	.word	.L393,.L1037
	.byte	6
	.byte	'i',0,1,144,2,10
	.word	.L1039,.L1040
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_listen_closed')
	.sect	'.debug_abbrev'
.L727:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_listen_closed')
	.sect	'.debug_line'
.L728:
	.word	.L2093-.L2092
.L2092:
	.half	3
	.word	.L2095-.L2094
.L2094:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2095:
	.byte	5,1,7,0,5,2
	.word	.L393
	.byte	3,140,2,1,5,3,9
	.half	.L1097-.L393
	.byte	3,5,1,5,1,9
	.half	.L2096-.L1097
	.byte	3,123,1,5,3,9
	.half	.L1095-.L2096
	.byte	3,5,1,7,9
	.half	.L2097-.L1095
	.byte	1,5,26,9
	.half	.L8-.L2097
	.byte	3,2,1,5,39,9
	.half	.L2098-.L8
	.byte	1,5,48,9
	.half	.L2099-.L2098
	.byte	3,127,1,5,39,9
	.half	.L9-.L2099
	.byte	3,1,1,5,44,9
	.half	.L2100-.L9
	.byte	1,5,25,9
	.half	.L1100-.L2100
	.byte	1,5,44,9
	.half	.L2101-.L1100
	.byte	1,5,48,9
	.half	.L1101-.L2101
	.byte	3,127,1,5,1,7,9
	.half	.L2102-.L1101
	.byte	3,5,1,7,9
	.half	.L730-.L2102
	.byte	0,1,1
.L2093:
	.sdecl	'.debug_ranges',debug,cluster('tcp_listen_closed')
	.sect	'.debug_ranges'
.L729:
	.word	-1,.L393,0,.L730-.L393,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_close_shutdown')
	.sect	'.debug_info'
.L731:
	.word	337
	.half	3
	.word	.L732
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L734,.L733
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_close_shutdown',0,1,220,2,1
	.word	.L880
	.byte	1,1
	.word	.L395,.L1041,.L394
	.byte	4
	.byte	'pcb',0,1,220,2,36
	.word	.L841,.L1042
	.byte	4
	.byte	'rst_on_unacked_data',0,1,220,2,46
	.word	.L844,.L1043
	.byte	5
	.word	.L395,.L1041
	.byte	5
	.word	.L19,.L17
	.byte	6
	.byte	'tcp_tmp_pcb',0,1,236,2,7
	.word	.L841,.L1044
	.byte	0,5
	.word	.L32,.L30
	.byte	6
	.byte	'tcp_tmp_pcb',0,1,132,3,9
	.word	.L841,.L1045
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_close_shutdown')
	.sect	'.debug_abbrev'
.L732:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_close_shutdown')
	.sect	'.debug_line'
.L733:
	.word	.L2104-.L2103
.L2103:
	.half	3
	.word	.L2106-.L2105
.L2105:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2106:
	.byte	5,1,7,0,5,2
	.word	.L395
	.byte	3,219,2,1,5,7,9
	.half	.L1104-.L395
	.byte	3,4,1,5,35,7,9
	.half	.L2107-.L1104
	.byte	1,5,31,9
	.half	.L2108-.L2107
	.byte	1,5,74,7,9
	.half	.L2109-.L2108
	.byte	1,5,13,7,9
	.half	.L11-.L2109
	.byte	3,1,1,5,9,9
	.half	.L2110-.L11
	.byte	1,5,44,7,9
	.half	.L2111-.L2110
	.byte	1,5,57,9
	.half	.L2112-.L2111
	.byte	1,5,54,9
	.half	.L2113-.L2112
	.byte	1,5,7,7,9
	.half	.L13-.L2113
	.byte	3,3,1,5,23,9
	.half	.L15-.L13
	.byte	3,4,1,5,37,9
	.half	.L2114-.L15
	.byte	1,5,68,9
	.half	.L2115-.L2114
	.byte	1,5,18,9
	.half	.L2116-.L2115
	.byte	3,1,1,5,35,9
	.half	.L2117-.L2116
	.byte	1,5,21,9
	.half	.L1108-.L2117
	.byte	3,2,1,5,7,9
	.half	.L1111-.L1108
	.byte	3,1,1,5,11,9
	.half	.L2118-.L1111
	.byte	3,2,1,5,7,9
	.half	.L2119-.L2118
	.byte	1,5,36,7,9
	.half	.L2120-.L2119
	.byte	3,2,1,5,38,9
	.half	.L1113-.L2120
	.byte	1,5,35,9
	.half	.L10-.L1113
	.byte	3,112,1,5,10,9
	.half	.L2121-.L10
	.byte	3,27,1,7,9
	.half	.L2122-.L2121
	.byte	3,13,1,7,9
	.half	.L2123-.L2122
	.byte	3,5,1,5,37,7,9
	.half	.L2124-.L2123
	.byte	3,6,1,5,14,7,9
	.half	.L24-.L2124
	.byte	3,112,1,5,7,9
	.half	.L2125-.L24
	.byte	1,5,9,7,9
	.half	.L2126-.L2125
	.byte	3,1,1,5,7,9
	.half	.L2127-.L2126
	.byte	3,3,1,5,25,9
	.half	.L25-.L2127
	.byte	3,2,1,5,38,9
	.half	.L1114-.L25
	.byte	3,1,1,5,45,9
	.half	.L2128-.L1114
	.byte	1,5,23,9
	.half	.L1117-.L2128
	.byte	3,1,1,5,7,9
	.half	.L1119-.L1117
	.byte	3,1,1,9
	.half	.L26-.L1119
	.byte	3,2,1,5,16,9
	.half	.L22-.L26
	.byte	3,1,1,5,10,9
	.half	.L23-.L22
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L735-.L23
	.byte	0,1,1
.L2104:
	.sdecl	'.debug_ranges',debug,cluster('tcp_close_shutdown')
	.sect	'.debug_ranges'
.L734:
	.word	-1,.L395,0,.L735-.L395,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_accept_null')
	.sect	'.debug_info'
.L736:
	.word	264
	.half	3
	.word	.L737
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L739,.L738
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_accept_null',0,1,138,6,1
	.word	.L880
	.byte	1,1
	.word	.L411,.L1046,.L410
	.byte	4
	.byte	'arg',0,1,138,6,23
	.word	.L849,.L1047
	.byte	4
	.byte	'pcb',0,1,138,6,44
	.word	.L841,.L1048
	.byte	4
	.byte	'err',0,1,138,6,55
	.word	.L880,.L1049
	.byte	5
	.word	.L411,.L1046
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_accept_null')
	.sect	'.debug_abbrev'
.L737:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_accept_null')
	.sect	'.debug_line'
.L738:
	.word	.L2130-.L2129
.L2129:
	.half	3
	.word	.L2132-.L2131
.L2131:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2132:
	.byte	5,1,7,0,5,2
	.word	.L411
	.byte	3,137,6,1,5,3,9
	.half	.L1193-.L411
	.byte	3,5,1,7,9
	.half	.L2133-.L1193
	.byte	1,5,13,9
	.half	.L110-.L2133
	.byte	3,2,1,5,10,9
	.half	.L1197-.L110
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L740-.L1197
	.byte	0,1,1
.L2130:
	.sdecl	'.debug_ranges',debug,cluster('tcp_accept_null')
	.sect	'.debug_ranges'
.L739:
	.word	-1,.L411,0,.L740-.L411,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_kill_prio')
	.sect	'.debug_info'
.L741:
	.word	308
	.half	3
	.word	.L742
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L744,.L743
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_kill_prio',0,1,170,13,1,1,1
	.word	.L455,.L1050,.L454
	.byte	4
	.byte	'prio',0,1,170,13,20
	.word	.L844,.L1051
	.byte	5
	.word	.L455,.L1050
	.byte	6
	.byte	'pcb',0,1,172,13,19
	.word	.L841,.L1052
	.byte	6
	.byte	'inactive',0,1,172,13,25
	.word	.L841,.L1053
	.byte	6
	.byte	'inactivity',0,1,173,13,9
	.word	.L877,.L1054
	.byte	6
	.byte	'mprio',0,1,174,13,8
	.word	.L844,.L1055
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_kill_prio')
	.sect	'.debug_abbrev'
.L742:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_kill_prio')
	.sect	'.debug_line'
.L743:
	.word	.L2135-.L2134
.L2134:
	.half	3
	.word	.L2137-.L2136
.L2136:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2137:
	.byte	5,11,7,0,5,2
	.word	.L455
	.byte	3,175,13,1,5,3,9
	.half	.L1391-.L455
	.byte	3,5,1,5,14,7,9
	.half	.L2138-.L1391
	.byte	3,11,1,5,12,3,1,1,5,8,9
	.half	.L1393-.L2138
	.byte	3,125,1,5,14,3,4,1,5,43,9
	.half	.L1394-.L1393
	.byte	3,4,1,5,42,9
	.half	.L2139-.L1394
	.byte	3,124,1,5,13,9
	.half	.L288-.L2139
	.byte	3,2,1,5,9,9
	.half	.L2140-.L288
	.byte	1,5,10,7,9
	.half	.L2141-.L2140
	.byte	3,2,1,5,58,7,9
	.half	.L2142-.L2141
	.byte	1,5,53,9
	.half	.L2143-.L2142
	.byte	1,5,65,9
	.half	.L2144-.L2143
	.byte	1,5,35,7,9
	.half	.L289-.L2144
	.byte	3,1,1,5,18,9
	.half	.L1392-.L289
	.byte	3,1,1,5,30,9
	.half	.L2145-.L1392
	.byte	3,127,1,5,18,9
	.half	.L2146-.L2145
	.byte	3,2,1,5,53,9
	.half	.L290-.L2146
	.byte	3,121,1,5,42,9
	.half	.L287-.L290
	.byte	1,5,3,7,9
	.half	.L2147-.L287
	.byte	3,10,1,5,15,7,9
	.half	.L2148-.L2147
	.byte	3,3,1,5,1,7,9
	.half	.L286-.L2148
	.byte	3,2,1,7,9
	.half	.L745-.L286
	.byte	0,1,1
.L2135:
	.sdecl	'.debug_ranges',debug,cluster('tcp_kill_prio')
	.sect	'.debug_ranges'
.L744:
	.word	-1,.L455,0,.L745-.L455,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_kill_state')
	.sect	'.debug_info'
.L746:
	.word	287
	.half	3
	.word	.L747
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L749,.L748
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_kill_state',0,1,216,13,1,1,1
	.word	.L457,.L1056,.L456
	.byte	4
	.byte	'state',0,1,216,13,31
	.word	.L839,.L1057
	.byte	5
	.word	.L1058
	.byte	6
	.byte	'pcb',0,1,218,13,19
	.word	.L841,.L1059
	.byte	6
	.byte	'inactive',0,1,218,13,25
	.word	.L841,.L1060
	.byte	6
	.byte	'inactivity',0,1,219,13,9
	.word	.L877,.L1061
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_kill_state')
	.sect	'.debug_abbrev'
.L747:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_kill_state')
	.sect	'.debug_line'
.L748:
	.word	.L2150-.L2149
.L2149:
	.half	3
	.word	.L2152-.L2151
.L2151:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2152:
	.byte	5,14,7,0,5,2
	.word	.L457
	.byte	3,222,13,1,5,12,3,1,1,5,14,9
	.half	.L1396-.L457
	.byte	3,3,1,5,42,9
	.half	.L1397-.L1396
	.byte	1,5,1,9
	.half	.L297-.L1397
	.byte	3,14,1,5,12,7,9
	.half	.L294-.L297
	.byte	3,115,1,5,5,9
	.half	.L2153-.L294
	.byte	1,5,19,7,9
	.half	.L2154-.L2153
	.byte	3,1,1,5,53,9
	.half	.L295-.L2154
	.byte	3,126,1,5,42,9
	.half	.L293-.L295
	.byte	1,5,3,7,9
	.half	.L2155-.L293
	.byte	3,8,1,5,27,7,9
	.half	.L2156-.L2155
	.byte	3,4,1,5,1,9
	.half	.L750-.L2156
	.byte	3,2,0,1,1
.L2150:
	.sdecl	'.debug_ranges',debug,cluster('tcp_kill_state')
	.sect	'.debug_ranges'
.L749:
	.word	-1,.L457,0,.L750-.L457,0,0
.L1058:
	.word	-1,.L457,0,.L1056-.L457,-1,.L459,0,.L795-.L459,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_kill_timewait')
	.sect	'.debug_info'
.L751:
	.word	275
	.half	3
	.word	.L752
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L754,.L753
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_kill_timewait',0,1,248,13,1,1,1
	.word	.L461,.L1062,.L460
	.byte	4
	.word	.L461,.L1062
	.byte	5
	.byte	'pcb',0,1,250,13,19
	.word	.L841,.L1063
	.byte	5
	.byte	'inactive',0,1,250,13,25
	.word	.L841,.L1064
	.byte	5
	.byte	'inactivity',0,1,251,13,9
	.word	.L877,.L1065
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_kill_timewait')
	.sect	'.debug_abbrev'
.L752:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_kill_timewait')
	.sect	'.debug_line'
.L753:
	.word	.L2158-.L2157
.L2157:
	.half	3
	.word	.L2160-.L2159
.L2159:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2160:
	.byte	5,14,7,0,5,2
	.word	.L461
	.byte	3,252,13,1,5,12,3,1,1,5,14,9
	.half	.L1399-.L461
	.byte	3,2,1,5,38,9
	.half	.L1400-.L1399
	.byte	1,5,1,9
	.half	.L301-.L1400
	.byte	3,11,1,5,17,7,9
	.half	.L299-.L301
	.byte	3,118,1,5,49,9
	.half	.L2161-.L299
	.byte	3,127,1,5,38,9
	.half	.L298-.L2161
	.byte	1,5,3,7,9
	.half	.L2162-.L298
	.byte	3,6,1,5,15,7,9
	.half	.L2163-.L2162
	.byte	3,3,1,5,1,7,9
	.half	.L755-.L2163
	.byte	3,2,0,1,1
.L2158:
	.sdecl	'.debug_ranges',debug,cluster('tcp_kill_timewait')
	.sect	'.debug_ranges'
.L754:
	.word	-1,.L461,0,.L755-.L461,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_handle_closepend')
	.sect	'.debug_info'
.L756:
	.word	260
	.half	3
	.word	.L757
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L759,.L758
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_handle_closepend',0,1,147,14,1,1,1
	.word	.L463,.L1066,.L462
	.byte	4
	.word	.L463,.L1066
	.byte	5
	.byte	'pcb',0,1,149,14,19
	.word	.L841,.L1067
	.byte	4
	.word	.L303,.L302
	.byte	5
	.byte	'next',0,1,152,14,21
	.word	.L841,.L1068
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_handle_closepend')
	.sect	'.debug_abbrev'
.L757:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_handle_closepend')
	.sect	'.debug_line'
.L758:
	.word	.L2165-.L2164
.L2164:
	.half	3
	.word	.L2167-.L2166
.L2166:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2167:
	.byte	5,25,7,0,5,2
	.word	.L463
	.byte	3,148,14,1,5,21,9
	.half	.L1401-.L463
	.byte	3,2,1,5,12,9
	.half	.L303-.L1401
	.byte	3,3,1,5,31,9
	.half	.L2168-.L303
	.byte	3,126,1,5,5,9
	.half	.L1402-.L2168
	.byte	3,2,1,5,7,7,9
	.half	.L2169-.L1402
	.byte	3,2,1,5,30,9
	.half	.L2170-.L2169
	.byte	3,1,1,5,9,9
	.half	.L304-.L2170
	.byte	3,2,1,5,21,9
	.half	.L302-.L304
	.byte	3,120,1,5,1,7,9
	.half	.L2171-.L302
	.byte	3,10,1,7,9
	.half	.L760-.L2171
	.byte	0,1,1
.L2165:
	.sdecl	'.debug_ranges',debug,cluster('tcp_handle_closepend')
	.sect	'.debug_ranges'
.L759:
	.word	-1,.L463,0,.L760-.L463,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_netif_ip_addr_changed_pcblist')
	.sect	'.debug_info'
.L761:
	.word	294
	.half	3
	.word	.L762
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L764,.L763
	.byte	2
	.word	.L502
	.byte	3
	.byte	'tcp_netif_ip_addr_changed_pcblist',0,1,251,17,1,1,1
	.word	.L493,.L1069,.L492
	.byte	4
	.byte	'old_addr',0,1,251,17,52
	.word	.L883,.L1070
	.byte	4
	.byte	'pcb_list',0,1,251,17,78
	.word	.L841,.L1071
	.byte	5
	.word	.L493,.L1069
	.byte	6
	.byte	'pcb',0,1,253,17,19
	.word	.L841,.L1072
	.byte	7
	.word	.L1073
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_netif_ip_addr_changed_pcblist')
	.sect	'.debug_abbrev'
.L762:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_netif_ip_addr_changed_pcblist')
	.sect	'.debug_line'
.L763:
	.word	.L2173-.L2172
.L2172:
	.half	3
	.word	.L2175-.L2174
.L2174:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2175:
	.byte	5,1,7,0,5,2
	.word	.L493
	.byte	3,250,17,1,5,7,9
	.half	.L1488-.L493
	.byte	3,3,1,5,21,9
	.half	.L1489-.L1488
	.byte	3,4,1,5,9,9
	.half	.L360-.L1489
	.byte	3,2,1,5,33,9
	.half	.L1074-.L360
	.byte	3,7,1,5,5,9
	.half	.L1075-.L1074
	.byte	3,121,1,5,7,7,9
	.half	.L1076-.L1075
	.byte	3,8,1,5,17,9
	.half	.L2176-.L1076
	.byte	3,1,1,5,11,9
	.half	.L361-.L2176
	.byte	3,3,1,5,21,9
	.half	.L359-.L361
	.byte	3,114,1,5,1,7,9
	.half	.L2177-.L359
	.byte	3,17,1,7,9
	.half	.L765-.L2177
	.byte	0,1,1
.L2173:
	.sdecl	'.debug_ranges',debug,cluster('tcp_netif_ip_addr_changed_pcblist')
	.sect	'.debug_ranges'
.L764:
	.word	-1,.L493,0,.L765-.L493,0,0
.L1073:
	.word	-1,.L493,.L1074-.L493,.L1075-.L493,.L1076-.L493,.L361-.L493,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_108')
	.sect	'.debug_info'
.L766:
	.word	195
	.half	3
	.word	.L767
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L769,.L768
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_108',0,1,168,9,1,1
	.word	.L437,.L770,.L436
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_108')
	.sect	'.debug_abbrev'
.L767:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_108')
	.sect	'.debug_line'
.L768:
	.word	.L2179-.L2178
.L2178:
	.half	3
	.word	.L2181-.L2180
.L2180:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2181:
	.byte	5,5,7,0,5,2
	.word	.L437
	.byte	3,189,9,1,9
	.half	.L770-.L437
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,211,1,1,5,5,9
	.half	.L2182-.L437
	.byte	3,234,7,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,222,1,1,5,5,9
	.half	.L2182-.L437
	.byte	3,223,7,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,145,2,1,5,5,9
	.half	.L2182-.L437
	.byte	3,172,7,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,7,0,5,2
	.word	.L437
	.byte	3,227,2,1,5,5,9
	.half	.L2182-.L437
	.byte	3,218,6,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,231,3,1,5,5,9
	.half	.L2182-.L437
	.byte	3,214,5,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,134,4,1,5,5,9
	.half	.L2182-.L437
	.byte	3,183,5,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,188,4,1,5,5,9
	.half	.L2182-.L437
	.byte	3,129,5,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,191,4,1,5,5,9
	.half	.L2182-.L437
	.byte	3,254,4,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,168,5,1,5,5,9
	.half	.L2182-.L437
	.byte	3,149,4,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,170,5,1,5,5,9
	.half	.L2182-.L437
	.byte	3,147,4,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,142,6,1,5,5,9
	.half	.L2182-.L437
	.byte	3,175,3,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,217,6,1,5,5,9
	.half	.L2182-.L437
	.byte	3,228,2,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,165,7,1,5,5,9
	.half	.L2182-.L437
	.byte	3,152,2,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,7,0,5,2
	.word	.L437
	.byte	3,181,7,1,5,5,9
	.half	.L2182-.L437
	.byte	3,136,2,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,206,7,1,5,5,9
	.half	.L2182-.L437
	.byte	3,239,1,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,209,7,1,5,5,9
	.half	.L2182-.L437
	.byte	3,236,1,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,181,8,1,5,5,9
	.half	.L2182-.L437
	.byte	3,136,1,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,183,8,1,5,5,9
	.half	.L2182-.L437
	.byte	3,134,1,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,190,9,1,9
	.half	.L2182-.L437
	.byte	3,127,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,191,9,1,9
	.half	.L2182-.L437
	.byte	3,126,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,9,0,5,2
	.word	.L437
	.byte	3,211,9,1,5,5,9
	.half	.L2182-.L437
	.byte	3,106,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,9,0,5,2
	.word	.L437
	.byte	3,212,9,1,5,5,9
	.half	.L2182-.L437
	.byte	3,105,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,9,0,5,2
	.word	.L437
	.byte	3,236,10,1,5,5,9
	.half	.L2182-.L437
	.byte	3,209,126,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,9,0,5,2
	.word	.L437
	.byte	3,240,10,1,5,5,9
	.half	.L2182-.L437
	.byte	3,205,126,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,160,11,1,9
	.half	.L2182-.L437
	.byte	3,157,126,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,9,0,5,2
	.word	.L437
	.byte	3,174,11,1,5,5,9
	.half	.L2182-.L437
	.byte	3,143,126,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,9,0,5,2
	.word	.L437
	.byte	3,178,11,1,5,5,9
	.half	.L2182-.L437
	.byte	3,139,126,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,136,12,1,5,5,9
	.half	.L2182-.L437
	.byte	3,181,125,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,239,12,1,5,5,9
	.half	.L2182-.L437
	.byte	3,206,124,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,129,13,1,5,5,9
	.half	.L2182-.L437
	.byte	3,188,124,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,151,13,1,5,5,9
	.half	.L2182-.L437
	.byte	3,166,124,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,222,15,1,9
	.half	.L2182-.L437
	.byte	3,223,121,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,242,15,1,9
	.half	.L2182-.L437
	.byte	3,203,121,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,140,16,1,9
	.half	.L2182-.L437
	.byte	3,177,121,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,188,16,1,5,5,9
	.half	.L2182-.L437
	.byte	3,129,121,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,189,16,1,5,5,9
	.half	.L2182-.L437
	.byte	3,128,121,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,208,16,1,5,5,9
	.half	.L2182-.L437
	.byte	3,237,120,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,130,17,1,5,5,9
	.half	.L2182-.L437
	.byte	3,187,120,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,131,17,1,5,5,9
	.half	.L2182-.L437
	.byte	3,186,120,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,146,17,1,9
	.half	.L2182-.L437
	.byte	3,171,120,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,147,17,1,9
	.half	.L2182-.L437
	.byte	3,170,120,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,5,0,5,2
	.word	.L437
	.byte	3,149,17,1,9
	.half	.L2182-.L437
	.byte	3,168,120,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,174,17,1,5,5,9
	.half	.L2182-.L437
	.byte	3,143,120,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1,5,3,0,5,2
	.word	.L437
	.byte	3,196,17,1,5,5,9
	.half	.L2182-.L437
	.byte	3,249,119,1,7,9
	.half	.L770-.L2182
	.byte	0,1,1
.L2179:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_108')
	.sect	'.debug_ranges'
.L769:
	.word	-1,.L437,0,.L770-.L437,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_109')
	.sect	'.debug_info'
.L771:
	.word	195
	.half	3
	.word	.L772
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L774,.L773
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_109',0,1,210,1,1,1
	.word	.L385,.L775,.L384
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_109')
	.sect	'.debug_abbrev'
.L772:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_109')
	.sect	'.debug_line'
.L773:
	.word	.L2184-.L2183
.L2183:
	.half	3
	.word	.L2186-.L2185
.L2185:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2186:
	.byte	5,3,7,0,5,2
	.word	.L385
	.byte	3,211,1,1,9
	.half	.L775-.L385
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,222,1,1,9
	.half	.L2187-.L385
	.byte	3,117,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,145,2,1,9
	.half	.L2187-.L385
	.byte	3,66,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,7,0,5,2
	.word	.L385
	.byte	3,227,2,1,5,3,9
	.half	.L2187-.L385
	.byte	3,240,126,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,231,3,1,9
	.half	.L2187-.L385
	.byte	3,236,125,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,134,4,1,9
	.half	.L2187-.L385
	.byte	3,205,125,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,188,4,1,9
	.half	.L2187-.L385
	.byte	3,151,125,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,191,4,1,9
	.half	.L2187-.L385
	.byte	3,148,125,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,168,5,1,9
	.half	.L2187-.L385
	.byte	3,171,124,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,170,5,1,9
	.half	.L2187-.L385
	.byte	3,169,124,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,142,6,1,9
	.half	.L2187-.L385
	.byte	3,197,123,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,217,6,1,9
	.half	.L2187-.L385
	.byte	3,250,122,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,206,7,1,9
	.half	.L2187-.L385
	.byte	3,133,122,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,209,7,1,9
	.half	.L2187-.L385
	.byte	3,130,122,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,181,8,1,9
	.half	.L2187-.L385
	.byte	3,158,121,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,183,8,1,9
	.half	.L2187-.L385
	.byte	3,156,121,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,136,12,1,9
	.half	.L2187-.L385
	.byte	3,203,117,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,239,12,1,9
	.half	.L2187-.L385
	.byte	3,228,116,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,129,13,1,9
	.half	.L2187-.L385
	.byte	3,210,116,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,151,13,1,9
	.half	.L2187-.L385
	.byte	3,188,116,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,5,0,5,2
	.word	.L385
	.byte	3,222,15,1,5,3,9
	.half	.L2187-.L385
	.byte	3,245,113,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,5,0,5,2
	.word	.L385
	.byte	3,242,15,1,5,3,9
	.half	.L2187-.L385
	.byte	3,225,113,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,5,0,5,2
	.word	.L385
	.byte	3,140,16,1,5,3,9
	.half	.L2187-.L385
	.byte	3,199,113,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,188,16,1,9
	.half	.L2187-.L385
	.byte	3,151,113,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,189,16,1,9
	.half	.L2187-.L385
	.byte	3,150,113,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,208,16,1,9
	.half	.L2187-.L385
	.byte	3,131,113,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,130,17,1,9
	.half	.L2187-.L385
	.byte	3,209,112,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,131,17,1,9
	.half	.L2187-.L385
	.byte	3,208,112,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,5,0,5,2
	.word	.L385
	.byte	3,146,17,1,5,3,9
	.half	.L2187-.L385
	.byte	3,193,112,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,5,0,5,2
	.word	.L385
	.byte	3,147,17,1,5,3,9
	.half	.L2187-.L385
	.byte	3,192,112,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,5,0,5,2
	.word	.L385
	.byte	3,149,17,1,5,3,9
	.half	.L2187-.L385
	.byte	3,190,112,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,174,17,1,9
	.half	.L2187-.L385
	.byte	3,165,112,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1,5,3,0,5,2
	.word	.L385
	.byte	3,196,17,1,9
	.half	.L2187-.L385
	.byte	3,143,112,1,7,9
	.half	.L775-.L2187
	.byte	0,1,1
.L2184:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_109')
	.sect	'.debug_ranges'
.L774:
	.word	-1,.L385,0,.L775-.L385,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_110')
	.sect	'.debug_info'
.L776:
	.word	195
	.half	3
	.word	.L777
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L779,.L778
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_110',0,1,168,9,1,1
	.word	.L435,.L780,.L434
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_110')
	.sect	'.debug_abbrev'
.L777:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_110')
	.sect	'.debug_line'
.L778:
	.word	.L2189-.L2188
.L2188:
	.half	3
	.word	.L2191-.L2190
.L2190:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2191:
	.byte	5,5,7,0,5,2
	.word	.L435
	.byte	3,189,9,1,9
	.half	.L780-.L435
	.byte	0,1,1,5,3,0,5,2
	.word	.L435
	.byte	3,216,6,1,5,5,9
	.half	.L2192-.L435
	.byte	3,229,2,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,3,0,5,2
	.word	.L435
	.byte	3,165,7,1,5,5,9
	.half	.L2192-.L435
	.byte	3,152,2,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,7,0,5,2
	.word	.L435
	.byte	3,181,7,1,5,5,9
	.half	.L2192-.L435
	.byte	3,136,2,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,5,0,5,2
	.word	.L435
	.byte	3,190,9,1,9
	.half	.L2192-.L435
	.byte	3,127,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,5,0,5,2
	.word	.L435
	.byte	3,191,9,1,9
	.half	.L2192-.L435
	.byte	3,126,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,9,0,5,2
	.word	.L435
	.byte	3,211,9,1,5,5,9
	.half	.L2192-.L435
	.byte	3,106,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,9,0,5,2
	.word	.L435
	.byte	3,212,9,1,5,5,9
	.half	.L2192-.L435
	.byte	3,105,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,9,0,5,2
	.word	.L435
	.byte	3,236,10,1,5,5,9
	.half	.L2192-.L435
	.byte	3,209,126,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,9,0,5,2
	.word	.L435
	.byte	3,240,10,1,5,5,9
	.half	.L2192-.L435
	.byte	3,205,126,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,5,0,5,2
	.word	.L435
	.byte	3,160,11,1,9
	.half	.L2192-.L435
	.byte	3,157,126,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,9,0,5,2
	.word	.L435
	.byte	3,174,11,1,5,5,9
	.half	.L2192-.L435
	.byte	3,143,126,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1,5,9,0,5,2
	.word	.L435
	.byte	3,178,11,1,5,5,9
	.half	.L2192-.L435
	.byte	3,139,126,1,7,9
	.half	.L780-.L2192
	.byte	0,1,1
.L2189:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_110')
	.sect	'.debug_ranges'
.L779:
	.word	-1,.L435,0,.L780-.L435,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_111')
	.sect	'.debug_info'
.L781:
	.word	195
	.half	3
	.word	.L782
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L784,.L783
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_111',0,1,170,14,1,1
	.word	.L467,.L785,.L466
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_111')
	.sect	'.debug_abbrev'
.L782:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_111')
	.sect	'.debug_line'
.L783:
	.word	.L2194-.L2193
.L2193:
	.half	3
	.word	.L2196-.L2195
.L2195:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2196:
	.byte	5,11,7,0,5,2
	.word	.L467
	.byte	3,203,14,1,5,13,7,9
	.half	.L2197-.L467
	.byte	3,2,1,5,11,9
	.half	.L309-.L2197
	.byte	3,126,1,7,9
	.half	.L785-.L309
	.byte	0,1,1,5,9,0,5,2
	.word	.L467
	.byte	3,208,14,1,5,11,7,9
	.half	.L2197-.L467
	.byte	3,2,1,9
	.half	.L309-.L2197
	.byte	3,121,1,7,9
	.half	.L785-.L309
	.byte	0,1,1,5,7,0,5,2
	.word	.L467
	.byte	3,213,14,1,5,9,7,9
	.half	.L2197-.L467
	.byte	3,2,1,5,11,9
	.half	.L309-.L2197
	.byte	3,116,1,7,9
	.half	.L785-.L309
	.byte	0,1,1,5,5,0,5,2
	.word	.L467
	.byte	3,218,14,1,5,7,7,9
	.half	.L2197-.L467
	.byte	3,2,1,5,11,9
	.half	.L309-.L2197
	.byte	3,111,1,7,9
	.half	.L785-.L309
	.byte	0,1,1
.L2194:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_111')
	.sect	'.debug_ranges'
.L784:
	.word	-1,.L467,0,.L785-.L467,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_112')
	.sect	'.debug_info'
.L786:
	.word	195
	.half	3
	.word	.L787
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L789,.L788
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_112',0,1,208,6,1,1
	.word	.L417,.L790,.L416
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_112')
	.sect	'.debug_abbrev'
.L787:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_112')
	.sect	'.debug_line'
.L788:
	.word	.L2199-.L2198
.L2198:
	.half	3
	.word	.L2201-.L2200
.L2200:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2201:
	.byte	5,5,7,0,5,2
	.word	.L417
	.byte	3,131,7,1,9
	.half	.L790-.L417
	.byte	0,1,1,5,7,0,5,2
	.word	.L417
	.byte	3,149,9,1,5,5,9
	.half	.L2202-.L417
	.byte	3,238,125,1,7,9
	.half	.L790-.L2202
	.byte	0,1,1
.L2199:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_112')
	.sect	'.debug_ranges'
.L789:
	.word	-1,.L417,0,.L790-.L417,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_113')
	.sect	'.debug_info'
.L791:
	.word	195
	.half	3
	.word	.L792
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L794,.L793
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_113',0,1,216,13,1,1
	.word	.L459,.L795,.L458
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_113')
	.sect	'.debug_abbrev'
.L792:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_113')
	.sect	'.debug_line'
.L793:
	.word	.L2204-.L2203
.L2203:
	.half	3
	.word	.L2206-.L2205
.L2205:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2206:
	.byte	5,19,7,0,5,2
	.word	.L459
	.byte	3,228,13,1,5,7,9
	.half	.L1395-.L459
	.byte	1,5,20,7,9
	.half	.L2207-.L1395
	.byte	3,1,1,5,18,3,1,1,5,7,9
	.half	.L296-.L2207
	.byte	3,126,1,7,9
	.half	.L795-.L296
	.byte	0,1,1,5,19,0,5,2
	.word	.L459
	.byte	3,228,13,1,5,5,9
	.half	.L1395-.L459
	.byte	3,28,1,5,18,7,9
	.half	.L2207-.L1395
	.byte	3,1,1,5,16,3,1,1,5,7,9
	.half	.L296-.L2207
	.byte	3,98,1,7,9
	.half	.L795-.L296
	.byte	0,1,1
.L2204:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_113')
	.sect	'.debug_ranges'
.L794:
	.word	-1,.L459,0,.L795-.L459,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_114')
	.sect	'.debug_info'
.L796:
	.word	195
	.half	3
	.word	.L797
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L799,.L798
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_114',0,1,168,9,1,1
	.word	.L433,.L800,.L432
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_114')
	.sect	'.debug_abbrev'
.L797:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_114')
	.sect	'.debug_line'
.L798:
	.word	.L2209-.L2208
.L2208:
	.half	3
	.word	.L2211-.L2210
.L2210:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2211:
	.byte	5,21,7,0,5,2
	.word	.L433
	.byte	3,167,10,1,5,36,9
	.half	.L2212-.L433
	.byte	1,5,31,9
	.half	.L2213-.L2212
	.byte	1,5,43,9
	.half	.L2214-.L2213
	.byte	1,5,11,9
	.half	.L2215-.L2214
	.byte	3,2,1,9
	.half	.L800-.L2215
	.byte	0,1,1,5,19,0,5,2
	.word	.L433
	.byte	3,210,10,1,5,34,9
	.half	.L2212-.L433
	.byte	1,5,29,9
	.half	.L2213-.L2212
	.byte	1,5,41,9
	.half	.L2214-.L2213
	.byte	1,5,9,9
	.half	.L2215-.L2214
	.byte	3,2,1,5,11,3,85,1,7,9
	.half	.L800-.L2215
	.byte	0,1,1
.L2209:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_114')
	.sect	'.debug_ranges'
.L799:
	.word	-1,.L433,0,.L800-.L433,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_115')
	.sect	'.debug_info'
.L801:
	.word	195
	.half	3
	.word	.L802
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L804,.L803
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_115',0,1,168,9,1,1
	.word	.L431,.L805,.L430
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_115')
	.sect	'.debug_abbrev'
.L802:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_115')
	.sect	'.debug_line'
.L803:
	.word	.L2217-.L2216
.L2216:
	.half	3
	.word	.L2219-.L2218
.L2218:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2219:
	.byte	5,19,7,0,5,2
	.word	.L431
	.byte	3,219,10,1,5,41,9
	.half	.L1304-.L431
	.byte	1,9
	.half	.L805-.L1304
	.byte	0,1,1,5,19,0,5,2
	.word	.L431
	.byte	3,219,10,1,5,39,9
	.half	.L1304-.L431
	.byte	3,201,0,1,5,41,3,183,127,1,7,9
	.half	.L805-.L1304
	.byte	0,1,1
.L2217:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_115')
	.sect	'.debug_ranges'
.L804:
	.word	-1,.L431,0,.L805-.L431,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_116')
	.sect	'.debug_info'
.L806:
	.word	195
	.half	3
	.word	.L807
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L809,.L808
	.byte	2
	.word	.L502
	.byte	3
	.byte	'.cocofun_116',0,1,168,9,1,1
	.word	.L429,.L810,.L428
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_116')
	.sect	'.debug_abbrev'
.L807:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_116')
	.sect	'.debug_line'
.L808:
	.word	.L2221-.L2220
.L2220:
	.half	3
	.word	.L2223-.L2222
.L2222:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0,0,0,0,0
.L2223:
	.byte	5,10,7,0,5,2
	.word	.L429
	.byte	3,202,10,1,5,25,9
	.half	.L2224-.L429
	.byte	1,5,20,9
	.half	.L2225-.L2224
	.byte	1,9
	.half	.L810-.L2225
	.byte	0,1,1,5,19,0,5,2
	.word	.L429
	.byte	3,219,10,1,5,34,9
	.half	.L2224-.L429
	.byte	1,5,29,9
	.half	.L2225-.L2224
	.byte	1,5,20,3,111,1,7,9
	.half	.L810-.L2225
	.byte	0,1,1,5,17,0,5,2
	.word	.L429
	.byte	3,164,11,1,5,32,9
	.half	.L2224-.L429
	.byte	1,5,27,9
	.half	.L2225-.L2224
	.byte	1,5,20,3,166,127,1,7,9
	.half	.L810-.L2225
	.byte	0,1,1,5,19,0,5,2
	.word	.L429
	.byte	3,228,13,1,5,34,9
	.half	.L2224-.L429
	.byte	1,5,29,9
	.half	.L2225-.L2224
	.byte	1,5,20,3,230,124,1,7,9
	.half	.L810-.L2225
	.byte	0,1,1,5,17,0,5,2
	.word	.L429
	.byte	3,128,14,1,5,32,9
	.half	.L2224-.L429
	.byte	1,5,27,9
	.half	.L2225-.L2224
	.byte	1,5,20,3,202,124,1,7,9
	.half	.L810-.L2225
	.byte	0,1,1
.L2221:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_116')
	.sect	'.debug_ranges'
.L809:
	.word	-1,.L429,0,.L810-.L429,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_ticks')
	.sect	'.debug_info'
.L811:
	.word	182
	.half	3
	.word	.L812
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_ticks',0,12,162,1,7
	.word	.L877
	.byte	1,5,3
	.word	tcp_ticks
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_ticks')
	.sect	'.debug_abbrev'
.L812:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_active_pcbs_changed')
	.sect	'.debug_info'
.L813:
	.word	196
	.half	3
	.word	.L814
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_active_pcbs_changed',0,12,185,1,6
	.word	.L844
	.byte	1,5,3
	.word	tcp_active_pcbs_changed
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_active_pcbs_changed')
	.sect	'.debug_abbrev'
.L814:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_bound_pcbs')
	.sect	'.debug_info'
.L815:
	.word	187
	.half	3
	.word	.L816
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_bound_pcbs',0,12,171,1,17
	.word	.L841
	.byte	1,5,3
	.word	tcp_bound_pcbs
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_bound_pcbs')
	.sect	'.debug_abbrev'
.L816:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_listen_pcbs')
	.sect	'.debug_info'
.L817:
	.word	188
	.half	3
	.word	.L818
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_listen_pcbs',0,12,173,1,25
	.word	.L1077
	.byte	1,5,3
	.word	tcp_listen_pcbs
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_listen_pcbs')
	.sect	'.debug_abbrev'
.L818:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_active_pcbs')
	.sect	'.debug_info'
.L819:
	.word	188
	.half	3
	.word	.L820
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_active_pcbs',0,12,176,1,17
	.word	.L841
	.byte	1,5,3
	.word	tcp_active_pcbs
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_active_pcbs')
	.sect	'.debug_abbrev'
.L820:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_tw_pcbs')
	.sect	'.debug_info'
.L821:
	.word	184
	.half	3
	.word	.L822
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_tw_pcbs',0,12,178,1,17
	.word	.L841
	.byte	1,5,3
	.word	tcp_tw_pcbs
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_tw_pcbs')
	.sect	'.debug_abbrev'
.L822:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_pcb_lists')
	.sect	'.debug_info'
.L823:
	.word	186
	.half	3
	.word	.L824
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_pcb_lists',0,12,181,1,24
	.word	.L1078
	.byte	1,5,3
	.word	tcp_pcb_lists
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_pcb_lists')
	.sect	'.debug_abbrev'
.L824:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_state_str')
	.sect	'.debug_info'
.L825:
	.word	185
	.half	3
	.word	.L826
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_state_str',0,12,144,1,26
	.word	.L1079
	.byte	5,3
	.word	tcp_state_str
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_state_str')
	.sect	'.debug_abbrev'
.L826:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_port')
	.sect	'.debug_info'
.L827:
	.word	180
	.half	3
	.word	.L828
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_port',0,12,159,1,14
	.word	.L875
	.byte	5,3
	.word	tcp_port
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_port')
	.sect	'.debug_abbrev'
.L828:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_backoff')
	.sect	'.debug_info'
.L829:
	.word	183
	.half	3
	.word	.L830
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_backoff',0,12,163,1,19
	.word	.L1080
	.byte	5,3
	.word	tcp_backoff
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_backoff')
	.sect	'.debug_abbrev'
.L830:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_persist_backoff')
	.sect	'.debug_info'
.L831:
	.word	191
	.half	3
	.word	.L832
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_persist_backoff',0,12,166,1,19
	.word	.L1081
	.byte	5,3
	.word	tcp_persist_backoff
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_persist_backoff')
	.sect	'.debug_abbrev'
.L832:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_timer')
	.sect	'.debug_info'
.L833:
	.word	181
	.half	3
	.word	.L834
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_timer',0,12,188,1,13
	.word	.L844
	.byte	5,3
	.word	tcp_timer
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_timer')
	.sect	'.debug_abbrev'
.L834:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_timer_ctr')
	.sect	'.debug_info'
.L835:
	.word	185
	.half	3
	.word	.L836
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L502
	.byte	3
	.byte	'tcp_timer_ctr',0,12,189,1,13
	.word	.L844
	.byte	5,3
	.word	tcp_timer_ctr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_timer_ctr')
	.sect	'.debug_abbrev'
.L836:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_108')
	.sect	'.debug_loc'
.L436:
	.word	-1,.L437,0,.L770-.L437
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_109')
	.sect	'.debug_loc'
.L384:
	.word	-1,.L385,0,.L775-.L385
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_110')
	.sect	'.debug_loc'
.L434:
	.word	-1,.L435,0,.L780-.L435
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_111')
	.sect	'.debug_loc'
.L466:
	.word	-1,.L467,0,.L785-.L467
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_112')
	.sect	'.debug_loc'
.L416:
	.word	-1,.L417,0,.L790-.L417
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_113')
	.sect	'.debug_loc'
.L458:
	.word	-1,.L459,0,.L795-.L459
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_114')
	.sect	'.debug_loc'
.L432:
	.word	-1,.L433,0,.L800-.L433
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_115')
	.sect	'.debug_loc'
.L430:
	.word	-1,.L431,0,.L805-.L431
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_116')
	.sect	'.debug_loc'
.L428:
	.word	-1,.L429,0,.L810-.L429
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_abandon')
	.sect	'.debug_loc'
.L974:
	.word	-1,.L403,.L89-.L403,.L71-.L403
	.half	1
	.byte	91
	.word	.L1164-.L403,.L970-.L403
	.half	1
	.byte	91
	.word	0,0
.L975:
	.word	-1,.L403,.L89-.L403,.L71-.L403
	.half	1
	.byte	109
	.word	.L1165-.L403,.L970-.L403
	.half	1
	.byte	109
	.word	0,0
.L976:
	.word	-1,.L403,.L89-.L403,.L71-.L403
	.half	1
	.byte	110
	.word	.L1166-.L403,.L970-.L403
	.half	1
	.byte	110
	.word	.L1175-.L403,.L970-.L403
	.half	1
	.byte	100
	.word	0,0
.L978:
	.word	-1,.L403,.L89-.L403,.L71-.L403
	.half	1
	.byte	88
	.word	.L1164-.L403,.L970-.L403
	.half	1
	.byte	88
	.word	0,0
.L971:
	.word	-1,.L403,0,.L1152-.L403
	.half	1
	.byte	100
	.word	.L1153-.L403,.L1152-.L403
	.half	1
	.byte	108
	.word	.L385-.L403,.L775-.L403
	.half	1
	.byte	108
	.word	.L385-.L403,.L775-.L403
	.half	1
	.byte	100
	.word	.L1155-.L403,.L1156-.L403
	.half	1
	.byte	100
	.word	.L437-.L403,.L770-.L403
	.half	1
	.byte	108
	.word	.L437-.L403,.L1087-.L403
	.half	1
	.byte	100
	.word	.L1155-.L403,.L1157-.L403
	.half	1
	.byte	108
	.word	.L71-.L403,.L1157-.L403
	.half	1
	.byte	100
	.word	.L1158-.L403,.L1159-.L403
	.half	1
	.byte	100
	.word	.L1158-.L403,.L970-.L403
	.half	1
	.byte	108
	.word	.L1160-.L403,.L1161-.L403
	.half	1
	.byte	101
	.word	.L1162-.L403,.L74-.L403
	.half	1
	.byte	100
	.word	.L1169-.L403,.L1170-.L403
	.half	1
	.byte	101
	.word	.L1171-.L403,.L88-.L403
	.half	1
	.byte	100
	.word	.L1172-.L403,.L88-.L403
	.half	1
	.byte	101
	.word	.L1173-.L403,.L1174-.L403
	.half	1
	.byte	100
	.word	0,0
.L972:
	.word	-1,.L403,0,.L1152-.L403
	.half	1
	.byte	84
	.word	.L1154-.L403,.L1152-.L403
	.half	1
	.byte	90
	.word	.L385-.L403,.L775-.L403
	.half	1
	.byte	84
	.word	.L385-.L403,.L775-.L403
	.half	1
	.byte	90
	.word	.L437-.L403,.L770-.L403
	.half	1
	.byte	84
	.word	.L437-.L403,.L770-.L403
	.half	1
	.byte	90
	.word	.L1155-.L403,.L89-.L403
	.half	1
	.byte	84
	.word	.L1155-.L403,.L1157-.L403
	.half	1
	.byte	90
	.word	.L71-.L403,.L1157-.L403
	.half	1
	.byte	84
	.word	.L1158-.L403,.L73-.L403
	.half	1
	.byte	84
	.word	.L1158-.L403,.L970-.L403
	.half	1
	.byte	90
	.word	0,0
.L977:
	.word	-1,.L403,.L89-.L403,.L71-.L403
	.half	1
	.byte	95
	.word	.L1163-.L403,.L970-.L403
	.half	1
	.byte	95
	.word	0,0
.L973:
	.word	-1,.L403,.L89-.L403,.L71-.L403
	.half	1
	.byte	89
	.word	.L1163-.L403,.L970-.L403
	.half	1
	.byte	89
	.word	0,0
.L402:
	.word	-1,.L403,0,.L1151-.L403
	.half	2
	.byte	138,0
	.word	.L1151-.L403,.L89-.L403
	.half	2
	.byte	138,16
	.word	.L89-.L403,.L89-.L403
	.half	2
	.byte	138,0
	.word	.L89-.L403,.L71-.L403
	.half	2
	.byte	138,16
	.word	.L71-.L403,.L71-.L403
	.half	2
	.byte	138,0
	.word	.L71-.L403,.L74-.L403
	.half	2
	.byte	138,16
	.word	.L74-.L403,.L74-.L403
	.half	2
	.byte	138,0
	.word	.L74-.L403,.L970-.L403
	.half	2
	.byte	138,16
	.word	.L970-.L403,.L970-.L403
	.half	2
	.byte	138,0
	.word	0,0
.L979:
	.word	-1,.L403,.L1167-.L403,.L1168-.L403
	.half	1
	.byte	111
	.word	.L81-.L403,.L79-.L403
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_abort')
	.sect	'.debug_loc'
.L917:
	.word	-1,.L405,0,.L916-.L405
	.half	1
	.byte	100
	.word	0,0
.L404:
	.word	-1,.L405,0,.L916-.L405
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_accept')
	.sect	'.debug_loc'
.L866:
	.word	-1,.L481,0,.L863-.L481
	.half	1
	.byte	101
	.word	0,0
.L864:
	.word	-1,.L481,0,.L863-.L481
	.half	1
	.byte	100
	.word	0,0
.L480:
	.word	-1,.L481,0,.L863-.L481
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_accept_null')
	.sect	'.debug_loc'
.L1047:
	.word	-1,.L411,0,.L1192-.L411
	.half	1
	.byte	100
	.word	.L385-.L411,.L775-.L411
	.half	1
	.byte	100
	.word	.L1194-.L411,.L1195-.L411
	.half	1
	.byte	100
	.word	.L437-.L411,.L1087-.L411
	.half	1
	.byte	100
	.word	0,0
.L1049:
	.word	-1,.L411,0,.L1192-.L411
	.half	1
	.byte	84
	.word	.L385-.L411,.L775-.L411
	.half	1
	.byte	84
	.word	.L437-.L411,.L770-.L411
	.half	1
	.byte	84
	.word	.L1194-.L411,.L110-.L411
	.half	1
	.byte	84
	.word	0,0
.L1048:
	.word	-1,.L411,0,.L1192-.L411
	.half	1
	.byte	101
	.word	.L1193-.L411,.L1192-.L411
	.half	1
	.byte	108
	.word	.L385-.L411,.L775-.L411
	.half	1
	.byte	108
	.word	.L385-.L411,.L775-.L411
	.half	1
	.byte	101
	.word	.L437-.L411,.L770-.L411
	.half	1
	.byte	108
	.word	.L437-.L411,.L770-.L411
	.half	1
	.byte	101
	.word	.L1194-.L411,.L1046-.L411
	.half	1
	.byte	108
	.word	.L1194-.L411,.L110-.L411
	.half	1
	.byte	101
	.word	.L1196-.L411,.L1197-.L411
	.half	1
	.byte	100
	.word	0,0
.L410:
	.word	-1,.L411,0,.L1191-.L411
	.half	2
	.byte	138,0
	.word	.L1191-.L411,.L1046-.L411
	.half	2
	.byte	138,16
	.word	.L1046-.L411,.L1046-.L411
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_alloc')
	.sect	'.debug_loc'
.L966:
	.word	-1,.L465,.L1403-.L465,.L1405-.L465
	.half	1
	.byte	98
	.word	.L1406-.L465,.L1407-.L465
	.half	1
	.byte	111
	.word	.L1407-.L465,.L1408-.L465
	.half	1
	.byte	98
	.word	.L1409-.L465,.L1410-.L465
	.half	1
	.byte	111
	.word	.L1410-.L465,.L1411-.L465
	.half	1
	.byte	98
	.word	.L1412-.L465,.L1413-.L465
	.half	1
	.byte	111
	.word	.L1413-.L465,.L1414-.L465
	.half	1
	.byte	98
	.word	.L1415-.L465,.L1416-.L465
	.half	1
	.byte	111
	.word	.L1416-.L465,.L308-.L465
	.half	1
	.byte	98
	.word	.L1417-.L465,.L308-.L465
	.half	1
	.byte	111
	.word	.L467-.L465,.L309-.L465
	.half	1
	.byte	111
	.word	.L467-.L465,.L1418-.L465
	.half	1
	.byte	98
	.word	.L467-.L465,.L785-.L465
	.half	1
	.byte	111
	.word	.L305-.L465,.L963-.L465
	.half	1
	.byte	111
	.word	.L1419-.L465,.L1420-.L465
	.half	1
	.byte	100
	.word	.L1421-.L465,.L963-.L465
	.half	1
	.byte	98
	.word	0,0
.L964:
	.word	-1,.L465,0,.L1403-.L465
	.half	1
	.byte	84
	.word	.L1404-.L465,.L308-.L465
	.half	1
	.byte	88
	.word	.L467-.L465,.L309-.L465
	.half	1
	.byte	88
	.word	.L467-.L465,.L785-.L465
	.half	1
	.byte	88
	.word	.L305-.L465,.L963-.L465
	.half	1
	.byte	88
	.word	0,0
.L464:
	.word	-1,.L465,0,.L963-.L465
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_arg')
	.sect	'.debug_loc'
.L850:
	.word	-1,.L473,0,.L847-.L473
	.half	1
	.byte	101
	.word	0,0
.L848:
	.word	-1,.L473,0,.L847-.L473
	.half	1
	.byte	100
	.word	0,0
.L472:
	.word	-1,.L473,0,.L847-.L473
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_bind')
	.sect	'.debug_loc'
.L888:
	.word	-1,.L407,.L1190-.L407,.L96-.L407
	.half	1
	.byte	111
	.word	0,0
.L887:
	.word	0,0
.L884:
	.word	-1,.L407,0,.L90-.L407
	.half	1
	.byte	101
	.word	.L1179-.L407,.L1177-.L407
	.half	1
	.byte	109
	.word	.L385-.L407,.L775-.L407
	.half	1
	.byte	109
	.word	.L437-.L407,.L770-.L407
	.half	1
	.byte	109
	.word	.L1180-.L407,.L1182-.L407
	.half	1
	.byte	109
	.word	.L1184-.L407,.L881-.L407
	.half	1
	.byte	109
	.word	0,0
.L882:
	.word	-1,.L407,0,.L1177-.L407
	.half	1
	.byte	100
	.word	.L1178-.L407,.L1177-.L407
	.half	1
	.byte	108
	.word	.L385-.L407,.L775-.L407
	.half	1
	.byte	108
	.word	.L385-.L407,.L775-.L407
	.half	1
	.byte	100
	.word	.L1180-.L407,.L1181-.L407
	.half	1
	.byte	100
	.word	.L437-.L407,.L770-.L407
	.half	1
	.byte	108
	.word	.L437-.L407,.L1087-.L407
	.half	1
	.byte	100
	.word	.L1180-.L407,.L1182-.L407
	.half	1
	.byte	108
	.word	.L91-.L407,.L1182-.L407
	.half	1
	.byte	100
	.word	.L1184-.L407,.L1185-.L407
	.half	1
	.byte	100
	.word	.L1184-.L407,.L881-.L407
	.half	1
	.byte	108
	.word	.L93-.L407,.L1187-.L407
	.half	1
	.byte	100
	.word	.L95-.L407,.L98-.L407
	.half	1
	.byte	100
	.word	0,0
.L885:
	.word	-1,.L407,0,.L1177-.L407
	.half	1
	.byte	84
	.word	.L385-.L407,.L775-.L407
	.half	1
	.byte	84
	.word	.L437-.L407,.L770-.L407
	.half	1
	.byte	84
	.word	.L1180-.L407,.L1183-.L407
	.half	1
	.byte	84
	.word	.L91-.L407,.L1182-.L407
	.half	1
	.byte	84
	.word	.L1184-.L407,.L1186-.L407
	.half	1
	.byte	84
	.word	.L93-.L407,.L1187-.L407
	.half	1
	.byte	84
	.word	.L1187-.L407,.L95-.L407
	.half	1
	.byte	82
	.word	.L1188-.L407,.L1189-.L407
	.half	1
	.byte	84
	.word	0,0
.L406:
	.word	-1,.L407,0,.L1176-.L407
	.half	2
	.byte	138,0
	.word	.L1176-.L407,.L91-.L407
	.half	2
	.byte	138,16
	.word	.L91-.L407,.L91-.L407
	.half	2
	.byte	138,0
	.word	.L91-.L407,.L93-.L407
	.half	2
	.byte	138,16
	.word	.L93-.L407,.L93-.L407
	.half	2
	.byte	138,0
	.word	.L93-.L407,.L95-.L407
	.half	2
	.byte	138,16
	.word	.L95-.L407,.L95-.L407
	.half	2
	.byte	138,0
	.word	.L95-.L407,.L104-.L407
	.half	2
	.byte	138,16
	.word	.L104-.L407,.L104-.L407
	.half	2
	.byte	138,0
	.word	.L104-.L407,.L881-.L407
	.half	2
	.byte	138,16
	.word	.L881-.L407,.L881-.L407
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_bind_netif')
	.sect	'.debug_loc'
.L892:
	.word	-1,.L409,0,.L889-.L409
	.half	1
	.byte	101
	.word	0,0
.L890:
	.word	-1,.L409,0,.L889-.L409
	.half	1
	.byte	100
	.word	0,0
.L408:
	.word	-1,.L409,0,.L889-.L409
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_close')
	.sect	'.debug_loc'
.L919:
	.word	-1,.L399,0,.L1133-.L399
	.half	1
	.byte	100
	.word	.L385-.L399,.L775-.L399
	.half	1
	.byte	100
	.word	.L1134-.L399,.L1135-.L399
	.half	1
	.byte	100
	.word	.L437-.L399,.L1087-.L399
	.half	1
	.byte	100
	.word	.L52-.L399,.L918-.L399
	.half	1
	.byte	100
	.word	0,0
.L398:
	.word	-1,.L399,0,.L1132-.L399
	.half	2
	.byte	138,0
	.word	.L1132-.L399,.L52-.L399
	.half	2
	.byte	138,16
	.word	.L52-.L399,.L52-.L399
	.half	2
	.byte	138,0
	.word	.L52-.L399,.L918-.L399
	.half	2
	.byte	138,16
	.word	.L918-.L399,.L918-.L399
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_close_shutdown')
	.sect	'.debug_loc'
.L1042:
	.word	-1,.L395,0,.L1103-.L395
	.half	1
	.byte	100
	.word	.L1104-.L395,.L1103-.L395
	.half	1
	.byte	108
	.word	.L385-.L395,.L775-.L395
	.half	1
	.byte	108
	.word	.L385-.L395,.L775-.L395
	.half	1
	.byte	100
	.word	.L1105-.L395,.L1106-.L395
	.half	1
	.byte	100
	.word	.L437-.L395,.L770-.L395
	.half	1
	.byte	108
	.word	.L437-.L395,.L1087-.L395
	.half	1
	.byte	100
	.word	.L1105-.L395,.L1041-.L395
	.half	1
	.byte	108
	.word	.L1107-.L395,.L1108-.L395
	.half	1
	.byte	100
	.word	.L1109-.L395,.L1108-.L395
	.half	1
	.byte	101
	.word	.L1110-.L395,.L1111-.L395
	.half	1
	.byte	100
	.word	.L10-.L395,.L1114-.L395
	.half	1
	.byte	100
	.word	.L1116-.L395,.L1117-.L395
	.half	1
	.byte	101
	.word	.L1118-.L395,.L1119-.L395
	.half	1
	.byte	100
	.word	.L26-.L395,.L1120-.L395
	.half	1
	.byte	100
	.word	.L1122-.L395,.L1121-.L395
	.half	1
	.byte	101
	.word	.L1123-.L395,.L23-.L395
	.half	1
	.byte	100
	.word	0,0
.L1043:
	.word	-1,.L395,0,.L1103-.L395
	.half	1
	.byte	84
	.word	.L385-.L395,.L775-.L395
	.half	1
	.byte	84
	.word	.L437-.L395,.L770-.L395
	.half	1
	.byte	84
	.word	.L1105-.L395,.L15-.L395
	.half	1
	.byte	84
	.word	.L10-.L395,.L1114-.L395
	.half	1
	.byte	84
	.word	.L26-.L395,.L1121-.L395
	.half	1
	.byte	84
	.word	0,0
.L394:
	.word	-1,.L395,0,.L1102-.L395
	.half	2
	.byte	138,0
	.word	.L1102-.L395,.L24-.L395
	.half	2
	.byte	138,16
	.word	.L24-.L395,.L24-.L395
	.half	2
	.byte	138,0
	.word	.L24-.L395,.L1041-.L395
	.half	2
	.byte	138,16
	.word	.L1041-.L395,.L1041-.L395
	.half	2
	.byte	138,0
	.word	0,0
.L1044:
	.word	-1,.L395,.L1112-.L395,.L1113-.L395
	.half	1
	.byte	100
	.word	0,0
.L1045:
	.word	-1,.L395,.L1115-.L395,.L25-.L395
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_close_shutdown_fin')
	.sect	'.debug_loc'
.L1030:
	.word	-1,.L397,.L1124-.L397,.L42-.L397
	.half	1
	.byte	82
	.word	.L1126-.L397,.L42-.L397
	.half	1
	.byte	95
	.word	.L1127-.L397,.L45-.L397
	.half	1
	.byte	82
	.word	.L1128-.L397,.L1129-.L397
	.half	1
	.byte	95
	.word	.L48-.L397,.L1028-.L397
	.half	1
	.byte	95
	.word	0,0
.L1029:
	.word	-1,.L397,0,.L1124-.L397
	.half	1
	.byte	100
	.word	.L1125-.L397,.L1028-.L397
	.half	1
	.byte	111
	.word	.L42-.L397,.L1127-.L397
	.half	1
	.byte	100
	.word	.L1130-.L397,.L1131-.L397
	.half	1
	.byte	100
	.word	0,0
.L396:
	.word	-1,.L397,0,.L1028-.L397
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_connect')
	.sect	'.debug_loc'
.L898:
	.word	-1,.L425,.L385-.L425,.L775-.L425
	.half	1
	.byte	102
	.word	.L385-.L425,.L775-.L425
	.half	1
	.byte	108
	.word	.L437-.L425,.L770-.L425
	.half	1
	.byte	102
	.word	.L437-.L425,.L770-.L425
	.half	1
	.byte	108
	.word	0,.L1247-.L425
	.half	1
	.byte	102
	.word	.L1248-.L425,.L1249-.L425
	.half	1
	.byte	108
	.word	.L153-.L425,.L1249-.L425
	.half	1
	.byte	102
	.word	.L1251-.L425,.L1253-.L425
	.half	1
	.byte	102
	.word	.L155-.L425,.L1254-.L425
	.half	1
	.byte	102
	.word	.L157-.L425,.L158-.L425
	.half	1
	.byte	102
	.word	.L417-.L425,.L790-.L425
	.half	1
	.byte	108
	.word	.L1251-.L425,.L893-.L425
	.half	1
	.byte	108
	.word	0,0
.L895:
	.word	-1,.L425,.L385-.L425,.L775-.L425
	.half	1
	.byte	101
	.word	.L437-.L425,.L770-.L425
	.half	1
	.byte	101
	.word	0,.L1247-.L425
	.half	1
	.byte	101
	.word	.L153-.L425,.L1249-.L425
	.half	1
	.byte	101
	.word	.L1251-.L425,.L1253-.L425
	.half	1
	.byte	101
	.word	.L155-.L425,.L1254-.L425
	.half	1
	.byte	101
	.word	.L157-.L425,.L158-.L425
	.half	1
	.byte	101
	.word	0,0
.L902:
	.word	-1,.L425,.L1259-.L425,.L1260-.L425
	.half	1
	.byte	82
	.word	0,0
.L900:
	.word	-1,.L425,.L158-.L425,.L1257-.L425
	.half	1
	.byte	98
	.word	.L1261-.L425,.L1262-.L425
	.half	1
	.byte	100
	.word	.L417-.L425,.L790-.L425
	.half	1
	.byte	109
	.word	.L1257-.L425,.L893-.L425
	.half	1
	.byte	109
	.word	0,0
.L894:
	.word	-1,.L425,.L1243-.L425,.L1244-.L425
	.half	1
	.byte	111
	.word	.L151-.L425,.L1245-.L425
	.half	1
	.byte	111
	.word	.L385-.L425,.L775-.L425
	.half	1
	.byte	100
	.word	0,.L1246-.L425
	.half	1
	.byte	100
	.word	.L437-.L425,.L1087-.L425
	.half	1
	.byte	100
	.word	.L153-.L425,.L1250-.L425
	.half	1
	.byte	111
	.word	.L153-.L425,.L1249-.L425
	.half	1
	.byte	100
	.word	.L1251-.L425,.L1252-.L425
	.half	1
	.byte	100
	.word	.L155-.L425,.L1254-.L425
	.half	1
	.byte	100
	.word	.L157-.L425,.L1256-.L425
	.half	1
	.byte	100
	.word	.L1258-.L425,.L1259-.L425
	.half	1
	.byte	100
	.word	.L1263-.L425,.L1264-.L425
	.half	1
	.byte	100
	.word	.L417-.L425,.L790-.L425
	.half	1
	.byte	111
	.word	.L155-.L425,.L893-.L425
	.half	1
	.byte	111
	.word	.L1268-.L425,.L166-.L425
	.half	1
	.byte	100
	.word	0,0
.L896:
	.word	-1,.L425,.L385-.L425,.L775-.L425
	.half	1
	.byte	84
	.word	.L437-.L425,.L770-.L425
	.half	1
	.byte	84
	.word	0,.L1247-.L425
	.half	1
	.byte	84
	.word	.L153-.L425,.L1249-.L425
	.half	1
	.byte	84
	.word	.L1251-.L425,.L1253-.L425
	.half	1
	.byte	84
	.word	.L155-.L425,.L1255-.L425
	.half	1
	.byte	84
	.word	0,0
.L901:
	.word	-1,.L425,.L417-.L425,.L790-.L425
	.half	1
	.byte	95
	.word	.L417-.L425,.L790-.L425
	.half	1
	.byte	82
	.word	.L1266-.L425,.L893-.L425
	.half	1
	.byte	95
	.word	.L1264-.L425,.L1267-.L425
	.half	1
	.byte	82
	.word	0,0
.L424:
	.word	-1,.L425,0,.L1242-.L425
	.half	2
	.byte	138,0
	.word	.L1242-.L425,.L153-.L425
	.half	2
	.byte	138,16
	.word	.L153-.L425,.L153-.L425
	.half	2
	.byte	138,0
	.word	.L153-.L425,.L155-.L425
	.half	2
	.byte	138,16
	.word	.L155-.L425,.L155-.L425
	.half	2
	.byte	138,0
	.word	.L155-.L425,.L161-.L425
	.half	2
	.byte	138,16
	.word	.L161-.L425,.L161-.L425
	.half	2
	.byte	138,0
	.word	.L161-.L425,.L164-.L425
	.half	2
	.byte	138,16
	.word	.L164-.L425,.L164-.L425
	.half	2
	.byte	138,0
	.word	.L164-.L425,.L893-.L425
	.half	2
	.byte	138,16
	.word	.L893-.L425,.L893-.L425
	.half	2
	.byte	138,0
	.word	0,0
.L1265:
	.word	-1,.L425,.L1212-.L425,.L1213-.L425
	.half	1
	.byte	98
	.word	.L123-.L425,.L121-.L425
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_debug_state_str')
	.sect	'.debug_loc'
.L840:
	.word	-1,.L497,0,.L838-.L497
	.half	1
	.byte	84
	.word	0,0
.L496:
	.word	-1,.L497,0,.L838-.L497
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_eff_send_mss_netif')
	.sect	'.debug_loc'
.L1009:
	.word	-1,.L491,0,.L1482-.L491
	.half	1
	.byte	101
	.word	.L385-.L491,.L775-.L491
	.half	1
	.byte	101
	.word	.L437-.L491,.L770-.L491
	.half	1
	.byte	101
	.word	.L1484-.L491,.L353-.L491
	.half	1
	.byte	101
	.word	0,0
.L1010:
	.word	-1,.L491,.L1486-.L491,.L357-.L491
	.half	1
	.byte	95
	.word	0,0
.L1008:
	.word	-1,.L491,0,.L1482-.L491
	.half	1
	.byte	100
	.word	.L1483-.L491,.L1482-.L491
	.half	1
	.byte	108
	.word	.L385-.L491,.L775-.L491
	.half	1
	.byte	108
	.word	.L385-.L491,.L775-.L491
	.half	1
	.byte	100
	.word	.L1484-.L491,.L1485-.L491
	.half	1
	.byte	100
	.word	.L437-.L491,.L770-.L491
	.half	1
	.byte	108
	.word	.L437-.L491,.L1087-.L491
	.half	1
	.byte	100
	.word	.L1484-.L491,.L1006-.L491
	.half	1
	.byte	108
	.word	0,0
.L1007:
	.word	-1,.L491,0,.L1482-.L491
	.half	1
	.byte	84
	.word	.L1483-.L491,.L1482-.L491
	.half	1
	.byte	88
	.word	.L385-.L491,.L775-.L491
	.half	1
	.byte	88
	.word	.L385-.L491,.L775-.L491
	.half	1
	.byte	84
	.word	.L437-.L491,.L770-.L491
	.half	1
	.byte	88
	.word	.L437-.L491,.L770-.L491
	.half	1
	.byte	84
	.word	.L1484-.L491,.L1006-.L491
	.half	1
	.byte	88
	.word	.L1484-.L491,.L353-.L491
	.half	1
	.byte	84
	.word	0,0
.L490:
	.word	-1,.L491,0,.L1481-.L491
	.half	2
	.byte	138,0
	.word	.L1481-.L491,.L1006-.L491
	.half	2
	.byte	138,16
	.word	.L1006-.L491,.L1006-.L491
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_err')
	.sect	'.debug_loc'
.L862:
	.word	-1,.L479,0,.L1436-.L479
	.half	1
	.byte	101
	.word	.L1438-.L479,.L1436-.L479
	.half	1
	.byte	109
	.word	.L385-.L479,.L775-.L479
	.half	1
	.byte	101
	.word	.L385-.L479,.L775-.L479
	.half	1
	.byte	109
	.word	.L437-.L479,.L770-.L479
	.half	1
	.byte	101
	.word	.L437-.L479,.L770-.L479
	.half	1
	.byte	109
	.word	.L1439-.L479,.L323-.L479
	.half	1
	.byte	101
	.word	.L1439-.L479,.L859-.L479
	.half	1
	.byte	109
	.word	0,0
.L860:
	.word	-1,.L479,0,.L1436-.L479
	.half	1
	.byte	100
	.word	.L1437-.L479,.L1436-.L479
	.half	1
	.byte	108
	.word	.L385-.L479,.L775-.L479
	.half	1
	.byte	108
	.word	.L385-.L479,.L775-.L479
	.half	1
	.byte	100
	.word	.L1439-.L479,.L1440-.L479
	.half	1
	.byte	100
	.word	.L437-.L479,.L770-.L479
	.half	1
	.byte	108
	.word	.L437-.L479,.L1087-.L479
	.half	1
	.byte	100
	.word	.L1439-.L479,.L859-.L479
	.half	1
	.byte	108
	.word	0,0
.L478:
	.word	-1,.L479,0,.L1435-.L479
	.half	2
	.byte	138,0
	.word	.L1435-.L479,.L859-.L479
	.half	2
	.byte	138,16
	.word	.L859-.L479,.L859-.L479
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_fasttmr')
	.sect	'.debug_loc'
.L960:
	.word	-1,.L439,.L1335-.L439,.L246-.L439
	.half	1
	.byte	108
	.word	0,0
.L957:
	.word	-1,.L439,.L1331-.L439,.L956-.L439
	.half	1
	.byte	111
	.word	.L1332-.L439,.L1333-.L439
	.half	1
	.byte	100
	.word	.L1334-.L439,.L248-.L439
	.half	1
	.byte	100
	.word	.L1336-.L439,.L1337-.L439
	.half	1
	.byte	100
	.word	0,0
.L438:
	.word	-1,.L439,0,.L956-.L439
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_free')
	.sect	'.debug_loc'
.L968:
	.word	-1,.L383,0,.L1083-.L383
	.half	1
	.byte	100
	.word	.L1084-.L383,.L1083-.L383
	.half	1
	.byte	108
	.word	.L385-.L383,.L775-.L383
	.half	1
	.byte	108
	.word	.L385-.L383,.L775-.L383
	.half	1
	.byte	100
	.word	.L1085-.L383,.L1086-.L383
	.half	1
	.byte	100
	.word	.L437-.L383,.L770-.L383
	.half	1
	.byte	108
	.word	.L437-.L383,.L1087-.L383
	.half	1
	.byte	100
	.word	.L1085-.L383,.L967-.L383
	.half	1
	.byte	108
	.word	.L1088-.L383,.L967-.L383
	.half	1
	.byte	100
	.word	0,0
.L382:
	.word	-1,.L383,0,.L1082-.L383
	.half	2
	.byte	138,0
	.word	.L1082-.L383,.L967-.L383
	.half	2
	.byte	138,16
	.word	.L967-.L383,.L967-.L383
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_free_listen')
	.sect	'.debug_loc'
.L1032:
	.word	-1,.L387,0,.L1090-.L387
	.half	1
	.byte	100
	.word	.L1091-.L387,.L1090-.L387
	.half	1
	.byte	108
	.word	.L385-.L387,.L775-.L387
	.half	1
	.byte	108
	.word	.L385-.L387,.L775-.L387
	.half	1
	.byte	100
	.word	.L1092-.L387,.L1093-.L387
	.half	1
	.byte	100
	.word	.L437-.L387,.L770-.L387
	.half	1
	.byte	108
	.word	.L437-.L387,.L1087-.L387
	.half	1
	.byte	100
	.word	.L1092-.L387,.L1031-.L387
	.half	1
	.byte	108
	.word	.L1094-.L387,.L1031-.L387
	.half	1
	.byte	100
	.word	0,0
.L386:
	.word	-1,.L387,0,.L1089-.L387
	.half	2
	.byte	138,0
	.word	.L1089-.L387,.L1031-.L387
	.half	2
	.byte	138,16
	.word	.L1031-.L387,.L1031-.L387
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_free_ooseq')
	.sect	'.debug_loc'
.L1023:
	.word	-1,.L501,0,.L1498-.L501
	.half	1
	.byte	100
	.word	.L1499-.L501,.L1022-.L501
	.half	1
	.byte	111
	.word	0,0
.L500:
	.word	-1,.L501,0,.L1022-.L501
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_handle_closepend')
	.sect	'.debug_loc'
.L1068:
	.word	-1,.L463,.L1402-.L463,.L302-.L463
	.half	1
	.byte	111
	.word	0,0
.L1067:
	.word	-1,.L463,.L1401-.L463,.L304-.L463
	.half	1
	.byte	100
	.word	.L302-.L463,.L1066-.L463
	.half	1
	.byte	100
	.word	0,0
.L462:
	.word	-1,.L463,0,.L1066-.L463
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_init')
	.sect	'.debug_loc'
.L380:
	.word	-1,.L381,0,.L934-.L381
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_kill_prio')
	.sect	'.debug_loc'
.L1053:
	.word	-1,.L455,.L1393-.L455,.L286-.L455
	.half	1
	.byte	100
	.word	0,0
.L1054:
	.word	-1,.L455,.L1393-.L455,.L286-.L455
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1055:
	.word	-1,.L455,.L1391-.L455,.L1392-.L455
	.half	1
	.byte	95
	.word	.L290-.L455,.L286-.L455
	.half	1
	.byte	95
	.word	0,0
.L1052:
	.word	-1,.L455,.L1394-.L455,.L286-.L455
	.half	1
	.byte	111
	.word	0,0
.L1051:
	.word	-1,.L455,0,.L1050-.L455
	.half	1
	.byte	84
	.word	0,0
.L454:
	.word	-1,.L455,0,.L1050-.L455
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_kill_state')
	.sect	'.debug_loc'
.L1060:
	.word	-1,.L457,.L429-.L457,.L810-.L457
	.half	1
	.byte	100
	.word	.L1395-.L457,.L296-.L457
	.half	1
	.byte	100
	.word	.L1396-.L457,.L1056-.L457
	.half	1
	.byte	100
	.word	0,0
.L1061:
	.word	-1,.L457,.L429-.L457,.L810-.L457
	.half	1
	.byte	81
	.word	.L1395-.L457,.L296-.L457
	.half	1
	.byte	81
	.word	.L1396-.L457,.L1056-.L457
	.half	1
	.byte	81
	.word	0,0
.L1059:
	.word	-1,.L457,.L429-.L457,.L810-.L457
	.half	1
	.byte	111
	.word	.L1395-.L457,.L296-.L457
	.half	1
	.byte	111
	.word	.L1397-.L457,.L1056-.L457
	.half	1
	.byte	111
	.word	0,0
.L1057:
	.word	-1,.L457,.L429-.L457,.L810-.L457
	.half	1
	.byte	84
	.word	.L1395-.L457,.L296-.L457
	.half	1
	.byte	84
	.word	0,.L1398-.L457
	.half	1
	.byte	84
	.word	0,0
.L456:
	.word	-1,.L457,0,.L1056-.L457
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_kill_timewait')
	.sect	'.debug_loc'
.L1064:
	.word	-1,.L461,.L429-.L461,.L810-.L461
	.half	1
	.byte	100
	.word	.L1395-.L461,.L795-.L461
	.half	1
	.byte	100
	.word	.L1399-.L461,.L1062-.L461
	.half	1
	.byte	100
	.word	0,0
.L1065:
	.word	-1,.L461,.L429-.L461,.L810-.L461
	.half	1
	.byte	81
	.word	.L1395-.L461,.L795-.L461
	.half	1
	.byte	81
	.word	.L1399-.L461,.L1062-.L461
	.half	1
	.byte	81
	.word	0,0
.L1063:
	.word	-1,.L461,.L429-.L461,.L810-.L461
	.half	1
	.byte	111
	.word	.L1395-.L461,.L795-.L461
	.half	1
	.byte	111
	.word	.L1400-.L461,.L1062-.L461
	.half	1
	.byte	111
	.word	0,0
.L460:
	.word	-1,.L461,0,.L1062-.L461
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_listen_closed')
	.sect	'.debug_loc'
.L1040:
	.word	0,0
.L1038:
	.word	-1,.L393,0,.L1096-.L393
	.half	1
	.byte	100
	.word	.L1097-.L393,.L1096-.L393
	.half	1
	.byte	108
	.word	.L385-.L393,.L775-.L393
	.half	1
	.byte	108
	.word	.L385-.L393,.L775-.L393
	.half	1
	.byte	100
	.word	.L1098-.L393,.L1099-.L393
	.half	1
	.byte	100
	.word	.L437-.L393,.L770-.L393
	.half	1
	.byte	108
	.word	.L437-.L393,.L1087-.L393
	.half	1
	.byte	100
	.word	.L1098-.L393,.L1037-.L393
	.half	1
	.byte	108
	.word	.L1100-.L393,.L1101-.L393
	.half	1
	.byte	101
	.word	0,0
.L392:
	.word	-1,.L393,0,.L1095-.L393
	.half	2
	.byte	138,0
	.word	.L1095-.L393,.L1037-.L393
	.half	2
	.byte	138,16
	.word	.L1037-.L393,.L1037-.L393
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_listen_with_backlog')
	.sect	'.debug_loc'
.L915:
	.word	-1,.L413,0,.L913-.L413
	.half	1
	.byte	84
	.word	0,0
.L914:
	.word	-1,.L413,0,.L913-.L413
	.half	1
	.byte	100
	.word	0,0
.L412:
	.word	-1,.L413,0,.L913-.L413
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_listen_with_backlog_and_err')
	.sect	'.debug_loc'
.L906:
	.word	-1,.L415,0,.L1199-.L415
	.half	1
	.byte	84
	.word	.L435-.L415,.L780-.L415
	.half	1
	.byte	84
	.word	.L1203-.L415,.L1204-.L415
	.half	1
	.byte	84
	.word	.L385-.L415,.L775-.L415
	.half	1
	.byte	84
	.word	.L1206-.L415,.L114-.L415
	.half	1
	.byte	84
	.word	.L437-.L415,.L770-.L415
	.half	1
	.byte	84
	.word	.L1207-.L415,.L1208-.L415
	.half	1
	.byte	84
	.word	.L115-.L415,.L1209-.L415
	.half	1
	.byte	84
	.word	0,0
.L908:
	.word	-1,.L415,0,.L1199-.L415
	.half	1
	.byte	101
	.word	.L1201-.L415,.L1199-.L415
	.half	1
	.byte	108
	.word	.L435-.L415,.L780-.L415
	.half	1
	.byte	101
	.word	.L435-.L415,.L780-.L415
	.half	1
	.byte	108
	.word	.L1203-.L415,.L1204-.L415
	.half	1
	.byte	101
	.word	.L1203-.L415,.L1204-.L415
	.half	1
	.byte	108
	.word	.L385-.L415,.L775-.L415
	.half	1
	.byte	101
	.word	.L385-.L415,.L775-.L415
	.half	1
	.byte	108
	.word	.L1206-.L415,.L114-.L415
	.half	1
	.byte	101
	.word	.L1206-.L415,.L114-.L415
	.half	1
	.byte	108
	.word	.L437-.L415,.L770-.L415
	.half	1
	.byte	101
	.word	.L437-.L415,.L770-.L415
	.half	1
	.byte	108
	.word	.L1207-.L415,.L1208-.L415
	.half	1
	.byte	101
	.word	.L115-.L415,.L1209-.L415
	.half	1
	.byte	101
	.word	.L417-.L415,.L790-.L415
	.half	1
	.byte	108
	.word	.L1207-.L415,.L904-.L415
	.half	1
	.byte	108
	.word	0,0
.L911:
	.word	-1,.L415,.L1202-.L415,.L1199-.L415
	.half	1
	.byte	109
	.word	.L435-.L415,.L780-.L415
	.half	1
	.byte	109
	.word	.L1203-.L415,.L1204-.L415
	.half	1
	.byte	109
	.word	.L385-.L415,.L775-.L415
	.half	1
	.byte	109
	.word	.L1206-.L415,.L114-.L415
	.half	1
	.byte	109
	.word	.L437-.L415,.L770-.L415
	.half	1
	.byte	109
	.word	.L1207-.L415,.L1209-.L415
	.half	1
	.byte	109
	.word	.L1209-.L415,.L1210-.L415
	.half	1
	.byte	98
	.word	.L417-.L415,.L790-.L415
	.half	1
	.byte	109
	.word	.L1214-.L415,.L904-.L415
	.half	1
	.byte	109
	.word	.L1218-.L415,.L904-.L415
	.half	1
	.byte	98
	.word	0,0
.L905:
	.word	-1,.L415,0,.L1199-.L415
	.half	1
	.byte	100
	.word	.L1200-.L415,.L1199-.L415
	.half	1
	.byte	111
	.word	.L435-.L415,.L780-.L415
	.half	1
	.byte	100
	.word	.L435-.L415,.L780-.L415
	.half	1
	.byte	111
	.word	.L1203-.L415,.L1204-.L415
	.half	1
	.byte	100
	.word	.L1203-.L415,.L1205-.L415
	.half	1
	.byte	111
	.word	.L385-.L415,.L775-.L415
	.half	1
	.byte	100
	.word	.L1206-.L415,.L114-.L415
	.half	1
	.byte	100
	.word	.L437-.L415,.L1087-.L415
	.half	1
	.byte	100
	.word	.L115-.L415,.L1209-.L415
	.half	1
	.byte	100
	.word	.L417-.L415,.L790-.L415
	.half	1
	.byte	111
	.word	.L115-.L415,.L1215-.L415
	.half	1
	.byte	111
	.word	.L1216-.L415,.L1217-.L415
	.half	1
	.byte	100
	.word	0,0
.L912:
	.word	-1,.L415,.L437-.L415,.L770-.L415
	.half	1
	.byte	95
	.word	.L1207-.L415,.L115-.L415
	.half	1
	.byte	95
	.word	.L116-.L415,.L904-.L415
	.half	1
	.byte	95
	.word	0,0
.L414:
	.word	-1,.L415,0,.L1198-.L415
	.half	2
	.byte	138,0
	.word	.L1198-.L415,.L904-.L415
	.half	2
	.byte	138,16
	.word	.L904-.L415,.L904-.L415
	.half	2
	.byte	138,0
	.word	0,0
.L1211:
	.word	-1,.L415,.L1212-.L415,.L1213-.L415
	.half	1
	.byte	98
	.word	.L123-.L415,.L121-.L415
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_netif_ip_addr_changed')
	.sect	'.debug_loc'
.L1021:
	.word	-1,.L495,.L1497-.L495,.L362-.L495
	.half	1
	.byte	111
	.word	0,0
.L1020:
	.word	-1,.L495,0,.L1491-.L495
	.half	1
	.byte	101
	.word	.L1494-.L495,.L1018-.L495
	.half	1
	.byte	109
	.word	0,0
.L1019:
	.word	-1,.L495,0,.L1492-.L495
	.half	1
	.byte	100
	.word	.L1493-.L495,.L1018-.L495
	.half	1
	.byte	108
	.word	.L1495-.L495,.L1496-.L495
	.half	1
	.byte	100
	.word	0,0
.L494:
	.word	-1,.L495,0,.L1018-.L495
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_netif_ip_addr_changed_pcblist')
	.sect	'.debug_loc'
.L1070:
	.word	-1,.L493,0,.L360-.L493
	.half	1
	.byte	100
	.word	.L1488-.L493,.L1069-.L493
	.half	1
	.byte	108
	.word	0,0
.L1072:
	.word	-1,.L493,.L1489-.L493,.L1069-.L493
	.half	1
	.byte	111
	.word	.L1490-.L493,.L361-.L493
	.half	1
	.byte	100
	.word	0,0
.L1071:
	.word	-1,.L493,0,.L360-.L493
	.half	1
	.byte	101
	.word	0,0
.L492:
	.word	-1,.L493,0,.L1487-.L493
	.half	2
	.byte	138,0
	.word	.L1487-.L493,.L1069-.L493
	.half	2
	.byte	138,8
	.word	.L1069-.L493,.L1069-.L493
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_new')
	.sect	'.debug_loc'
.L468:
	.word	-1,.L469,0,.L842-.L469
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_new_ip_type')
	.sect	'.debug_loc'
.L846:
	.word	0,0
.L470:
	.word	-1,.L471,0,.L843-.L471
	.half	2
	.byte	138,0
	.word	0,0
.L845:
	.word	-1,.L471,0,.L1422-.L471
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_new_port')
	.sect	'.debug_loc'
.L1025:
	.word	-1,.L423,.L145-.L423,.L149-.L423
	.half	1
	.byte	82
	.word	0,0
.L1026:
	.word	-1,.L423,.L142-.L423,.L1024-.L423
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1027:
	.word	-1,.L423,.L1241-.L423,.L144-.L423
	.half	1
	.byte	111
	.word	0,0
.L422:
	.word	-1,.L423,0,.L1024-.L423
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_next_iss')
	.sect	'.debug_loc'
.L1005:
	.word	-1,.L489,0,.L1478-.L489
	.half	1
	.byte	100
	.word	.L385-.L489,.L775-.L489
	.half	1
	.byte	100
	.word	.L1479-.L489,.L1480-.L489
	.half	1
	.byte	100
	.word	.L437-.L489,.L1087-.L489
	.half	1
	.byte	100
	.word	0,0
.L488:
	.word	-1,.L489,0,.L1477-.L489
	.half	2
	.byte	138,0
	.word	.L1477-.L489,.L1004-.L489
	.half	2
	.byte	138,16
	.word	.L1004-.L489,.L1004-.L489
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_pcb_purge')
	.sect	'.debug_loc'
.L989:
	.word	-1,.L485,0,.L1452-.L485
	.half	1
	.byte	100
	.word	.L1453-.L485,.L1454-.L485
	.half	1
	.byte	111
	.word	.L385-.L485,.L775-.L485
	.half	1
	.byte	100
	.word	.L1455-.L485,.L1456-.L485
	.half	1
	.byte	100
	.word	.L437-.L485,.L1087-.L485
	.half	1
	.byte	100
	.word	.L329-.L485,.L988-.L485
	.half	1
	.byte	111
	.word	.L329-.L485,.L1457-.L485
	.half	1
	.byte	100
	.word	.L1458-.L485,.L335-.L485
	.half	1
	.byte	100
	.word	0,0
.L484:
	.word	-1,.L485,0,.L1451-.L485
	.half	2
	.byte	138,0
	.word	.L1451-.L485,.L329-.L485
	.half	2
	.byte	138,16
	.word	.L329-.L485,.L329-.L485
	.half	2
	.byte	138,0
	.word	.L329-.L485,.L988-.L485
	.half	2
	.byte	138,16
	.word	.L988-.L485,.L988-.L485
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_pcb_remove')
	.sect	'.debug_loc'
.L993:
	.word	-1,.L487,0,.L1460-.L487
	.half	1
	.byte	101
	.word	.L1462-.L487,.L1460-.L487
	.half	1
	.byte	109
	.word	.L385-.L487,.L775-.L487
	.half	1
	.byte	101
	.word	.L385-.L487,.L775-.L487
	.half	1
	.byte	109
	.word	.L437-.L487,.L770-.L487
	.half	1
	.byte	101
	.word	.L437-.L487,.L770-.L487
	.half	1
	.byte	109
	.word	.L1463-.L487,.L336-.L487
	.half	1
	.byte	101
	.word	.L1463-.L487,.L1465-.L487
	.half	1
	.byte	109
	.word	.L1466-.L487,.L1467-.L487
	.half	1
	.byte	109
	.word	.L1469-.L487,.L1470-.L487
	.half	1
	.byte	100
	.word	.L1471-.L487,.L344-.L487
	.half	1
	.byte	100
	.word	.L1472-.L487,.L1473-.L487
	.half	1
	.byte	109
	.word	.L1474-.L487,.L1475-.L487
	.half	1
	.byte	109
	.word	.L1476-.L487,.L990-.L487
	.half	1
	.byte	109
	.word	0,0
.L992:
	.word	-1,.L487,0,.L1460-.L487
	.half	1
	.byte	100
	.word	.L1461-.L487,.L1460-.L487
	.half	1
	.byte	108
	.word	.L385-.L487,.L775-.L487
	.half	1
	.byte	108
	.word	.L385-.L487,.L775-.L487
	.half	1
	.byte	100
	.word	.L1463-.L487,.L1464-.L487
	.half	1
	.byte	100
	.word	.L437-.L487,.L770-.L487
	.half	1
	.byte	108
	.word	.L437-.L487,.L1087-.L487
	.half	1
	.byte	100
	.word	.L1463-.L487,.L1465-.L487
	.half	1
	.byte	108
	.word	.L1466-.L487,.L1467-.L487
	.half	1
	.byte	108
	.word	.L1472-.L487,.L1473-.L487
	.half	1
	.byte	108
	.word	.L1474-.L487,.L1475-.L487
	.half	1
	.byte	108
	.word	.L1476-.L487,.L990-.L487
	.half	1
	.byte	108
	.word	0,0
.L486:
	.word	-1,.L487,0,.L1459-.L487
	.half	2
	.byte	138,0
	.word	.L1459-.L487,.L990-.L487
	.half	2
	.byte	138,16
	.word	.L990-.L487,.L990-.L487
	.half	2
	.byte	138,0
	.word	0,0
.L994:
	.word	-1,.L487,.L341-.L487,.L340-.L487
	.half	1
	.byte	98
	.word	.L1468-.L487,.L339-.L487
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_poll')
	.sect	'.debug_loc'
.L872:
	.word	-1,.L483,0,.L1442-.L483
	.half	1
	.byte	84
	.word	.L1445-.L483,.L1442-.L483
	.half	1
	.byte	88
	.word	.L385-.L483,.L775-.L483
	.half	1
	.byte	88
	.word	.L385-.L483,.L775-.L483
	.half	1
	.byte	84
	.word	.L437-.L483,.L770-.L483
	.half	1
	.byte	88
	.word	.L437-.L483,.L770-.L483
	.half	1
	.byte	84
	.word	.L1446-.L483,.L1448-.L483
	.half	1
	.byte	88
	.word	.L1446-.L483,.L1448-.L483
	.half	1
	.byte	84
	.word	.L1449-.L483,.L868-.L483
	.half	1
	.byte	88
	.word	.L1449-.L483,.L328-.L483
	.half	1
	.byte	84
	.word	0,0
.L869:
	.word	-1,.L483,0,.L1442-.L483
	.half	1
	.byte	100
	.word	.L1443-.L483,.L1442-.L483
	.half	1
	.byte	108
	.word	.L385-.L483,.L775-.L483
	.half	1
	.byte	108
	.word	.L385-.L483,.L775-.L483
	.half	1
	.byte	100
	.word	.L1446-.L483,.L1447-.L483
	.half	1
	.byte	100
	.word	.L437-.L483,.L770-.L483
	.half	1
	.byte	108
	.word	.L437-.L483,.L1087-.L483
	.half	1
	.byte	100
	.word	.L1446-.L483,.L1448-.L483
	.half	1
	.byte	108
	.word	.L326-.L483,.L1448-.L483
	.half	1
	.byte	100
	.word	.L1449-.L483,.L1450-.L483
	.half	1
	.byte	100
	.word	.L1449-.L483,.L868-.L483
	.half	1
	.byte	108
	.word	0,0
.L871:
	.word	-1,.L483,0,.L1442-.L483
	.half	1
	.byte	101
	.word	.L1444-.L483,.L1442-.L483
	.half	1
	.byte	109
	.word	.L385-.L483,.L775-.L483
	.half	1
	.byte	109
	.word	.L385-.L483,.L775-.L483
	.half	1
	.byte	101
	.word	.L437-.L483,.L770-.L483
	.half	1
	.byte	109
	.word	.L437-.L483,.L770-.L483
	.half	1
	.byte	101
	.word	.L1446-.L483,.L1448-.L483
	.half	1
	.byte	109
	.word	.L1446-.L483,.L1448-.L483
	.half	1
	.byte	101
	.word	.L1449-.L483,.L868-.L483
	.half	1
	.byte	109
	.word	.L1449-.L483,.L328-.L483
	.half	1
	.byte	101
	.word	0,0
.L482:
	.word	-1,.L483,0,.L1441-.L483
	.half	2
	.byte	138,0
	.word	.L1441-.L483,.L326-.L483
	.half	2
	.byte	138,16
	.word	.L326-.L483,.L326-.L483
	.half	2
	.byte	138,0
	.word	.L326-.L483,.L868-.L483
	.half	2
	.byte	138,16
	.word	.L868-.L483,.L868-.L483
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_process_refused_data')
	.sect	'.debug_loc'
.L986:
	.word	-1,.L443,.L1350-.L443,.L256-.L443
	.half	1
	.byte	82
	.word	.L257-.L443,.L261-.L443
	.half	1
	.byte	82
	.word	.L1354-.L443,.L1355-.L443
	.half	1
	.byte	82
	.word	.L258-.L443,.L264-.L443
	.half	1
	.byte	82
	.word	.L265-.L443,.L259-.L443
	.half	1
	.byte	82
	.word	0,0
.L985:
	.word	-1,.L443,0,.L1341-.L443
	.half	1
	.byte	100
	.word	.L1342-.L443,.L1343-.L443
	.half	1
	.byte	111
	.word	.L385-.L443,.L775-.L443
	.half	1
	.byte	100
	.word	.L1344-.L443,.L1345-.L443
	.half	1
	.byte	100
	.word	.L437-.L443,.L1087-.L443
	.half	1
	.byte	100
	.word	.L254-.L443,.L984-.L443
	.half	1
	.byte	111
	.word	.L254-.L443,.L1346-.L443
	.half	1
	.byte	100
	.word	.L1349-.L443,.L1350-.L443
	.half	1
	.byte	101
	.word	.L256-.L443,.L1351-.L443
	.half	1
	.byte	100
	.word	.L1352-.L443,.L257-.L443
	.half	1
	.byte	101
	.word	.L1353-.L443,.L261-.L443
	.half	1
	.byte	101
	.word	0,0
.L987:
	.word	-1,.L443,.L1347-.L443,.L1348-.L443
	.half	1
	.byte	95
	.word	.L258-.L443,.L1356-.L443
	.half	1
	.byte	95
	.word	0,0
.L442:
	.word	-1,.L443,0,.L1340-.L443
	.half	2
	.byte	138,0
	.word	.L1340-.L443,.L254-.L443
	.half	2
	.byte	138,16
	.word	.L254-.L443,.L254-.L443
	.half	2
	.byte	138,0
	.word	.L254-.L443,.L265-.L443
	.half	2
	.byte	138,16
	.word	.L265-.L443,.L265-.L443
	.half	2
	.byte	138,0
	.word	.L265-.L443,.L263-.L443
	.half	2
	.byte	138,16
	.word	.L263-.L443,.L263-.L443
	.half	2
	.byte	138,0
	.word	.L263-.L443,.L984-.L443
	.half	2
	.byte	138,16
	.word	.L984-.L443,.L984-.L443
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_recv')
	.sect	'.debug_loc'
.L852:
	.word	-1,.L475,0,.L1424-.L475
	.half	1
	.byte	100
	.word	.L1425-.L475,.L1424-.L475
	.half	1
	.byte	108
	.word	.L385-.L475,.L775-.L475
	.half	1
	.byte	108
	.word	.L385-.L475,.L775-.L475
	.half	1
	.byte	100
	.word	.L1427-.L475,.L1428-.L475
	.half	1
	.byte	100
	.word	.L437-.L475,.L770-.L475
	.half	1
	.byte	108
	.word	.L437-.L475,.L1087-.L475
	.half	1
	.byte	100
	.word	.L1427-.L475,.L851-.L475
	.half	1
	.byte	108
	.word	0,0
.L854:
	.word	-1,.L475,0,.L1424-.L475
	.half	1
	.byte	101
	.word	.L1426-.L475,.L1424-.L475
	.half	1
	.byte	109
	.word	.L385-.L475,.L775-.L475
	.half	1
	.byte	109
	.word	.L385-.L475,.L775-.L475
	.half	1
	.byte	101
	.word	.L437-.L475,.L770-.L475
	.half	1
	.byte	109
	.word	.L437-.L475,.L770-.L475
	.half	1
	.byte	101
	.word	.L1427-.L475,.L851-.L475
	.half	1
	.byte	109
	.word	.L1427-.L475,.L319-.L475
	.half	1
	.byte	101
	.word	0,0
.L474:
	.word	-1,.L475,0,.L1423-.L475
	.half	2
	.byte	138,0
	.word	.L1423-.L475,.L851-.L475
	.half	2
	.byte	138,16
	.word	.L851-.L475,.L851-.L475
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_recv_null')
	.sect	'.debug_loc'
.L1013:
	.word	-1,.L453,0,.L1379-.L453
	.half	1
	.byte	100
	.word	.L385-.L453,.L775-.L453
	.half	1
	.byte	100
	.word	.L1382-.L453,.L1383-.L453
	.half	1
	.byte	100
	.word	.L437-.L453,.L1087-.L453
	.half	1
	.byte	100
	.word	.L279-.L453,.L1385-.L453
	.half	1
	.byte	100
	.word	.L281-.L453,.L1390-.L453
	.half	1
	.byte	100
	.word	0,0
.L1017:
	.word	-1,.L453,0,.L1379-.L453
	.half	1
	.byte	84
	.word	.L385-.L453,.L775-.L453
	.half	1
	.byte	84
	.word	.L437-.L453,.L770-.L453
	.half	1
	.byte	84
	.word	.L1382-.L453,.L1384-.L453
	.half	1
	.byte	84
	.word	.L279-.L453,.L1386-.L453
	.half	1
	.byte	84
	.word	.L281-.L453,.L282-.L453
	.half	1
	.byte	84
	.word	0,0
.L1016:
	.word	-1,.L453,0,.L1379-.L453
	.half	1
	.byte	102
	.word	.L1380-.L453,.L1381-.L453
	.half	1
	.byte	111
	.word	.L385-.L453,.L775-.L453
	.half	1
	.byte	102
	.word	.L437-.L453,.L770-.L453
	.half	1
	.byte	102
	.word	.L1382-.L453,.L1384-.L453
	.half	1
	.byte	102
	.word	.L279-.L453,.L1387-.L453
	.half	1
	.byte	102
	.word	.L279-.L453,.L1012-.L453
	.half	1
	.byte	111
	.word	.L1388-.L453,.L1389-.L453
	.half	1
	.byte	100
	.word	.L281-.L453,.L282-.L453
	.half	1
	.byte	102
	.word	0,0
.L1014:
	.word	-1,.L453,0,.L1379-.L453
	.half	1
	.byte	101
	.word	.L385-.L453,.L775-.L453
	.half	1
	.byte	101
	.word	.L437-.L453,.L770-.L453
	.half	1
	.byte	101
	.word	.L1382-.L453,.L1384-.L453
	.half	1
	.byte	101
	.word	.L279-.L453,.L1387-.L453
	.half	1
	.byte	101
	.word	.L1385-.L453,.L1387-.L453
	.half	1
	.byte	100
	.word	.L281-.L453,.L282-.L453
	.half	1
	.byte	101
	.word	.L1390-.L453,.L282-.L453
	.half	1
	.byte	100
	.word	0,0
.L452:
	.word	-1,.L453,0,.L1378-.L453
	.half	2
	.byte	138,0
	.word	.L1378-.L453,.L279-.L453
	.half	2
	.byte	138,16
	.word	.L279-.L453,.L279-.L453
	.half	2
	.byte	138,0
	.word	.L279-.L453,.L283-.L453
	.half	2
	.byte	138,16
	.word	.L283-.L453,.L283-.L453
	.half	2
	.byte	138,0
	.word	.L283-.L453,.L1012-.L453
	.half	2
	.byte	138,16
	.word	.L1012-.L453,.L1012-.L453
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_recved')
	.sect	'.debug_loc'
.L876:
	.word	-1,.L421,0,.L1228-.L421
	.half	1
	.byte	84
	.word	.L1230-.L421,.L1228-.L421
	.half	1
	.byte	88
	.word	.L385-.L421,.L775-.L421
	.half	1
	.byte	84
	.word	.L385-.L421,.L775-.L421
	.half	1
	.byte	88
	.word	.L437-.L421,.L770-.L421
	.half	1
	.byte	84
	.word	.L437-.L421,.L770-.L421
	.half	1
	.byte	88
	.word	.L1231-.L421,.L1233-.L421
	.half	1
	.byte	84
	.word	.L1231-.L421,.L1233-.L421
	.half	1
	.byte	88
	.word	.L1234-.L421,.L137-.L421
	.half	1
	.byte	84
	.word	.L1234-.L421,.L1236-.L421
	.half	1
	.byte	88
	.word	0,0
.L874:
	.word	-1,.L421,0,.L1228-.L421
	.half	1
	.byte	100
	.word	.L1229-.L421,.L1228-.L421
	.half	1
	.byte	108
	.word	.L385-.L421,.L775-.L421
	.half	1
	.byte	108
	.word	.L385-.L421,.L775-.L421
	.half	1
	.byte	100
	.word	.L1231-.L421,.L1232-.L421
	.half	1
	.byte	100
	.word	.L437-.L421,.L770-.L421
	.half	1
	.byte	108
	.word	.L437-.L421,.L1087-.L421
	.half	1
	.byte	100
	.word	.L1231-.L421,.L1233-.L421
	.half	1
	.byte	108
	.word	.L135-.L421,.L1233-.L421
	.half	1
	.byte	100
	.word	.L1234-.L421,.L1235-.L421
	.half	1
	.byte	100
	.word	.L1234-.L421,.L873-.L421
	.half	1
	.byte	108
	.word	.L1239-.L421,.L1238-.L421
	.half	1
	.byte	100
	.word	.L1240-.L421,.L141-.L421
	.half	1
	.byte	100
	.word	0,0
.L879:
	.word	-1,.L421,.L1237-.L421,.L1238-.L421
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L420:
	.word	-1,.L421,0,.L1227-.L421
	.half	2
	.byte	138,0
	.word	.L1227-.L421,.L135-.L421
	.half	2
	.byte	138,16
	.word	.L135-.L421,.L135-.L421
	.half	2
	.byte	138,0
	.word	.L135-.L421,.L141-.L421
	.half	2
	.byte	138,16
	.word	.L141-.L421,.L141-.L421
	.half	2
	.byte	138,0
	.word	.L141-.L421,.L873-.L421
	.half	2
	.byte	138,16
	.word	.L873-.L421,.L873-.L421
	.half	2
	.byte	138,0
	.word	0,0
.L878:
	.word	-1,.L421,.L1238-.L421,.L873-.L421
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_remove_listener')
	.sect	'.debug_loc'
.L1034:
	.word	-1,.L391,0,.L1033-.L391
	.half	1
	.byte	100
	.word	0,0
.L1035:
	.word	-1,.L391,0,.L1033-.L391
	.half	1
	.byte	101
	.word	0,0
.L1036:
	.word	-1,.L391,0,.L1033-.L391
	.half	1
	.byte	100
	.word	0,0
.L390:
	.word	-1,.L391,0,.L1033-.L391
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_seg_copy')
	.sect	'.debug_loc'
.L1003:
	.word	-1,.L451,.L1371-.L451,.L1372-.L451
	.half	1
	.byte	98
	.word	.L1373-.L451,.L1001-.L451
	.half	1
	.byte	111
	.word	.L276-.L451,.L1374-.L451
	.half	1
	.byte	98
	.word	.L1374-.L451,.L1375-.L451
	.half	1
	.byte	100
	.word	.L1377-.L451,.L1001-.L451
	.half	1
	.byte	98
	.word	0,0
.L1002:
	.word	-1,.L451,0,.L1367-.L451
	.half	1
	.byte	100
	.word	.L1368-.L451,.L1367-.L451
	.half	1
	.byte	108
	.word	.L385-.L451,.L775-.L451
	.half	1
	.byte	108
	.word	.L385-.L451,.L775-.L451
	.half	1
	.byte	100
	.word	.L1369-.L451,.L1370-.L451
	.half	1
	.byte	100
	.word	.L437-.L451,.L770-.L451
	.half	1
	.byte	108
	.word	.L437-.L451,.L1087-.L451
	.half	1
	.byte	100
	.word	.L1369-.L451,.L1001-.L451
	.half	1
	.byte	108
	.word	.L1376-.L451,.L1375-.L451
	.half	1
	.byte	101
	.word	0,0
.L450:
	.word	-1,.L451,0,.L1366-.L451
	.half	2
	.byte	138,0
	.word	.L1366-.L451,.L276-.L451
	.half	2
	.byte	138,16
	.word	.L276-.L451,.L276-.L451
	.half	2
	.byte	138,0
	.word	.L276-.L451,.L1001-.L451
	.half	2
	.byte	138,16
	.word	.L1001-.L451,.L1001-.L451
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_seg_free')
	.sect	'.debug_loc'
.L1000:
	.word	-1,.L447,0,.L1359-.L447
	.half	1
	.byte	100
	.word	.L1360-.L447,.L999-.L447
	.half	1
	.byte	111
	.word	.L1361-.L447,.L999-.L447
	.half	1
	.byte	100
	.word	0,0
.L446:
	.word	-1,.L447,0,.L999-.L447
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_segs_free')
	.sect	'.debug_loc'
.L998:
	.word	-1,.L445,.L1358-.L445,.L269-.L445
	.half	1
	.byte	111
	.word	0,0
.L997:
	.word	-1,.L445,0,.L1357-.L445
	.half	1
	.byte	100
	.word	.L269-.L445,.L995-.L445
	.half	1
	.byte	100
	.word	0,0
.L444:
	.word	-1,.L445,0,.L995-.L445
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_sent')
	.sect	'.debug_loc'
.L856:
	.word	-1,.L477,0,.L1430-.L477
	.half	1
	.byte	100
	.word	.L1431-.L477,.L1430-.L477
	.half	1
	.byte	108
	.word	.L385-.L477,.L775-.L477
	.half	1
	.byte	108
	.word	.L385-.L477,.L775-.L477
	.half	1
	.byte	100
	.word	.L1433-.L477,.L1434-.L477
	.half	1
	.byte	100
	.word	.L437-.L477,.L770-.L477
	.half	1
	.byte	108
	.word	.L437-.L477,.L1087-.L477
	.half	1
	.byte	100
	.word	.L1433-.L477,.L855-.L477
	.half	1
	.byte	108
	.word	0,0
.L858:
	.word	-1,.L477,0,.L1430-.L477
	.half	1
	.byte	101
	.word	.L1432-.L477,.L1430-.L477
	.half	1
	.byte	109
	.word	.L385-.L477,.L775-.L477
	.half	1
	.byte	109
	.word	.L385-.L477,.L775-.L477
	.half	1
	.byte	101
	.word	.L437-.L477,.L770-.L477
	.half	1
	.byte	109
	.word	.L437-.L477,.L770-.L477
	.half	1
	.byte	101
	.word	.L1433-.L477,.L855-.L477
	.half	1
	.byte	109
	.word	.L1433-.L477,.L321-.L477
	.half	1
	.byte	101
	.word	0,0
.L476:
	.word	-1,.L477,0,.L1429-.L477
	.half	2
	.byte	138,0
	.word	.L1429-.L477,.L855-.L477
	.half	2
	.byte	138,16
	.word	.L855-.L477,.L855-.L477
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_setprio')
	.sect	'.debug_loc'
.L925:
	.word	-1,.L449,0,.L1363-.L449
	.half	1
	.byte	100
	.word	.L385-.L449,.L775-.L449
	.half	1
	.byte	100
	.word	.L1364-.L449,.L1365-.L449
	.half	1
	.byte	100
	.word	.L437-.L449,.L1087-.L449
	.half	1
	.byte	100
	.word	.L273-.L449,.L924-.L449
	.half	1
	.byte	100
	.word	0,0
.L926:
	.word	-1,.L449,0,.L1363-.L449
	.half	1
	.byte	84
	.word	.L385-.L449,.L775-.L449
	.half	1
	.byte	84
	.word	.L437-.L449,.L770-.L449
	.half	1
	.byte	84
	.word	.L1364-.L449,.L924-.L449
	.half	1
	.byte	84
	.word	0,0
.L448:
	.word	-1,.L449,0,.L1362-.L449
	.half	2
	.byte	138,0
	.word	.L1362-.L449,.L273-.L449
	.half	2
	.byte	138,16
	.word	.L273-.L449,.L273-.L449
	.half	2
	.byte	138,0
	.word	.L273-.L449,.L924-.L449
	.half	2
	.byte	138,16
	.word	.L924-.L449,.L924-.L449
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_shutdown')
	.sect	'.debug_loc'
.L921:
	.word	-1,.L401,0,.L1137-.L401
	.half	1
	.byte	100
	.word	.L1138-.L401,.L1139-.L401
	.half	1
	.byte	111
	.word	.L385-.L401,.L775-.L401
	.half	1
	.byte	100
	.word	.L1140-.L401,.L1141-.L401
	.half	1
	.byte	100
	.word	.L437-.L401,.L1087-.L401
	.half	1
	.byte	100
	.word	.L56-.L401,.L920-.L401
	.half	1
	.byte	111
	.word	.L56-.L401,.L1143-.L401
	.half	1
	.byte	100
	.word	.L1150-.L401,.L58-.L401
	.half	1
	.byte	100
	.word	0,0
.L922:
	.word	-1,.L401,0,.L1137-.L401
	.half	1
	.byte	84
	.word	.L385-.L401,.L775-.L401
	.half	1
	.byte	84
	.word	.L437-.L401,.L770-.L401
	.half	1
	.byte	84
	.word	.L1140-.L401,.L1142-.L401
	.half	1
	.byte	84
	.word	.L56-.L401,.L1144-.L401
	.half	1
	.byte	84
	.word	.L1145-.L401,.L1146-.L401
	.half	1
	.byte	88
	.word	.L64-.L401,.L61-.L401
	.half	1
	.byte	88
	.word	0,0
.L923:
	.word	-1,.L401,0,.L1137-.L401
	.half	1
	.byte	85
	.word	.L385-.L401,.L775-.L401
	.half	1
	.byte	85
	.word	.L437-.L401,.L770-.L401
	.half	1
	.byte	85
	.word	.L1140-.L401,.L1142-.L401
	.half	1
	.byte	85
	.word	.L56-.L401,.L1144-.L401
	.half	1
	.byte	85
	.word	.L1147-.L401,.L1148-.L401
	.half	1
	.byte	89
	.word	.L59-.L401,.L1149-.L401
	.half	1
	.byte	89
	.word	0,0
.L400:
	.word	-1,.L401,0,.L1136-.L401
	.half	2
	.byte	138,0
	.word	.L1136-.L401,.L56-.L401
	.half	2
	.byte	138,16
	.word	.L56-.L401,.L56-.L401
	.half	2
	.byte	138,0
	.word	.L56-.L401,.L67-.L401
	.half	2
	.byte	138,16
	.word	.L67-.L401,.L67-.L401
	.half	2
	.byte	138,0
	.word	.L67-.L401,.L63-.L401
	.half	2
	.byte	138,16
	.word	.L63-.L401,.L63-.L401
	.half	2
	.byte	138,0
	.word	.L63-.L401,.L920-.L401
	.half	2
	.byte	138,16
	.word	.L920-.L401,.L920-.L401
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_slowtmr')
	.sect	'.debug_loc'
.L945:
	.word	-1,.L427,.L1283-.L427,.L1284-.L427
	.half	5
	.byte	144,32,157,32,0
	.word	.L194-.L427,.L1288-.L427
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L940:
	.word	-1,.L427,.L1294-.L427,.L1295-.L427
	.half	1
	.byte	95
	.word	0,0
.L943:
	.word	-1,.L427,.L1300-.L427,.L211-.L427
	.half	1
	.byte	82
	.word	.L1320-.L427,.L231-.L427
	.half	1
	.byte	82
	.word	.L232-.L427,.L177-.L427
	.half	1
	.byte	82
	.word	0,0
.L952:
	.word	-1,.L427,.L1315-.L427,.L222-.L427
	.half	1
	.byte	110
	.word	.L1318-.L427,.L228-.L427
	.half	1
	.byte	100
	.word	0,0
.L951:
	.word	-1,.L427,.L1306-.L427,.L1305-.L427
	.half	1
	.byte	109
	.word	.L435-.L427,.L780-.L427
	.half	1
	.byte	109
	.word	.L437-.L427,.L770-.L427
	.half	1
	.byte	109
	.word	.L1309-.L427,.L1310-.L427
	.half	1
	.byte	109
	.word	.L1311-.L427,.L222-.L427
	.half	1
	.byte	109
	.word	0,0
.L947:
	.word	-1,.L427,.L1285-.L427,.L1286-.L427
	.half	1
	.byte	95
	.word	0,0
.L938:
	.word	-1,.L427,.L1272-.L427,.L1271-.L427
	.half	1
	.byte	111
	.word	.L435-.L427,.L780-.L427
	.half	1
	.byte	111
	.word	.L437-.L427,.L770-.L427
	.half	1
	.byte	111
	.word	.L1273-.L427,.L1274-.L427
	.half	1
	.byte	111
	.word	.L1275-.L427,.L1276-.L427
	.half	1
	.byte	111
	.word	.L1277-.L427,.L1278-.L427
	.half	1
	.byte	111
	.word	.L1281-.L427,.L1282-.L427
	.half	1
	.byte	111
	.word	.L1287-.L427,.L1284-.L427
	.half	1
	.byte	100
	.word	.L1289-.L427,.L1288-.L427
	.half	1
	.byte	100
	.word	.L1290-.L427,.L1291-.L427
	.half	1
	.byte	100
	.word	.L1292-.L427,.L1293-.L427
	.half	1
	.byte	100
	.word	.L1296-.L427,.L191-.L427
	.half	1
	.byte	100
	.word	.L433-.L427,.L800-.L427
	.half	1
	.byte	111
	.word	.L1297-.L427,.L1298-.L427
	.half	1
	.byte	111
	.word	.L1299-.L427,.L1300-.L427
	.half	1
	.byte	100
	.word	.L429-.L427,.L810-.L427
	.half	1
	.byte	111
	.word	.L1301-.L427,.L218-.L427
	.half	1
	.byte	100
	.word	.L1302-.L427,.L1303-.L427
	.half	1
	.byte	111
	.word	.L1304-.L427,.L805-.L427
	.half	1
	.byte	111
	.word	.L221-.L427,.L1305-.L427
	.half	1
	.byte	111
	.word	.L1307-.L427,.L1308-.L427
	.half	1
	.byte	100
	.word	.L1309-.L427,.L1310-.L427
	.half	1
	.byte	111
	.word	.L1311-.L427,.L1312-.L427
	.half	1
	.byte	111
	.word	.L1313-.L427,.L227-.L427
	.half	1
	.byte	100
	.word	.L1314-.L427,.L227-.L427
	.half	1
	.byte	101
	.word	.L1322-.L427,.L1323-.L427
	.half	1
	.byte	111
	.word	.L1325-.L427,.L1326-.L427
	.half	1
	.byte	100
	.word	.L1327-.L427,.L1328-.L427
	.half	1
	.byte	111
	.word	.L1329-.L427,.L936-.L427
	.half	1
	.byte	111
	.word	0,0
.L950:
	.word	-1,.L427,.L1316-.L427,.L1317-.L427
	.half	1
	.byte	100
	.word	0,0
.L955:
	.word	-1,.L427,.L1330-.L427,.L954-.L427
	.half	1
	.byte	100
	.word	0,0
.L941:
	.word	-1,.L427,.L1279-.L427,.L1278-.L427
	.half	1
	.byte	88
	.word	.L435-.L427,.L780-.L427
	.half	1
	.byte	88
	.word	.L437-.L427,.L770-.L427
	.half	1
	.byte	88
	.word	.L1281-.L427,.L1282-.L427
	.half	1
	.byte	88
	.word	.L433-.L427,.L800-.L427
	.half	1
	.byte	88
	.word	.L1297-.L427,.L1298-.L427
	.half	1
	.byte	88
	.word	.L429-.L427,.L810-.L427
	.half	1
	.byte	88
	.word	.L1302-.L427,.L1303-.L427
	.half	1
	.byte	88
	.word	.L1304-.L427,.L805-.L427
	.half	1
	.byte	88
	.word	.L221-.L427,.L1305-.L427
	.half	1
	.byte	88
	.word	.L1309-.L427,.L1310-.L427
	.half	1
	.byte	88
	.word	.L1311-.L427,.L177-.L427
	.half	1
	.byte	88
	.word	.L1304-.L427,.L805-.L427
	.half	1
	.byte	95
	.word	.L1324-.L427,.L1323-.L427
	.half	1
	.byte	95
	.word	.L238-.L427,.L1328-.L427
	.half	1
	.byte	95
	.word	.L237-.L427,.L234-.L427
	.half	1
	.byte	95
	.word	0,0
.L942:
	.word	-1,.L427,.L1280-.L427,.L1278-.L427
	.half	1
	.byte	89
	.word	.L435-.L427,.L780-.L427
	.half	1
	.byte	89
	.word	.L437-.L427,.L770-.L427
	.half	1
	.byte	89
	.word	.L1281-.L427,.L1282-.L427
	.half	1
	.byte	89
	.word	.L433-.L427,.L800-.L427
	.half	1
	.byte	89
	.word	.L1297-.L427,.L1298-.L427
	.half	1
	.byte	89
	.word	.L429-.L427,.L810-.L427
	.half	1
	.byte	89
	.word	.L1302-.L427,.L1303-.L427
	.half	1
	.byte	89
	.word	.L1304-.L427,.L805-.L427
	.half	1
	.byte	89
	.word	.L221-.L427,.L1305-.L427
	.half	1
	.byte	89
	.word	.L1309-.L427,.L1310-.L427
	.half	1
	.byte	89
	.word	.L1311-.L427,.L177-.L427
	.half	1
	.byte	89
	.word	0,0
.L939:
	.word	-1,.L427,.L1270-.L427,.L1271-.L427
	.half	1
	.byte	108
	.word	.L435-.L427,.L780-.L427
	.half	1
	.byte	108
	.word	.L437-.L427,.L770-.L427
	.half	1
	.byte	108
	.word	.L1273-.L427,.L1274-.L427
	.half	1
	.byte	108
	.word	.L1275-.L427,.L1276-.L427
	.half	1
	.byte	108
	.word	.L1277-.L427,.L1278-.L427
	.half	1
	.byte	108
	.word	.L1281-.L427,.L1282-.L427
	.half	1
	.byte	108
	.word	.L433-.L427,.L800-.L427
	.half	1
	.byte	108
	.word	.L1297-.L427,.L1298-.L427
	.half	1
	.byte	108
	.word	.L429-.L427,.L810-.L427
	.half	1
	.byte	108
	.word	.L1302-.L427,.L1303-.L427
	.half	1
	.byte	108
	.word	.L1304-.L427,.L805-.L427
	.half	1
	.byte	108
	.word	.L221-.L427,.L1305-.L427
	.half	1
	.byte	108
	.word	.L1309-.L427,.L1310-.L427
	.half	1
	.byte	108
	.word	.L1311-.L427,.L1312-.L427
	.half	1
	.byte	108
	.word	.L1319-.L427,.L1320-.L427
	.half	1
	.byte	101
	.word	.L1321-.L427,.L177-.L427
	.half	1
	.byte	100
	.word	.L1322-.L427,.L1323-.L427
	.half	1
	.byte	108
	.word	.L1327-.L427,.L1328-.L427
	.half	1
	.byte	108
	.word	.L1329-.L427,.L936-.L427
	.half	1
	.byte	108
	.word	0,0
.L426:
	.word	-1,.L427,0,.L1269-.L427
	.half	2
	.byte	138,0
	.word	.L1269-.L427,.L936-.L427
	.half	2
	.byte	138,16
	.word	.L936-.L427,.L936-.L427
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_tcp_get_tcp_addrinfo')
	.sect	'.debug_loc'
.L931:
	.word	-1,.L499,0,.L927-.L499
	.half	1
	.byte	101
	.word	0,0
.L929:
	.word	-1,.L499,0,.L927-.L499
	.half	1
	.byte	84
	.word	0,0
.L928:
	.word	-1,.L499,0,.L927-.L499
	.half	1
	.byte	100
	.word	0,0
.L933:
	.word	-1,.L499,0,.L927-.L499
	.half	1
	.byte	102
	.word	0,0
.L498:
	.word	-1,.L499,0,.L927-.L499
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_tmr')
	.sect	'.debug_loc'
.L388:
	.word	-1,.L389,0,.L935-.L389
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_txnow')
	.sect	'.debug_loc'
.L962:
	.word	-1,.L441,.L1338-.L441,.L961-.L441
	.half	1
	.byte	111
	.word	.L1339-.L441,.L253-.L441
	.half	1
	.byte	100
	.word	0,0
.L440:
	.word	-1,.L441,0,.L961-.L441
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_update_rcv_ann_wnd')
	.sect	'.debug_loc'
.L983:
	.word	-1,.L419,.L131-.L419,.L1224-.L419
	.half	1
	.byte	88
	.word	.L435-.L419,.L780-.L419
	.half	1
	.byte	88
	.word	.L437-.L419,.L770-.L419
	.half	1
	.byte	88
	.word	.L1226-.L419,.L132-.L419
	.half	1
	.byte	88
	.word	0,0
.L982:
	.word	-1,.L419,.L1225-.L419,.L1224-.L419
	.half	1
	.byte	82
	.word	.L435-.L419,.L780-.L419
	.half	1
	.byte	82
	.word	.L437-.L419,.L770-.L419
	.half	1
	.byte	82
	.word	.L1226-.L419,.L133-.L419
	.half	1
	.byte	82
	.word	0,0
.L981:
	.word	-1,.L419,0,.L1220-.L419
	.half	1
	.byte	100
	.word	.L1221-.L419,.L1220-.L419
	.half	1
	.byte	111
	.word	.L435-.L419,.L780-.L419
	.half	1
	.byte	111
	.word	.L435-.L419,.L780-.L419
	.half	1
	.byte	100
	.word	.L1222-.L419,.L1223-.L419
	.half	1
	.byte	100
	.word	.L437-.L419,.L770-.L419
	.half	1
	.byte	111
	.word	.L437-.L419,.L1087-.L419
	.half	1
	.byte	100
	.word	.L1222-.L419,.L1224-.L419
	.half	1
	.byte	111
	.word	.L1226-.L419,.L980-.L419
	.half	1
	.byte	111
	.word	0,0
.L418:
	.word	-1,.L419,0,.L1219-.L419
	.half	2
	.byte	138,0
	.word	.L1219-.L419,.L129-.L419
	.half	2
	.byte	138,16
	.word	.L129-.L419,.L129-.L419
	.half	2
	.byte	138,0
	.word	.L129-.L419,.L980-.L419
	.half	2
	.byte	138,16
	.word	.L980-.L419,.L980-.L419
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L2226:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('tcp_init')
	.sect	'.debug_frame'
	.word	24
	.word	.L2226,.L381,.L934-.L381
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_free')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L383,.L967-.L383
	.byte	4
	.word	(.L1082-.L383)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L967-.L1082)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_free_listen')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L387,.L1031-.L387
	.byte	4
	.word	(.L1089-.L387)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L1031-.L1089)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_tmr')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L389,.L935-.L389
	.sdecl	'.debug_frame',debug,cluster('tcp_remove_listener')
	.sect	'.debug_frame'
	.word	20
	.word	.L2226,.L391,.L1033-.L391
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_listen_closed')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L393,.L1037-.L393
	.byte	4
	.word	(.L1095-.L393)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L1037-.L1095)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_close_shutdown')
	.sect	'.debug_frame'
	.word	52
	.word	.L2226,.L395,.L1041-.L395
	.byte	4
	.word	(.L1102-.L395)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L24-.L1102)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L1041-.L24)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_close_shutdown_fin')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L397,.L1028-.L397
	.sdecl	'.debug_frame',debug,cluster('tcp_close')
	.sect	'.debug_frame'
	.word	52
	.word	.L2226,.L399,.L918-.L399
	.byte	4
	.word	(.L1132-.L399)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L52-.L1132)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L918-.L52)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_shutdown')
	.sect	'.debug_frame'
	.word	88
	.word	.L2226,.L401,.L920-.L401
	.byte	4
	.word	(.L1136-.L401)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L56-.L1136)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L67-.L56)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L63-.L67)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L920-.L63)/2
	.byte	19,0,8,26,0,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_abandon')
	.sect	'.debug_frame'
	.word	88
	.word	.L2226,.L403,.L970-.L403
	.byte	4
	.word	(.L1151-.L403)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L89-.L1151)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L71-.L89)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L74-.L71)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L970-.L74)/2
	.byte	19,0,8,26,0,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_abort')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L405,.L916-.L405
	.sdecl	'.debug_frame',debug,cluster('tcp_bind')
	.sect	'.debug_frame'
	.word	104
	.word	.L2226,.L407,.L881-.L407
	.byte	4
	.word	(.L1176-.L407)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L91-.L1176)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L93-.L91)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L95-.L93)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L104-.L95)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L881-.L104)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_bind_netif')
	.sect	'.debug_frame'
	.word	20
	.word	.L2226,.L409,.L889-.L409
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_accept_null')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L411,.L1046-.L411
	.byte	4
	.word	(.L1191-.L411)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L1046-.L1191)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_listen_with_backlog')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L413,.L913-.L413
	.sdecl	'.debug_frame',debug,cluster('tcp_listen_with_backlog_and_err')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L415,.L904-.L415
	.byte	4
	.word	(.L1198-.L415)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L904-.L1198)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_update_rcv_ann_wnd')
	.sect	'.debug_frame'
	.word	52
	.word	.L2226,.L419,.L980-.L419
	.byte	4
	.word	(.L1219-.L419)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L129-.L1219)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L980-.L129)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_recved')
	.sect	'.debug_frame'
	.word	68
	.word	.L2226,.L421,.L873-.L421
	.byte	4
	.word	(.L1227-.L421)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L135-.L1227)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L141-.L135)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L873-.L141)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('tcp_new_port')
	.sect	'.debug_frame'
	.word	24
	.word	.L2226,.L423,.L1024-.L423
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_connect')
	.sect	'.debug_frame'
	.word	104
	.word	.L2226,.L425,.L893-.L425
	.byte	4
	.word	(.L1242-.L425)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L153-.L1242)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L155-.L153)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L161-.L155)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L164-.L161)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L893-.L164)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_slowtmr')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L427,.L936-.L427
	.byte	4
	.word	(.L1269-.L427)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L936-.L1269)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_fasttmr')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L439,.L956-.L439
	.sdecl	'.debug_frame',debug,cluster('tcp_txnow')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L441,.L961-.L441
	.sdecl	'.debug_frame',debug,cluster('tcp_process_refused_data')
	.sect	'.debug_frame'
	.word	88
	.word	.L2226,.L443,.L984-.L443
	.byte	4
	.word	(.L1340-.L443)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L254-.L1340)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L265-.L254)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L263-.L265)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L984-.L263)/2
	.byte	19,0,8,26,0,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_segs_free')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L445,.L995-.L445
	.sdecl	'.debug_frame',debug,cluster('tcp_seg_free')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L447,.L999-.L447
	.sdecl	'.debug_frame',debug,cluster('tcp_setprio')
	.sect	'.debug_frame'
	.word	52
	.word	.L2226,.L449,.L924-.L449
	.byte	4
	.word	(.L1362-.L449)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L273-.L1362)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L924-.L273)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_seg_copy')
	.sect	'.debug_frame'
	.word	52
	.word	.L2226,.L451,.L1001-.L451
	.byte	4
	.word	(.L1366-.L451)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L276-.L1366)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L1001-.L276)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_recv_null')
	.sect	'.debug_frame'
	.word	68
	.word	.L2226,.L453,.L1012-.L453
	.byte	4
	.word	(.L1378-.L453)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L279-.L1378)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L283-.L279)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L1012-.L283)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('tcp_kill_prio')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L455,.L1050-.L455
	.sdecl	'.debug_frame',debug,cluster('tcp_kill_state')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L457,.L1056-.L457
	.sdecl	'.debug_frame',debug,cluster('tcp_kill_timewait')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L461,.L1062-.L461
	.sdecl	'.debug_frame',debug,cluster('tcp_handle_closepend')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L463,.L1066-.L463
	.sdecl	'.debug_frame',debug,cluster('tcp_alloc')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L465,.L963-.L465
	.sdecl	'.debug_frame',debug,cluster('tcp_new')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L469,.L842-.L469
	.sdecl	'.debug_frame',debug,cluster('tcp_new_ip_type')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L471,.L843-.L471
	.sdecl	'.debug_frame',debug,cluster('tcp_arg')
	.sect	'.debug_frame'
	.word	20
	.word	.L2226,.L473,.L847-.L473
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_recv')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L475,.L851-.L475
	.byte	4
	.word	(.L1423-.L475)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L851-.L1423)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_sent')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L477,.L855-.L477
	.byte	4
	.word	(.L1429-.L477)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L855-.L1429)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_err')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L479,.L859-.L479
	.byte	4
	.word	(.L1435-.L479)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L859-.L1435)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_accept')
	.sect	'.debug_frame'
	.word	20
	.word	.L2226,.L481,.L863-.L481
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_poll')
	.sect	'.debug_frame'
	.word	52
	.word	.L2226,.L483,.L868-.L483
	.byte	4
	.word	(.L1441-.L483)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L326-.L1441)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L868-.L326)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_pcb_purge')
	.sect	'.debug_frame'
	.word	52
	.word	.L2226,.L485,.L988-.L485
	.byte	4
	.word	(.L1451-.L485)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L329-.L1451)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L988-.L329)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_pcb_remove')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L487,.L990-.L487
	.byte	4
	.word	(.L1459-.L487)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L990-.L1459)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_next_iss')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L489,.L1004-.L489
	.byte	4
	.word	(.L1477-.L489)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L1004-.L1477)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_eff_send_mss_netif')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L491,.L1006-.L491
	.byte	4
	.word	(.L1481-.L491)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L1006-.L1481)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_netif_ip_addr_changed_pcblist')
	.sect	'.debug_frame'
	.word	36
	.word	.L2226,.L493,.L1069-.L493
	.byte	4
	.word	(.L1487-.L493)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L1069-.L1487)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_netif_ip_addr_changed')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L495,.L1018-.L495
	.sdecl	'.debug_frame',debug,cluster('tcp_debug_state_str')
	.sect	'.debug_frame'
	.word	24
	.word	.L2226,.L497,.L838-.L497
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_tcp_get_tcp_addrinfo')
	.sect	'.debug_frame'
	.word	20
	.word	.L2226,.L499,.L927-.L499
	.byte	8,18,8,19,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_free_ooseq')
	.sect	'.debug_frame'
	.word	12
	.word	.L2226,.L501,.L1022-.L501
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L2227:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_109')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L385,.L775-.L385
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_112')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L417,.L790-.L417
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_116')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L429,.L810-.L429
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_115')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L431,.L805-.L431
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_114')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L433,.L800-.L433
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_110')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L435,.L780-.L435
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_108')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L437,.L770-.L437
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_113')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L459,.L795-.L459
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_111')
	.sect	'.debug_frame'
	.word	24
	.word	.L2227,.L467,.L785-.L467
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2396  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2397  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2398  #if TCP_DEBUG || TCP_INPUT_DEBUG || TCP_OUTPUT_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2399  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2400   * Print a tcp header for debugging purposes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2401   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2402   * @param tcphdr pointer to a struct tcp_hdr
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2403   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2404  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2405  tcp_debug_print(struct tcp_hdr *tcphdr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2406  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2407    LWIP_DEBUGF(TCP_DEBUG, ("TCP header:\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2408    LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2409    LWIP_DEBUGF(TCP_DEBUG, ("|    %5"U16_F"      |    %5"U16_F"      | (src port, dest port)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2410                            lwip_ntohs(tcphdr->src), lwip_ntohs(tcphdr->dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2411    LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2412    LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (seq no)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2413                            lwip_ntohl(tcphdr->seqno)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2414    LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2415    LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (ack no)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2416                            lwip_ntohl(tcphdr->ackno)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2417    LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2418    LWIP_DEBUGF(TCP_DEBUG, ("| %2"U16_F" |   |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"|     %5"U16_F"     | (hdrlen, flags (",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2419                            TCPH_HDRLEN(tcphdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2420                            (u16_t)(TCPH_FLAGS(tcphdr) >> 5 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2421                            (u16_t)(TCPH_FLAGS(tcphdr) >> 4 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2422                            (u16_t)(TCPH_FLAGS(tcphdr) >> 3 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2423                            (u16_t)(TCPH_FLAGS(tcphdr) >> 2 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2424                            (u16_t)(TCPH_FLAGS(tcphdr) >> 1 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2425                            (u16_t)(TCPH_FLAGS(tcphdr)      & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2426                            lwip_ntohs(tcphdr->wnd)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2427    tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2428    LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2429    LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2430    LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2431                            lwip_ntohs(tcphdr->chksum), lwip_ntohs(tcphdr->urgp)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2432    LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2433  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2434  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2435  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2436   * Print a tcp state for debugging purposes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2437   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2438   * @param s enum tcp_state to print
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2439   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2440  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2441  tcp_debug_print_state(enum tcp_state s)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2442  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2443    LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2444  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2445  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2446  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2447   * Print tcp flags for debugging purposes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2448   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2449   * @param flags tcp flags, all active flags are printed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2450   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2451  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2452  tcp_debug_print_flags(u8_t flags)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2453  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2454    if (flags & TCP_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2455      LWIP_DEBUGF(TCP_DEBUG, ("FIN "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2456    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2457    if (flags & TCP_SYN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2458      LWIP_DEBUGF(TCP_DEBUG, ("SYN "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2459    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2460    if (flags & TCP_RST) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2461      LWIP_DEBUGF(TCP_DEBUG, ("RST "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2462    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2463    if (flags & TCP_PSH) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2464      LWIP_DEBUGF(TCP_DEBUG, ("PSH "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2465    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2466    if (flags & TCP_ACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2467      LWIP_DEBUGF(TCP_DEBUG, ("ACK "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2468    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2469    if (flags & TCP_URG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2470      LWIP_DEBUGF(TCP_DEBUG, ("URG "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2471    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2472    if (flags & TCP_ECE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2473      LWIP_DEBUGF(TCP_DEBUG, ("ECE "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2474    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2475    if (flags & TCP_CWR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2476      LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2477    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2478    LWIP_DEBUGF(TCP_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2479  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2480  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2481  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2482   * Print all tcp_pcbs in every list for debugging purposes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2483   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2484  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2485  tcp_debug_print_pcbs(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2486  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2487    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2488    struct tcp_pcb_listen *pcbl;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2489  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2490    LWIP_DEBUGF(TCP_DEBUG, ("Active PCB states:\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2491    for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2492      LWIP_DEBUGF(TCP_DEBUG, ("Local port %"U16_F", foreign port %"U16_F" snd_nxt %"U32_F" rcv_nxt %"U32_F" ",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2493                              pcb->local_port, pcb->remote_port,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2494                              pcb->snd_nxt, pcb->rcv_nxt));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2495      tcp_debug_print_state(pcb->state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2496    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2497  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2498    LWIP_DEBUGF(TCP_DEBUG, ("Listen PCB states:\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2499    for (pcbl = tcp_listen_pcbs.listen_pcbs; pcbl != NULL; pcbl = pcbl->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2500      LWIP_DEBUGF(TCP_DEBUG, ("Local port %"U16_F" ", pcbl->local_port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2501      tcp_debug_print_state(pcbl->state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2502    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2503  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2504    LWIP_DEBUGF(TCP_DEBUG, ("TIME-WAIT PCB states:\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2505    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2506      LWIP_DEBUGF(TCP_DEBUG, ("Local port %"U16_F", foreign port %"U16_F" snd_nxt %"U32_F" rcv_nxt %"U32_F" ",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2507                              pcb->local_port, pcb->remote_port,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2508                              pcb->snd_nxt, pcb->rcv_nxt));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2509      tcp_debug_print_state(pcb->state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2510    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2511  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2512  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2513  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2514   * Check state consistency of the tcp_pcb lists.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2515   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2516  s16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2517  tcp_pcbs_sane(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2518  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2519    struct tcp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2520    for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2521      LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2522      LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2523      LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2524    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2525    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2526      LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2527    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2528    return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2529  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2530  #endif /* TCP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2531  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2532  #if LWIP_TCP_PCB_NUM_EXT_ARGS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2533  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2534   * @defgroup tcp_raw_extargs ext arguments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2535   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2536   * Additional data storage per tcp pcb\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2537   * @see @ref tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2538   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2539   * When LWIP_TCP_PCB_NUM_EXT_ARGS is > 0, every tcp pcb (including listen pcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2540   * includes a number of additional argument entries in an array.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2541   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2542   * To support memory management, in addition to a 'void *', callbacks can be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2543   * provided to manage transition from listening pcbs to connections and to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2544   * deallocate memory when a pcb is deallocated (see struct @ref tcp_ext_arg_callbacks).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2545   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2546   * After allocating this index, use @ref tcp_ext_arg_set and @ref tcp_ext_arg_get
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2547   * to store and load arguments from this index for a given pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2548   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2549  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2550  static u8_t tcp_ext_arg_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2551  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2552  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2553   * @ingroup tcp_raw_extargs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2554   * Allocate an index to store data in ext_args member of struct tcp_pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2555   * Returned value is an index in mentioned array.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2556   * The index is *global* over all pcbs!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2557   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2558   * When @ref LWIP_TCP_PCB_NUM_EXT_ARGS is > 0, every tcp pcb (including listen pcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2559   * includes a number of additional argument entries in an array.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2560   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2561   * To support memory management, in addition to a 'void *', callbacks can be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2562   * provided to manage transition from listening pcbs to connections and to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2563   * deallocate memory when a pcb is deallocated (see struct @ref tcp_ext_arg_callbacks).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2564   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2565   * After allocating this index, use @ref tcp_ext_arg_set and @ref tcp_ext_arg_get
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2566   * to store and load arguments from this index for a given pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2567   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2568   * @return a unique index into struct tcp_pcb.ext_args
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2569   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2570  u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2571  tcp_ext_arg_alloc_id(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2572  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2573    u8_t result = tcp_ext_arg_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2574    tcp_ext_arg_id++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2575  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2576    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2577  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2578  #if LWIP_TCP_PCB_NUM_EXT_ARGS >= 255
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2579  #error LWIP_TCP_PCB_NUM_EXT_ARGS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2580  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2581    LWIP_ASSERT("Increase LWIP_TCP_PCB_NUM_EXT_ARGS in lwipopts.h", result < LWIP_TCP_PCB_NUM_EXT_ARGS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2582    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2583  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2584  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2585  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2586   * @ingroup tcp_raw_extargs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2587   * Set callbacks for a given index of ext_args on the specified pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2588   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2589   * @param pcb tcp_pcb for which to set the callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2590   * @param id ext_args index to set (allocated via @ref tcp_ext_arg_alloc_id)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2591   * @param callbacks callback table (const since it is referenced, not copied!)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2592   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2593  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2594  tcp_ext_arg_set_callbacks(struct tcp_pcb *pcb, uint8_t id, const struct tcp_ext_arg_callbacks * const callbacks)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2595  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2596    LWIP_ASSERT("pcb != NULL", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2597    LWIP_ASSERT("id < LWIP_TCP_PCB_NUM_EXT_ARGS", id < LWIP_TCP_PCB_NUM_EXT_ARGS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2598    LWIP_ASSERT("callbacks != NULL", callbacks != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2599  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2600    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2601  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2602    pcb->ext_args[id].callbacks = callbacks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2603  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2604  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2605  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2606   * @ingroup tcp_raw_extargs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2607   * Set data for a given index of ext_args on the specified pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2608   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2609   * @param pcb tcp_pcb for which to set the data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2610   * @param id ext_args index to set (allocated via @ref tcp_ext_arg_alloc_id)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2611   * @param arg data pointer to set
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2612   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2613  void tcp_ext_arg_set(struct tcp_pcb *pcb, uint8_t id, void *arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2614  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2615    LWIP_ASSERT("pcb != NULL", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2616    LWIP_ASSERT("id < LWIP_TCP_PCB_NUM_EXT_ARGS", id < LWIP_TCP_PCB_NUM_EXT_ARGS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2617  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2618    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2619  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2620    pcb->ext_args[id].data = arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2621  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2622  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2623  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2624   * @ingroup tcp_raw_extargs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2625   * Set data for a given index of ext_args on the specified pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2626   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2627   * @param pcb tcp_pcb for which to set the data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2628   * @param id ext_args index to set (allocated via @ref tcp_ext_arg_alloc_id)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2629   * @return data pointer at the given index
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2630   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2631  void *tcp_ext_arg_get(const struct tcp_pcb *pcb, uint8_t id)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2632  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2633    LWIP_ASSERT("pcb != NULL", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2634    LWIP_ASSERT("id < LWIP_TCP_PCB_NUM_EXT_ARGS", id < LWIP_TCP_PCB_NUM_EXT_ARGS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2635  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2636    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2637  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2638    return pcb->ext_args[id].data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2639  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2640  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2641  /** This function calls the "destroy" callback for all ext_args once a pcb is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2642   * freed.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2643   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2644  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2645  tcp_ext_arg_invoke_callbacks_destroyed(struct tcp_pcb_ext_args *ext_args)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2646  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2647    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2648    LWIP_ASSERT("ext_args != NULL", ext_args != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2649  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2650    for (i = 0; i < LWIP_TCP_PCB_NUM_EXT_ARGS; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2651      if (ext_args[i].callbacks != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2652        if (ext_args[i].callbacks->destroy != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2653          ext_args[i].callbacks->destroy((u8_t)i, ext_args[i].data);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2654        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2655      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2656    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2657  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2658  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2659  /** This function calls the "passive_open" callback for all ext_args if a connection
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2660   * is in the process of being accepted. This is called just after the SYN is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2661   * received and before a SYN/ACK is sent, to allow to modify the very first
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2662   * segment sent even on passive open. Naturally, the "accepted" callback of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2663   * pcb has not been called yet!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2664   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2665  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2666  tcp_ext_arg_invoke_callbacks_passive_open(struct tcp_pcb_listen *lpcb, struct tcp_pcb *cpcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2667  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2668    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2669    LWIP_ASSERT("lpcb != NULL", lpcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2670    LWIP_ASSERT("cpcb != NULL", cpcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2671  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2672    for (i = 0; i < LWIP_TCP_PCB_NUM_EXT_ARGS; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2673      if (lpcb->ext_args[i].callbacks != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2674        if (lpcb->ext_args[i].callbacks->passive_open != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2675          err_t err = lpcb->ext_args[i].callbacks->passive_open((u8_t)i, lpcb, cpcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2676          if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2677            return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2678          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2679        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2680      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2681    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2682    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2683  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2684  #endif /* LWIP_TCP_PCB_NUM_EXT_ARGS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2685  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp.c	  2686  #endif /* LWIP_TCP */

	; Module end
