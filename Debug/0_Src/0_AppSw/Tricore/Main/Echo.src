	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Tricore\\Main\\.Echo.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Tricore\\Main\\Echo.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Tricore\\Main\\Echo.src ..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c'

	
$TC162
	
	.sdecl	'.text.Echo.TCP_server_init',code,cluster('TCP_server_init')
	.sect	'.text.Echo.TCP_server_init'
	.align	2
	
	.global	TCP_server_init

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     1  /**********************************************************************************************************************
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     2   * \file Echo.c
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     3   * \copyright Copyright (C) Infineon Technologies AG 2019
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     4   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     5   * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     6   * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     7   * are agreed, use of this file is subject to following:
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     8   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	     9   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    10   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    11   * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    12   * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    13   * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    14   * Software is furnished to do so, all subject to the following:
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    15   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    16   * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    17   * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    18   * derivative works of the Software, unless such copies or derivative works are solely in the form of
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    19   * machine-executable object code generated by a source language processor.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    20   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    21   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    22   * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    23   * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    24   * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    25   * IN THE SOFTWARE.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    26   *********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    27  /*
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    28   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    29   * All rights reserved. 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    30   * 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    31   * Redistribution and use in source and binary forms, with or without modification, 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    32   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    33   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    34   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    35   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    36   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    37   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    38   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    39   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    40   *    derived from this software without specific prior written permission. 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    41   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    42   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    43   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    44   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    45   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    46   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    47   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    48   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    49   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    50   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    51   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    52   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    53   * This file is part of and a contribution to the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    54   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    55   * Credits go to Adam Dunkels (and the current maintainers) of this software.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    56   *
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    57   * Christiaan Simons rewrote this file to get a more stable echo example.
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    58   */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    59  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    60  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    61  /*-----------------------------------------------------Includes------------------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    62  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    63  #include "Echo.h"
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    64  #include <string.h>
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    65  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    66  #include "lwip/debug.h"
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    67  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    68  #include "lwip/tcp.h"
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    69  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    70  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    71  /*------------------------------------------------------Macros-------------------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    72  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    73  #define STORAGE_SIZE_BYTES 256          /* Size in bytes of the space in memory allocated for storing incoming data */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    74  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    75  #define  TCP_LOCAL_PORT    80
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    76  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    77  /*-------------------------------------------------Data Structures---------------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    78  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    79  enum EchoStates                         /* States of the session with the remote user                               */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    80  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    81      ES_NONE = 0,                        /* Session not completely initialized                                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    82      ES_ACCEPTED,                        /* Session assigned to a remote client and resources are being allocated    */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    83      ES_RECEIVING,                       /* Session is receiving data sent from remote client                        */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    84      ES_CLOSING                          /* Session is being closed and assigned resources will be deallocated       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    85  };
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    86  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    87  typedef struct tcp_pcb tcpPcb;          /* Define a more convenient type                                            */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    88  typedef struct pbuf pBuf;               /* Define a more convenient type                                            */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    89  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    90  typedef struct                          /* Session data structure used for communicating with a single remote client*/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    91  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    92      u8_t state;                         /* The current state for the session                                        */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    93      tcpPcb *pcb;                        /* Pointer to the TCP protocol control block used for this session          */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    94      pBuf *p;                            /* Pointer to the packet buffers used to store received packets             */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    95      char storage[STORAGE_SIZE_BYTES];   /* Storage for the received strings                                         */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    96      uint16 nextFreeStoragePos;          /* Position of the next free position in the storage array                  */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    97  } EchoSession;
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    98  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	    99  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   100  /*-------------------------------------------------Global variables--------------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   101  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   102  /* Infineon Logo to be printed on the terminal at every new connection */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   103  char * g_Logo =
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   104  "                   *******\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   105             ********\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   106         **** ***             ****  *\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   107      *****   ***            ***   **\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   108    *****     ***  ** ****  *****  **   ** ****    ****     ****   *******\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   109   ****       ***  ***  **   ***   **   **   **  ***  **  ***  ***  **  ***\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   110   ****       ***  ***  **   ***   **   **   **  ******** **   ***  **  ***\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   111   *****      ***  ***  **   ***   **   **   **  ***      ***  ***  **  ***\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   112    ******    ***  ***  **   ***   **   **   **    *****    ****    **  ***\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   113       ******                                                                    *\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   114          *******                                                          **\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   115               *********                                           ****\r\n\ 
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   116                       *****************************************\r\n\n\0";
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   117  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   118  struct tcp_pcb* g_TCPPcb;                                                  /* Pointer to the TCP protocol control block    */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   119  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   120  /*------------------------------------------------Function Prototypes------------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   121  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   122  err_t echoAccept (void *arg, tcpPcb *newPcb, err_t err);            /* Accept callback is called every time a client establishes a new connection                   */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   123  err_t echoRecv (void *arg, tcpPcb *tpcb, pBuf *p, err_t err);       /* Recv callback is called every time data is received through the TCP connection               */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   124  void echoError (void *arg, err_t err);                              /* Error callback is called if a fatal error has already occurred on the connection             */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   125  err_t echoPoll (void *arg, tcpPcb *tpcb);                           /* Poll function is called periodically by the TCP stack                                        */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   126  err_t echoSent (void *arg, tcpPcb *tpcb, u16_t len);                /* Sent callback is called when TCP data has successfully been delivered to the remote host     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   127  void echoSend (tcpPcb *tPcb, EchoSession *es);                      /* Send function enqueues TCP data to be delivered to the remote client                         */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   128  void echoUnpack (tcpPcb *tPcb, EchoSession *es);                    /* Unpack function dequeues data from the package buffer and copies it in the session storage   */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   129  void echoClose (tcpPcb *tPcb, EchoSession *es);                     /* Close function closes a TCP connection and deallocates session resources                     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   130  static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb,struct pbuf *p, err_t err);
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   131  static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err);
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   132  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   133  /*---------------------------------------------Function Implementations----------------------------------------------*/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   134  /*********************************************************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   135  /* Function to initialize the ECHO program */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   136  void TCP_server_init(void)
; Function TCP_server_init
.L46:
TCP_server_init:	.type	func

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   137  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   138      g_TCPPcb = tcp_new();                                          /* Create a new TCP protocol control block                                                      */
	call	tcp_new
.L315:
	st.a	g_TCPPcb,a2
.L316:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   139      if (g_TCPPcb != NULL)                                          /* If the creation was successful...                                                            */
	mov.aa	a4,a2
.L317:
	jz.a	a4,.L2
.L132:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   140      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   141          err_t err = tcp_bind(g_TCPPcb, IP_ADDR_ANY, TCP_LOCAL_PORT);           /* ...bind the TCP procotol control block to any local address and local port 80.               */
	lea	a5,ip_addr_any
.L318:
	mov	d4,#80
	call	tcp_bind
.L201:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   142          if (err == ERR_OK)                                          /* If the binding was successful...                                                             */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   143          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   144              g_TCPPcb = tcp_listen(g_TCPPcb);                      /* ...set the TCP control block able to accept incoming connections.                            */
	ld.a	a4,g_TCPPcb
.L319:
	jne	d2,#0,.L3
.L320:
	mov	d4,#255
	call	tcp_listen_with_backlog
.L202:
	st.a	g_TCPPcb,a2
.L321:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   145              // tcp_accept(g_TCPPcb, echoAccept);                      /* Configure the callback function to be called when a new connection is established.           */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   146              tcp_accept(g_TCPPcb, tcp_server_accept);                      /* Configure the callback function to be called when a new connection is established.           */
	mov.aa	a4,a2
.L322:
	movh.a	a5,#@his(tcp_server_accept)
	lea	a5,[a5]@los(tcp_server_accept)
	j	tcp_accept
.L2:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   147          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   148          else
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   149          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   150              memp_free(MEMP_TCP_PCB, g_TCPPcb);
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   151          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   152      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   153  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   154  }
	ret
.L3:
	mov	d4,#1
.L323:
	j	memp_free
.L130:
	
__TCP_server_init_function_end:
	.size	TCP_server_init,__TCP_server_init_function_end-TCP_server_init
.L75:
	; End of function
	
	.sdecl	'.text.Echo.echoAccept',code,cluster('echoAccept')
	.sect	'.text.Echo.echoAccept'
	.align	2
	
	.global	echoAccept

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   155  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   156  /* Accept callback: it is called every time a client establish a new connection */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   157  err_t echoAccept(void *arg, tcpPcb *newPcb, err_t err)
; Function echoAccept
.L48:
echoAccept:	.type	func
	mov.aa	a12,a5
.L141:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   158  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   159      LWIP_UNUSED_ARG(arg);                                               /* Eliminate compiler warning about unused arguments                                        */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   160      LWIP_UNUSED_ARG(err);                                               /* Eliminate compiler warning about unused arguments                                        */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   161  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   162      err_t retErr;                                                       /* Allocate memory for function return value                                                */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   163      EchoSession *es = (EchoSession*) mem_malloc(sizeof(EchoSession));   /* Allocate memory for the session data                                                     */
	mov	d4,#272
	call	mem_malloc
.L203:
	mov.aa	a15,a2
.L205:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   164      if (es != NULL)                                                     /* If memory allocation was successful the session can be initialized                       */
	jz.a	a15,.L5
.L328:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   165      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   166          es->state = ES_ACCEPTED;                                        /* The new session has been accepted                                                        */
	mov	d15,#1
	st.b	[a15],d15
.L329:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   167          es->pcb = newPcb;                                               /* A pointer to the TCP control block to use for this session is saved in the session       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   168          es->p = NULL;                                                   /* The packet buffer for received data is initially empty                                   */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   169          memset(es->storage, 0, STORAGE_SIZE_BYTES);                     /* Allocate memory for storing processed received data                                      */
	mov	d4,#0
	st.a	[a15]4,a12
.L330:
	mov	d5,#256
	mov.a	a2,#0
.L204:
	st.a	[a15]8,a2
.L331:
	lea	a4,[a15]12
.L332:
	call	memset
.L333:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   170          es->nextFreeStoragePos = 0;                                     /* The first free position in the received data array is the beginning of the array         */
	mov	d15,#0
	st.h	[a15]268,d15
.L334:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   171  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   172          tcp_arg(newPcb, es);                                            /* Specify that the session shall be passed as argument to every callback function          */
	mov.aa	a4,a12
.L206:
	mov.aa	a5,a15
.L208:
	call	tcp_arg
.L207:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   173          tcp_recv(newPcb, echoRecv);                                     /* Configure the callback function to be called when new data is received                   */
	movh.a	a5,#@his(echoRecv)
	lea	a5,[a5]@los(echoRecv)
	mov.aa	a4,a12
.L209:
	call	tcp_recv
.L210:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   174          tcp_sent(newPcb, echoSent);                                     /* Configure the callback function to be called when new data is sent                       */
	movh.a	a5,#@his(echoSent)
	lea	a5,[a5]@los(echoSent)
	mov.aa	a4,a12
.L211:
	call	tcp_sent
.L212:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   175          tcp_err(newPcb, echoError);                                     /* Configure the callback function to be called when a fatal connection error occurs        */
	movh.a	a5,#@his(echoError)
	lea	a5,[a5]@los(echoError)
	mov.aa	a4,a12
.L213:
	call	tcp_err
.L214:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   176          tcp_poll(newPcb, echoPoll, 0);                                  /* Configure the callback function to be periodically called by TCP
	movh.a	a5,#@his(echoPoll)
	lea	a5,[a5]@los(echoPoll)
.L335:
	mov	d4,#0
	mov.aa	a4,a12
.L215:
	call	tcp_poll
.L216:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   177                                                                           * The time interval is specified as multiple of the TCP coarse timer interval, which is
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   178                                                                           * called twice a second                                                                    */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   179          retErr = ERR_OK;                                                /* Set the return value when no error occured                                               */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   180  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   181          tcp_write(newPcb, g_Logo, strlen(g_Logo), 1);                   /* Send the Infineon logo to the remote client                                              */
	ld.a	a4,g_Logo
	call	strlen
.L336:
	extr.u	d4,d2,#0,#16
	mov.aa	a4,a12
.L217:
	mov	d5,#1
	ld.a	a5,g_Logo
.L337:
	call	tcp_write
.L218:
	j	.L6
.L5:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   182      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   183      else                                                                /* If it was not possible to allocate the necessary memory for the session...               */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   184      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   185          retErr = ERR_MEM;                                               /* ... set the return value to "Out of memory".                                             */
	mov	d15,#-1
.L6:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   186      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   187      return retErr;                                                      /* Return result                                                                            */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   188  }
	mov	d2,d15
	ret
.L135:
	
__echoAccept_function_end:
	.size	echoAccept,__echoAccept_function_end-echoAccept
.L80:
	; End of function
	
	.sdecl	'.text.Echo.echoRecv',code,cluster('echoRecv')
	.sect	'.text.Echo.echoRecv'
	.align	2
	
	.global	echoRecv

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   189  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   190  /* Recv callback: it is called every time data is received through the TCP connection */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   191  err_t echoRecv(void *arg, tcpPcb *tpcb, pBuf *p, err_t err)
; Function echoRecv
.L50:
echoRecv:	.type	func
	mov.aa	a15,a4
.L221:
	mov.aa	a12,a5
.L222:
	mov.aa	a13,a6
.L223:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   192  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   193      err_t retErr;                                                       /* Allocate memory for function return value                                                */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   194      EchoSession *es = (EchoSession*) arg;                               /* Get a pointer to the current session                                                     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   195  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   196      if (p == NULL)                                                      /* If there is no enqueued received data after the RECV callback was called, it means the   */
	mov	d15,d4
	jnz.a	a13,.L8
.L224:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   197      {                                                                   /* remote client closed the connection in the meanwhile                                     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   198          es->state = ES_CLOSING;                                         /* Set the state of this session to CLOSING in order to free its resources                  */
	mov	d15,#3
	st.b	[a15],d15
.L225:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   199          if (es->p == NULL)                                              /* If the session does not have any leftover unprocessed data...                            */
	ld.a	a2,[a15]8
.L342:
	jnz.a	a2,.L9
.L343:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   200          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   201              echoClose(tpcb, es);                                        /* ... close the session and free its resources.                                            */
	mov.aa	a4,a12
.L219:
	mov.aa	a5,a15
.L226:
	call	echoClose
.L220:
	j	.L10
.L8:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   202          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   203          else                                                            /* If the session does have leftover unprocessed data...                                    */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   204          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   205              echoUnpack(tpcb, es);                                       /* ... process unprocessed data ...                                                         */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   206              echoSend(tpcb, es);                                         /* ... and send processed data.                                                             */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   207          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   208          retErr = ERR_OK;                                                /* Signal a successful outcome                                                              */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   209      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   210      else if (err != ERR_OK)                                             /* If there was an error while receiving data...                                            */
	jeq	d15,#0,.L11
.L344:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   211      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   212          /* Cleanup, for unkown reason */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   213          if (p != NULL)                                                  /* ... if some data was received and stored...                                              */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   214          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   215              es->p = NULL;                                               /* ... invalidate the unprocessed data contained in the session.                            */
	mov.a	a2,#0
.L345:
	st.a	[a15]8,a2
.L346:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   216              pbuf_free(p);                                               /* Dereference and deallocate last received data which is probably corrupted                */
	mov.aa	a4,a13
.L227:
	call	pbuf_free
.L228:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   217          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   218          retErr = err;                                                   /* Propagate the error                                                                      */
	j	.L12
.L11:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   219      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   220      else if (es->state == ES_ACCEPTED)                                  /* If the current session is in state ACCEPTED...                                           */
	ld.bu	d15,[a15]
.L229:
	jne	d15,#1,.L13
.L347:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   221      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   222          es->state = ES_RECEIVING;                                       /* ... change its state to RECEIVING.                                                       */
	mov	d15,#2
	st.b	[a15],d15
.L348:
	j	.L14
.L13:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   223          es->p = p;                                                      /* Set the unprocessed data buffer of the session to the received one                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   224          echoUnpack(tpcb, es);                                           /* Perform a first incoming data processing                                                 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   225          echoSend(tpcb, es);                                             /* Send the first echo to remote client                                                     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   226          retErr = ERR_OK;                                                /* Signal a successful outcome                                                              */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   227      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   228      else if (es->state == ES_RECEIVING)                                 /* If the current session was already receiving data...                                     */
	jne	d15,#2,.L15
.L349:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   229      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   230          if (es->p == NULL)                                              /* ... and no unprocessed data is contained in the session...                               */
	ld.a	a4,[a15]8
.L230:
	jnz.a	a4,.L16
.L14:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   231          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   232              es->p = p;                                                  /* ... set the unprocessed data buffer of the session to the received one                   */
	st.a	[a15]8,a13
.L9:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   233              echoUnpack(tpcb, es);                                       /* Process the incoming data                                                                */
	mov.aa	a4,a12
.L232:
	mov.aa	a5,a15
.L233:
	call	echoUnpack
.L231:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   234              echoSend(tpcb, es);                                         /* Send an echo to the remote client                                                        */
	mov.aa	a4,a12
.L234:
	mov.aa	a5,a15
.L236:
	call	echoSend
.L235:
	j	.L17
.L16:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   235          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   236          else                                                            /* If the session still contains some unprocessed received data...                          */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   237          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   238              pBuf *ptr = es->p;                                          /* ... create a local reference for the received data                                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   239              pbuf_chain(ptr, p);                                         /* Chain the old unprocessed data contained in the session with the new one                 */
	mov.aa	a5,a13
.L237:
	call	pbuf_chain
.L153:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   240          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   241          retErr = ERR_OK;                                                /* Signal a successful outcome                                                              */
	j	.L18
.L15:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   242      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   243      else                                                                /* If we got new incoming data in an unknown state, discard the data                        */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   244      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   245          /* 数据回传 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   246          tcp_write(tpcb, p->payload, p->len, 1);
	ld.a	a5,[a13]4
.L241:
	ld.hu	d4,[a13]10
.L239:
	mov	d5,#1
	mov.aa	a4,a12
.L238:
	call	tcp_write
.L240:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   247          tcp_recved(tpcb, p->tot_len);                                   /* Mark the incoming data as received                                                       */
	ld.hu	d4,[a13]8
	mov.aa	a4,a12
.L242:
	call	tcp_recved
.L243:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   248          es->p = NULL;                                                   /* Invalidate the unprocessed data contained in the session                                 */
	mov.a	a2,#0
.L350:
	st.a	[a15]8,a2
.L351:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   249          pbuf_free(p);                                                   /* Dereference and deallocate last received data                                            */
	mov.aa	a4,a13
.L244:
	call	pbuf_free
.L18:
.L17:
.L10:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   250          retErr = ERR_OK;                                                /* Signal a successful outcome                                                              */
	mov	d15,#0
.L12:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   251      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   252  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   253      return retErr;                                                      /* Return result                                                                            */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   254  }
	mov	d2,d15
	ret
.L145:
	
__echoRecv_function_end:
	.size	echoRecv,__echoRecv_function_end-echoRecv
.L85:
	; End of function
	
	.sdecl	'.text.Echo.echoError',code,cluster('echoError')
	.sect	'.text.Echo.echoError'
	.align	2
	
	.global	echoError

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   255  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   256  /* Error callback: it is called if a fatal error has already occurred on the connection */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   257  void echoError(void *arg, err_t err)
; Function echoError
.L52:
echoError:	.type	func

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   258  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   259      LWIP_UNUSED_ARG(err);                                               /* Eliminate compiler warning about unused arguments                                        */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   260  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   261      EchoSession *es = (EchoSession*) arg;                               /* Get a pointer to the current session                                                     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   262  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   263      if (es != NULL)                                                     /* If a session exists we cannot do anything with it anymore, since the fatal error         */
	jz.a	a4,.L20
.L356:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   264      {                                                                   /* occurred ...                                                                             */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   265          mem_free(es);                                                   /* ... free memory assigned to the session                                                  */
	j	mem_free
.L20:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   266      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   267  }
	ret
.L154:
	
__echoError_function_end:
	.size	echoError,__echoError_function_end-echoError
.L90:
	; End of function
	
	.sdecl	'.text.Echo.echoPoll',code,cluster('echoPoll')
	.sect	'.text.Echo.echoPoll'
	.align	2
	
	.global	echoPoll

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   268  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   269  /* Poll function: it is called periodically by the TCP stack */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   270  err_t echoPoll(void *arg, tcpPcb *tpcb)
; Function echoPoll
.L54:
echoPoll:	.type	func
	mov.aa	a15,a4
.L246:
	mov.aa	a12,a5
.L247:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   271  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   272      err_t retErr;                                                       /* Allocate memory for function return value                                                */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   273      EchoSession *es = (EchoSession*) arg;                               /* Get a pointer to the current session                                                     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   274  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   275      if (es != NULL)                                                     /* If a session exists ...                                                                  */
	jz.a	a15,.L21
.L361:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   276      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   277          if (es->p != NULL ||                                            /* ... and if the session has any leftover unprocessed data...                              */
	ld.w	d15,[a15]8
.L362:
	jne	d15,#0,.L22
.L363:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   278              es->nextFreeStoragePos != 0)                                /* ... or there is still data in the session storage to send back...                        */
	ld.hu	d15,[a15]268
.L364:
	jeq	d15,#0,.L23
.L22:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   279          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   280              echoUnpack(tpcb, es);                                       /* ... process unprocessed data ...                                                         */
	mov.aa	a4,a12
.L245:
	mov.aa	a5,a15
.L249:
	call	echoUnpack
.L248:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   281              echoSend(tpcb, es);                                         /* ... and send processed data.                                                             */
	mov.aa	a4,a12
.L250:
	mov.aa	a5,a15
.L252:
	call	echoSend
.L251:
	j	.L24
.L23:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   282          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   283          else                                                            /* If the session has no leftover unprocessed data...                                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   284          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   285              if (es->state == ES_CLOSING)                                /* ... and the session was marked for being closed...                                       */
	ld.bu	d15,[a15]
.L365:
	jne	d15,#3,.L25
.L366:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   286              {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   287                  echoClose(tpcb, es);                                    /* ... close the session and free its resources.                                            */
	mov.aa	a4,a12
.L253:
	mov.aa	a5,a15
.L254:
	call	echoClose
.L25:
.L24:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   288              }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   289          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   290          retErr = ERR_OK;                                                /* Signal a successful outcome                                                              */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   291      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   292      else                                                                /* If no session exists something went wrong, the TCP connection has to be aborted          */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   293      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   294          tcp_abort(tpcb);                                                /* Abort the TCP connection                                                                 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   295          retErr = ERR_ABRT;                                              /* Propagate the abort error                                                                */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   296      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   297      return retErr;                                                      /* Return result                                                                            */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   298  }
	mov	d2,#0
	ret
.L21:
	mov.aa	a4,a12
.L255:
	call	tcp_abort
.L256:
	mov	d2,#-13
	ret
.L158:
	
__echoPoll_function_end:
	.size	echoPoll,__echoPoll_function_end-echoPoll
.L95:
	; End of function
	
	.sdecl	'.text.Echo.echoSent',code,cluster('echoSent')
	.sect	'.text.Echo.echoSent'
	.align	2
	
	.global	echoSent

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   299  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   300  /* Sent callback: it is called when TCP data has successfully been delivered to the remote host */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   301  err_t echoSent(void *arg, tcpPcb *tpcb, u16_t len)
; Function echoSent
.L56:
echoSent:	.type	func
	mov.aa	a15,a4
.L169:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   302  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   303      LWIP_UNUSED_ARG(len);                                               /* Eliminates compiler warning about unused arguments                                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   304  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   305      EchoSession *es = (EchoSession*) arg;                               /* Get a pointer to the current session                                                     */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   306  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   307      if (es->p != NULL )                                                 /* If the session has any leftover unprocessed data...                                      */
	ld.w	d15,[a15]8
.L170:
	mov.aa	a12,a5
.L171:
	jeq	d15,#0,.L28
.L371:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   308      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   309          echoUnpack(tpcb, es);                                           /* ... process unprocessed data ...                                                         */
	mov.aa	a4,a12
.L257:
	mov.aa	a5,a15
.L259:
	call	echoUnpack
.L258:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   310          echoSend(tpcb, es);                                             /* ... and send processed data.                                                             */
	mov.aa	a4,a12
.L260:
	mov.aa	a5,a15
.L262:
	call	echoSend
.L261:
	j	.L29
.L28:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   311      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   312      else                                                                /* If the session has no leftover unprocessed data...                                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   313      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   314          if (es->state == ES_CLOSING)                                    /* ... and the session was marked for being closed...                                       */
	ld.bu	d15,[a15]
.L372:
	jne	d15,#3,.L30
.L373:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   315          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   316              echoClose(tpcb, es);                                        /* ... close the session and free its resources.                                            */
	mov.aa	a4,a12
.L263:
	mov.aa	a5,a15
.L264:
	call	echoClose
.L30:
.L29:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   317          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   318      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   319      return ERR_OK;                                                      /* Return successful result                                                                 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   320  }
	mov	d2,#0
	ret
.L163:
	
__echoSent_function_end:
	.size	echoSent,__echoSent_function_end-echoSent
.L100:
	; End of function
	
	.sdecl	'.text.Echo.echoSend',code,cluster('echoSend')
	.sect	'.text.Echo.echoSend'
	.align	2
	
	.global	echoSend

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   321  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   322  /* Send function: enqueues TCP data to be delivered to the remote client */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   323  void echoSend(tcpPcb *tpcb, EchoSession *es)
; Function echoSend
.L58:
echoSend:	.type	func
	mov.aa	a12,a5
.L267:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   324  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   325      if(es->nextFreeStoragePos == 0)                                     /* If the next free position in the storage array is the beginning of the array, there is   */
	ld.hu	d0,[a12]268
.L378:
	mov.aa	a15,a4
.L268:
	jeq	d0,#0,.L32
.L379:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   326      {                                                                   /* nothing to send                                                                          */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   327          return;
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   328      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   329      if(es->storage[es->nextFreeStoragePos - 1] != '\n' &&               /* If the string to be sent does not end with a new line...                                 */
	addsc.a	a2,a12,d0,#0
	ld.b	d1,[a2]11
.L380:
	mov	d15,#10
.L381:
	jeq	d15,d1,.L33
.L382:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   330         es->nextFreeStoragePos < STORAGE_SIZE_BYTES)                     /* ... and the storage is not full ...                                                      */
	mov	d15,#256
.L383:
	jlt.u	d0,d15,.L34
.L33:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   331      {                                                                   /* ... do not send yet. Wait for the string to be echoed to terminate                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   332          return;                                                         /* or the storage to completely fill.                                                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   333      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   334      err_t wrErr = tcp_write(tpcb, "Board: ", 7, 1);                     /* Enqueue an echo preamble to be sent to the remote client                                 */
	mov	d4,#7
	lea	a5,.2.str
.L265:
	mov	d5,#1
	call	tcp_write
.L266:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   335      wrErr |= tcp_write(tpcb, es->storage, es->nextFreeStoragePos, 1);   /* Enqueue the string stored in the session for sending                                     */
	mov	d15,d2
	lea	a5,[a12]12
.L270:
	ld.hu	d4,[a12]268
.L384:
	mov	d5,#1
	mov.aa	a4,a15
.L271:
	call	tcp_write
.L269:
	or	d15,d2
.L385:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   336      if(wrErr == ERR_OK)                                                 /* If data was correctly enqueued for TCP transmission ...                                  */
	jne	d15,#0,.L35
.L386:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   337      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   338          es->nextFreeStoragePos = 0;                                     /* ... remove sent data from the session storage.                                           */
	st.h	[a12]268,d15
.L35:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   339      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   340  }
.L34:
.L32:
	ret
.L173:
	
__echoSend_function_end:
	.size	echoSend,__echoSend_function_end-echoSend
.L105:
	; End of function
	
	.sdecl	'.text.Echo.echoUnpack',code,cluster('echoUnpack')
	.sect	'.text.Echo.echoUnpack'
	.align	2
	
	.global	echoUnpack

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   341  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   342  /* Unpack function: dequeues data from the package buffer and copies it in the session storage */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   343  void echoUnpack(tcpPcb *tpcb, EchoSession *es)
; Function echoUnpack
.L60:
echoUnpack:	.type	func
	mov.aa	a12,a4
.L272:
	mov.aa	a15,a5
.L273:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   344  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   345      pBuf *ptr;                                                          /* Local reference to a packet buffer                                                       */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   346  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   347      while ((es->p != NULL))                                             /* Process data while there still are packets to process                                    */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   348      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   349          ptr = es->p;                                                    /* Local reference of the packet to process                                                 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   350  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   351          if (es->nextFreeStoragePos + ptr->len <= STORAGE_SIZE_BYTES)    /* If there is enough space in the session storage for the new data ...                     */
	lea	a13,[a15]268
.L391:
	j	.L36
.L37:
	ld.a	a14,[a15]8
.L274:
	ld.hu	d15,[a15]268
.L392:
	mov	d1,#256
.L393:
	ld.hu	d4,[a14]10
.L394:
	add	d0,d15,d4
.L395:
	jlt	d1,d0,.L38
.L396:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   352          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   353              memcpy(&es->storage[es->nextFreeStoragePos],                /* ... copy data in the session storage                                                     */
	addsc.a	a2,a15,d15,#0
.L397:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   354                      ptr->payload,
	ld.a	a5,[a14]4
.L398:
	lea	a4,[a2]12
.L399:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   355                      ptr->len);
	call	memcpy
.L400:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   356              es->nextFreeStoragePos += ptr->len;                         /* Increase the index of the new free position in the session storage array                 */
	ld.hu	d15,[a15]268
.L401:
	ld.hu	d0,[a14]10
.L402:
	add	d15,d0
	st.h	[a13],d15
.L181:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   357  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   358              u16_t plen = ptr->len;                                      /* Number of bytes successfully received and stored                                         */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   359  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   360              es->p = ptr->next;                                          /* Get the next packet in the chain (if any)                                                */
	ld.a	a4,[a14]
.L403:
	ld.hu	d15,[a14]10
.L275:
	st.a	[a15]8,a4
.L404:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   361              if (es->p != NULL)                                          /* If there is another packet to be processed...                                            */
	jz.a	a4,.L39
.L405:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   362              {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   363                  pbuf_ref(es->p);                                        /* Inform the LwIP framework that the packet to be processed is linked to the session,      */
	call	pbuf_ref
.L39:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   364              }                                                           /* and shall not be disposed                                                                */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   365  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   366              u8_t freed;                                                 /* Number of bytes successfully freed from memory                                           */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   367              do
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   368              {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   369                  freed = pbuf_free(ptr);                                 /* Free memory used by the packet that was just processed                                   */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   370              } while (freed == 0);
.L40:
	mov.aa	a4,a14
.L276:
	call	pbuf_free
.L277:
	jeq	d2,#0,.L40
.L406:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   371  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   372              tcp_recved(tpcb, plen);                                     /* Signal the remote host that more data can be received                                    */
	mov.aa	a4,a12
.L278:
	mov	d4,d15
	call	tcp_recved
.L38:
.L36:
	ld.w	d15,[a15]8
.L407:
	jne	d15,#0,.L37
.L408:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   373          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   374      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   375  }
	ret
.L177:
	
__echoUnpack_function_end:
	.size	echoUnpack,__echoUnpack_function_end-echoUnpack
.L110:
	; End of function
	
	.sdecl	'.text.Echo.echoClose',code,cluster('echoClose')
	.sect	'.text.Echo.echoClose'
	.align	2
	
	.global	echoClose

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   376  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   377  /* Close function: closes a TCP connection and deallocates session resources */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   378  void echoClose(tcpPcb *tpcb, EchoSession *es)
; Function echoClose
.L62:
echoClose:	.type	func
	mov.aa	a15,a4
.L281:
	mov.aa	a12,a5
.L282:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   379  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   380      tcp_arg(tpcb, NULL);                                                /* Set the argument passed to every callback to NULL                                        */
	mov.a	a5,#0
.L279:
	call	tcp_arg
.L280:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   381      tcp_sent(tpcb, NULL);                                               /* Set the data sent callback to NULL                                                       */
	mov.a	a5,#0
	mov.aa	a4,a15
.L283:
	call	tcp_sent
.L284:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   382      tcp_recv(tpcb, NULL);                                               /* Set the data received callback to NULL                                                   */
	mov.a	a5,#0
	mov.aa	a4,a15
.L285:
	call	tcp_recv
.L286:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   383      tcp_err(tpcb, NULL);                                                /* Set the data error callback to NULL                                                      */
	mov.a	a5,#0
	mov.aa	a4,a15
.L287:
	call	tcp_err
.L288:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   384      tcp_poll(tpcb, NULL, 0);                                            /* Set the periodical callback to NULL                                                      */
	mov.a	a5,#0
.L413:
	mov	d4,#0
	mov.aa	a4,a15
.L289:
	call	tcp_poll
.L290:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   385  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   386      if (es != NULL)                                                     /* If a session still exists...                                                             */
	jz.a	a12,.L41
.L414:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   387      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   388          mem_free(es);                                                   /* ...free memory assigned to the session.                                                  */
	mov.aa	a4,a12
.L291:
	call	mem_free
.L41:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   389      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   390      tcp_close(tpcb);                                                    /* Close the TCP connection                                                                 */
	mov.aa	a4,a15
.L292:
	j	tcp_close
.L185:
	
__echoClose_function_end:
	.size	echoClose,__echoClose_function_end-echoClose
.L115:
	; End of function
	
	.sdecl	'.text.Echo.tcp_server_accept',code,cluster('tcp_server_accept')
	.sect	'.text.Echo.tcp_server_accept'
	.align	2
	

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   391  }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   392  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   393  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   394  /******************************************************************************
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   395   * 描述  : 客户端接收回调函数
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   396   * 参数  : -
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   397   * 返回  : -
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   398   ******************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   399  static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
; Function tcp_server_accept
.L64:
tcp_server_accept:	.type	func

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   400  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   401      /* 注册接收回调函数 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   402      tcp_recv(newpcb, tcp_server_recv);
	movh.a	a15,#@his(tcp_server_recv)
	lea	a15,[a15]@los(tcp_server_recv)
	mov.aa	a4,a5
.L293:
	mov.aa	a5,a15
.L295:
	call	tcp_recv
.L294:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   403  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   404      return ERR_OK;
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   405  }
	mov	d2,#0
	ret
.L196:
	
__tcp_server_accept_function_end:
	.size	tcp_server_accept,__tcp_server_accept_function_end-tcp_server_accept
.L125:
	; End of function
	
	.sdecl	'.text.Echo.tcp_server_recv',code,cluster('tcp_server_recv')
	.sect	'.text.Echo.tcp_server_recv'
	.align	2
	

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   406  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   407  /******************************************************************************
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   408   * 描述  : 接收回调函数
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   409   * 参数  : -
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   410   * 返回  : -
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   411   ******************************************************************************/
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   412  static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb,
; Function tcp_server_recv
.L66:
tcp_server_recv:	.type	func
	mov.aa	a12,a5
.L299:
	mov.aa	a15,a6
.L300:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   413                              struct pbuf *p, err_t err)
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   414  {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   415      uint32_t i;
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   416      
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   417      /* 数据回传 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   418      tcp_write(tpcb, p->payload, p->len, 1);
	ld.a	a5,[a15]4
.L298:
	ld.hu	d4,[a15]10
.L297:
	mov	d5,#1
	mov.aa	a4,a12
.L296:
	call	tcp_write

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   419      
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   420      if (p != NULL)
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   421      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   422          struct pbuf *ptmp = p;
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   423          
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   424          
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   425          while(ptmp != NULL)
.L43:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   426          {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   427              for (i = 0; i < p->len; i++)
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   428              {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   429                  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   430              }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   431              
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   432              ptmp = p->next;
	ld.w	d15,[a15]
.L419:
	jne	d15,#0,.L43
.L420:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   433          }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   434          
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   435          tcp_recved(tpcb, p->tot_len);
	ld.hu	d4,[a15]8
	mov.aa	a4,a12
.L301:
	call	tcp_recved
.L302:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   436          
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   437          /* 释放缓冲区数据 */
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   438          pbuf_free(p);
	mov.aa	a4,a15
.L303:
	call	pbuf_free
.L195:

; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   439      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   440      else if (err == ERR_OK)
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   441      {
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   442          tcp_recved(tpcb, p->tot_len);
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   443          
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   444          return tcp_close(tpcb);
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   445      }
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   446  
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   447      return ERR_OK;
; ..\0_Src\0_AppSw\Tricore\Main\Echo.c	   448  }
	mov	d2,#0
	ret
.L188:
	
__tcp_server_recv_function_end:
	.size	tcp_server_recv,__tcp_server_recv_function_end-tcp_server_recv
.L120:
	; End of function
	
	.sdecl	'.rodata.Echo..1.str',data,rom
	.sect	'.rodata.Echo..1.str'
.1.str:	.type	object
	.size	.1.str,794
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,42
	.byte	42,42,42,42
	.byte	42,42,13,10
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,42
	.byte	42,42,42,42
	.byte	42,42,42,13
	.byte	10,32,32,32
	.byte	32,32,32,32
	.byte	42,42,42,42
	.byte	32,42,42,42
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,42,42,42
	.byte	42,32,32,42
	.byte	13,10,32,32
	.byte	32,32,42,42
	.byte	42,42,42,32
	.byte	32,32,42,42
	.byte	42,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,42,42,42
	.byte	32,32,32,42
	.byte	42,13,10,32
	.byte	32,42,42,42
	.byte	42,42,32,32
	.byte	32,32,32,42
	.byte	42,42,32,32
	.byte	42,42,32,42
	.byte	42,42,42,32
	.byte	32,42,42,42
	.byte	42,42,32,32
	.byte	42,42,32,32
	.byte	32,42,42,32
	.byte	42,42,42,42
	.byte	32,32,32,32
	.byte	42,42,42,42
	.byte	32,32,32,32
	.byte	32,42,42,42
	.byte	42,32,32,32
	.byte	42,42,42,42
	.byte	42,42,42,13
	.byte	10,32,42,42
	.byte	42,42,32,32
	.byte	32,32,32,32
	.byte	32,42,42,42
	.byte	32,32,42,42
	.byte	42,32,32,42
	.byte	42,32,32,32
	.byte	42,42,42,32
	.byte	32,32,42,42
	.byte	32,32,32,42
	.byte	42,32,32,32
	.byte	42,42,32,32
	.byte	42,42,42,32
	.byte	32,42,42,32
	.byte	32,42,42,42
	.byte	32,32,42,42
	.byte	42,32,32,42
	.byte	42,32,32,42
	.byte	42,42,13,10
	.byte	32,42,42,42
	.byte	42,32,32,32
	.byte	32,32,32,32
	.byte	42,42,42,32
	.byte	32,42,42,42
	.byte	32,32,42,42
	.byte	32,32,32,42
	.byte	42,42,32,32
	.byte	32,42,42,32
	.byte	32,32,42,42
	.byte	32,32,32,42
	.byte	42,32,32,42
	.byte	42,42,42,42
	.byte	42,42,42,32
	.byte	42,42,32,32
	.byte	32,42,42,42
	.byte	32,32,42,42
	.byte	32,32,42,42
	.byte	42,13,10,32
	.byte	42,42,42,42
	.byte	42,32,32,32
	.byte	32,32,32,42
	.byte	42,42,32,32
	.byte	42,42,42,32
	.byte	32,42,42,32
	.byte	32,32,42,42
	.byte	42,32,32,32
	.byte	42,42,32,32
	.byte	32,42,42,32
	.byte	32,32,42,42
	.byte	32,32,42,42
	.byte	42,32,32,32
	.byte	32,32,32,42
	.byte	42,42,32,32
	.byte	42,42,42,32
	.byte	32,42,42,32
	.byte	32,42,42,42
	.byte	13,10,32,32
	.byte	42,42,42,42
	.byte	42,42,32,32
	.byte	32,32,42,42
	.byte	42,32,32,42
	.byte	42,42,32,32
	.byte	42,42,32,32
	.byte	32,42,42,42
	.byte	32,32,32,42
	.byte	42,32,32,32
	.byte	42,42,32,32
	.byte	32,42,42,32
	.byte	32,32,32,42
	.byte	42,42,42,42
	.byte	32,32,32,32
	.byte	42,42,42,42
	.byte	32,32,32,32
	.byte	42,42,32,32
	.byte	42,42,42,13
	.byte	10,32,32,32
	.byte	32,32,42,42
	.byte	42,42,42,42
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	42,13,10,32
	.byte	32,32,32,32
	.byte	32,32,32,42
	.byte	42,42,42,42
	.byte	42,42,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	42,42,13,10
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,42,42,42
	.byte	42,42,42,42
	.byte	42,42,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,42,42,42
	.byte	42,13,10,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,42,42,42
	.byte	42,13,10,10
	.space	2
	.sdecl	'.zdata.Echo.g_Logo',data,cluster('g_Logo')
	.sect	'.zdata.Echo.g_Logo'
	.global	g_Logo
	.align	4
g_Logo:	.type	object
	.size	g_Logo,4
	.word	.1.str
	.sdecl	'.zbss.Echo.g_TCPPcb',data,cluster('g_TCPPcb')
	.sect	'.zbss.Echo.g_TCPPcb'
	.global	g_TCPPcb
	.align	4
g_TCPPcb:	.type	object
	.size	g_TCPPcb,4
	.space	4
	.sdecl	'.zrodata.Echo..2.str',data,rom
	.sect	'.zrodata.Echo..2.str'
.2.str:	.type	object
	.size	.2.str,8
	.byte	66,111,97,114
	.byte	100,58,32
	.space	1
	.calls	'__INDIRECT__','echoRecv'
	.calls	'__INDIRECT__','echoError'
	.calls	'__INDIRECT__','echoPoll'
	.calls	'__INDIRECT__','echoSent'
	.calls	'__INDIRECT__','tcp_server_recv'
	.calls	'__INDIRECT__','tcp_server_accept'
	.calls	'TCP_server_init','tcp_new'
	.calls	'TCP_server_init','tcp_bind'
	.calls	'TCP_server_init','tcp_listen_with_backlog'
	.calls	'TCP_server_init','tcp_accept'
	.calls	'TCP_server_init','memp_free'
	.calls	'echoAccept','mem_malloc'
	.calls	'echoAccept','memset'
	.calls	'echoAccept','tcp_arg'
	.calls	'echoAccept','tcp_recv'
	.calls	'echoAccept','tcp_sent'
	.calls	'echoAccept','tcp_err'
	.calls	'echoAccept','tcp_poll'
	.calls	'echoAccept','strlen'
	.calls	'echoAccept','tcp_write'
	.calls	'echoRecv','echoClose'
	.calls	'echoRecv','pbuf_free'
	.calls	'echoRecv','echoUnpack'
	.calls	'echoRecv','echoSend'
	.calls	'echoRecv','pbuf_chain'
	.calls	'echoRecv','tcp_write'
	.calls	'echoRecv','tcp_recved'
	.calls	'echoError','mem_free'
	.calls	'echoPoll','echoUnpack'
	.calls	'echoPoll','echoSend'
	.calls	'echoPoll','echoClose'
	.calls	'echoPoll','tcp_abort'
	.calls	'echoSent','echoUnpack'
	.calls	'echoSent','echoSend'
	.calls	'echoSent','echoClose'
	.calls	'echoSend','tcp_write'
	.calls	'echoUnpack','memcpy'
	.calls	'echoUnpack','pbuf_ref'
	.calls	'echoUnpack','pbuf_free'
	.calls	'echoUnpack','tcp_recved'
	.calls	'echoClose','tcp_arg'
	.calls	'echoClose','tcp_sent'
	.calls	'echoClose','tcp_recv'
	.calls	'echoClose','tcp_err'
	.calls	'echoClose','tcp_poll'
	.calls	'echoClose','mem_free'
	.calls	'echoClose','tcp_close'
	.calls	'tcp_server_accept','tcp_recv'
	.calls	'tcp_server_recv','tcp_write'
	.calls	'tcp_server_recv','tcp_recved'
	.calls	'tcp_server_recv','pbuf_free'
	.calls	'TCP_server_init','',0
	.calls	'echoAccept','',0
	.calls	'echoRecv','',0
	.calls	'echoError','',0
	.calls	'echoPoll','',0
	.calls	'echoSent','',0
	.calls	'echoSend','',0
	.calls	'echoUnpack','',0
	.calls	'echoClose','',0
	.calls	'tcp_server_accept','',0
	.extern	strlen
	.extern	memcpy
	.extern	memset
	.extern	mem_malloc
	.extern	mem_free
	.extern	memp_free
	.extern	pbuf_ref
	.extern	pbuf_free
	.extern	pbuf_chain
	.extern	ip_addr_any
	.extern	tcp_new
	.extern	tcp_arg
	.extern	tcp_recv
	.extern	tcp_sent
	.extern	tcp_err
	.extern	tcp_accept
	.extern	tcp_poll
	.extern	tcp_recved
	.extern	tcp_bind
	.extern	tcp_listen_with_backlog
	.extern	tcp_abort
	.extern	tcp_close
	.extern	tcp_write
	.extern	__INDIRECT__
	.calls	'tcp_server_recv','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L68:
	.word	5488
	.half	3
	.word	.L69
	.byte	4
.L67:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L70
	.byte	2
	.byte	'int',0,4,5,3
	.word	149
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	156
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	198
	.byte	7
	.word	198
	.byte	8
	.byte	'__cmpswapw',0
	.word	214
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	219
	.byte	9
	.byte	'value',0
	.word	198
	.byte	9
	.byte	'compare',0
	.word	198
	.byte	0
.L133:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	284
	.byte	7
	.word	292
	.byte	10
	.byte	'strlen',0,1,52,17
	.word	198
	.byte	1,1,1,1,11,1,52,39
	.word	297
	.byte	0,12
	.byte	'void',0
.L136:
	.byte	7
	.word	330
	.byte	13
	.word	336
	.byte	3
	.word	330
	.byte	7
	.word	346
	.byte	13
	.word	351
	.byte	10
	.byte	'memcpy',0,1,53,17
	.word	336
	.byte	1,1,1,1,11,1,53,33
	.word	341
	.byte	11,1,53,56
	.word	356
	.byte	11,1,53,68
	.word	198
	.byte	0,10
	.byte	'memset',0,1,56,17
	.word	336
	.byte	1,1,1,1,11,1,56,33
	.word	336
	.byte	11,1,56,36
	.word	149
	.byte	11,1,56,41
	.word	198
	.byte	0
.L166:
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'mem_malloc',0,2,74,7
	.word	336
	.byte	1,1,1,1,14
	.byte	'size',0,2,74,29
	.word	449
	.byte	0,15
	.byte	'mem_free',0,2,76,7,1,1,1,1,14
	.byte	'mem',0,2,76,22
	.word	336
	.byte	0,16,3,52,9,1,17
	.byte	'MEMP_UDP_PCB',0,0,17
	.byte	'MEMP_TCP_PCB',0,1,17
	.byte	'MEMP_TCP_PCB_LISTEN',0,2,17
	.byte	'MEMP_TCP_SEG',0,3,17
	.byte	'MEMP_REASSDATA',0,4,17
	.byte	'MEMP_FRAG_PBUF',0,5,17
	.byte	'MEMP_SYS_TIMEOUT',0,6,17
	.byte	'MEMP_PBUF',0,7,17
	.byte	'MEMP_PBUF_POOL',0,8,17
	.byte	'MEMP_POOL_256',0,9,17
	.byte	'MEMP_POOL_512',0,10,17
	.byte	'MEMP_POOL_1512',0,11,17
	.byte	'MEMP_MAX',0,12,0,15
	.byte	'memp_free',0,3,149,1,7,1,1,1,1,14
	.byte	'type',0,3,149,1,24
	.word	538
	.byte	14
	.byte	'mem',0,3,149,1,36
	.word	336
	.byte	0
.L183:
	.byte	2
	.byte	'unsigned char',0,1,8,18
	.byte	'pbuf',0,4,186,1,8,16,19
	.byte	'next',0
	.word	.L192-.L68
	.byte	4,2,35,0,19
	.byte	'payload',0
	.word	336
	.byte	4,2,35,4,19
	.byte	'tot_len',0
	.word	449
	.byte	2,2,35,8,19
	.byte	'len',0
	.word	449
	.byte	2,2,35,10,19
	.byte	'type_internal',0
	.word	800
	.byte	1,2,35,12,19
	.byte	'flags',0
	.word	800
	.byte	1,2,35,13,19
	.byte	'ref',0
	.word	800
	.byte	1,2,35,14,19
	.byte	'if_idx',0
	.word	800
	.byte	1,2,35,15,0
.L192:
	.byte	7
	.word	817
	.byte	15
	.byte	'pbuf_ref',0,4,164,2,6,1,1,1,1,14
	.byte	'p',0,4,164,2,28
	.word	957
	.byte	0,10
	.byte	'pbuf_free',0,4,165,2,6
	.word	800
	.byte	1,1,1,1,14
	.byte	'p',0,4,165,2,29
	.word	957
	.byte	0,15
	.byte	'pbuf_chain',0,4,168,2,6,1,1,1,1,14
	.byte	'head',0,4,168,2,30
	.word	957
	.byte	14
	.byte	'tail',0,4,168,2,49
	.word	957
	.byte	0,2
	.byte	'unsigned long int',0,4,7,18
	.byte	'ip4_addr',0,6,51,8,4,19
	.byte	'addr',0
	.word	1076
	.byte	4,2,35,0,0,20
	.byte	'tcp_state',0,7,56,6,1,17
	.byte	'CLOSED',0,0,17
	.byte	'LISTEN',0,1,17
	.byte	'SYN_SENT',0,2,17
	.byte	'SYN_RCVD',0,3,17
	.byte	'ESTABLISHED',0,4,17
	.byte	'FIN_WAIT_1',0,5,17
	.byte	'FIN_WAIT_2',0,6,17
	.byte	'CLOSE_WAIT',0,7,17
	.byte	'CLOSING',0,8,17
	.byte	'LAST_ACK',0,9,17
	.byte	'TIME_WAIT',0,10,0,2
	.byte	'short int',0,2,5,21
	.byte	'tcp_seg',0,5,210,2,10,1,7
	.word	1281
	.byte	22
	.word	276
	.byte	1,1,5
	.word	336
	.byte	5
	.word	.L190-.L68
	.byte	5
	.word	276
	.byte	0,7
	.word	1300
	.byte	23
	.byte	'tcp_accept_fn',0,5,70,17
	.word	1323
	.byte	18
	.byte	'tcp_pcb_listen',0,5,223,1,8,28,19
	.byte	'local_ip',0
	.word	1097
	.byte	4,2,35,0,19
	.byte	'remote_ip',0
	.word	1097
	.byte	4,2,35,4,19
	.byte	'netif_idx',0
	.word	800
	.byte	1,2,35,8,19
	.byte	'so_options',0
	.word	800
	.byte	1,2,35,9,19
	.byte	'tos',0
	.word	800
	.byte	1,2,35,10,19
	.byte	'ttl',0
	.word	800
	.byte	1,2,35,11,19
	.byte	'next',0
	.word	.L304-.L68
	.byte	4,2,35,12,19
	.byte	'callback_arg',0
	.word	336
	.byte	4,2,35,16,19
	.byte	'state',0
	.word	1126
	.byte	1,2,35,20,19
	.byte	'prio',0
	.word	800
	.byte	1,2,35,21,19
	.byte	'local_port',0
	.word	449
	.byte	2,2,35,22,19
	.byte	'accept',0
	.word	1328
	.byte	4,2,35,24,0
.L304:
	.byte	7
	.word	1350
	.byte	22
	.word	276
	.byte	1,1,5
	.word	336
	.byte	5
	.word	.L190-.L68
	.byte	5
	.word	449
	.byte	0,7
	.word	1580
	.byte	23
	.byte	'tcp_sent_fn',0,5,96,17
	.word	1603
	.byte	22
	.word	276
	.byte	1,1,5
	.word	336
	.byte	5
	.word	.L190-.L68
	.byte	5
	.word	957
	.byte	5
	.word	276
	.byte	0,7
	.word	1628
	.byte	23
	.byte	'tcp_recv_fn',0,5,82,17
	.word	1656
	.byte	23
	.byte	'tcp_connected_fn',0,5,134,1,17
	.word	1323
	.byte	22
	.word	276
	.byte	1,1,5
	.word	336
	.byte	5
	.word	.L190-.L68
	.byte	0,7
	.word	1707
	.byte	23
	.byte	'tcp_poll_fn',0,5,108,17
	.word	1725
	.byte	24,1,1,5
	.word	336
	.byte	5
	.word	276
	.byte	0,7
	.word	1750
	.byte	23
	.byte	'tcp_err_fn',0,5,120,17
	.word	1764
	.byte	18
	.byte	'tcp_pcb',0,5,242,1,8,156,1,19
	.byte	'local_ip',0
	.word	1097
	.byte	4,2,35,0,19
	.byte	'remote_ip',0
	.word	1097
	.byte	4,2,35,4,19
	.byte	'netif_idx',0
	.word	800
	.byte	1,2,35,8,19
	.byte	'so_options',0
	.word	800
	.byte	1,2,35,9,19
	.byte	'tos',0
	.word	800
	.byte	1,2,35,10,19
	.byte	'ttl',0
	.word	800
	.byte	1,2,35,11,19
	.byte	'next',0
	.word	.L190-.L68
	.byte	4,2,35,12,19
	.byte	'callback_arg',0
	.word	336
	.byte	4,2,35,16,19
	.byte	'state',0
	.word	1126
	.byte	1,2,35,20,19
	.byte	'prio',0
	.word	800
	.byte	1,2,35,21,19
	.byte	'local_port',0
	.word	449
	.byte	2,2,35,22,19
	.byte	'remote_port',0
	.word	449
	.byte	2,2,35,24,19
	.byte	'flags',0
	.word	449
	.byte	2,2,35,26,19
	.byte	'polltmr',0
	.word	800
	.byte	1,2,35,28,19
	.byte	'pollinterval',0
	.word	800
	.byte	1,2,35,29,19
	.byte	'last_timer',0
	.word	800
	.byte	1,2,35,30,19
	.byte	'tmr',0
	.word	1076
	.byte	4,2,35,32,19
	.byte	'rcv_nxt',0
	.word	1076
	.byte	4,2,35,36,19
	.byte	'rcv_wnd',0
	.word	449
	.byte	2,2,35,40,19
	.byte	'rcv_ann_wnd',0
	.word	449
	.byte	2,2,35,42,19
	.byte	'rcv_ann_right_edge',0
	.word	1076
	.byte	4,2,35,44,19
	.byte	'rtime',0
	.word	1268
	.byte	2,2,35,48,19
	.byte	'mss',0
	.word	449
	.byte	2,2,35,50,19
	.byte	'rttest',0
	.word	1076
	.byte	4,2,35,52,19
	.byte	'rtseq',0
	.word	1076
	.byte	4,2,35,56,19
	.byte	'sa',0
	.word	1268
	.byte	2,2,35,60,19
	.byte	'sv',0
	.word	1268
	.byte	2,2,35,62,19
	.byte	'rto',0
	.word	1268
	.byte	2,2,35,64,19
	.byte	'nrtx',0
	.word	800
	.byte	1,2,35,66,19
	.byte	'dupacks',0
	.word	800
	.byte	1,2,35,67,19
	.byte	'lastack',0
	.word	1076
	.byte	4,2,35,68,19
	.byte	'cwnd',0
	.word	449
	.byte	2,2,35,72,19
	.byte	'ssthresh',0
	.word	449
	.byte	2,2,35,74,19
	.byte	'rto_end',0
	.word	1076
	.byte	4,2,35,76,19
	.byte	'snd_nxt',0
	.word	1076
	.byte	4,2,35,80,19
	.byte	'snd_wl1',0
	.word	1076
	.byte	4,2,35,84,19
	.byte	'snd_wl2',0
	.word	1076
	.byte	4,2,35,88,19
	.byte	'snd_lbb',0
	.word	1076
	.byte	4,2,35,92,19
	.byte	'snd_wnd',0
	.word	449
	.byte	2,2,35,96,19
	.byte	'snd_wnd_max',0
	.word	449
	.byte	2,2,35,98,19
	.byte	'snd_buf',0
	.word	449
	.byte	2,2,35,100,19
	.byte	'snd_queuelen',0
	.word	449
	.byte	2,2,35,102,19
	.byte	'unsent_oversize',0
	.word	449
	.byte	2,2,35,104,19
	.byte	'bytes_acked',0
	.word	449
	.byte	2,2,35,106,19
	.byte	'unsent',0
	.word	1295
	.byte	4,2,35,108,19
	.byte	'unacked',0
	.word	1295
	.byte	4,2,35,112,19
	.byte	'ooseq',0
	.word	1295
	.byte	4,2,35,116,19
	.byte	'refused_data',0
	.word	957
	.byte	4,2,35,120,19
	.byte	'listener',0
	.word	1575
	.byte	4,2,35,124,19
	.byte	'sent',0
	.word	1608
	.byte	4,3,35,128,1,19
	.byte	'recv',0
	.word	1661
	.byte	4,3,35,132,1,19
	.byte	'connected',0
	.word	1681
	.byte	4,3,35,136,1,19
	.byte	'poll',0
	.word	1730
	.byte	4,3,35,140,1,19
	.byte	'errf',0
	.word	1769
	.byte	4,3,35,144,1,19
	.byte	'keep_idle',0
	.word	1076
	.byte	4,3,35,148,1,19
	.byte	'persist_cnt',0
	.word	800
	.byte	1,3,35,152,1,19
	.byte	'persist_backoff',0
	.word	800
	.byte	1,3,35,153,1,19
	.byte	'persist_probe',0
	.word	800
	.byte	1,3,35,154,1,19
	.byte	'keep_cnt_sent',0
	.word	800
	.byte	1,3,35,155,1,0
.L190:
	.byte	7
	.word	1788
	.byte	25
	.byte	'tcp_new',0,5,155,3,18
	.word	2850
	.byte	1,1,1,1,7
	.word	1300
	.byte	7
	.word	1580
	.byte	7
	.word	1628
	.byte	7
	.word	1300
	.byte	7
	.word	1707
	.byte	7
	.word	1750
	.byte	15
	.byte	'tcp_arg',0,5,158,3,18,1,1,1,1,14
	.byte	'pcb',0,5,158,3,47
	.word	2850
	.byte	14
	.byte	'arg',0,5,158,3,58
	.word	336
	.byte	0,15
	.byte	'tcp_recv',0,5,160,3,18,1,1,1,1,14
	.byte	'pcb',0,5,160,3,47
	.word	2850
	.byte	14
	.byte	'recv',0,5,160,3,64
	.word	1661
	.byte	0,15
	.byte	'tcp_sent',0,5,161,3,18,1,1,1,1,14
	.byte	'pcb',0,5,161,3,47
	.word	2850
	.byte	14
	.byte	'sent',0,5,161,3,64
	.word	1608
	.byte	0,15
	.byte	'tcp_err',0,5,162,3,18,1,1,1,1,14
	.byte	'pcb',0,5,162,3,47
	.word	2850
	.byte	14
	.byte	'err',0,5,162,3,63
	.word	1769
	.byte	0,15
	.byte	'tcp_accept',0,5,163,3,18,1,1,1,1,14
	.byte	'pcb',0,5,163,3,47
	.word	2850
	.byte	14
	.byte	'accept',0,5,163,3,66
	.word	1328
	.byte	0,15
	.byte	'tcp_poll',0,5,165,3,18,1,1,1,1,14
	.byte	'pcb',0,5,165,3,47
	.word	2850
	.byte	14
	.byte	'poll',0,5,165,3,64
	.word	1730
	.byte	14
	.byte	'interval',0,5,165,3,75
	.word	800
	.byte	0,15
	.byte	'tcp_recved',0,5,201,3,18,1,1,1,1,14
	.byte	'pcb',0,5,201,3,47
	.word	2850
	.byte	14
	.byte	'len',0,5,201,3,58
	.word	449
	.byte	0,3
	.word	1097
	.byte	7
	.word	3247
	.byte	10
	.byte	'tcp_bind',0,5,202,3,18
	.word	276
	.byte	1,1,1,1,14
	.byte	'pcb',0,5,202,3,47
	.word	2850
	.byte	14
	.byte	'ipaddr',0,5,202,3,69
	.word	3252
	.byte	14
	.byte	'port',0,5,203,3,37
	.word	449
	.byte	0,10
	.byte	'tcp_listen_with_backlog',0,5,209,3,18
	.word	2850
	.byte	1,1,1,1,14
	.byte	'pcb',0,5,209,3,58
	.word	2850
	.byte	14
	.byte	'backlog',0,5,209,3,68
	.word	800
	.byte	0,15
	.byte	'tcp_abort',0,5,213,3,18,1,1,1,1,14
	.byte	'pcb',0,5,213,3,45
	.word	2850
	.byte	0,10
	.byte	'tcp_close',0,5,214,3,18
	.word	276
	.byte	1,1,1,1,14
	.byte	'pcb',0,5,214,3,47
	.word	2850
	.byte	0,10
	.byte	'tcp_write',0,5,217,3,18
	.word	276
	.byte	1,1,1,1,14
	.byte	'pcb',0,5,217,3,47
	.word	2850
	.byte	14
	.byte	'dataptr',0,5,217,3,64
	.word	351
	.byte	14
	.byte	'len',0,5,217,3,79
	.word	449
	.byte	14
	.byte	'apiflags',0,5,218,3,36
	.word	800
	.byte	0
.L138:
	.byte	7
	.word	1788
.L148:
	.byte	7
	.word	817
	.byte	26,128,2
	.word	284
	.byte	27,255,1,0,28,8,90,9,144,2,19
	.byte	'state',0
	.word	800
	.byte	1,2,35,0,19
	.byte	'pcb',0
	.word	3546
	.byte	4,2,35,4,19
	.byte	'p',0
	.word	3551
	.byte	4,2,35,8,19
	.byte	'storage',0
	.word	3556
	.byte	128,2,2,35,12,19
	.byte	'nextFreeStoragePos',0
	.word	449
	.byte	2,3,35,140,2,0
.L143:
	.byte	7
	.word	3567
	.byte	29
	.byte	'__INDIRECT__',0,8,1,1,1,1,1,23
	.byte	'__wchar_t',0,8,1,1
	.word	1268
	.byte	23
	.byte	'__size_t',0,8,1,1
	.word	198
	.byte	23
	.byte	'__ptrdiff_t',0,8,1,1
	.word	149
	.byte	30,1,7
	.word	3740
	.byte	23
	.byte	'__codeptr',0,8,1,1
	.word	3742
	.byte	23
	.byte	'__intptr_t',0,8,1,1
	.word	149
	.byte	23
	.byte	'__uintptr_t',0,8,1,1
	.word	198
	.byte	23
	.byte	'size_t',0,1,29,25
	.word	198
	.byte	23
	.byte	'uint8',0,9,108,29
	.word	800
	.byte	23
	.byte	'uint16',0,9,112,29
	.word	449
	.byte	23
	.byte	'uint32',0,9,116,29
	.word	1076
	.byte	23
	.byte	'sint8',0,9,125,29
	.word	276
	.byte	23
	.byte	'sint16',0,9,129,1,29
	.word	1268
	.byte	2
	.byte	'long int',0,4,5,23
	.byte	'sint32',0,9,134,1,29
	.word	3893
	.byte	2
	.byte	'long long int',0,8,5,23
	.byte	'sint64',0,9,141,1,29
	.word	3921
	.byte	2
	.byte	'float',0,4,4,23
	.byte	'float32',0,9,170,1,29
	.word	3954
	.byte	23
	.byte	'pvoid',0,10,54,28
	.word	336
	.byte	23
	.byte	'Ifx_TickTime',0,10,76,28
	.word	3921
	.byte	23
	.byte	'u8_t',0,11,85,16
	.word	800
	.byte	23
	.byte	'u16_t',0,11,86,16
	.word	449
	.byte	23
	.byte	'u32_t',0,11,87,16
	.word	1076
	.byte	23
	.byte	's8_t',0,11,88,16
	.word	276
	.byte	23
	.byte	's16_t',0,11,89,16
	.word	1268
	.byte	23
	.byte	'intmax_t',0,12,198,2,41
	.word	3921
	.byte	23
	.byte	'mem_size_t',0,2,55,15
	.word	449
	.byte	23
	.byte	'memp_t',0,3,56,3
	.word	538
	.byte	23
	.byte	'tcpwnd_size_t',0,7,53,15
	.word	449
	.byte	23
	.byte	'err_t',0,13,96,14
	.word	276
	.byte	24,1,1,5
	.word	957
	.byte	0,7
	.word	4171
	.byte	23
	.byte	'pbuf_free_custom_fn',0,4,242,1,16
	.word	4180
	.byte	23
	.byte	'ip4_addr_t',0,6,57,25
	.word	1097
	.byte	23
	.byte	'ip_addr_t',0,14,142,2,20
	.word	1097
	.byte	3
	.word	1097
	.byte	31
	.byte	'ip_addr_any',0,14,241,2,24
	.word	4252
	.byte	1,1,3
	.word	1097
	.byte	7
	.word	4280
	.byte	22
	.word	276
	.byte	1,1,5
	.word	.L305-.L68
	.byte	5
	.word	957
	.byte	5
	.word	4285
	.byte	0,7
	.word	4290
	.byte	23
	.byte	'netif_output_fn',0,15,189,1,17
	.word	4313
	.byte	22
	.word	276
	.byte	1,1,5
	.word	.L305-.L68
	.byte	5
	.word	957
	.byte	0,7
	.word	4343
	.byte	23
	.byte	'netif_linkoutput_fn',0,15,212,1,17
	.word	4361
	.byte	26,6
	.word	800
	.byte	27,5,0,26,2
	.word	284
	.byte	27,1,0,18
	.byte	'netif',0,15,132,2,8,48,19
	.byte	'next',0
	.word	.L305-.L68
	.byte	4,2,35,0,19
	.byte	'ip_addr',0
	.word	1097
	.byte	4,2,35,4,19
	.byte	'netmask',0
	.word	1097
	.byte	4,2,35,8,19
	.byte	'gw',0
	.word	1097
	.byte	4,2,35,12,19
	.byte	'input',0
	.word	.L306-.L68
	.byte	4,2,35,16,19
	.byte	'output',0
	.word	4318
	.byte	4,2,35,20,19
	.byte	'linkoutput',0
	.word	4366
	.byte	4,2,35,24,19
	.byte	'state',0
	.word	336
	.byte	4,2,35,28,19
	.byte	'mtu',0
	.word	449
	.byte	2,2,35,32,19
	.byte	'hwaddr',0
	.word	4395
	.byte	6,2,35,34,19
	.byte	'hwaddr_len',0
	.word	800
	.byte	1,2,35,40,19
	.byte	'flags',0
	.word	800
	.byte	1,2,35,41,19
	.byte	'name',0
	.word	4404
	.byte	2,2,35,42,19
	.byte	'num',0
	.word	800
	.byte	1,2,35,44,19
	.byte	'rs_count',0
	.word	800
	.byte	1,2,35,45,0
.L305:
	.byte	7
	.word	4413
	.byte	22
	.word	276
	.byte	1,1,5
	.word	957
	.byte	5
	.word	4661
	.byte	0,7
	.word	4666
.L306:
	.byte	23
	.byte	'netif_input_fn',0,15,178,1,17
	.word	4684
	.byte	7
	.word	4666
	.byte	7
	.word	4290
	.byte	7
	.word	4343
	.byte	18
	.byte	'link_changed_s',0,15,213,4,10,1,19
	.byte	'state',0
	.word	800
	.byte	1,2,35,0,0,18
	.byte	'status_changed_s',0,15,219,4,10,1,19
	.byte	'state',0
	.word	800
	.byte	1,2,35,0,0,18
	.byte	'ipv4_changed_s',0,15,225,4,10,12,19
	.byte	'old_address',0
	.word	3252
	.byte	4,2,35,0,19
	.byte	'old_netmask',0
	.word	3252
	.byte	4,2,35,4,19
	.byte	'old_gw',0
	.word	3252
	.byte	4,2,35,8,0,18
	.byte	'ipv6_set_s',0,15,233,4,10,8,19
	.byte	'addr_index',0
	.word	276
	.byte	1,2,35,0,19
	.byte	'old_address',0
	.word	3252
	.byte	4,2,35,4,0,18
	.byte	'ipv6_addr_state_changed_s',0,15,241,4,10,8,19
	.byte	'addr_index',0
	.word	276
	.byte	1,2,35,0,19
	.byte	'old_state',0
	.word	800
	.byte	1,2,35,1,19
	.byte	'address',0
	.word	3252
	.byte	4,2,35,4,0,32,15,210,4,9,12,19
	.byte	'link_changed',0
	.word	4728
	.byte	1,2,35,0,19
	.byte	'status_changed',0
	.word	4765
	.byte	1,2,35,0,19
	.byte	'ipv4_changed',0
	.word	4804
	.byte	12,2,35,0,19
	.byte	'ipv6_set',0
	.word	4884
	.byte	8,2,35,0,19
	.byte	'ipv6_addr_state_changed',0
	.word	4943
	.byte	8,2,35,0,0,3
	.word	5032
	.byte	7
	.word	5158
	.byte	24,1,1,5
	.word	4661
	.byte	5
	.word	449
	.byte	5
	.word	5163
	.byte	0,7
	.word	5168
	.byte	23
	.byte	'netif_ext_callback_fn',0,15,132,5,16
	.word	5187
	.byte	18
	.byte	'ip4_addr_packed',0,16,53,8,4,19
	.byte	'addr',0
	.word	1076
	.byte	4,2,35,0,0,23
	.byte	'ip4_addr_p_t',0,16,61,32
	.word	5223
	.byte	24,1,1,5
	.word	800
	.byte	5
	.word	336
	.byte	0,7
	.word	5280
	.byte	23
	.byte	'tcp_extarg_callback_pcb_destroyed_fn',0,5,173,1,16
	.word	5294
	.byte	22
	.word	276
	.byte	1,1,5
	.word	800
	.byte	5
	.word	1575
	.byte	5
	.word	2850
	.byte	0,7
	.word	5345
	.byte	23
	.byte	'tcp_extarg_callback_passive_open_fn',0,5,182,1,17
	.word	5368
	.byte	23
	.byte	'tcpflags_t',0,5,206,1,15
	.word	449
	.byte	23
	.byte	'tcpPcb',0,8,87,24
	.word	1788
	.byte	23
	.byte	'pBuf',0,8,88,21
	.word	817
	.byte	23
	.byte	'EchoSession',0,8,97,3
	.word	3567
.L200:
	.byte	7
	.word	284
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L69:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,58,15,59,15,57,15,73,19,0,0,12,59,0,3,8,0,0,13,55,0,73,19,0,0,14,5,0,3,8,58,15,59,15,57,15,73,19,0
	.byte	0,15,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,16,4,1,58,15,59,15,57,15,11,15,0,0,17,40,0
	.byte	3,8,28,13,0,0,18,19,1,3,8,58,15,59,15,57,15,11,15,0,0,19,13,0,3,8,73,19,11,15,56,9,0,0,20,4,1,3,8,58,15
	.byte	59,15,57,15,11,15,0,0,21,19,0,3,8,58,15,59,15,57,15,60,12,0,0,22,21,1,73,19,54,15,39,12,0,0,23,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,24,21,1,54,15,39,12,0,0,25,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,26,1,1,11,15,73,19,0,0,27,33,0,47,15,0,0,28,19,1,58,15,59,15,57,15,11,15,0,0,29,46,0,3
	.byte	8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,30,21,0,54,15,0,0,31,52,0,3,8,58,15,59,15,57,15,73,19,63,12
	.byte	60,12,0,0,32,23,1,58,15,59,15,57,15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L70:
	.word	.L308-.L307
.L307:
	.half	3
	.word	.L310-.L309
.L309:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	0
	.byte	'string.h',0,1,0,0
	.byte	'mem.h',0,2,0,0
	.byte	'memp.h',0,2,0,0
	.byte	'pbuf.h',0,2,0,0
	.byte	'tcp.h',0,2,0,0
	.byte	'ip4_addr.h',0,2,0,0
	.byte	'tcpbase.h',0,2,0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0
	.byte	'Platform_Types.h',0,3,0,0
	.byte	'Ifx_Types.h',0,3,0,0
	.byte	'cc.h',0,4,0,0
	.byte	'stdint.h',0,1,0,0
	.byte	'err.h',0,2,0,0
	.byte	'ip_addr.h',0,2,0,0
	.byte	'netif.h',0,2,0,0
	.byte	'ip4.h',0,5,0,0,0
.L310:
.L308:
	.sdecl	'.debug_info',debug,cluster('TCP_server_init')
	.sect	'.debug_info'
.L71:
	.word	225
	.half	3
	.word	.L72
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L74,.L73
	.byte	2
	.word	.L67
	.byte	3
	.byte	'TCP_server_init',0,1,136,1,6,1,1,1
	.word	.L46,.L130,.L45
	.byte	4
	.word	.L46,.L130
	.byte	5
	.word	.L131
	.byte	6
	.byte	'err',0,1,141,1,15
	.word	.L133,.L134
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('TCP_server_init')
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59,15,57,15,73,16
	.byte	2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('TCP_server_init')
	.sect	'.debug_line'
.L73:
	.word	.L312-.L311
.L311:
	.half	3
	.word	.L314-.L313
.L313:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L314:
	.byte	5,23,7,0,5,2
	.word	.L46
	.byte	3,137,1,1,5,14,9
	.half	.L315-.L46
	.byte	1,5,9,9
	.half	.L316-.L315
	.byte	3,1,1,5,5,9
	.half	.L317-.L316
	.byte	1,5,40,7,9
	.half	.L132-.L317
	.byte	3,2,1,5,53,9
	.half	.L318-.L132
	.byte	1,5,24,9
	.half	.L201-.L318
	.byte	3,3,1,5,9,9
	.half	.L319-.L201
	.byte	3,126,1,5,24,7,9
	.half	.L320-.L319
	.byte	3,2,1,5,22,9
	.half	.L202-.L320
	.byte	1,5,24,9
	.half	.L321-.L202
	.byte	3,2,1,5,34,9
	.half	.L322-.L321
	.byte	1,5,1,9
	.half	.L2-.L322
	.byte	3,8,1,5,23,7,9
	.half	.L3-.L2
	.byte	3,124,1,5,37,9
	.half	.L323-.L3
	.byte	1,5,1,7,9
	.half	.L75-.L323
	.byte	3,4,0,1,1
.L312:
	.sdecl	'.debug_ranges',debug,cluster('TCP_server_init')
	.sect	'.debug_ranges'
.L74:
	.word	-1,.L46,0,.L75-.L46,0,0
.L131:
	.word	-1,.L46,.L132-.L46,.L2-.L46,.L3-.L46,.L130-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('echoAccept')
	.sect	'.debug_info'
.L76:
	.word	301
	.half	3
	.word	.L77
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L79,.L78
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoAccept',0,1,157,1,7
	.word	.L133
	.byte	1,1,1
	.word	.L48,.L135,.L47
	.byte	4
	.byte	'arg',0,1,157,1,24
	.word	.L136,.L137
	.byte	4
	.byte	'newPcb',0,1,157,1,37
	.word	.L138,.L139
	.byte	4
	.byte	'err',0,1,157,1,51
	.word	.L133,.L140
	.byte	5
	.word	.L48,.L135
	.byte	5
	.word	.L141,.L135
	.byte	6
	.byte	'retErr',0,1,162,1,11
	.word	.L133,.L142
	.byte	6
	.byte	'es',0,1,163,1,18
	.word	.L143,.L144
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoAccept')
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoAccept')
	.sect	'.debug_line'
.L78:
	.word	.L325-.L324
.L324:
	.half	3
	.word	.L327-.L326
.L326:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L327:
	.byte	5,7,7,0,5,2
	.word	.L48
	.byte	3,156,1,1,5,49,9
	.half	.L141-.L48
	.byte	3,6,1,5,21,9
	.half	.L203-.L141
	.byte	1,5,5,9
	.half	.L205-.L203
	.byte	3,1,1,5,21,7,9
	.half	.L328-.L205
	.byte	3,2,1,5,19,1,5,29,9
	.half	.L329-.L328
	.byte	3,3,1,5,17,3,126,1,5,32,9
	.half	.L330-.L329
	.byte	3,2,1,5,17,3,127,1,5,15,9
	.half	.L204-.L330
	.byte	1,5,18,9
	.half	.L331-.L204
	.byte	3,1,1,5,32,9
	.half	.L332-.L331
	.byte	1,5,34,9
	.half	.L333-.L332
	.byte	3,1,1,5,32,1,5,25,9
	.half	.L334-.L333
	.byte	3,2,1,5,26,9
	.half	.L207-.L334
	.byte	3,1,1,9
	.half	.L210-.L207
	.byte	3,1,1,5,25,9
	.half	.L212-.L210
	.byte	3,1,1,5,26,9
	.half	.L214-.L212
	.byte	3,1,1,5,36,9
	.half	.L335-.L214
	.byte	1,5,42,9
	.half	.L216-.L335
	.byte	3,5,1,5,41,9
	.half	.L336-.L216
	.byte	1,5,51,1,5,27,9
	.half	.L217-.L336
	.byte	1,5,51,9
	.half	.L337-.L217
	.byte	1,5,32,9
	.half	.L218-.L337
	.byte	3,113,1,5,16,9
	.half	.L5-.L218
	.byte	3,19,1,5,5,9
	.half	.L6-.L5
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L80-.L6
	.byte	0,1,1
.L325:
	.sdecl	'.debug_ranges',debug,cluster('echoAccept')
	.sect	'.debug_ranges'
.L79:
	.word	-1,.L48,0,.L80-.L48,0,0
	.sdecl	'.debug_info',debug,cluster('echoRecv')
	.sect	'.debug_info'
.L81:
	.word	311
	.half	3
	.word	.L82
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L84,.L83
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoRecv',0,1,191,1,7
	.word	.L133
	.byte	1,1,1
	.word	.L50,.L145,.L49
	.byte	4
	.byte	'arg',0,1,191,1,22
	.word	.L136,.L146
	.byte	4
	.byte	'tpcb',0,1,191,1,35
	.word	.L138,.L147
	.byte	4
	.byte	'p',0,1,191,1,47
	.word	.L148,.L149
	.byte	4
	.byte	'err',0,1,191,1,56
	.word	.L133,.L150
	.byte	5
	.word	.L50,.L145
	.byte	6
	.byte	'retErr',0,1,193,1,11
	.word	.L133,.L151
	.byte	6
	.byte	'es',0,1,194,1,18
	.word	.L143,.L152
	.byte	7
	.word	.L16,.L153
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoRecv')
	.sect	'.debug_abbrev'
.L82:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoRecv')
	.sect	'.debug_line'
.L83:
	.word	.L339-.L338
.L338:
	.half	3
	.word	.L341-.L340
.L340:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L341:
	.byte	5,7,7,0,5,2
	.word	.L50
	.byte	3,190,1,1,5,5,9
	.half	.L223-.L50
	.byte	3,5,1,5,21,7,9
	.half	.L224-.L223
	.byte	3,2,1,5,19,1,5,15,9
	.half	.L225-.L224
	.byte	3,1,1,5,9,9
	.half	.L342-.L225
	.byte	1,5,29,7,9
	.half	.L343-.L342
	.byte	3,2,1,5,32,9
	.half	.L220-.L343
	.byte	1,5,10,9
	.half	.L8-.L220
	.byte	3,9,1,5,21,7,9
	.half	.L344-.L8
	.byte	3,5,1,5,19,9
	.half	.L345-.L344
	.byte	1,5,23,9
	.half	.L346-.L345
	.byte	3,1,1,5,21,9
	.half	.L228-.L346
	.byte	3,2,1,5,16,9
	.half	.L11-.L228
	.byte	3,2,1,5,10,9
	.half	.L229-.L11
	.byte	1,5,21,7,9
	.half	.L347-.L229
	.byte	3,2,1,5,19,1,5,33,9
	.half	.L348-.L347
	.byte	1,5,10,9
	.half	.L13-.L348
	.byte	3,6,1,5,15,7,9
	.half	.L349-.L13
	.byte	3,2,1,5,9,9
	.half	.L230-.L349
	.byte	1,5,19,7,9
	.half	.L14-.L230
	.byte	3,2,1,5,30,9
	.half	.L9-.L14
	.byte	3,1,1,5,28,9
	.half	.L231-.L9
	.byte	3,1,1,5,22,9
	.half	.L235-.L231
	.byte	3,126,1,5,29,9
	.half	.L16-.L235
	.byte	3,7,1,5,24,9
	.half	.L153-.L16
	.byte	3,2,1,5,26,9
	.half	.L15-.L153
	.byte	3,5,1,5,38,9
	.half	.L241-.L15
	.byte	1,5,45,9
	.half	.L239-.L241
	.byte	1,5,27,9
	.half	.L240-.L239
	.byte	3,1,1,5,17,9
	.half	.L243-.L240
	.byte	3,1,1,5,15,9
	.half	.L350-.L243
	.byte	1,5,19,9
	.half	.L351-.L350
	.byte	3,1,1,5,16,9
	.half	.L10-.L351
	.byte	3,1,1,5,5,9
	.half	.L12-.L10
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L85-.L12
	.byte	0,1,1
.L339:
	.sdecl	'.debug_ranges',debug,cluster('echoRecv')
	.sect	'.debug_ranges'
.L84:
	.word	-1,.L50,0,.L85-.L50,0,0
	.sdecl	'.debug_info',debug,cluster('echoError')
	.sect	'.debug_info'
.L86:
	.word	256
	.half	3
	.word	.L87
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L89,.L88
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoError',0,1,129,2,6,1,1,1
	.word	.L52,.L154,.L51
	.byte	4
	.byte	'arg',0,1,129,2,22
	.word	.L136,.L155
	.byte	4
	.byte	'err',0,1,129,2,33
	.word	.L133,.L156
	.byte	5
	.word	.L52,.L154
	.byte	5
	.word	.L52,.L154
	.byte	6
	.byte	'es',0,1,133,2,18
	.word	.L143,.L157
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoError')
	.sect	'.debug_abbrev'
.L87:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoError')
	.sect	'.debug_line'
.L88:
	.word	.L353-.L352
.L352:
	.half	3
	.word	.L355-.L354
.L354:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L355:
	.byte	5,5,7,0,5,2
	.word	.L52
	.byte	3,134,2,1,5,18,7,9
	.half	.L356-.L52
	.byte	3,2,1,5,1,7,9
	.half	.L20-.L356
	.byte	3,2,1,7,9
	.half	.L90-.L20
	.byte	0,1,1
.L353:
	.sdecl	'.debug_ranges',debug,cluster('echoError')
	.sect	'.debug_ranges'
.L89:
	.word	-1,.L52,0,.L90-.L52,0,0
	.sdecl	'.debug_info',debug,cluster('echoPoll')
	.sect	'.debug_info'
.L91:
	.word	270
	.half	3
	.word	.L92
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L94,.L93
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoPoll',0,1,142,2,7
	.word	.L133
	.byte	1,1,1
	.word	.L54,.L158,.L53
	.byte	4
	.byte	'arg',0,1,142,2,22
	.word	.L136,.L159
	.byte	4
	.byte	'tpcb',0,1,142,2,35
	.word	.L138,.L160
	.byte	5
	.word	.L54,.L158
	.byte	6
	.byte	'retErr',0,1,144,2,11
	.word	.L133,.L161
	.byte	6
	.byte	'es',0,1,145,2,18
	.word	.L143,.L162
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoPoll')
	.sect	'.debug_abbrev'
.L92:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoPoll')
	.sect	'.debug_line'
.L93:
	.word	.L358-.L357
.L357:
	.half	3
	.word	.L360-.L359
.L359:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L360:
	.byte	5,7,7,0,5,2
	.word	.L54
	.byte	3,141,2,1,5,5,9
	.half	.L247-.L54
	.byte	3,5,1,5,15,7,9
	.half	.L361-.L247
	.byte	3,2,1,5,13,9
	.half	.L362-.L361
	.byte	1,5,15,7,9
	.half	.L363-.L362
	.byte	3,1,1,5,36,9
	.half	.L364-.L363
	.byte	1,5,30,7,9
	.half	.L22-.L364
	.byte	3,2,1,5,28,9
	.half	.L248-.L22
	.byte	3,1,1,5,33,9
	.half	.L251-.L248
	.byte	3,127,1,5,19,9
	.half	.L23-.L251
	.byte	3,5,1,5,13,9
	.half	.L365-.L23
	.byte	1,5,33,7,9
	.half	.L366-.L365
	.byte	3,2,1,5,16,9
	.half	.L24-.L366
	.byte	3,3,1,5,1,3,8,1,5,19,7,9
	.half	.L21-.L24
	.byte	3,124,1,5,16,9
	.half	.L256-.L21
	.byte	3,1,1,5,1,3,3,1,7,9
	.half	.L95-.L256
	.byte	0,1,1
.L358:
	.sdecl	'.debug_ranges',debug,cluster('echoPoll')
	.sect	'.debug_ranges'
.L94:
	.word	-1,.L54,0,.L95-.L54,0,0
	.sdecl	'.debug_info',debug,cluster('echoSent')
	.sect	'.debug_info'
.L96:
	.word	273
	.half	3
	.word	.L97
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L99,.L98
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoSent',0,1,173,2,7
	.word	.L133
	.byte	1,1,1
	.word	.L56,.L163,.L55
	.byte	4
	.byte	'arg',0,1,173,2,22
	.word	.L136,.L164
	.byte	4
	.byte	'tpcb',0,1,173,2,35
	.word	.L138,.L165
	.byte	4
	.byte	'len',0,1,173,2,47
	.word	.L166,.L167
	.byte	5
	.word	.L56,.L163
	.byte	6
	.word	.L168
	.byte	7
	.byte	'es',0,1,177,2,18
	.word	.L143,.L172
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoSent')
	.sect	'.debug_abbrev'
.L97:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	11,1,85,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoSent')
	.sect	'.debug_line'
.L98:
	.word	.L368-.L367
.L367:
	.half	3
	.word	.L370-.L369
.L369:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L370:
	.byte	5,7,7,0,5,2
	.word	.L56
	.byte	3,172,2,1,5,11,9
	.half	.L169-.L56
	.byte	3,6,1,5,7,9
	.half	.L170-.L169
	.byte	3,122,1,5,5,9
	.half	.L171-.L170
	.byte	3,6,1,5,26,7,9
	.half	.L371-.L171
	.byte	3,2,1,5,24,9
	.half	.L258-.L371
	.byte	3,1,1,5,29,9
	.half	.L261-.L258
	.byte	3,127,1,5,15,9
	.half	.L28-.L261
	.byte	3,5,1,5,9,9
	.half	.L372-.L28
	.byte	1,5,29,7,9
	.half	.L373-.L372
	.byte	3,2,1,5,12,9
	.half	.L29-.L373
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L100-.L29
	.byte	0,1,1
.L368:
	.sdecl	'.debug_ranges',debug,cluster('echoSent')
	.sect	'.debug_ranges'
.L99:
	.word	-1,.L56,0,.L100-.L56,0,0
.L168:
	.word	-1,.L56,.L169-.L56,.L170-.L56,.L171-.L56,.L163-.L56,0,0
	.sdecl	'.debug_info',debug,cluster('echoSend')
	.sect	'.debug_info'
.L101:
	.word	258
	.half	3
	.word	.L102
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L104,.L103
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoSend',0,1,195,2,6,1,1,1
	.word	.L58,.L173,.L57
	.byte	4
	.byte	'tpcb',0,1,195,2,23
	.word	.L138,.L174
	.byte	4
	.byte	'es',0,1,195,2,42
	.word	.L143,.L175
	.byte	5
	.word	.L58,.L173
	.byte	5
	.word	.L33,.L173
	.byte	6
	.byte	'wrErr',0,1,206,2,11
	.word	.L133,.L176
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoSend')
	.sect	'.debug_abbrev'
.L102:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoSend')
	.sect	'.debug_line'
.L103:
	.word	.L375-.L374
.L374:
	.half	3
	.word	.L377-.L376
.L376:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L377:
	.byte	5,6,7,0,5,2
	.word	.L58
	.byte	3,194,2,1,5,10,9
	.half	.L267-.L58
	.byte	3,2,1,5,6,9
	.half	.L378-.L267
	.byte	3,126,1,5,5,9
	.half	.L268-.L378
	.byte	3,2,1,5,19,7,9
	.half	.L379-.L268
	.byte	3,4,1,5,51,9
	.half	.L380-.L379
	.byte	1,5,8,9
	.half	.L381-.L380
	.byte	1,5,33,7,9
	.half	.L382-.L381
	.byte	3,1,1,5,31,9
	.half	.L383-.L382
	.byte	1,5,46,7,9
	.half	.L33-.L383
	.byte	3,4,1,5,35,1,5,49,9
	.half	.L265-.L33
	.byte	1,5,17,9
	.half	.L266-.L265
	.byte	1,5,32,3,1,1,5,45,9
	.half	.L270-.L266
	.byte	1,5,67,9
	.half	.L384-.L270
	.byte	1,5,11,9
	.half	.L269-.L384
	.byte	1,5,5,9
	.half	.L385-.L269
	.byte	3,1,1,5,32,7,9
	.half	.L386-.L385
	.byte	3,2,1,5,1,9
	.half	.L32-.L386
	.byte	3,2,1,7,9
	.half	.L105-.L32
	.byte	0,1,1
.L375:
	.sdecl	'.debug_ranges',debug,cluster('echoSend')
	.sect	'.debug_ranges'
.L104:
	.word	-1,.L58,0,.L105-.L58,0,0
	.sdecl	'.debug_info',debug,cluster('echoUnpack')
	.sect	'.debug_info'
.L106:
	.word	305
	.half	3
	.word	.L107
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L109,.L108
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoUnpack',0,1,215,2,6,1,1,1
	.word	.L60,.L177,.L59
	.byte	4
	.byte	'tpcb',0,1,215,2,25
	.word	.L138,.L178
	.byte	4
	.byte	'es',0,1,215,2,44
	.word	.L143,.L179
	.byte	5
	.word	.L60,.L177
	.byte	6
	.byte	'ptr',0,1,217,2,11
	.word	.L148,.L180
	.byte	5
	.word	.L181,.L36
	.byte	6
	.byte	'plen',0,1,230,2,19
	.word	.L166,.L182
	.byte	5
	.word	.L40,.L36
	.byte	6
	.byte	'freed',0,1,238,2,18
	.word	.L183,.L184
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoUnpack')
	.sect	'.debug_abbrev'
.L107:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoUnpack')
	.sect	'.debug_line'
.L108:
	.word	.L388-.L387
.L387:
	.half	3
	.word	.L390-.L389
.L389:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L390:
	.byte	5,6,7,0,5,2
	.word	.L60
	.byte	3,214,2,1,5,15,9
	.half	.L273-.L60
	.byte	3,8,1,5,27,9
	.half	.L391-.L273
	.byte	3,124,1,5,17,9
	.half	.L37-.L391
	.byte	3,2,1,5,15,9
	.half	.L274-.L37
	.byte	3,2,1,5,50,9
	.half	.L392-.L274
	.byte	1,5,41,9
	.half	.L393-.L392
	.byte	1,5,36,9
	.half	.L394-.L393
	.byte	1,5,9,9
	.half	.L395-.L394
	.byte	1,5,32,7,9
	.half	.L396-.L395
	.byte	3,2,1,5,24,9
	.half	.L397-.L396
	.byte	3,1,1,5,23,9
	.half	.L398-.L397
	.byte	3,127,1,5,24,9
	.half	.L399-.L398
	.byte	3,2,1,5,15,9
	.half	.L400-.L399
	.byte	3,1,1,5,42,9
	.half	.L401-.L400
	.byte	1,5,36,9
	.half	.L402-.L401
	.byte	1,5,24,9
	.half	.L181-.L402
	.byte	3,4,1,5,29,9
	.half	.L403-.L181
	.byte	3,126,1,5,19,9
	.half	.L275-.L403
	.byte	3,2,1,5,13,9
	.half	.L404-.L275
	.byte	3,1,1,5,28,7,9
	.half	.L405-.L404
	.byte	3,2,1,5,35,9
	.half	.L40-.L405
	.byte	3,6,1,5,33,9
	.half	.L277-.L40
	.byte	3,1,1,5,30,7,9
	.half	.L406-.L277
	.byte	3,2,1,5,15,9
	.half	.L36-.L406
	.byte	3,103,1,5,27,9
	.half	.L407-.L36
	.byte	1,5,1,7,9
	.half	.L408-.L407
	.byte	3,28,1,7,9
	.half	.L110-.L408
	.byte	0,1,1
.L388:
	.sdecl	'.debug_ranges',debug,cluster('echoUnpack')
	.sect	'.debug_ranges'
.L109:
	.word	-1,.L60,0,.L110-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('echoClose')
	.sect	'.debug_info'
.L111:
	.word	229
	.half	3
	.word	.L112
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L114,.L113
	.byte	2
	.word	.L67
	.byte	3
	.byte	'echoClose',0,1,250,2,6,1,1,1
	.word	.L62,.L185,.L61
	.byte	4
	.byte	'tpcb',0,1,250,2,24
	.word	.L138,.L186
	.byte	4
	.byte	'es',0,1,250,2,43
	.word	.L143,.L187
	.byte	5
	.word	.L62,.L185
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('echoClose')
	.sect	'.debug_abbrev'
.L112:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('echoClose')
	.sect	'.debug_line'
.L113:
	.word	.L410-.L409
.L409:
	.half	3
	.word	.L412-.L411
.L411:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L412:
	.byte	5,6,7,0,5,2
	.word	.L62
	.byte	3,249,2,1,5,19,9
	.half	.L282-.L62
	.byte	3,2,1,5,20,9
	.half	.L280-.L282
	.byte	3,1,1,9
	.half	.L284-.L280
	.byte	3,1,1,5,19,9
	.half	.L286-.L284
	.byte	3,1,1,5,20,9
	.half	.L288-.L286
	.byte	3,1,1,5,26,9
	.half	.L413-.L288
	.byte	1,5,5,9
	.half	.L290-.L413
	.byte	3,2,1,5,18,7,9
	.half	.L414-.L290
	.byte	3,2,1,5,15,9
	.half	.L41-.L414
	.byte	3,2,1,5,1,9
	.half	.L115-.L41
	.byte	3,1,0,1,1
.L410:
	.sdecl	'.debug_ranges',debug,cluster('echoClose')
	.sect	'.debug_ranges'
.L114:
	.word	-1,.L62,0,.L115-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_server_recv')
	.sect	'.debug_info'
.L116:
	.word	281
	.half	3
	.word	.L117
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L119,.L118
	.byte	2
	.word	.L67
	.byte	3
	.byte	'tcp_server_recv',0,1,156,3,14
	.word	.L133
	.byte	1,1
	.word	.L66,.L188,.L65
	.byte	4
	.byte	'arg',0,1,156,3,36
	.word	.L136,.L189
	.byte	4
	.byte	'tpcb',0,1,156,3,57
	.word	.L190,.L191
	.byte	4
	.byte	'p',0,1,157,3,42
	.word	.L192,.L193
	.byte	4
	.byte	'err',0,1,157,3,51
	.word	.L133,.L194
	.byte	5
	.word	.L66,.L188
	.byte	6
	.word	.L43,.L195
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_server_recv')
	.sect	'.debug_abbrev'
.L117:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,0,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_server_recv')
	.sect	'.debug_line'
.L118:
	.word	.L416-.L415
.L415:
	.half	3
	.word	.L418-.L417
.L417:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L418:
	.byte	5,14,7,0,5,2
	.word	.L66
	.byte	3,155,3,1,5,22,9
	.half	.L300-.L66
	.byte	3,6,1,5,34,9
	.half	.L298-.L300
	.byte	1,5,41,9
	.half	.L297-.L298
	.byte	1,5,21,9
	.half	.L43-.L297
	.byte	3,14,1,5,27,9
	.half	.L419-.L43
	.byte	3,121,1,7,9
	.half	.L420-.L419
	.byte	3,10,1,5,19,9
	.half	.L302-.L420
	.byte	3,3,1,5,12,9
	.half	.L195-.L302
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L120-.L195
	.byte	0,1,1
.L416:
	.sdecl	'.debug_ranges',debug,cluster('tcp_server_recv')
	.sect	'.debug_ranges'
.L119:
	.word	-1,.L66,0,.L120-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_server_accept')
	.sect	'.debug_info'
.L121:
	.word	260
	.half	3
	.word	.L122
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L124,.L123
	.byte	2
	.word	.L67
	.byte	3
	.byte	'tcp_server_accept',0,1,143,3,14
	.word	.L133
	.byte	1,1
	.word	.L64,.L196,.L63
	.byte	4
	.byte	'arg',0,1,143,3,38
	.word	.L136,.L197
	.byte	4
	.byte	'newpcb',0,1,143,3,59
	.word	.L190,.L198
	.byte	4
	.byte	'err',0,1,143,3,73
	.word	.L133,.L199
	.byte	5
	.word	.L64,.L196
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_server_accept')
	.sect	'.debug_abbrev'
.L122:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_server_accept')
	.sect	'.debug_line'
.L123:
	.word	.L422-.L421
.L421:
	.half	3
	.word	.L424-.L423
.L423:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0,0,0,0,0
.L424:
	.byte	5,22,7,0,5,2
	.word	.L64
	.byte	3,145,3,1,5,12,9
	.half	.L294-.L64
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L125-.L294
	.byte	0,1,1
.L422:
	.sdecl	'.debug_ranges',debug,cluster('tcp_server_accept')
	.sect	'.debug_ranges'
.L124:
	.word	-1,.L64,0,.L125-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('g_Logo')
	.sect	'.debug_info'
.L126:
	.word	169
	.half	3
	.word	.L127
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L67
	.byte	3
	.byte	'g_Logo',0,8,103,8
	.word	.L200
	.byte	1,5,3
	.word	g_Logo
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('g_Logo')
	.sect	'.debug_abbrev'
.L127:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('g_TCPPcb')
	.sect	'.debug_info'
.L128:
	.word	171
	.half	3
	.word	.L129
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\Main\\Echo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L67
	.byte	3
	.byte	'g_TCPPcb',0,8,118,17
	.word	.L190
	.byte	1,5,3
	.word	g_TCPPcb
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('g_TCPPcb')
	.sect	'.debug_abbrev'
.L129:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('TCP_server_init')
	.sect	'.debug_loc'
.L45:
	.word	-1,.L46,0,.L130-.L46
	.half	2
	.byte	138,0
	.word	0,0
.L134:
	.word	-1,.L46,.L201-.L46,.L202-.L46
	.half	1
	.byte	82
	.word	.L3-.L46,.L130-.L46
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoAccept')
	.sect	'.debug_loc'
.L137:
	.word	-1,.L48,0,.L203-.L48
	.half	1
	.byte	100
	.word	0,0
.L47:
	.word	-1,.L48,0,.L135-.L48
	.half	2
	.byte	138,0
	.word	0,0
.L140:
	.word	-1,.L48,0,.L203-.L48
	.half	1
	.byte	84
	.word	0,0
.L144:
	.word	-1,.L48,.L203-.L48,.L204-.L48
	.half	1
	.byte	98
	.word	.L205-.L48,.L135-.L48
	.half	1
	.byte	111
	.word	.L208-.L48,.L207-.L48
	.half	1
	.byte	101
	.word	.L5-.L48,.L6-.L48
	.half	1
	.byte	98
	.word	0,0
.L139:
	.word	-1,.L48,0,.L203-.L48
	.half	1
	.byte	101
	.word	.L141-.L48,.L135-.L48
	.half	1
	.byte	108
	.word	.L206-.L48,.L207-.L48
	.half	1
	.byte	100
	.word	.L209-.L48,.L210-.L48
	.half	1
	.byte	100
	.word	.L211-.L48,.L212-.L48
	.half	1
	.byte	100
	.word	.L213-.L48,.L214-.L48
	.half	1
	.byte	100
	.word	.L215-.L48,.L216-.L48
	.half	1
	.byte	100
	.word	.L217-.L48,.L218-.L48
	.half	1
	.byte	100
	.word	0,0
.L142:
	.word	-1,.L48,.L6-.L48,.L135-.L48
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoClose')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L62,0,.L185-.L62
	.half	2
	.byte	138,0
	.word	0,0
.L187:
	.word	-1,.L62,0,.L279-.L62
	.half	1
	.byte	101
	.word	.L282-.L62,.L185-.L62
	.half	1
	.byte	108
	.word	.L291-.L62,.L41-.L62
	.half	1
	.byte	100
	.word	0,0
.L186:
	.word	-1,.L62,0,.L280-.L62
	.half	1
	.byte	100
	.word	.L281-.L62,.L185-.L62
	.half	1
	.byte	111
	.word	.L283-.L62,.L284-.L62
	.half	1
	.byte	100
	.word	.L285-.L62,.L286-.L62
	.half	1
	.byte	100
	.word	.L287-.L62,.L288-.L62
	.half	1
	.byte	100
	.word	.L289-.L62,.L290-.L62
	.half	1
	.byte	100
	.word	.L292-.L62,.L185-.L62
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoError')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L52,0,.L154-.L52
	.half	1
	.byte	100
	.word	0,0
.L51:
	.word	-1,.L52,0,.L154-.L52
	.half	2
	.byte	138,0
	.word	0,0
.L156:
	.word	-1,.L52,0,.L154-.L52
	.half	1
	.byte	84
	.word	0,0
.L157:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoPoll')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L54,0,.L245-.L54
	.half	1
	.byte	100
	.word	.L246-.L54,.L158-.L54
	.half	1
	.byte	111
	.word	.L249-.L54,.L248-.L54
	.half	1
	.byte	101
	.word	.L252-.L54,.L251-.L54
	.half	1
	.byte	101
	.word	.L23-.L54,.L253-.L54
	.half	1
	.byte	100
	.word	.L254-.L54,.L24-.L54
	.half	1
	.byte	101
	.word	.L21-.L54,.L255-.L54
	.half	1
	.byte	100
	.word	0,0
.L53:
	.word	-1,.L54,0,.L158-.L54
	.half	2
	.byte	138,0
	.word	0,0
.L162:
	.word	0,0
.L161:
	.word	0,0
.L160:
	.word	-1,.L54,0,.L245-.L54
	.half	1
	.byte	101
	.word	.L247-.L54,.L158-.L54
	.half	1
	.byte	108
	.word	.L245-.L54,.L248-.L54
	.half	1
	.byte	100
	.word	.L250-.L54,.L251-.L54
	.half	1
	.byte	100
	.word	.L23-.L54,.L253-.L54
	.half	1
	.byte	101
	.word	.L253-.L54,.L24-.L54
	.half	1
	.byte	100
	.word	.L21-.L54,.L255-.L54
	.half	1
	.byte	101
	.word	.L255-.L54,.L256-.L54
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoRecv')
	.sect	'.debug_loc'
.L146:
	.word	-1,.L50,0,.L219-.L50
	.half	1
	.byte	100
	.word	.L221-.L50,.L145-.L50
	.half	1
	.byte	111
	.word	.L226-.L50,.L220-.L50
	.half	1
	.byte	101
	.word	.L8-.L50,.L227-.L50
	.half	1
	.byte	100
	.word	.L11-.L50,.L230-.L50
	.half	1
	.byte	100
	.word	.L233-.L50,.L231-.L50
	.half	1
	.byte	101
	.word	.L236-.L50,.L235-.L50
	.half	1
	.byte	101
	.word	.L15-.L50,.L238-.L50
	.half	1
	.byte	100
	.word	0,0
.L49:
	.word	-1,.L50,0,.L145-.L50
	.half	2
	.byte	138,0
	.word	0,0
.L150:
	.word	-1,.L50,0,.L220-.L50
	.half	1
	.byte	84
	.word	.L224-.L50,.L225-.L50
	.half	1
	.byte	95
	.word	.L8-.L50,.L228-.L50
	.half	1
	.byte	84
	.word	.L8-.L50,.L229-.L50
	.half	1
	.byte	95
	.word	.L11-.L50,.L231-.L50
	.half	1
	.byte	84
	.word	.L16-.L50,.L153-.L50
	.half	1
	.byte	84
	.word	.L15-.L50,.L239-.L50
	.half	1
	.byte	84
	.word	.L12-.L50,.L145-.L50
	.half	1
	.byte	95
	.word	0,0
.L152:
	.word	0,0
.L149:
	.word	-1,.L50,0,.L220-.L50
	.half	1
	.byte	102
	.word	.L223-.L50,.L145-.L50
	.half	1
	.byte	109
	.word	.L8-.L50,.L227-.L50
	.half	1
	.byte	102
	.word	.L227-.L50,.L228-.L50
	.half	1
	.byte	100
	.word	.L11-.L50,.L231-.L50
	.half	1
	.byte	102
	.word	.L16-.L50,.L237-.L50
	.half	1
	.byte	102
	.word	.L237-.L50,.L153-.L50
	.half	1
	.byte	101
	.word	.L15-.L50,.L240-.L50
	.half	1
	.byte	102
	.word	.L244-.L50,.L10-.L50
	.half	1
	.byte	100
	.word	0,0
.L151:
	.word	0,0
.L147:
	.word	-1,.L50,0,.L219-.L50
	.half	1
	.byte	101
	.word	.L222-.L50,.L145-.L50
	.half	1
	.byte	108
	.word	.L219-.L50,.L220-.L50
	.half	1
	.byte	100
	.word	.L8-.L50,.L228-.L50
	.half	1
	.byte	101
	.word	.L11-.L50,.L232-.L50
	.half	1
	.byte	101
	.word	.L232-.L50,.L231-.L50
	.half	1
	.byte	100
	.word	.L234-.L50,.L235-.L50
	.half	1
	.byte	100
	.word	.L16-.L50,.L237-.L50
	.half	1
	.byte	101
	.word	.L15-.L50,.L241-.L50
	.half	1
	.byte	101
	.word	.L238-.L50,.L240-.L50
	.half	1
	.byte	100
	.word	.L242-.L50,.L243-.L50
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoSend')
	.sect	'.debug_loc'
.L57:
	.word	-1,.L58,0,.L173-.L58
	.half	2
	.byte	138,0
	.word	0,0
.L175:
	.word	-1,.L58,0,.L265-.L58
	.half	1
	.byte	101
	.word	.L267-.L58,.L173-.L58
	.half	1
	.byte	108
	.word	0,0
.L174:
	.word	-1,.L58,0,.L266-.L58
	.half	1
	.byte	100
	.word	.L268-.L58,.L173-.L58
	.half	1
	.byte	111
	.word	.L271-.L58,.L269-.L58
	.half	1
	.byte	100
	.word	0,0
.L176:
	.word	-1,.L58,.L266-.L58,.L269-.L58
	.half	1
	.byte	82
	.word	.L270-.L58,.L32-.L58
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoSent')
	.sect	'.debug_loc'
.L164:
	.word	-1,.L56,0,.L257-.L56
	.half	1
	.byte	100
	.word	.L169-.L56,.L163-.L56
	.half	1
	.byte	111
	.word	.L259-.L56,.L258-.L56
	.half	1
	.byte	101
	.word	.L262-.L56,.L261-.L56
	.half	1
	.byte	101
	.word	.L28-.L56,.L263-.L56
	.half	1
	.byte	100
	.word	.L264-.L56,.L29-.L56
	.half	1
	.byte	101
	.word	0,0
.L55:
	.word	-1,.L56,0,.L163-.L56
	.half	2
	.byte	138,0
	.word	0,0
.L172:
	.word	0,0
.L167:
	.word	-1,.L56,0,.L258-.L56
	.half	1
	.byte	84
	.word	.L28-.L56,.L29-.L56
	.half	1
	.byte	84
	.word	0,0
.L165:
	.word	-1,.L56,0,.L257-.L56
	.half	1
	.byte	101
	.word	.L171-.L56,.L163-.L56
	.half	1
	.byte	108
	.word	.L257-.L56,.L258-.L56
	.half	1
	.byte	100
	.word	.L260-.L56,.L261-.L56
	.half	1
	.byte	100
	.word	.L28-.L56,.L263-.L56
	.half	1
	.byte	101
	.word	.L263-.L56,.L29-.L56
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('echoUnpack')
	.sect	'.debug_loc'
.L59:
	.word	-1,.L60,0,.L177-.L60
	.half	2
	.byte	138,0
	.word	0,0
.L179:
	.word	-1,.L60,0,.L37-.L60
	.half	1
	.byte	101
	.word	.L273-.L60,.L177-.L60
	.half	1
	.byte	111
	.word	0,0
.L184:
	.word	-1,.L60,.L277-.L60,.L36-.L60
	.half	1
	.byte	82
	.word	0,0
.L182:
	.word	-1,.L60,.L275-.L60,.L36-.L60
	.half	1
	.byte	95
	.word	0,0
.L180:
	.word	-1,.L60,.L274-.L60,.L36-.L60
	.half	1
	.byte	110
	.word	.L276-.L60,.L277-.L60
	.half	1
	.byte	100
	.word	0,0
.L178:
	.word	-1,.L60,0,.L37-.L60
	.half	1
	.byte	100
	.word	.L272-.L60,.L177-.L60
	.half	1
	.byte	108
	.word	.L278-.L60,.L36-.L60
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_server_accept')
	.sect	'.debug_loc'
.L197:
	.word	-1,.L64,0,.L293-.L64
	.half	1
	.byte	100
	.word	0,0
.L199:
	.word	-1,.L64,0,.L294-.L64
	.half	1
	.byte	84
	.word	0,0
.L198:
	.word	-1,.L64,0,.L295-.L64
	.half	1
	.byte	101
	.word	.L293-.L64,.L294-.L64
	.half	1
	.byte	100
	.word	0,0
.L63:
	.word	-1,.L64,0,.L196-.L64
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_server_recv')
	.sect	'.debug_loc'
.L189:
	.word	-1,.L66,0,.L296-.L66
	.half	1
	.byte	100
	.word	0,0
.L194:
	.word	-1,.L66,0,.L297-.L66
	.half	1
	.byte	84
	.word	0,0
.L193:
	.word	-1,.L66,0,.L43-.L66
	.half	1
	.byte	102
	.word	.L300-.L66,.L188-.L66
	.half	1
	.byte	111
	.word	.L303-.L66,.L195-.L66
	.half	1
	.byte	100
	.word	0,0
.L65:
	.word	-1,.L66,0,.L188-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L191:
	.word	-1,.L66,0,.L298-.L66
	.half	1
	.byte	101
	.word	.L299-.L66,.L188-.L66
	.half	1
	.byte	108
	.word	.L296-.L66,.L43-.L66
	.half	1
	.byte	100
	.word	.L301-.L66,.L302-.L66
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L425:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('TCP_server_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L46,.L130-.L46
	.sdecl	'.debug_frame',debug,cluster('echoAccept')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L48,.L135-.L48
	.sdecl	'.debug_frame',debug,cluster('echoRecv')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L50,.L145-.L50
	.sdecl	'.debug_frame',debug,cluster('echoError')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L52,.L154-.L52
	.sdecl	'.debug_frame',debug,cluster('echoPoll')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L54,.L158-.L54
	.sdecl	'.debug_frame',debug,cluster('echoSent')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L56,.L163-.L56
	.sdecl	'.debug_frame',debug,cluster('echoSend')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L58,.L173-.L58
	.sdecl	'.debug_frame',debug,cluster('echoUnpack')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L60,.L177-.L60
	.sdecl	'.debug_frame',debug,cluster('echoClose')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L62,.L185-.L62
	.sdecl	'.debug_frame',debug,cluster('tcp_server_accept')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L64,.L196-.L64
	.sdecl	'.debug_frame',debug,cluster('tcp_server_recv')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L66,.L188-.L66


	; Module end
