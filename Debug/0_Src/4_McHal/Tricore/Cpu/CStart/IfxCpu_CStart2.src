	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\.IfxCpu_CStart2.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.src ..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c'

	
$TC162
	.sdecl	'.zrodata.IfxScuWdt..2.cnt',data,rom
	.sect	'.zrodata.IfxScuWdt..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268213660
	.sdecl	'.zrodata.IfxCpu..3.cnt',data,rom
	.sect	'.zrodata.IfxCpu..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268213684
	

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     2   * \file IfxCpu_Cstart2.c
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     3   * \brief This file contains the Core startup sequence for Cpu2.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     4   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     5   * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     6   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     7   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    10   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    22   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    23   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    24   */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    25  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    26  **                      Includes                                              **
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    27  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    28  #include "Ifx_Cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    29  #ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    30  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    31  #include "Cpu/Std/IfxCpu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    32  #include "Cpu/CStart/IfxCpu_CStart.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    33  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    34  #include "IfxCpu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    35  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    36  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    37  /*                           Macros                                            */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    38  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    39  /** \brief Configuration for cache enable.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    41   */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    42  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE2_PCACHE
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    43  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE2_PCACHE (1)  /**< Program Cache enabled by default*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    44  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    45  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE2_DCACHE
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    46  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE2_DCACHE (1)  /**< Data Cache enabled by default*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    47  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    48  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    49  **                      Imported Function Declarations                        **
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    50  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    51  IFXCOMPILER_COMMON_LINKER_SYMBOLS()
		 .extern _SMALL_DATA_, _LITERAL_DATA_, _A8_DATA_, _A9_DATA_

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    52  IFXCOMPILER_CORE_LINKER_SYMBOLS(2)
		 .extern __USTACK2

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    53  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    54  IFX_EXTERN void core2_main(void);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    55  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    56  __asm("\t .extern core2_main");
		 .extern core2_main
	.sdecl	'.text.IfxCpu_CStart2._Core2_start',code,cluster('_Core2_start')
	.sect	'.text.IfxCpu_CStart2._Core2_start'
	.align	2
	
	.global	_Core2_start

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    57  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    58  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    59  **                      Private Constant Definitions                          **
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    60  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    61  #define IFXCSTART2_PSW_DEFAULT     (0x00000980u)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    62  #define IFXCSTART2_PCX_O_S_DEFAULT (0xfff00000u)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    63  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    64  /********************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    65  * _start() - startup code
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    66  ********************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    67  void _Core2_start(void)
; Function _Core2_start
.L22:
_Core2_start:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
	ld.w	d15,.2.cnt
	mov.a	a15,d15
	ld.w	d15,[a15]
	extr.u	d15,d15,#2,#14
.L169:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
	xor	d0,d15,#63
.L57:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    68  gPasswordInline(&MODULE_SCU.WDTCPU[2]);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    69  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    70      IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    71  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    72      /* Load user stack pointer */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    73      __setareg(sp, __USTACK(2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    74      __dsync();
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    75  
	 movh.a	 sp,#@his(__USTACK2)
 lea	 sp,[sp]@los(__USTACK2)
.L170:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    76      /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
	dsync
.L171:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    77      __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    78  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    79      /* Set the PCXS and PCXO to its reset value in case of a warm start */
	mov	d15,#2432
.L172:
	mtcr	#65028,d15
	isync
.L173:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    80      pcxi  = __mfcr(CPU_PCXI);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    81      pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    82      __mtcr(CPU_PCXI, pcxi);
	mfcr	d15,#65024
.L174:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    83  
	insert	d15,d15,#0,#0,#20
.L143:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    84      /* Clear the ENDINIT bit in the Password register, inline funtion */
	mtcr	#65024,d15
	isync
.L64:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L144:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L2
.L175:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d1,[a15]
.L176:
	ld.w	d15,.2.cnt
.L177:
	insert	d1,d1,#0,#0,#16
.L178:
	mov.a	a2,d15
.L179:
	sha	d15,d0,#2
	or	d15,#1
.L180:
	or	d15,d1
	st.w	[a2],d15

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
.L2:
	sha	d1,d0,#2
	ld.w	d0,.2.cnt
.L142:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	or	d2,d1,#2
.L181:
	mov.a	a2,d0
.L182:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	insert	d0,d0,#0,#0,#16
.L183:
	or	d0,d2
	st.w	[a2],d0

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L3:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d0,[a15]
.L184:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d0:0,.L3
.L65:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   978  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   979  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   980  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   981  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   982  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   983      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   984      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   985          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   986          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   987          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   988          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   989          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   990          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   991      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   992  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   993  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   994  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   995  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   996  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   997      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   998      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   999  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1000  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1001  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1002  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1003  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1004      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1005      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1006      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1007      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1008      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1010      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1011      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1012      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1013      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1014      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1015      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1016  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1017      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1018      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1019      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1020      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1021  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1022  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1023  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1024  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1025  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1026      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1027      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1028          __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1029      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1030  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1031  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1033  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1034  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1035      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1036      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1037      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1038      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1039          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1040          Ifx_CPU_DCON0 dcon0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1041          dcon0.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1042          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1043          __mtcr(CPU_DCON0, dcon0.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1044          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1045      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1046      /* Step 2: Call Isync */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1047      __isync();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1048  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1049  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1050  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1051  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1052  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1053      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1054      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1055      cctrl.B.CE = enable;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1056      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1057  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1058  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1060  IFX_INLINE void IfxCpu_setProgramCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1061  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1062      if (enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1063      {                           /* Step 3: Initiate invalidation of current cache contents if any */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1064          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1065          pcon1.U       = 0;
	mov	d15,#0
.L145:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1066          pcon1.B.PCINV = 1;
	or	d15,#1
.L185:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1067          __mtcr(CPU_PCON1, pcon1.U);
	mtcr	#37380,d15
	isync
.L77:
	mfcr	d15,#65052
.L83:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1068      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1069  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1070      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1071      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
	ld.w	d0,.3.cnt
.L86:
	and	d15,#7
.L87:
	mov.a	a4,d0
.L186:
	mul	d15,d15,#12
	addsc.a	a5,a4,d15,#0
.L90:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
	ld.w	d0,[a5]
.L187:
	extr.u	d0,d0,#2,#14
	ld.w	d15,[a5]
.L188:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
	xor	d0,d0,#63
.L91:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L4
.L189:
	sha	d15,d0,#2
	or	d15,#1
.L190:
	fcall	.cocofun_5

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
.L4:
	sha	d0,#2
.L147:
	or	d15,d0,#2
.L191:
	fcall	.cocofun_5

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L5:
	ld.w	d15,[a5]
.L192:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L5
.L93:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   978  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   979  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   980  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   981  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   982  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   983      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   984      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   985          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   986          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   987          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   988          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   989          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   990          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   991      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   992  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   993  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   994  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   995  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   996  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   997      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   998      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   999  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1000  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1001  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1002  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1003  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1004      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1005      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1006      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1007      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1008      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1010      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1011      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1012      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1013      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1014      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1015      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1016  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1017      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1018      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1019      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1020      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1021  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1022  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1023  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1024  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1025  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1026      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1027      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1028          __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1029      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1030  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1031  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1033  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1034  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1035      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1036      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1037      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1038      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1039          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1040          Ifx_CPU_DCON0 dcon0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1041          dcon0.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1042          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1043          __mtcr(CPU_DCON0, dcon0.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1044          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1045      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1046      /* Step 2: Call Isync */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1047      __isync();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1048  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1049  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1050  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1051  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1052  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1053      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1054      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1055      cctrl.B.CE = enable;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1056      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1057  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1058  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1060  IFX_INLINE void IfxCpu_setProgramCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1061  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1062      if (enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1063      {                           /* Step 3: Initiate invalidation of current cache contents if any */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1064          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1065          pcon1.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1066          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1067          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1068      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1069  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1070      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1071      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1072      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1073      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1074          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1075          Ifx_CPU_PCON0 pcon0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1076          pcon0.U       = 0;
	mov	d15,#0
.L148:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1077          pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
	insert	d15,d15,#0,#1,#1
.L193:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1078          __mtcr(CPU_PCON0, pcon0.U);
	mtcr	#37388,d15
	isync
.L100:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   614      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   615  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   618  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   619  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   620      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   624  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   626      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   627       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   628       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   630      uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   631      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   635  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   637      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   641  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   643      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   644      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   646      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   647       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   648       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   649      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   650      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   652      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   656  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a5]
.L149:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L6
.L194:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   659      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   660          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   661          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   662                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   663                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	or	d15,d0,#1
.L195:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   664                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	fcall	.cocofun_5

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)      (inlined)
.L6:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   665      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   667      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   668      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   669                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   670                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   671                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	or	d15,d0,#3
	ld.w	d0,[a5]
	insert	d0,d0,#0,#0,#16
.L196:
	or	d15,d0
	st.w	[a5],d15

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
.L7:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   673      /* read back ENDINIT and wait until it has been set */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a5]
.L197:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L7
.L96:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   978  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   979  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   980  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   981  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   982  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   983      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   984      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   985          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   986          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   987          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   988          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   989          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   990          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   991      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   992  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   993  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   994  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   995  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   996  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   997      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   998      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   999  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1000  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1001  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1002  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1003  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1004      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1005      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1006      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1007      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1008      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1010      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1011      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1012      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1013      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1014      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1015      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1016  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1017      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1018      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1019      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1020      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1021  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1022  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1023  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1024  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1025  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1026      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1027      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1028          __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1029      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1030  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1031  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1033  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1034  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1035      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1036      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1037      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1038      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1039          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1040          Ifx_CPU_DCON0 dcon0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1041          dcon0.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1042          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1043          __mtcr(CPU_DCON0, dcon0.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1044          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1045      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1046      /* Step 2: Call Isync */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1047      __isync();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1048  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1049  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1050  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1051  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1052  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1053      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1054      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1055      cctrl.B.CE = enable;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1056      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1057  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1058  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1060  IFX_INLINE void IfxCpu_setProgramCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1061  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1062      if (enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1063      {                           /* Step 3: Initiate invalidation of current cache contents if any */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1064          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1065          pcon1.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1066          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1067          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1068      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1069  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1070      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1071      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1072      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1073      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1074          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1075          Ifx_CPU_PCON0 pcon0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1076          pcon0.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1077          pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1078          __mtcr(CPU_PCON0, pcon0.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1079          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1080      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1081      /* Step 2: Call Isync */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1082      __isync();
	isync
.L72:
	mfcr	d15,#65052
.L150:
	and	d15,#7
.L112:
	mul	d15,d15,#12
	addsc.a	a4,a4,d15,#0
.L114:
	ld.w	d15,[a4]
	extr.u	d15,d15,#2,#14
.L198:
	xor	d0,d15,#63
	ld.w	d15,[a4]
.L115:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L8
.L199:
	sha	d15,d0,#2
	or	d15,#1
.L200:
	fcall	.cocofun_6

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
.L8:
	sha	d0,#2
.L152:
	or	d15,d0,#2
.L201:
	fcall	.cocofun_6

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L9:
	ld.w	d15,[a4]
.L202:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L9
.L117:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   978  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   979  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   980  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   981  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   982  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   983      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   984      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   985          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   986          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   987          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   988          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   989          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   990          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   991      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   992  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   993  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   994  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   995  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   996  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   997      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   998      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   999  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1000  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1001  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1002  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1003  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1004      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1005      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1006      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1007      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1008      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1010      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1011      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1012      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1013      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1014      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1015      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1016  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1017      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1018      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1019      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1020      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1021  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1022  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1023  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1024  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1025  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1026      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1027      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1028          __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1029      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1030  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1031  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1033  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1034  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1035      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1036      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1037      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1038      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1039          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1040          Ifx_CPU_DCON0 dcon0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1041          dcon0.U       = 0;
	mov	d15,#0
.L153:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1042          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
	insert	d15,d15,#0,#1,#1
.L203:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1043          __mtcr(CPU_DCON0, dcon0.U);
	mtcr	#36928,d15
	isync
.L123:
	ld.w	d15,[a4]
.L154:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L10
.L204:
	or	d15,d0,#1
.L205:
	fcall	.cocofun_6

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)      (inlined)
.L10:
	or	d15,d0,#3
	ld.w	d0,[a4]
	insert	d0,d0,#0,#0,#16
.L206:
	or	d15,d0
	st.w	[a4],d15

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
.L11:
	ld.w	d15,[a4]
.L207:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L11
.L120:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   978  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   979  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   980  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   981  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   982  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   983      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   984      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   985          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   986          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   987          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   988          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   989          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   990          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   991      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   992  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   993  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   994  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   995  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   996  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   997      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   998      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   999  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1000  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1001  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1002  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1003  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1004      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1005      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1006      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1007      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1008      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1010      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1011      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1012      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1013      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1014      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1015      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1016  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1017      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1018      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1019      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1020      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1021  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1022  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1023  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1024  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1025  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1026      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1027      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1028          __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1029      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1030  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1031  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1033  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1034  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1035      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1036      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1037      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1038      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1039          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1040          Ifx_CPU_DCON0 dcon0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1041          dcon0.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1042          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1043          __mtcr(CPU_DCON0, dcon0.U);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1044          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1045      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1046      /* Step 2: Call Isync */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1047      __isync();
	isync
.L107:
	fcall	.cocofun_4
.L208:
	ld.w	d15,[a15]
	insert	d15,d15,#0,#0,#16
.L209:
	or	d2,d15
	st.w	[a2],d2

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L13:
	ld.w	d15,[a15]
.L210:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L13
.L124:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    85  e Password register, inline funtion */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    86      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    87  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    88      /*enable program cache */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    89      IfxCpu_setProgramCache(IFX_CFG_CPU_CSTART_ENABLE_TRICORE2_PCACHE);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    90  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    91      /*enable data cache */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    92      IfxCpu_setDataCache(IFX_CFG_CPU_CSTART_ENABLE_TRICORE2_DCACHE);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    93  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    94      /* Clear the ENDINIT bit in the WDT_CON0 register, inline funtion */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    95      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    96  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    97      /* Load Base Address of Trap Vector Table. */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    98      __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	    99  
	movh.a	a4,#@his(__TRAPTAB_CPU2)
	lea	a4,[a4]@los(__TRAPTAB_CPU2)
	mov.d	d15,a4
.L211:
	mtcr	#65060,d15
	isync
.L212:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   100      /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   101      __mtcr(CPU_BIV, (uint32)__INTTAB(2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   102  
	movh.a	a4,#@his(__INTTAB_CPU2)
	lea	a4,[a4]@los(__INTTAB_CPU2)
	mov.d	d15,a4
.L213:
	mtcr	#65056,d15
	isync
.L214:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   103      /* Load interupt stack pointer. */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   104      __mtcr(CPU_ISP, (uint32)__ISTACK(2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   105  
	movh.a	a4,#@his(__ISTACK2)
	lea	a4,[a4]@los(__ISTACK2)
	mov.d	d15,a4
.L215:
	mtcr	#65064,d15
	isync
.L126:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   614      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   615  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   618  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   619  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   620      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   624  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   626      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   627       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   628       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   630      uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   631      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   635  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   637      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   641  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   643      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   644      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   646      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   647       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   648       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   649      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   650      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   652      return password;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   656  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)
	fcall	.cocofun_4
.L216:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   659      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   660          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   661          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   662                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   663                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   664                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   665      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   667      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   668      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   669                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   670                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   671                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
.L217:
	or	d15,d1,#3
.L218:
	insert	d0,d0,#0,#0,#16
.L219:
	or	d15,d0
	st.w	[a2],d15

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
.L15:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   673      /* read back ENDINIT and wait until it has been set */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L220:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L15
.L127:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   106  t32)__ISTACK(2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   107  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   108      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   109  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   110      /* initialize SDA base pointers */
	 movh.a	 a0,#@his(_SMALL_DATA_)
 lea	 a0,[a0]@los(_SMALL_DATA_)
.L221:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   111      __setareg(a0, __SDATA1(2));
	 movh.a	 a1,#@his(_LITERAL_DATA_)
 lea	 a1,[a1]@los(_LITERAL_DATA_)
.L222:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   112      __setareg(a1, __SDATA2(2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   113  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   114      /* These to be un commented if A8 and A9 are required to be initialized */
	 movh.a	 a8,#@his(_A8_DATA_)
 lea	 a8,[a8]@los(_A8_DATA_)
.L223:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   115      __setareg(a8, __SDATA3(2));
	 movh.a	 a9,#@his(_A9_DATA_)
 lea	 a9,[a9]@los(_A9_DATA_)
.L129:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   116      __setareg(a9, __SDATA4(2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   117      /* Setup the context save area linked list. */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   118  
	movh.a	a2,#@his(__CSA2)
.L155:
	movh.a	a4,#@his(__CSA2_END)
.L224:
	lea	a2,[a2]@los(__CSA2)
	mov.d	d0,a2
.L225:
	lea	a4,[a4]@los(__CSA2_END)
	mov.d	d15,a4
.L226:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944  }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
	sub	d15,d0
	mov.a	a15,#0
.L156:
	sh	d0,d15,#-6
.L158:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)
	mov	d1,#0
.L159:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
	movh	d3,#15

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)      (inlined)
	j	.L16
.L17:
	mov.d	d2,a2
.L227:
	sh	d15,d2,#-12
.L228:
	extr.u	d2,d2,#6,#16
.L229:
	and	d15,d3
.L160:
	or	d2,d15
.L230:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)      (inlined)
	jne	d1,#0,.L18
.L231:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
	mtcr	#65080,d2
	isync
.L232:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */      (inlined)
	j	.L19

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959          if (k == 0)      (inlined)
.L18:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          else
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
	st.w	[a15],d2

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          else      (inlined)
.L19:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))
	add	d15,d0,#-3
.L233:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))      (inlined)
	jne	d15,d1,.L20
.L234:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
	mtcr	#65084,d2
	isync

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          if (k == (numOfCsa - 3U))      (inlined)
.L20:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971          }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973          prvCsa  = (uint32 *)nxtCsa;
	add	d1,#1
	mov.aa	a15,a2
.L235:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          nxtCsa += 16;           /* next CSA */
	lea	a2,[a2]64

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      for (k = 0; k < numOfCsa; k++)      (inlined)
.L16:
	jlt.u	d1,d0,.L17
.L236:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975      }
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977      *prvCsa = 0;
	mov	d15,#0
	st.w	[a15],d15
.L130:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   119  st. */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   121      IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));
	movh.a	a15,#@his(core2_main)
.L157:
	lea	a15,[a15]@los(core2_main)
		ji a15
.L237:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   122  
	ret
.L53:
	
___Core2_start_function_end:
	.size	_Core2_start,___Core2_start_function_end-_Core2_start
.L37:
	; End of function
	
	.sdecl	'.text.IfxCpu_CStart2..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxCpu_CStart2..cocofun_6'
	.align	2
; Function .cocofun_6
.L24:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d3,[a4]
	insert	d3,d3,#0,#0,#16
.L256:
	or	d15,d3
	st.w	[a4],d15
.L151:
	fret
.L52:
	; End of function
	.sdecl	'.text.IfxCpu_CStart2..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxCpu_CStart2..cocofun_5'
	.align	2
; Function .cocofun_5
.L26:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	ld.w	d3,[a5]
	insert	d3,d3,#0,#0,#16
.L251:
	or	d15,d3
	st.w	[a5],d15
.L146:
	fret
.L47:
	; End of function
	.sdecl	'.text.IfxCpu_CStart2..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxCpu_CStart2..cocofun_4'
	.align	2
; Function .cocofun_4
.L28:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	ld.w	d15,[a15]
.L242:

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L12
.L243:
	ld.w	d0,[a15]
.L244:
	or	d15,d1,#1
.L245:
	insert	d0,d0,#0,#0,#16
.L246:
	or	d15,d0
	st.w	[a2],d15

; D:\WorkSpace\Tasking\Tasking_TC375_MulitiCANFD\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
.L12:
	fret
.L42:
	; End of function
	.calls	'__INDIRECT__','core2_main'
	.calls	'_Core2_start','.cocofun_5'
	.calls	'_Core2_start','.cocofun_6'
	.calls	'_Core2_start','.cocofun_4'
	.calls	'_Core2_start','',0
	.calls	'.cocofun_6','',0
	.calls	'.cocofun_5','',0
	.extern	__ISTACK2
	.extern	__INTTAB_CPU2
	.extern	__TRAPTAB_CPU2
	.extern	__CSA2
	.extern	__CSA2_END
	.extern	core2_main
	.extern	__INDIRECT__
	.calls	'.cocofun_4','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L30:
	.word	95719
	.half	3
	.word	.L31
	.byte	4
.L29:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\Debug\\',0,12,1
	.word	.L32
	.byte	2,1,1,3
	.word	168
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	171
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	216
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	228
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	340
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	314
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	346
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	346
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	314
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,208,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,12,4,135,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	471
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8
.L61:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,217,9,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,4,143,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	646
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,233,9,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,4,151,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	912
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,210,16,25,12,13
	.byte	'CON0',0
	.word	567
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	872
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1103
	.byte	4,2,35,8,0,14
	.word	1143
	.byte	3
	.word	1206
.L63:
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1
.L66:
	.byte	5
	.byte	'watchdog',0,3,164,4,65
	.word	1211
.L68:
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	624
.L70:
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	624
	.byte	6,0
.L99:
	.byte	4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1
.L101:
	.byte	5
	.byte	'watchdog',0,3,144,5,63
	.word	1211
.L103:
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	624
.L105:
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	624
	.byte	6,0
.L56:
	.byte	8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	624
	.byte	1,1
.L58:
	.byte	5
	.byte	'watchdog',0,3,220,4,74
	.word	1211
.L60:
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	624
	.byte	1,1,6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,145,3,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1621
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,171,2,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1937
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2508
	.byte	4,2,35,0,0,15,4
	.word	607
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2637
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2852
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3067
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3284
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,141,1,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3504
	.byte	4,2,35,0,0,15,24
	.word	607
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,212,3,16,4,11
	.byte	'PD0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	607
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	607
	.byte	2,0,2,35,3,0,12,6,195,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3828
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,233,3,16,4,11
	.byte	'PD8',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	607
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	607
	.byte	2,0,2,35,3,0,12,6,203,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4132
	.byte	4,2,35,0,0,15,8
	.word	607
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4457
	.byte	4,2,35,0,0,15,12
	.word	607
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4797
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5163
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,230,2,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5527
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5674
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5843
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6015
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	624
	.byte	12,0,2,35,2,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6190
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6364
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6538
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6714
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,208,2,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6870
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7203
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,6,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	607
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7551
	.byte	4,2,35,0,0,15,32
	.word	7831
	.byte	16,7,0,15,56
	.word	607
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7889
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7976
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1897
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2468
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2588
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2628
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2812
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3027
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3244
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3464
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2628
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3779
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3819
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4092
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4408
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4448
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4748
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4788
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5123
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5487
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4448
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5634
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5803
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5975
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6150
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6324
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6498
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6674
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6830
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7163
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7511
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4448
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7871
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7880
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7936
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8503
	.byte	4,3,35,252,1,0,14
	.word	8543
	.byte	3
	.word	9113
	.byte	17,5,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,169,5,17,1,1,5
	.byte	'port',0,5,169,5,44
	.word	9118
	.byte	5
	.byte	'pinIndex',0,5,169,5,56
	.word	607
	.byte	5
	.byte	'action',0,5,169,5,80
	.word	9123
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,7,205,13,17,1,1,5
	.byte	'timeSec',0,7,205,13,40
	.word	228
	.byte	19,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,7,128,13,20
	.word	228
	.byte	1,1,6,0,17,9,155,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_none',0,3,0
.L82:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,8,229,6,31
	.word	9388
	.byte	1,1
.L84:
	.byte	6,0
.L54:
	.byte	7
	.byte	'unsigned long int',0,4,7
.L138:
	.byte	3
	.word	9524
.L128:
	.byte	4
	.byte	'IfxCpu_initCSA',0,3,8,179,7,17,1,1
.L131:
	.byte	5
	.byte	'csaBegin',0,8,179,7,40
	.word	9545
.L133:
	.byte	5
	.byte	'csaEnd',0,8,179,7,58
	.word	9545
.L135:
	.byte	6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,227,5,20
	.word	607
	.byte	1,1,6,0
.L106:
	.byte	4
	.byte	'IfxCpu_setDataCache',0,3,8,137,8,17,1,1
.L108:
	.byte	5
	.byte	'enable',0,8,137,8,45
	.word	607
.L110:
	.byte	19
.L119:
	.byte	6,6,6,6,6,0,0
.L71:
	.byte	4
	.byte	'IfxCpu_setProgramCache',0,3,8,164,8,17,1,1
.L73:
	.byte	5
	.byte	'enable',0,8,164,8,48
	.word	607
.L75:
	.byte	19
.L76:
	.byte	6
.L80:
	.byte	19
.L95:
	.byte	6,0,6,6,6,6,0,0,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,249,6,19
	.word	9524
	.byte	1,1,5
	.byte	'address',0,8,249,6,55
	.word	624
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,150,7,20
	.word	607
	.byte	1,1,5
	.byte	'address',0,8,150,7,70
	.word	624
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,132,9,17,1,1,5
	.byte	'address',0,8,132,9,56
	.word	9524
	.byte	5
	.byte	'count',0,8,132,9,72
	.word	9524
	.byte	19,6,0,0,20
	.word	448
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	9971
	.byte	0,14
	.word	432
	.byte	3
	.word	432
	.byte	23
	.byte	'__cmpswapw',0
	.word	10013
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	10018
	.byte	24
	.byte	'value',0
	.word	432
	.byte	24
	.byte	'compare',0
	.word	432
	.byte	0,21
	.byte	'__mtcr',0,1,1,1,1,22
	.word	448
	.byte	22
	.word	448
	.byte	0,14
	.word	448
	.byte	23
	.byte	'__mfcr',0
	.word	10098
	.byte	1,1,1,1,22
	.word	448
	.byte	0,25
	.byte	'__isync',0,1,1,1,1,25
	.byte	'__dsync',0,1,1,1,1,26
	.word	176
	.byte	27
	.word	202
	.byte	6,0,26
	.word	237
	.byte	27
	.word	269
	.byte	6,0,26
	.word	282
	.byte	6,0,26
	.word	351
	.byte	27
	.word	370
	.byte	6,0,26
	.word	386
	.byte	27
	.word	401
	.byte	27
	.word	415
	.byte	6,0,26
	.word	1216
	.byte	27
	.word	1256
	.byte	27
	.word	1274
	.byte	6,0,26
	.word	1294
	.byte	27
	.word	1337
	.byte	6,0,26
	.word	1357
	.byte	27
	.word	1395
	.byte	27
	.word	1413
	.byte	6,0,26
	.word	1433
	.byte	27
	.word	1474
	.byte	6,0,26
	.word	1494
	.byte	27
	.word	1545
	.byte	6,0,26
	.word	1565
	.byte	6,0,26
	.word	9226
	.byte	27
	.word	9254
	.byte	27
	.word	9268
	.byte	27
	.word	9286
	.byte	6,0,26
	.word	9304
	.byte	27
	.word	9327
	.byte	19,28
	.word	9348
	.byte	29
	.word	9386
	.byte	0,6,0,0,26
	.word	9348
	.byte	6,0,26
	.word	9490
	.byte	6,0,26
	.word	9550
	.byte	27
	.word	9573
	.byte	27
	.word	9591
	.byte	6,0,26
	.word	9609
	.byte	6,0,26
	.word	9651
	.byte	27
	.word	9679
	.byte	19,19,28
	.word	1357
	.byte	27
	.word	1395
	.byte	27
	.word	1413
	.byte	29
	.word	1431
	.byte	0,0,28
	.word	9490
	.byte	29
	.word	9522
	.byte	0,6,28
	.word	1494
	.byte	27
	.word	1545
	.byte	29
	.word	1563
	.byte	0,6,28
	.word	1216
	.byte	27
	.word	1256
	.byte	27
	.word	1274
	.byte	29
	.word	1292
	.byte	0,6,6,0,0,26
	.word	9703
	.byte	27
	.word	9734
	.byte	19,6,19,19,28
	.word	1357
	.byte	27
	.word	1395
	.byte	27
	.word	1413
	.byte	29
	.word	1431
	.byte	0,0,28
	.word	9490
	.byte	29
	.word	9522
	.byte	0,28
	.word	1494
	.byte	27
	.word	1545
	.byte	29
	.word	1563
	.byte	0,28
	.word	1216
	.byte	27
	.word	1256
	.byte	27
	.word	1274
	.byte	29
	.word	1292
	.byte	0,0,6,6,6,6,0,0,26
	.word	9761
	.byte	27
	.word	9802
	.byte	6,0,26
	.word	9821
	.byte	27
	.word	9876
	.byte	6,0,26
	.word	9895
	.byte	27
	.word	9935
	.byte	27
	.word	9952
	.byte	19,6,0,0,10
	.byte	'_Ifx_CPU_PCON1_Bits',0,10,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	30,0,2,35,0,0
.L78:
	.byte	12,10,188,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10595
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,10,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	29,0,2,35,0,0
.L88:
	.byte	12,10,244,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10718
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PCON0_Bits',0,10,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	30,0,2,35,0,0
.L97:
	.byte	12,10,180,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10828
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DCON0_Bits',0,10,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	30,0,2,35,0,0
.L121:
	.byte	12,10,204,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10956
	.byte	4,2,35,0,0,30
	.byte	'core2_main',0,11,54,17,1,1,1,1,31
	.byte	'__INDIRECT__',0,11,1,1,1,1,1,7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,11,1,1
	.word	11123
	.byte	32
	.byte	'__size_t',0,11,1,1
	.word	432
	.byte	32
	.byte	'__ptrdiff_t',0,11,1,1
	.word	448
	.byte	33,1,3
	.word	11191
	.byte	32
	.byte	'__codeptr',0,11,1,1
	.word	11193
	.byte	17,12,254,9,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,12,131,10,3
	.word	11216
	.byte	32
	.byte	'boolean',0,13,104,29
	.word	607
	.byte	32
	.byte	'uint8',0,13,108,29
	.word	607
	.byte	32
	.byte	'uint16',0,13,112,29
	.word	624
	.byte	32
	.byte	'uint32',0,13,116,29
	.word	9524
	.byte	32
	.byte	'uint64',0,13,121,29
	.word	314
	.byte	32
	.byte	'sint16',0,13,129,1,29
	.word	11123
	.byte	7
	.byte	'long int',0,4,5,32
	.byte	'sint32',0,13,134,1,29
	.word	11429
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,13,141,1,29
	.word	11457
	.byte	32
	.byte	'float32',0,13,170,1,29
	.word	228
	.byte	32
	.byte	'pvoid',0,14,54,28
	.word	346
	.byte	32
	.byte	'Ifx_TickTime',0,14,76,28
	.word	11457
	.byte	17,14,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,32
	.byte	'Ifx_RxSel',0,14,137,1,3
	.word	11542
	.byte	32
	.byte	'Ifx_UReg_8Bit',0,15,96,24
	.word	607
	.byte	32
	.byte	'Ifx_UReg_32Bit',0,15,98,24
	.word	432
	.byte	32
	.byte	'Ifx_SReg_32Bit',0,15,101,24
	.word	448
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	11747
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	12306
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	12385
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	12945
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	13026
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	607
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	607
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	607
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	13252
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	607
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	13525
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,202,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	432
	.byte	10,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,214,1,3
	.word	13851
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,217,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,234,1,3
	.word	14129
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,237,1,16,4,11
	.byte	'LOTHR',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	432
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,246,1,3
	.word	14498
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,249,1,16,4,11
	.byte	'GETHDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,129,2,3
	.word	14678
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,132,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,136,2,3
	.word	14850
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,139,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,143,2,3
	.word	14950
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,146,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,150,2,3
	.word	15050
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,153,2,16,4,11
	.byte	'CHREV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	607
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	607
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,164,2,3
	.word	15150
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,167,2,16,4,11
	.byte	'LOWER',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	624
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,179,2,3
	.word	15353
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,182,2,16,4,11
	.byte	'RESULT',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,186,2,3
	.word	15585
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,189,2,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0_Bits',0,4,195,2,3
	.word	15687
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,198,2,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1_Bits',0,4,207,2,3
	.word	15815
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	607
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	607
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	432
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	607
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	607
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,229,2,3
	.word	16004
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,232,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,254,2,3
	.word	16368
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,129,3,16,4,11
	.byte	'INTF0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,140,3,3
	.word	16807
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,143,3,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_EISR_Bits',0,4,153,3,3
	.word	17018
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,156,3,16,4,11
	.byte	'POL',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	624
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	624
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,166,3,3
	.word	17194
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,169,3,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,175,3,3
	.word	17388
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,178,3,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	624
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	432
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,183,3,3
	.word	17523
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,186,3,16,4,11
	.byte	'ARI',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,191,3,3
	.word	17659
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,194,3,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	607
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	607
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	607
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,205,3,3
	.word	17770
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,208,3,16,4,11
	.byte	'STEP',0,2
	.word	624
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	607
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	624
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,216,3,3
	.word	17988
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,219,3,16,4,11
	.byte	'FS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,239,3,3
	.word	18151
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,242,3,16,4,11
	.byte	'MODREV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,247,3,3
	.word	18487
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,250,3,16,4,11
	.byte	'IPEN00',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,146,4,3
	.word	18594
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,149,4,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,154,4,3
	.word	19046
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,157,4,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,164,4,3
	.word	19145
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,167,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	432
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	624
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,177,4,3
	.word	19295
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,180,4,16,4,11
	.byte	'SEED',0,4
	.word	432
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,187,4,3
	.word	19533
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,190,4,16,4,11
	.byte	'LENGTH',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,194,4,3
	.word	19694
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,197,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,200,4,3
	.word	19800
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,203,4,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	624
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	624
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,211,4,3
	.word	19886
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,214,4,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	624
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	624
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,222,4,3
	.word	20067
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,225,4,16,4,11
	.byte	'LCLT0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	624
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,241,4,3
	.word	20248
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,244,4,16,4,11
	.byte	'DEPT',0,1
	.word	607
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	624
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,249,4,3
	.word	20592
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,252,4,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	624
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	624
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,132,5,3
	.word	20703
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,135,5,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	607
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	607
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	607
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,156,5,3
	.word	20861
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,159,5,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,164,5,3
	.word	21272
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,167,5,16,4,11
	.byte	'CSEL0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,183,5,3
	.word	21373
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,186,5,16,4,11
	.byte	'OVEN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,195,5,3
	.word	21706
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,198,5,16,4,11
	.byte	'PDIS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,203,5,3
	.word	21908
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,206,5,16,4,11
	.byte	'PD0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,213,5,3
	.word	22019
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,216,5,16,4,11
	.byte	'PDR0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,227,5,3
	.word	22152
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,230,5,16,4,11
	.byte	'DIVBY',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	624
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	5,0,2,35,3,0,32
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,241,5,3
	.word	22355
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,244,5,16,4,11
	.byte	'K2DIV',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,250,5,3
	.word	22595
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,253,5,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,135,6,3
	.word	22739
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,138,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,144,6,3
	.word	22961
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,147,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,153,6,3
	.word	23097
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,156,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,162,6,3
	.word	23233
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,165,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,171,6,3
	.word	23369
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,174,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,180,6,3
	.word	23505
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,183,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,189,6,3
	.word	23641
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,192,6,16,4,11
	.byte	'CPU0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	624
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,206,6,3
	.word	23777
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,209,6,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	607
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,220,6,3
	.word	24049
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,223,6,16,4,11
	.byte	'LJTEN',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	624
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,242,6,3
	.word	24294
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,245,6,16,4,11
	.byte	'LJTCV',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	624
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,250,6,3
	.word	24682
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,253,6,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	607
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,136,7,3
	.word	24800
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,139,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	607
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	624
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,151,7,3
	.word	25043
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,154,7,16,4,11
	.byte	'ESR0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	624
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,168,7,3
	.word	25310
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,171,7,16,4,11
	.byte	'FRTO',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	624
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,185,7,3
	.word	25590
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,188,7,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,191,7,3
	.word	25895
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,194,7,16,4,11
	.byte	'ESR0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,224,7,3
	.word	25976
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,227,7,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,233,7,3
	.word	26544
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,236,7,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,245,7,3
	.word	26674
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,248,7,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SEISR_Bits',0,4,130,8,3
	.word	26865
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,133,8,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_STCON_Bits',0,4,140,8,3
	.word	27043
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,143,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,146,8,3
	.word	27194
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,149,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,152,8,3
	.word	27266
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,155,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,158,8,3
	.word	27338
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,161,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,164,8,3
	.word	27410
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,167,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,170,8,3
	.word	27482
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,173,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,176,8,3
	.word	27554
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,179,8,16,4,11
	.byte	'HWCFG',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	607
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	607
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,195,8,3
	.word	27626
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,198,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	624
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,203,8,3
	.word	27955
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,206,8,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,213,8,3
	.word	28075
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,216,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,228,8,3
	.word	28245
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,231,8,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	624
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,244,8,3
	.word	28508
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,247,8,16,4,11
	.byte	'K2DIV',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,251,8,3
	.word	28787
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,254,8,16,4,11
	.byte	'MODCFG',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,130,9,3
	.word	28891
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,133,9,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,143,9,3
	.word	28997
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,146,9,16,4,11
	.byte	'ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,153,9,3
	.word	29220
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,156,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	607
	.byte	4,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,175,9,3
	.word	29368
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,178,9,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,185,9,3
	.word	29795
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,188,9,16,4,11
	.byte	'ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,195,9,3
	.word	29968
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,198,9,16,4,11
	.byte	'ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,205,9,3
	.word	30116
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,214,9,3
	.word	471
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,230,9,3
	.word	646
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,246,9,3
	.word	912
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,249,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,255,9,3
	.word	30366
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,130,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,143,10,3
	.word	30492
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,146,10,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,159,10,3
	.word	30744
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11747
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN00',0,4,172,10,3
	.word	30963
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12306
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01',0,4,180,10,3
	.word	31028
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12385
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN10',0,4,188,10,3
	.word	31093
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12945
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11',0,4,196,10,3
	.word	31158
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13026
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,204,10,3
	.word	31223
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13252
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,212,10,3
	.word	31288
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13525
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,220,10,3
	.word	31353
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,228,10,3
	.word	31418
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14129
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,236,10,3
	.word	31483
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14498
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,244,10,3
	.word	31548
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14678
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,252,10,3
	.word	31613
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14850
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,132,11,3
	.word	31678
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14950
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,140,11,3
	.word	31743
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15050
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8',0,4,148,11,3
	.word	31808
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15150
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,156,11,3
	.word	31873
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15353
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCLIM',0,4,164,11,3
	.word	31937
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15585
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT',0,4,172,11,3
	.word	32002
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15687
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0',0,4,180,11,3
	.word	32068
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15815
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1',0,4,188,11,3
	.word	32132
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16004
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,196,11,3
	.word	32196
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16368
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFILT',0,4,204,11,3
	.word	32258
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16807
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,212,11,3
	.word	32322
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17018
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EISR',0,4,220,11,3
	.word	32384
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17194
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,228,11,3
	.word	32446
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17388
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSSW',0,4,236,11,3
	.word	32508
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17523
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,244,11,3
	.word	32571
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17659
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,252,11,3
	.word	32644
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17770
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,132,12,3
	.word	32709
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17988
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,140,12,3
	.word	32773
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18151
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,148,12,3
	.word	32834
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18487
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,156,12,3
	.word	32895
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18594
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,164,12,3
	.word	32955
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19046
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,172,12,3
	.word	33017
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,180,12,3
	.word	33077
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19295
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,188,12,3
	.word	33139
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19533
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,196,12,3
	.word	33207
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19694
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,204,12,3
	.word	33275
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19800
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,212,12,3
	.word	33343
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19886
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON0',0,4,220,12,3
	.word	33411
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20067
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON1',0,4,228,12,3
	.word	33476
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20248
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	33541
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20592
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	33606
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20703
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	33669
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20861
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	33730
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21272
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	33794
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21373
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	33855
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21706
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	33919
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21908
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	33986
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22019
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	34049
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22152
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	34110
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22355
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON0',0,4,188,13,3
	.word	34172
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22595
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1',0,4,196,13,3
	.word	34240
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22739
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,204,13,3
	.word	34308
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22961
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0',0,4,212,13,3
	.word	34376
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23097
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1',0,4,220,13,3
	.word	34440
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23233
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2',0,4,228,13,3
	.word	34504
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23369
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3',0,4,236,13,3
	.word	34568
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23505
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4',0,4,244,13,3
	.word	34632
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23641
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5',0,4,252,13,3
	.word	34696
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23777
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSTAT0',0,4,132,14,3
	.word	34760
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24049
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,140,14,3
	.word	34825
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24294
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR0',0,4,148,14,3
	.word	34890
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24682
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR1',0,4,156,14,3
	.word	34956
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24800
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR2',0,4,164,14,3
	.word	35022
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25043
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR3',0,4,172,14,3
	.word	35088
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25310
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,180,14,3
	.word	35154
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25590
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,188,14,3
	.word	35218
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25895
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3',0,4,196,14,3
	.word	35283
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25976
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,204,14,3
	.word	35348
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26544
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0',0,4,212,14,3
	.word	35413
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26674
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1',0,4,220,14,3
	.word	35478
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26865
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEISR',0,4,228,14,3
	.word	35543
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27043
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STCON',0,4,236,14,3
	.word	35606
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27194
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1',0,4,244,14,3
	.word	35669
	.byte	12,4,247,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27266
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2',0,4,252,14,3
	.word	35733
	.byte	12,4,255,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27338
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3',0,4,132,15,3
	.word	35797
	.byte	12,4,135,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27410
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4',0,4,140,15,3
	.word	35861
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27482
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5',0,4,148,15,3
	.word	35925
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27554
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6',0,4,156,15,3
	.word	35989
	.byte	12,4,159,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27626
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,164,15,3
	.word	36053
	.byte	12,4,167,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27955
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWAPCTRL',0,4,172,15,3
	.word	36117
	.byte	12,4,175,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28075
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,180,15,3
	.word	36183
	.byte	12,4,183,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28245
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,188,15,3
	.word	36249
	.byte	12,4,191,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28508
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,196,15,3
	.word	36313
	.byte	12,4,199,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28787
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,204,15,3
	.word	36381
	.byte	12,4,207,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28891
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,212,15,3
	.word	36449
	.byte	12,4,215,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28997
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,220,15,3
	.word	36517
	.byte	12,4,223,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29220
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,228,15,3
	.word	36585
	.byte	12,4,231,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29368
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS0',0,4,236,15,3
	.word	36650
	.byte	12,4,239,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29795
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS1',0,4,244,15,3
	.word	36716
	.byte	12,4,247,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29968
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,252,15,3
	.word	36782
	.byte	12,4,255,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30116
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,132,16,3
	.word	36847
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,140,16,3
	.word	567
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,148,16,3
	.word	872
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,156,16,3
	.word	1103
	.byte	12,4,159,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30366
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,164,16,3
	.word	36998
	.byte	12,4,167,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30492
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,172,16,3
	.word	37065
	.byte	12,4,175,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30744
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,180,16,3
	.word	37132
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,192,16,25,4,13
	.byte	'ESRCFGX',0
	.word	32571
	.byte	4,2,35,0,0,14
	.word	37197
	.byte	32
	.byte	'Ifx_SCU_ESRCFGX',0,4,195,16,3
	.word	37238
	.byte	14
	.word	1143
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,215,16,3
	.word	37268
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,230,16,25,12,13
	.byte	'CON0',0
	.word	36998
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	37065
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	37132
	.byte	4,2,35,8,0,14
	.word	37297
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,235,16,3
	.word	37358
	.byte	15,8
	.word	37197
	.byte	16,1,0,14
	.word	37385
	.byte	15,16
	.word	607
	.byte	16,15,0,15,20
	.word	607
	.byte	16,19,0,15,36
	.word	607
	.byte	16,35,0,15,16
	.word	32196
	.byte	16,3,0,15,16
	.word	32955
	.byte	16,3,0,15,36
	.word	1143
	.byte	16,2,0,14
	.word	37444
	.byte	15,44
	.word	607
	.byte	16,43,0,14
	.word	37297
	.byte	15,176,2
	.word	607
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,4,250,16,25,128,8,13
	.byte	'reserved_0',0
	.word	4448
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	32895
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2628
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	33730
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	36517
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	36313
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	36381
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	36449
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	34308
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	34172
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	34240
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	31288
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	31353
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	32773
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	32709
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	31418
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	31483
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	31548
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	31613
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	35348
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2628
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	35154
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	31223
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	36183
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	35218
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	35283
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2628
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	37394
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	32644
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	36249
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	31678
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	31743
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	31808
	.byte	4,3,35,136,1,13
	.byte	'reserved_8C',0
	.word	37399
	.byte	16,3,35,140,1,13
	.byte	'PDR',0
	.word	34049
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	33077
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	33794
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	33669
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	33017
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	37399
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	36053
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	35606
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	34376
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	34440
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	34504
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	34568
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	34632
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	34696
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2628
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	34760
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	34825
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	37399
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	32446
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	32508
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	32002
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	31937
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	37408
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	36716
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	36847
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	36782
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	36585
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	36650
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	33411
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	33476
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	33541
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	31873
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	33606
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2628
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	36117
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	37408
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	33139
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	33207
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	33275
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	33343
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	37399
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	35669
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	35733
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	33986
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4448
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	34890
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	34956
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	35022
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	35088
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	3819
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	35797
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	35861
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	35925
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	35989
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	37399
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	33919
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	33855
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	37417
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	32258
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	37426
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	32322
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	32834
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	34110
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	37435
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	37399
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	37453
	.byte	36,3,35,204,4,13
	.byte	'reserved_270',0
	.word	37458
	.byte	44,3,35,240,4,13
	.byte	'EICON0',0
	.word	32068
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	32132
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	32384
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	37467
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	35413
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	35478
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	35543
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	37472
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	31158
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	31093
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	31028
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	30963
	.byte	4,3,35,252,7,0,14
	.word	37483
	.byte	32
	.byte	'Ifx_SCU',0,4,237,17,3
	.word	39548
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,10,68,16,4,11
	.byte	'ADDR',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,10,71,3
	.word	39570
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,10,74,16,4,11
	.byte	'VSS',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,10,78,3
	.word	39631
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,10,81,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	455
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	455
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,10,87,3
	.word	39710
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,10,90,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	455
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,10,95,3
	.word	39848
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,10,98,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	455
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,10,106,3
	.word	39969
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,10,109,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,10,113,3
	.word	40145
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,10,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,10,120,3
	.word	40231
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,10,123,16,4,11
	.byte	'CM',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	455
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	455
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	455
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,10,131,1,3
	.word	40320
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,10,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,10,140,1,3
	.word	40467
	.byte	32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,10,147,1,3
	.word	10718
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,10,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,10,154,1,3
	.word	40626
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,10,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,10,161,1,3
	.word	40721
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,10,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	455
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,10,169,1,3
	.word	40816
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,10,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	455
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,10,176,1,3
	.word	40926
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,10,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,10,187,1,3
	.word	41018
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,10,190,1,16,4,11
	.byte	'CID',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,10,194,1,3
	.word	41172
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,10,197,1,16,4,11
	.byte	'DATA',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,10,200,1,3
	.word	41266
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,10,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,10,214,1,3
	.word	41329
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,10,217,1,16,4,11
	.byte	'DE',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	455
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	455
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,10,228,1,3
	.word	41555
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,10,231,1,16,4,11
	.byte	'DTA',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,10,235,1,3
	.word	41770
	.byte	32
	.byte	'Ifx_CPU_DCON0_Bits',0,10,243,1,3
	.word	10956
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,10,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,10,250,1,3
	.word	41892
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,10,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	455
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,10,129,2,3
	.word	41993
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,10,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,10,135,2,3
	.word	42086
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,10,138,2,16,4,11
	.byte	'TA',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,10,141,2,3
	.word	42166
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,10,144,2,16,4,11
	.byte	'IED',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	455
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,10,159,2,3
	.word	42235
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,10,162,2,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,10,196,2,3
	.word	42519
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,10,199,2,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,10,233,2,3
	.word	43110
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,10,236,2,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,10,142,3,3
	.word	43701
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,10,145,3,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,10,179,3,3
	.word	44302
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,10,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,10,186,3,3
	.word	44903
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,10,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,10,193,3,3
	.word	45018
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,10,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,10,200,3,3
	.word	45133
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,10,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	455
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,10,207,3,3
	.word	45226
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,10,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,10,214,3,3
	.word	45318
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,10,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,10,221,3,3
	.word	45413
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,10,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	455
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,10,228,3,3
	.word	45508
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,10,231,3,16,4,11
	.byte	'SRE',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	455
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	455
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,10,250,3,3
	.word	45600
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,10,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,10,133,4,3
	.word	45939
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,10,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,10,141,4,3
	.word	46093
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,10,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	455
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	455
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	455
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,10,154,4,3
	.word	46199
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,10,157,4,16,4,11
	.byte	'STALL',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	455
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,10,165,4,3
	.word	46417
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,10,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	455
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	455
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	455
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	455
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	455
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	455
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,10,182,4,3
	.word	46608
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,10,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,10,198,4,3
	.word	46908
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,10,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,10,205,4,3
	.word	47213
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,10,208,4,16,4,11
	.byte	'TST',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	455
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,10,227,4,3
	.word	47314
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,230,4,16,4,11
	.byte	'OPC',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,237,4,3
	.word	47663
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,10,240,4,16,4,11
	.byte	'PC',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,10,243,4,3
	.word	47823
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,249,4,3
	.word	47904
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,255,4,3
	.word	47991
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,133,5,3
	.word	48078
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,10,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,10,140,5,3
	.word	48165
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,10,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	455
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,10,150,5,3
	.word	48256
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,10,153,5,16,4,11
	.byte	'ISP',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,10,156,5,3
	.word	48398
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,10,159,5,16,4,11
	.byte	'RST',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	455
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0_Bits',0,10,164,5,3
	.word	48464
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,10,167,5,16,4,11
	.byte	'RST',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1_Bits',0,10,171,5,3
	.word	48575
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,10,174,5,16,4,11
	.byte	'CLR',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,10,178,5,3
	.word	48667
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,10,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,10,186,5,3
	.word	48763
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,10,189,5,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,10,223,5,3
	.word	48869
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,10,226,5,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,10,132,6,3
	.word	49452
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,10,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,10,139,6,3
	.word	50045
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,10,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,10,146,6,3
	.word	50138
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,10,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,10,153,6,3
	.word	50231
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,10,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL_Bits',0,10,159,6,3
	.word	50324
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,10,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,10,166,6,3
	.word	50397
	.byte	32
	.byte	'Ifx_CPU_PCON0_Bits',0,10,174,6,3
	.word	10828
	.byte	32
	.byte	'Ifx_CPU_PCON1_Bits',0,10,182,6,3
	.word	10595
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,10,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,10,189,6,3
	.word	50538
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,10,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	455
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,10,200,6,3
	.word	50639
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,10,203,6,16,4,11
	.byte	'TA',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,10,206,6,3
	.word	50792
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,10,209,6,16,4,11
	.byte	'IED',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	455
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,10,224,6,3
	.word	50861
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,10,227,6,16,4,11
	.byte	'DAC',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,10,231,6,3
	.word	51145
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,10,234,6,16,4,11
	.byte	'CAC',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,10,238,6,3
	.word	51236
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,10,241,6,16,4,11
	.byte	'PSI',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,10,245,6,3
	.word	51327
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,10,248,6,16,4,11
	.byte	'FRE',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,10,130,7,3
	.word	51418
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,10,133,7,16,4,11
	.byte	'CDC',0,4
	.word	455
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	455
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	455
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,10,145,7,3
	.word	51621
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,10,148,7,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,10,182,7,3
	.word	51826
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,10,185,7,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,10,219,7,3
	.word	52393
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,10,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA_Bits',0,10,226,7,3
	.word	52970
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,10,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA_Bits',0,10,233,7,3
	.word	53065
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,10,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	455
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,10,242,7,3
	.word	53160
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,10,245,7,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,10,151,8,3
	.word	53288
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,10,154,8,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,10,188,8,3
	.word	53871
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,10,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,10,196,8,3
	.word	54464
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,10,199,8,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,10,233,8,3
	.word	54582
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,10,236,8,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,10,142,9,3
	.word	55171
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,10,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,10,153,9,3
	.word	55770
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,10,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,10,171,9,3
	.word	55924
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,10,174,9,16,4,11
	.byte	'ASI',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,10,178,9,3
	.word	56223
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,10,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,10,189,9,3
	.word	56321
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,10,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,10,196,9,3
	.word	56493
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,10,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	455
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,10,203,9,3
	.word	56622
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,10,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	455
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,10,211,9,3
	.word	56752
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,10,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	455
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,10,218,9,3
	.word	56904
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,10,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	455
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,10,226,9,3
	.word	57031
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,10,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	455
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,10,233,9,3
	.word	57180
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,10,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	455
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	455
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,10,246,9,3
	.word	57294
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,10,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,10,252,9,3
	.word	57538
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,10,255,9,16,4,11
	.byte	'T0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,10,138,10,3
	.word	57618
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,10,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,10,144,10,3
	.word	57813
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,10,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	455
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,10,164,10,3
	.word	57886
	.byte	12,10,172,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39570
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,10,177,10,3
	.word	58204
	.byte	12,10,180,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39631
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,10,185,10,3
	.word	58263
	.byte	12,10,188,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39710
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK',0,10,193,10,3
	.word	58324
	.byte	12,10,196,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39848
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR',0,10,201,10,3
	.word	58391
	.byte	12,10,204,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39969
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR',0,10,209,10,3
	.word	58457
	.byte	12,10,212,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,10,217,10,3
	.word	58523
	.byte	12,10,220,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40231
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,10,225,10,3
	.word	58584
	.byte	12,10,228,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40320
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,10,233,10,3
	.word	58646
	.byte	12,10,236,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40467
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,10,241,10,3
	.word	58709
	.byte	32
	.byte	'Ifx_CPU_CORE_ID',0,10,249,10,3
	.word	10788
	.byte	12,10,252,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40626
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,10,129,11,3
	.word	58798
	.byte	12,10,132,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40721
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,10,137,11,3
	.word	58861
	.byte	12,10,140,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40816
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,10,145,11,3
	.word	58924
	.byte	12,10,148,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40926
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,10,153,11,3
	.word	58988
	.byte	12,10,156,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41018
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,10,161,11,3
	.word	59050
	.byte	12,10,164,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41172
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,10,169,11,3
	.word	59113
	.byte	12,10,172,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41266
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,10,177,11,3
	.word	59177
	.byte	12,10,180,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41329
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,10,185,11,3
	.word	59236
	.byte	12,10,188,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41555
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,10,193,11,3
	.word	59298
	.byte	12,10,196,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41770
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,10,201,11,3
	.word	59361
	.byte	32
	.byte	'Ifx_CPU_DCON0',0,10,209,11,3
	.word	11044
	.byte	12,10,212,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41892
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,10,217,11,3
	.word	59448
	.byte	12,10,220,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41993
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,10,225,11,3
	.word	59511
	.byte	12,10,228,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42086
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,10,233,11,3
	.word	59572
	.byte	12,10,236,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42166
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,10,241,11,3
	.word	59635
	.byte	12,10,244,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42235
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,10,249,11,3
	.word	59698
	.byte	12,10,252,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42519
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,10,129,12,3
	.word	59761
	.byte	12,10,132,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43110
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,10,137,12,3
	.word	59841
	.byte	12,10,140,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43701
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,10,145,12,3
	.word	59921
	.byte	12,10,148,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44302
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,10,153,12,3
	.word	60001
	.byte	12,10,156,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44903
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,10,161,12,3
	.word	60081
	.byte	12,10,164,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45018
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,10,169,12,3
	.word	60155
	.byte	12,10,172,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45133
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,10,177,12,3
	.word	60229
	.byte	12,10,180,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45226
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,10,185,12,3
	.word	60290
	.byte	12,10,188,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45318
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,10,193,12,3
	.word	60352
	.byte	12,10,196,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45413
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,10,201,12,3
	.word	60415
	.byte	12,10,204,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45508
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,10,209,12,3
	.word	60478
	.byte	12,10,212,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45600
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,10,217,12,3
	.word	60540
	.byte	12,10,220,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45939
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,10,225,12,3
	.word	60602
	.byte	12,10,228,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46093
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,10,233,12,3
	.word	60665
	.byte	12,10,236,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46199
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0',0,10,241,12,3
	.word	60726
	.byte	12,10,244,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46417
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1',0,10,249,12,3
	.word	60793
	.byte	12,10,252,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46608
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2',0,10,129,13,3
	.word	60860
	.byte	12,10,132,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46908
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3',0,10,137,13,3
	.word	60927
	.byte	12,10,140,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47213
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4',0,10,145,13,3
	.word	60994
	.byte	12,10,148,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47314
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,10,153,13,3
	.word	61061
	.byte	12,10,156,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47663
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,10,161,13,3
	.word	61131
	.byte	12,10,164,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47823
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,10,169,13,3
	.word	61201
	.byte	12,10,172,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47904
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,10,177,13,3
	.word	61270
	.byte	12,10,180,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47991
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,10,185,13,3
	.word	61341
	.byte	12,10,188,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48078
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,10,193,13,3
	.word	61412
	.byte	12,10,196,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48165
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,10,201,13,3
	.word	61483
	.byte	12,10,204,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48256
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,10,209,13,3
	.word	61545
	.byte	12,10,212,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48398
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,10,217,13,3
	.word	61606
	.byte	12,10,220,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48464
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0',0,10,225,13,3
	.word	61667
	.byte	12,10,228,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48575
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1',0,10,233,13,3
	.word	61730
	.byte	12,10,236,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48667
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR',0,10,241,13,3
	.word	61793
	.byte	12,10,244,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48763
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,10,249,13,3
	.word	61858
	.byte	12,10,252,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48869
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,10,129,14,3
	.word	61919
	.byte	12,10,132,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49452
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,10,137,14,3
	.word	61995
	.byte	12,10,140,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50045
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,10,145,14,3
	.word	62071
	.byte	12,10,148,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50138
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,10,153,14,3
	.word	62134
	.byte	12,10,156,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50231
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,10,161,14,3
	.word	62197
	.byte	12,10,164,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50324
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL',0,10,169,14,3
	.word	62260
	.byte	12,10,172,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50397
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,10,177,14,3
	.word	62322
	.byte	32
	.byte	'Ifx_CPU_PCON0',0,10,185,14,3
	.word	10916
	.byte	32
	.byte	'Ifx_CPU_PCON1',0,10,193,14,3
	.word	10678
	.byte	12,10,196,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50538
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,10,201,14,3
	.word	62428
	.byte	12,10,204,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50639
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,10,209,14,3
	.word	62491
	.byte	12,10,212,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50792
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,10,217,14,3
	.word	62553
	.byte	12,10,220,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50861
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,10,225,14,3
	.word	62616
	.byte	12,10,228,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,10,233,14,3
	.word	62679
	.byte	12,10,236,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51236
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,10,241,14,3
	.word	62741
	.byte	12,10,244,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51327
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,10,249,14,3
	.word	62803
	.byte	12,10,252,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51418
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,10,129,15,3
	.word	62865
	.byte	12,10,132,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51621
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,10,137,15,3
	.word	62927
	.byte	12,10,140,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51826
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA',0,10,145,15,3
	.word	62988
	.byte	12,10,148,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52393
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB',0,10,153,15,3
	.word	63056
	.byte	12,10,156,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52970
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA',0,10,161,15,3
	.word	63124
	.byte	12,10,164,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53065
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA',0,10,169,15,3
	.word	63188
	.byte	12,10,172,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53160
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,10,177,15,3
	.word	63252
	.byte	12,10,180,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53288
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,10,185,15,3
	.word	63315
	.byte	12,10,188,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53871
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,10,193,15,3
	.word	63391
	.byte	12,10,196,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54464
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,10,201,15,3
	.word	63467
	.byte	12,10,204,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54582
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,10,209,15,3
	.word	63531
	.byte	12,10,212,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55171
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,10,217,15,3
	.word	63610
	.byte	12,10,220,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55770
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,10,225,15,3
	.word	63689
	.byte	12,10,228,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55924
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,10,233,15,3
	.word	63752
	.byte	12,10,236,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56223
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,10,241,15,3
	.word	63816
	.byte	12,10,244,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56321
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,10,249,15,3
	.word	63882
	.byte	12,10,252,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56493
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,10,129,16,3
	.word	63947
	.byte	12,10,132,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56622
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,10,137,16,3
	.word	64023
	.byte	12,10,140,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56752
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,10,145,16,3
	.word	64101
	.byte	12,10,148,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56904
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,10,153,16,3
	.word	64179
	.byte	12,10,156,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57031
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,10,161,16,3
	.word	64256
	.byte	12,10,164,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57180
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,10,169,16,3
	.word	64333
	.byte	12,10,172,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57294
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,10,177,16,3
	.word	64404
	.byte	12,10,180,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57538
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,10,185,16,3
	.word	64476
	.byte	12,10,188,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57618
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,10,193,16,3
	.word	64543
	.byte	12,10,196,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57813
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,10,201,16,3
	.word	64609
	.byte	12,10,204,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57886
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,10,209,16,3
	.word	64673
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,10,221,16,25,16,13
	.byte	'LA',0
	.word	63124
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	63188
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	62988
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	63056
	.byte	4,2,35,12,0,14
	.word	64737
	.byte	32
	.byte	'Ifx_CPU_RGN',0,10,227,16,3
	.word	64813
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,10,242,16,25,12,13
	.byte	'RABR',0
	.word	58457
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	58391
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	58324
	.byte	4,2,35,8,0,14
	.word	64839
	.byte	32
	.byte	'Ifx_CPU_BLK',0,10,247,16,3
	.word	64902
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,10,134,17,25,28,13
	.byte	'CON',0
	.word	61061
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	61201
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	61131
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2628
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	61270
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	61341
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	61412
	.byte	4,2,35,24,0,14
	.word	64928
	.byte	32
	.byte	'Ifx_CPU_FPU_TRAP',0,10,143,17,3
	.word	65053
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,10,158,17,25,8,13
	.byte	'L',0
	.word	60352
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	60415
	.byte	4,2,35,4,0,14
	.word	65084
	.byte	32
	.byte	'Ifx_CPU_DPR',0,10,162,17,3
	.word	65126
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,10,177,17,25,8,13
	.byte	'L',0
	.word	58798
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	58861
	.byte	4,2,35,4,0,14
	.word	65152
	.byte	32
	.byte	'Ifx_CPU_CPR',0,10,181,17,3
	.word	65194
	.byte	15,12
	.word	64476
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,10,196,17,25,16,13
	.byte	'CON',0
	.word	63882
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	65220
	.byte	12,2,35,4,0,14
	.word	65229
	.byte	32
	.byte	'Ifx_CPU_TPS',0,10,200,17,3
	.word	65277
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,10,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	64101
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	64023
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	64256
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	64179
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	63947
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	64404
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	64333
	.byte	4,2,35,24,0,14
	.word	65303
	.byte	32
	.byte	'Ifx_CPU_TPS_EXTIM',0,10,224,17,3
	.word	65452
	.byte	10
	.byte	'_Ifx_CPU_TR',0,10,239,17,25,8,13
	.byte	'EVT',0
	.word	64673
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	64609
	.byte	4,2,35,4,0,14
	.word	65484
	.byte	32
	.byte	'Ifx_CPU_TR',0,10,243,17,3
	.word	65529
	.byte	15,128,34
	.word	607
	.byte	16,255,33,0,15,236,253,2
	.word	607
	.byte	16,235,253,2,0,15,244,31
	.word	607
	.byte	16,243,31,0,15,128,1
	.word	64737
	.byte	16,7,0,14
	.word	65589
	.byte	15,232,1
	.word	607
	.byte	16,231,1,0,15,128,48
	.word	607
	.byte	16,255,47,0,15,128,3
	.word	64839
	.byte	16,31,0,14
	.word	65626
	.byte	15,160,39
	.word	607
	.byte	16,159,39,0,15,208,223,1
	.word	607
	.byte	16,207,223,1,0,15,248,1
	.word	607
	.byte	16,247,1,0,15,244,29
	.word	607
	.byte	16,243,29,0,15,188,3
	.word	607
	.byte	16,187,3,0,15,232,3
	.word	607
	.byte	16,231,3,0,15,252,23
	.word	607
	.byte	16,251,23,0,14
	.word	64928
	.byte	15,228,63
	.word	607
	.byte	16,227,63,0,15,144,1
	.word	65084
	.byte	16,17,0,14
	.word	65736
	.byte	15,240,30
	.word	607
	.byte	16,239,30,0,15,80
	.word	65152
	.byte	16,9,0,14
	.word	65762
	.byte	15,176,31
	.word	607
	.byte	16,175,31,0,15,152,7
	.word	607
	.byte	16,151,7,0,14
	.word	65229
	.byte	15,48
	.word	607
	.byte	16,47,0,14
	.word	65303
	.byte	15,164,23
	.word	607
	.byte	16,163,23,0,15,64
	.word	65484
	.byte	16,7,0,14
	.word	65828
	.byte	15,192,23
	.word	607
	.byte	16,191,23,0,15,28
	.word	607
	.byte	16,27,0,15,180,1
	.word	607
	.byte	16,179,1,0,15,172,1
	.word	607
	.byte	16,171,1,0,15,64
	.word	59177
	.byte	16,15,0,15,64
	.word	607
	.byte	16,63,0,15,64
	.word	58204
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,10,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	65554
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	60726
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	60793
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	60860
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	60927
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	60994
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	65565
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	61667
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	61730
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	61793
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	65578
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	65599
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4448
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	63531
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	63610
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4448
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	63531
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	63610
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4448
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	63531
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	63610
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4448
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	63531
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	63610
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4448
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	63531
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	63610
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4448
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	63531
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	63610
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4448
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	63531
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	63610
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4448
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	63531
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	63610
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	63315
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	63391
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4448
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	61919
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	61995
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	65604
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	60081
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	60155
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	59841
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	60001
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	60081
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	60155
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	59841
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	60001
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	60081
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	60155
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	59841
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	60001
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	60081
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	60155
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	59841
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	60001
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	60081
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	60155
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	59841
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	60001
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	60081
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	60155
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	59841
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	60001
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	60081
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	60155
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	59841
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	60001
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	60081
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	60155
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	59841
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	60001
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4448
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	59761
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	59921
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4448
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	59761
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	59921
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4448
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	59761
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	59921
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4448
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	59761
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	59921
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4448
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	59761
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	59921
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4448
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	59761
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	59921
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4448
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	59761
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	59921
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4448
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	59761
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	59921
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	65615
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	62260
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	4788
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	65636
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	65641
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	63252
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	65652
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	63816
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	65665
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	62679
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	62741
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	62803
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	65676
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	59448
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4448
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	63467
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	60540
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2628
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	59236
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	59572
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	59635
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	59698
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	3819
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	11044
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	65687
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	62865
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	10678
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	62428
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	10916
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	62553
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	62616
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	65698
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	58709
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	65709
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	65720
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	65725
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	65746
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	65751
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	65771
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	65776
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	58988
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	58988
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	58988
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	58988
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	60290
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	60290
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	60290
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	60290
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	60478
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	60478
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	60478
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	60478
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	37399
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	58988
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	58988
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4448
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	60290
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	60290
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4448
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	60478
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	60478
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	65787
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	65798
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	65803
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	65812
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	65817
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	65837
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	65842
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	58646
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	58584
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	61483
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	62071
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	62134
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	62197
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	65604
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	59298
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2628
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	60602
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	59050
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	63689
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	65853
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	64543
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	4788
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	60229
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	59511
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	59361
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	65862
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	62491
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	62927
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	62322
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4448
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	63752
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	58924
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	10788
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	58263
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	58523
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	61606
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	61545
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4448
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	60665
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	61858
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	37399
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	59113
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	65873
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	65884
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	65893
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	65902
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	65893
	.byte	64,4,35,192,255,7,0,14
	.word	65911
	.byte	32
	.byte	'Ifx_CPU',0,10,210,19,3
	.word	71009
	.byte	17,9,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_none',0,3,0,32
	.byte	'IfxCpu_Id',0,9,130,1,3
	.word	71031
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,9,161,1,3
	.word	9388
	.byte	10
	.byte	'_Ifx_SRC_SRCR_Bits',0,16,68,16,4,11
	.byte	'SRPN',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	607
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	607
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SRC_SRCR_Bits',0,16,85,3
	.word	71143
	.byte	12,16,93,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71143
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SRC_SRCR',0,16,98,3
	.word	71459
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,16,110,25,4,13
	.byte	'SB',0
	.word	71459
	.byte	4,2,35,0,0,14
	.word	71519
	.byte	32
	.byte	'Ifx_SRC_CPU_CPU',0,16,113,3
	.word	71554
	.byte	15,12
	.word	71519
	.byte	16,2,0,14
	.word	71583
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,16,128,1,25,12,13
	.byte	'CPU',0
	.word	71592
	.byte	12,2,35,0,0,14
	.word	71597
	.byte	32
	.byte	'Ifx_SRC_CPU',0,16,131,1,3
	.word	71630
	.byte	15,8
	.word	71459
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,16,146,1,25,8,13
	.byte	'SR',0
	.word	71656
	.byte	8,2,35,0,0,14
	.word	71665
	.byte	32
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,16,149,1,3
	.word	71711
	.byte	14
	.word	71665
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,16,164,1,25,8,13
	.byte	'CERBERUS',0
	.word	71751
	.byte	8,2,35,0,0,14
	.word	71756
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,16,167,1,3
	.word	71799
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,16,182,1,25,12,13
	.byte	'TX',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	71459
	.byte	4,2,35,8,0,14
	.word	71830
	.byte	32
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,16,187,1,3
	.word	71897
	.byte	15,144,1
	.word	71830
	.byte	16,11,0,14
	.word	71933
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,16,202,1,25,144,1,13
	.byte	'ASCLIN',0
	.word	71943
	.byte	144,1,2,35,0,0,14
	.word	71948
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,16,205,1,3
	.word	71989
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,16,220,1,25,20,13
	.byte	'TX',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	71459
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	71459
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	71459
	.byte	4,2,35,16,0,14
	.word	72018
	.byte	32
	.byte	'Ifx_SRC_QSPI_QSPI',0,16,227,1,3
	.word	72104
	.byte	15,100
	.word	72018
	.byte	16,4,0,14
	.word	72136
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,16,242,1,25,100,13
	.byte	'QSPI',0
	.word	72145
	.byte	100,2,35,0,0,14
	.word	72150
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,16,245,1,3
	.word	72185
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,16,132,2,25,4,13
	.byte	'SR',0
	.word	71459
	.byte	4,2,35,0,0,14
	.word	72212
	.byte	32
	.byte	'Ifx_SRC_HSCT_HSCT',0,16,135,2,3
	.word	72250
	.byte	15,4
	.word	72212
	.byte	16,0,0,14
	.word	72282
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,16,150,2,25,4,13
	.byte	'HSCT',0
	.word	72291
	.byte	4,2,35,0,0,14
	.word	72296
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,16,153,2,3
	.word	72331
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,16,168,2,25,16,13
	.byte	'COK',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	71459
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	71459
	.byte	4,2,35,12,0,14
	.word	72358
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,16,174,2,3
	.word	72439
	.byte	15,64
	.word	72358
	.byte	16,3,0,14
	.word	72474
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,16,189,2,25,68,13
	.byte	'CH',0
	.word	72483
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	71459
	.byte	4,2,35,64,0,14
	.word	72488
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL',0,16,193,2,3
	.word	72539
	.byte	15,68
	.word	72488
	.byte	16,0,0,14
	.word	72571
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,16,208,2,25,68,13
	.byte	'HSSL',0
	.word	72580
	.byte	68,2,35,0,0,14
	.word	72585
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,16,211,2,3
	.word	72620
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,16,226,2,25,16,13
	.byte	'DTR',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	71459
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2628
	.byte	4,2,35,12,0,14
	.word	72647
	.byte	32
	.byte	'Ifx_SRC_I2C_I2C',0,16,232,2,3
	.word	72728
	.byte	15,16
	.word	72647
	.byte	16,0,0,14
	.word	72758
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,16,247,2,25,16,13
	.byte	'I2C',0
	.word	72767
	.byte	16,2,35,0,0,14
	.word	72772
	.byte	32
	.byte	'Ifx_SRC_I2C',0,16,250,2,3
	.word	72805
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,16,137,3,25,4,13
	.byte	'SR',0
	.word	71459
	.byte	4,2,35,0,0,14
	.word	72831
	.byte	32
	.byte	'Ifx_SRC_SENT_SENT',0,16,140,3,3
	.word	72869
	.byte	15,40
	.word	72831
	.byte	16,9,0,14
	.word	72901
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,16,155,3,25,40,13
	.byte	'SENT',0
	.word	72910
	.byte	40,2,35,0,0,14
	.word	72915
	.byte	32
	.byte	'Ifx_SRC_SENT',0,16,158,3,3
	.word	72950
	.byte	15,20
	.word	71459
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,16,173,3,25,20,13
	.byte	'SR',0
	.word	72977
	.byte	20,2,35,0,0,14
	.word	72986
	.byte	32
	.byte	'Ifx_SRC_MSC_MSC',0,16,176,3,3
	.word	73022
	.byte	15,40
	.word	72986
	.byte	16,1,0,14
	.word	73052
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,16,191,3,25,40,13
	.byte	'MSC',0
	.word	73061
	.byte	40,2,35,0,0,14
	.word	73066
	.byte	32
	.byte	'Ifx_SRC_MSC',0,16,194,3,3
	.word	73099
	.byte	15,16
	.word	71459
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,16,209,3,25,16,13
	.byte	'SR',0
	.word	73125
	.byte	16,2,35,0,0,14
	.word	73134
	.byte	32
	.byte	'Ifx_SRC_CCU6_CCU',0,16,212,3,3
	.word	73171
	.byte	15,32
	.word	73134
	.byte	16,1,0,14
	.word	73202
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,16,227,3,25,32,13
	.byte	'CCU',0
	.word	73211
	.byte	32,2,35,0,0,14
	.word	73216
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,16,230,3,3
	.word	73250
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,16,245,3,25,24,13
	.byte	'CIRQ',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	71459
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	71459
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	71459
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	71459
	.byte	4,2,35,20,0,14
	.word	73277
	.byte	32
	.byte	'Ifx_SRC_GPT12_GPT12',0,16,253,3,3
	.word	73379
	.byte	15,24
	.word	73277
	.byte	16,0,0,14
	.word	73413
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,16,140,4,25,24,13
	.byte	'GPT12',0
	.word	73422
	.byte	24,2,35,0,0,14
	.word	73427
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,16,143,4,3
	.word	73464
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,16,158,4,25,8,13
	.byte	'SR',0
	.word	71656
	.byte	8,2,35,0,0,14
	.word	73492
	.byte	32
	.byte	'Ifx_SRC_STM_STM',0,16,161,4,3
	.word	73528
	.byte	15,24
	.word	73492
	.byte	16,2,0,14
	.word	73558
	.byte	10
	.byte	'_Ifx_SRC_STM',0,16,176,4,25,24,13
	.byte	'STM',0
	.word	73567
	.byte	24,2,35,0,0,14
	.word	73572
	.byte	32
	.byte	'Ifx_SRC_STM',0,16,179,4,3
	.word	73605
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,16,194,4,25,4,13
	.byte	'SR',0
	.word	71459
	.byte	4,2,35,0,0,14
	.word	73631
	.byte	32
	.byte	'Ifx_SRC_FCE_FCE0',0,16,197,4,3
	.word	73668
	.byte	14
	.word	73631
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,16,212,4,25,4,13
	.byte	'FCE0',0
	.word	73699
	.byte	4,2,35,0,0,14
	.word	73704
	.byte	32
	.byte	'Ifx_SRC_FCE',0,16,215,4,3
	.word	73738
	.byte	15,32
	.word	607
	.byte	16,31,0,15,128,4
	.word	71459
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,16,230,4,25,176,4,13
	.byte	'ERR',0
	.word	73125
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	73764
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	73773
	.byte	128,4,2,35,48,0,14
	.word	73783
	.byte	32
	.byte	'Ifx_SRC_DMA_DMA',0,16,235,4,3
	.word	73855
	.byte	15,176,4
	.word	73783
	.byte	16,0,0,14
	.word	73885
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,16,250,4,25,176,4,13
	.byte	'DMA',0
	.word	73895
	.byte	176,4,2,35,0,0,14
	.word	73900
	.byte	32
	.byte	'Ifx_SRC_DMA',0,16,253,4,3
	.word	73935
	.byte	15,40
	.word	71459
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,16,140,5,25,40,13
	.byte	'SR',0
	.word	73961
	.byte	40,2,35,0,0,14
	.word	73970
	.byte	32
	.byte	'Ifx_SRC_GETH_GETH',0,16,143,5,3
	.word	74008
	.byte	15,40
	.word	73970
	.byte	16,0,0,14
	.word	74040
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,16,158,5,25,40,13
	.byte	'GETH',0
	.word	74049
	.byte	40,2,35,0,0,14
	.word	74054
	.byte	32
	.byte	'Ifx_SRC_GETH',0,16,161,5,3
	.word	74089
	.byte	15,64
	.word	71459
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,16,176,5,25,64,13
	.byte	'INT',0
	.word	74116
	.byte	64,2,35,0,0,14
	.word	74125
	.byte	32
	.byte	'Ifx_SRC_CAN_CAN',0,16,179,5,3
	.word	74162
	.byte	15,128,1
	.word	74125
	.byte	16,1,0,14
	.word	74192
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,16,194,5,25,128,1,13
	.byte	'CAN',0
	.word	74202
	.byte	128,1,2,35,0,0,14
	.word	74207
	.byte	32
	.byte	'Ifx_SRC_CAN',0,16,197,5,3
	.word	74242
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,16,212,5,25,16,13
	.byte	'SR0',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	71459
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	71459
	.byte	4,2,35,12,0,14
	.word	74268
	.byte	32
	.byte	'Ifx_SRC_VADC_G',0,16,218,5,3
	.word	74343
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,16,237,5,25,4,13
	.byte	'SR0',0
	.word	71459
	.byte	4,2,35,0,0,14
	.word	74372
	.byte	32
	.byte	'Ifx_SRC_VADC_FC',0,16,240,5,3
	.word	74409
	.byte	15,64
	.word	74268
	.byte	16,3,0,14
	.word	74439
	.byte	14
	.word	74268
	.byte	14
	.word	74268
	.byte	14
	.word	74268
	.byte	14
	.word	74268
	.byte	15,16
	.word	74372
	.byte	16,3,0,14
	.word	74473
	.byte	15,32
	.word	74268
	.byte	16,1,0,14
	.word	74487
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,16,128,6,25,128,2,13
	.byte	'G',0
	.word	74448
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	65893
	.byte	64,2,35,64,13
	.byte	'G8',0
	.word	74453
	.byte	16,3,35,128,1,13
	.byte	'G9',0
	.word	74458
	.byte	16,3,35,144,1,13
	.byte	'G10',0
	.word	74463
	.byte	16,3,35,160,1,13
	.byte	'G11',0
	.word	74468
	.byte	16,3,35,176,1,13
	.byte	'FC',0
	.word	74482
	.byte	16,3,35,192,1,13
	.byte	'reserved_D0',0
	.word	37399
	.byte	16,3,35,208,1,13
	.byte	'CG',0
	.word	74496
	.byte	32,3,35,224,1,0,14
	.word	74501
	.byte	32
	.byte	'Ifx_SRC_VADC',0,16,139,6,3
	.word	74657
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,16,154,6,25,8,13
	.byte	'SRM',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	71459
	.byte	4,2,35,4,0,14
	.word	74684
	.byte	32
	.byte	'Ifx_SRC_DSADC_DSADC',0,16,158,6,3
	.word	74738
	.byte	15,48
	.word	74684
	.byte	16,5,0,14
	.word	74772
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,16,173,6,25,48,13
	.byte	'DSADC',0
	.word	74781
	.byte	48,2,35,0,0,14
	.word	74786
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,16,176,6,3
	.word	74823
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,16,191,6,25,48,13
	.byte	'INT0',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	71459
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	71459
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	71459
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	71459
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	71459
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	71459
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	71459
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	71459
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4448
	.byte	8,2,35,40,0,14
	.word	74851
	.byte	32
	.byte	'Ifx_SRC_ERAY_ERAY',0,16,204,6,3
	.word	75046
	.byte	15,48
	.word	74851
	.byte	16,0,0,14
	.word	75078
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,16,219,6,25,48,13
	.byte	'ERAY',0
	.word	75087
	.byte	48,2,35,0,0,14
	.word	75092
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,16,222,6,3
	.word	75127
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,16,237,6,25,8,13
	.byte	'HSM',0
	.word	71656
	.byte	8,2,35,0,0,14
	.word	75154
	.byte	32
	.byte	'Ifx_SRC_HSM_HSM',0,16,240,6,3
	.word	75191
	.byte	15,8
	.word	75154
	.byte	16,0,0,14
	.word	75221
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,16,255,6,25,8,13
	.byte	'HSM',0
	.word	75230
	.byte	8,2,35,0,0,14
	.word	75235
	.byte	32
	.byte	'Ifx_SRC_HSM',0,16,130,7,3
	.word	75268
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,16,145,7,25,16,13
	.byte	'SCUERU',0
	.word	73125
	.byte	16,2,35,0,0,14
	.word	75294
	.byte	32
	.byte	'Ifx_SRC_SCU',0,16,148,7,3
	.word	75330
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,16,163,7,25,4,13
	.byte	'SR',0
	.word	71459
	.byte	4,2,35,0,0,14
	.word	75356
	.byte	32
	.byte	'Ifx_SRC_PMS_PMS',0,16,166,7,3
	.word	75392
	.byte	15,16
	.word	75356
	.byte	16,3,0,14
	.word	75422
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,16,181,7,25,16,13
	.byte	'PMS',0
	.word	75431
	.byte	16,2,35,0,0,14
	.word	75436
	.byte	32
	.byte	'Ifx_SRC_PMS',0,16,184,7,3
	.word	75469
	.byte	15,12
	.word	71459
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,16,199,7,25,12,13
	.byte	'SR',0
	.word	75495
	.byte	12,2,35,0,0,14
	.word	75504
	.byte	32
	.byte	'Ifx_SRC_SMU_SMU',0,16,202,7,3
	.word	75540
	.byte	15,12
	.word	75504
	.byte	16,0,0,14
	.word	75570
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,16,217,7,25,12,13
	.byte	'SMU',0
	.word	75579
	.byte	12,2,35,0,0,14
	.word	75584
	.byte	32
	.byte	'Ifx_SRC_SMU',0,16,220,7,3
	.word	75617
	.byte	15,32
	.word	71459
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,16,235,7,25,32,13
	.byte	'SR',0
	.word	75643
	.byte	32,2,35,0,0,14
	.word	75652
	.byte	32
	.byte	'Ifx_SRC_PSI5_PSI5',0,16,238,7,3
	.word	75690
	.byte	15,32
	.word	75652
	.byte	16,0,0,14
	.word	75722
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,16,253,7,25,32,13
	.byte	'PSI5',0
	.word	75731
	.byte	32,2,35,0,0,14
	.word	75736
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,16,128,8,3
	.word	75771
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,16,143,8,25,24,13
	.byte	'LI0',0
	.word	71459
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	71459
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	71459
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	71459
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	71459
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	71459
	.byte	4,2,35,20,0,14
	.word	75798
	.byte	32
	.byte	'Ifx_SRC_DAM_DAM',0,16,151,8,3
	.word	75899
	.byte	15,24
	.word	75798
	.byte	16,0,0,14
	.word	75929
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,16,166,8,25,24,13
	.byte	'DAM',0
	.word	75938
	.byte	24,2,35,0,0,14
	.word	75943
	.byte	32
	.byte	'Ifx_SRC_DAM',0,16,169,8,3
	.word	75976
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,16,184,8,25,32,13
	.byte	'SR',0
	.word	75643
	.byte	32,2,35,0,0,14
	.word	76002
	.byte	32
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,16,187,8,3
	.word	76042
	.byte	15,32
	.word	76002
	.byte	16,0,0,14
	.word	76076
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,16,202,8,25,32,13
	.byte	'PSI5S',0
	.word	76085
	.byte	32,2,35,0,0,14
	.word	76090
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,16,205,8,3
	.word	76127
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,16,220,8,25,32,13
	.byte	'SR',0
	.word	75643
	.byte	32,2,35,0,0,14
	.word	76155
	.byte	32
	.byte	'Ifx_SRC_GPSR_GPSR',0,16,223,8,3
	.word	76193
	.byte	15,96
	.word	76155
	.byte	16,2,0,14
	.word	76225
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,16,238,8,25,96,13
	.byte	'GPSR',0
	.word	76234
	.byte	96,2,35,0,0,14
	.word	76239
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,16,241,8,3
	.word	76274
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,17,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,17,102,3
	.word	76301
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,17,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,17,108,3
	.word	76858
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,17,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,17,114,3
	.word	76935
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,17,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,17,120,3
	.word	77008
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,17,123,16,4,11
	.byte	'DISR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,17,130,1,3
	.word	77085
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,17,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	607
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	607
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	607
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	607
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,17,143,1,3
	.word	77227
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,17,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,17,149,1,3
	.word	77447
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,17,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,17,162,1,3
	.word	77516
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,17,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,17,170,1,3
	.word	77719
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,17,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,17,180,1,3
	.word	77823
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,17,183,1,16,4,11
	.byte	'RST',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,17,188,1,3
	.word	77974
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,17,191,1,16,4,11
	.byte	'RST',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,17,195,1,3
	.word	78085
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,17,198,1,16,4,11
	.byte	'CLR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,17,202,1,3
	.word	78177
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,17,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,17,213,1,3
	.word	78273
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,17,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,17,219,1,3
	.word	78441
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,17,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,17,225,1,3
	.word	78514
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,17,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,17,231,1,3
	.word	78591
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,17,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,17,237,1,3
	.word	78664
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,17,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,17,243,1,3
	.word	78737
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,17,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,17,249,1,3
	.word	78811
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,17,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,17,255,1,3
	.word	78885
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,17,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,17,133,2,3
	.word	78959
	.byte	12,17,141,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76301
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,17,146,2,3
	.word	79033
	.byte	12,17,149,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76858
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,17,154,2,3
	.word	79097
	.byte	12,17,157,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76935
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,17,162,2,3
	.word	79161
	.byte	12,17,165,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77008
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,17,170,2,3
	.word	79222
	.byte	12,17,173,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77085
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,17,178,2,3
	.word	79285
	.byte	12,17,181,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77227
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,17,186,2,3
	.word	79346
	.byte	12,17,189,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77447
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,17,194,2,3
	.word	79409
	.byte	12,17,197,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77516
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,17,202,2,3
	.word	79470
	.byte	12,17,205,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77719
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,17,210,2,3
	.word	79531
	.byte	12,17,213,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77823
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,17,218,2,3
	.word	79591
	.byte	12,17,221,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77974
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,17,226,2,3
	.word	79653
	.byte	12,17,229,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78085
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,17,234,2,3
	.word	79716
	.byte	12,17,237,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78177
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,17,242,2,3
	.word	79779
	.byte	12,17,245,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78273
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,17,250,2,3
	.word	79844
	.byte	12,17,253,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78441
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,17,130,3,3
	.word	79905
	.byte	12,17,133,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78514
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,17,138,3,3
	.word	79967
	.byte	12,17,141,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78591
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,17,146,3,3
	.word	80031
	.byte	12,17,149,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78664
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,17,154,3,3
	.word	80093
	.byte	12,17,157,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78737
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,17,162,3,3
	.word	80155
	.byte	12,17,165,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78811
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,17,170,3,3
	.word	80217
	.byte	12,17,173,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78885
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,17,178,3,3
	.word	80279
	.byte	12,17,181,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78959
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,17,186,3,3
	.word	80341
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,6,102,3
	.word	7976
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,6,108,3
	.word	7889
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,6,130,1,3
	.word	4457
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,6,138,1,3
	.word	2508
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,6,160,1,3
	.word	3504
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,6,173,1,3
	.word	2637
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,6,186,1,3
	.word	3284
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,6,199,1,3
	.word	2852
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,6,212,1,3
	.word	3067
	.byte	32
	.byte	'Ifx_P_LPCR_Bits',0,6,231,1,3
	.word	7551
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,6,253,1,3
	.word	7203
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,6,136,2,3
	.word	6190
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,6,146,2,3
	.word	6714
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,6,157,2,3
	.word	6364
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,6,168,2,3
	.word	6538
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,6,205,2,3
	.word	1937
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,6,227,2,3
	.word	6870
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,6,237,2,3
	.word	5527
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,6,248,2,3
	.word	6015
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,6,131,3,3
	.word	5674
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,6,142,3,3
	.word	5843
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,6,164,3,3
	.word	1621
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,6,187,3,3
	.word	5163
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,6,209,3,3
	.word	4797
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,6,230,3,3
	.word	3828
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,6,251,3,3
	.word	4132
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,6,136,4,3
	.word	8503
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,6,144,4,3
	.word	7936
	.byte	32
	.byte	'Ifx_P_ESR',0,6,152,4,3
	.word	4748
	.byte	32
	.byte	'Ifx_P_ID',0,6,160,4,3
	.word	2588
	.byte	32
	.byte	'Ifx_P_IN',0,6,168,4,3
	.word	3779
	.byte	32
	.byte	'Ifx_P_IOCR0',0,6,176,4,3
	.word	2812
	.byte	32
	.byte	'Ifx_P_IOCR12',0,6,184,4,3
	.word	3464
	.byte	32
	.byte	'Ifx_P_IOCR4',0,6,192,4,3
	.word	3027
	.byte	32
	.byte	'Ifx_P_IOCR8',0,6,200,4,3
	.word	3244
	.byte	32
	.byte	'Ifx_P_LPCR',0,6,208,4,3
	.word	7831
	.byte	32
	.byte	'Ifx_P_OMCR',0,6,216,4,3
	.word	7511
	.byte	32
	.byte	'Ifx_P_OMCR0',0,6,224,4,3
	.word	6324
	.byte	32
	.byte	'Ifx_P_OMCR12',0,6,232,4,3
	.word	6830
	.byte	32
	.byte	'Ifx_P_OMCR4',0,6,240,4,3
	.word	6498
	.byte	32
	.byte	'Ifx_P_OMCR8',0,6,248,4,3
	.word	6674
	.byte	32
	.byte	'Ifx_P_OMR',0,6,128,5,3
	.word	2468
	.byte	32
	.byte	'Ifx_P_OMSR',0,6,136,5,3
	.word	7163
	.byte	32
	.byte	'Ifx_P_OMSR0',0,6,144,5,3
	.word	5634
	.byte	32
	.byte	'Ifx_P_OMSR12',0,6,152,5,3
	.word	6150
	.byte	32
	.byte	'Ifx_P_OMSR4',0,6,160,5,3
	.word	5803
	.byte	32
	.byte	'Ifx_P_OMSR8',0,6,168,5,3
	.word	5975
	.byte	32
	.byte	'Ifx_P_OUT',0,6,176,5,3
	.word	1897
	.byte	32
	.byte	'Ifx_P_PCSR',0,6,184,5,3
	.word	5487
	.byte	32
	.byte	'Ifx_P_PDISC',0,6,192,5,3
	.word	5123
	.byte	32
	.byte	'Ifx_P_PDR0',0,6,200,5,3
	.word	4092
	.byte	32
	.byte	'Ifx_P_PDR1',0,6,208,5,3
	.word	4408
	.byte	14
	.word	8543
	.byte	32
	.byte	'Ifx_P',0,6,128,6,3
	.word	81597
	.byte	17,5,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,32
	.byte	'IfxPort_ControlledBy',0,5,77,3
	.word	81617
	.byte	17,5,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,32
	.byte	'IfxPort_InputMode',0,5,87,3
	.word	81708
	.byte	17,5,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,32
	.byte	'IfxPort_LvdsMode',0,5,95,3
	.word	81859
	.byte	17,5,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,32
	.byte	'IfxPort_OutputIdx',0,5,136,1,3
	.word	81940
	.byte	17,5,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,32
	.byte	'IfxPort_OutputMode',0,5,145,1,3
	.word	82184
	.byte	17,5,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,32
	.byte	'IfxPort_PadDriver',0,5,165,1,3
	.word	82308
	.byte	17,5,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,32
	.byte	'IfxPort_PadSupply',0,5,173,1,3
	.word	82758
	.byte	17,5,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,32
	.byte	'IfxPort_PinFunctionMode',0,5,181,1,3
	.word	82838
	.byte	32
	.byte	'IfxPort_State',0,5,193,1,3
	.word	9123
	.byte	34,5,246,1,9,8,13
	.byte	'port',0
	.word	9118
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	607
	.byte	1,2,35,4,0,32
	.byte	'IfxPort_Pin',0,5,250,1,3
	.word	82968
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,18,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_ACCEN0_Bits',0,18,102,3
	.word	83028
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,18,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1_Bits',0,18,108,3
	.word	83585
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,18,111,16,4,11
	.byte	'DF0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AD_Bits',0,18,145,1,3
	.word	83662
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,18,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SMU_AEX_Bits',0,18,176,1,3
	.word	84212
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,18,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR_Bits',0,18,207,1,3
	.word	84769
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,18,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	624
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AFCNT_Bits',0,18,217,1,3
	.word	85365
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,18,220,1,16,4,11
	.byte	'SF0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AG_Bits',0,18,254,1,3
	.word	85505
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,18,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	455
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	455
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	455
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGC_Bits',0,18,142,2,3
	.word	86056
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,18,145,2,16,4,11
	.byte	'CF0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF_Bits',0,18,179,2,3
	.word	86318
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,18,182,2,16,4,11
	.byte	'FE0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP_Bits',0,18,216,2,3
	.word	86873
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,18,219,2,16,4,11
	.byte	'DISR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SMU_CLC_Bits',0,18,226,2,3
	.word	87430
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,18,229,2,16,4,11
	.byte	'CMD',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	455
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_CMD_Bits',0,18,234,2,3
	.word	87573
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,18,237,2,16,4,11
	.byte	'SSM',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SMU_DBG_Bits',0,18,241,2,3
	.word	87676
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,18,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	455
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	455
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	455
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	455
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_SMU_FSP_Bits',0,18,252,2,3
	.word	87764
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,18,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SMU_ID_Bits',0,18,132,3,3
	.word	87919
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,18,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	455
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS_Bits',0,18,140,3,3
	.word	88029
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,18,143,3,16,4,11
	.byte	'TGS',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SMU_OCS_Bits',0,18,153,3,3
	.word	88141
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,18,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	455
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	455
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	9,0,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL_Bits',0,18,167,3,3
	.word	88333
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,18,170,3,16,4,11
	.byte	'TE0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL_Bits',0,18,204,3,3
	.word	88564
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,18,207,3,16,4,11
	.byte	'EF0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF_Bits',0,18,241,3,3
	.word	89268
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,18,244,3,16,4,11
	.byte	'STS0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS_Bits',0,18,150,4,3
	.word	89970
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,18,153,4,16,4,11
	.byte	'GID0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00_Bits',0,18,161,4,3
	.word	90685
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,18,164,4,16,4,11
	.byte	'GID2',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01_Bits',0,18,172,4,3
	.word	90853
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,18,175,4,16,4,11
	.byte	'GID0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10_Bits',0,18,183,4,3
	.word	91021
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,18,186,4,16,4,11
	.byte	'GID2',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11_Bits',0,18,194,4,3
	.word	91189
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,18,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTC_Bits',0,18,203,4,3
	.word	91357
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,18,206,4,16,4,11
	.byte	'CMD',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	455
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	455
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_SMU_STS_Bits',0,18,220,4,3
	.word	91477
	.byte	12,18,228,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83028
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN0',0,18,233,4,3
	.word	91732
	.byte	12,18,236,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83585
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1',0,18,241,4,3
	.word	91796
	.byte	12,18,244,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83662
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AD',0,18,249,4,3
	.word	91860
	.byte	12,18,252,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84212
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEX',0,18,129,5,3
	.word	91920
	.byte	12,18,132,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84769
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR',0,18,137,5,3
	.word	91981
	.byte	12,18,140,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85365
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AFCNT',0,18,145,5,3
	.word	92045
	.byte	12,18,148,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85505
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AG',0,18,153,5,3
	.word	92108
	.byte	12,18,156,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86056
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGC',0,18,161,5,3
	.word	92168
	.byte	12,18,164,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86318
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF',0,18,169,5,3
	.word	92229
	.byte	12,18,172,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86873
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP',0,18,177,5,3
	.word	92291
	.byte	12,18,180,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87430
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CLC',0,18,185,5,3
	.word	92354
	.byte	12,18,188,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87573
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CMD',0,18,193,5,3
	.word	92415
	.byte	12,18,196,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87676
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_DBG',0,18,201,5,3
	.word	92476
	.byte	12,18,204,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87764
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_FSP',0,18,209,5,3
	.word	92537
	.byte	12,18,212,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87919
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ID',0,18,217,5,3
	.word	92598
	.byte	12,18,220,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88029
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS',0,18,225,5,3
	.word	92658
	.byte	12,18,228,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88141
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_OCS',0,18,233,5,3
	.word	92720
	.byte	12,18,236,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88333
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL',0,18,241,5,3
	.word	92781
	.byte	12,18,244,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88564
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL',0,18,249,5,3
	.word	92843
	.byte	12,18,252,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89268
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF',0,18,129,6,3
	.word	92906
	.byte	12,18,132,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89970
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS',0,18,137,6,3
	.word	92968
	.byte	12,18,140,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90685
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00',0,18,145,6,3
	.word	93031
	.byte	12,18,148,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90853
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01',0,18,153,6,3
	.word	93095
	.byte	12,18,156,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91021
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10',0,18,161,6,3
	.word	93159
	.byte	12,18,164,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91189
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11',0,18,169,6,3
	.word	93223
	.byte	12,18,172,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91357
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTC',0,18,177,6,3
	.word	93287
	.byte	12,18,180,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91477
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_STS',0,18,185,6,3
	.word	93348
	.byte	17,7,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,32
	.byte	'IfxScuCcu_LowPowerDivRatio',0,7,216,2,3
	.word	93409
	.byte	17,7,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,32
	.byte	'IfxScuCcu_ModulationAmplitude',0,7,229,2,3
	.word	93602
	.byte	17,7,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,32
	.byte	'IfxScuCcu_PllInputClockSelection',0,7,131,4,3
	.word	93903
	.byte	17,7,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,32
	.byte	'IfxScuCcu_Traprequest',0,7,141,4,3
	.word	94077
	.byte	17,7,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,32
	.byte	'IfxScuCcu_ModEn',0,7,151,4,3
	.word	94231
	.byte	34,7,162,4,9,6,13
	.byte	'pDivider',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	607
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	607
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	607
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	607
	.byte	1,2,35,4,0,32
	.byte	'IfxScuCcu_PerPllConfig',0,7,171,4,3
	.word	94316
	.byte	34,7,176,4,9,4,13
	.byte	'pDivider',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	607
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	607
	.byte	1,2,35,2,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,7,181,4,3
	.word	94454
	.byte	34,7,189,4,9,8,13
	.byte	'value',0
	.word	9524
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9524
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,7,193,4,3
	.word	94548
	.byte	34,7,197,4,9,6,13
	.byte	'k2Step',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,2,0,32
	.byte	'IfxScuCcu_PllStepConfig',0,7,201,4,3
	.word	94619
	.byte	34,7,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	9524
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	93903
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	94454
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	94316
	.byte	6,2,35,10,0,32
	.byte	'IfxScuCcu_pllsParameterConfig',0,7,211,4,3
	.word	94693
	.byte	34,7,219,4,9,8,13
	.byte	'value',0
	.word	9524
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9524
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,7,223,4,3
	.word	94838
	.byte	34,7,231,4,9,56,13
	.byte	'ccucon0',0
	.word	94548
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	94548
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	94548
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	94548
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	94548
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	94548
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	94548
	.byte	8,2,35,48,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,7,240,4,3
	.word	94914
	.byte	34,7,244,4,9,20,13
	.byte	'pllsParameters',0
	.word	94693
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,16,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,7,248,4,3
	.word	95083
	.byte	20
	.word	94619
	.byte	3
	.word	95169
	.byte	34,7,252,4,9,8,13
	.byte	'numOfSteps',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	95174
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_PllThrottleConfig',0,7,128,5,3
	.word	95179
	.byte	34,7,134,5,9,2,13
	.byte	'Mod_Enable',0
	.word	94231
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	93602
	.byte	1,2,35,1,0,32
	.byte	'IfxScuCcu_Mod_Config',0,7,138,5,3
	.word	95261
	.byte	17,8,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	95335
	.byte	34,8,192,1,9,6,13
	.byte	'counter',0
	.word	9524
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	607
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,8,196,1,3
	.word	95424
	.byte	34,8,204,1,9,32,13
	.byte	'instruction',0
	.word	95424
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	95424
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	95424
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	95424
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	95424
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,8,211,1,3
	.word	95490
	.byte	35
	.word	432
	.byte	36,0,37
	.byte	'__ISTACK2',0,11,52,1
	.word	95608
	.byte	1,1,37
	.byte	'__INTTAB_CPU2',0,11,52,1
	.word	95608
	.byte	1,1,37
	.byte	'__TRAPTAB_CPU2',0,11,52,1
	.word	95608
	.byte	1,1,37
	.byte	'__CSA2',0,11,52,1
	.word	95608
	.byte	1,1,37
	.byte	'__CSA2_END',0,11,52,1
	.word	95608
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L31:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,0,3,8
	.byte	54,15,39,12,63,12,60,12,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,29,1,49,19,0,0,29,11,0,49,19,0,0,30
	.byte	46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,31,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12
	.byte	0,0,32,22,0,3,8,58,15,59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,34,19,1,58,15,59,15,57,15,11,15,0,0,35,1
	.byte	1,73,19,0,0,36,33,0,0,0,37,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L32:
	.word	.L162-.L161
.L161:
	.half	3
	.word	.L164-.L163
.L163:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\_Impl',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0,0,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L164:
.L162:
	.sdecl	'.debug_info',debug,cluster('_Core2_start')
	.sect	'.debug_info'
.L33:
	.word	1194
	.half	3
	.word	.L34
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\Debug\\',0,12,1
	.word	.L36,.L35
	.byte	2
	.word	.L29
	.byte	3
	.byte	'_Core2_start',0,1,67,6,1,1,1
	.word	.L22,.L53,.L21
	.byte	4
	.word	.L22,.L53
	.byte	5
	.byte	'pcxi',0,1,69,12
	.word	.L54,.L55
	.byte	6
	.word	.L56,.L22,.L57
	.byte	7
	.word	.L58,.L59
	.byte	8
	.word	.L60,.L22,.L57
	.byte	5
	.byte	'password',0,2,222,4,12
	.word	.L61,.L62
	.byte	0,0,6
	.word	.L63,.L64,.L65
	.byte	7
	.word	.L66,.L67
	.byte	7
	.word	.L68,.L69
	.byte	9
	.word	.L70,.L64,.L65
	.byte	0,6
	.word	.L71,.L65,.L72
	.byte	7
	.word	.L73,.L74
	.byte	8
	.word	.L75,.L65,.L72
	.byte	8
	.word	.L76,.L65,.L77
	.byte	5
	.byte	'pcon1',0,3,168,8,23
	.word	.L78,.L79
	.byte	0,8
	.word	.L80,.L77,.L72
	.byte	5
	.byte	'coreIndex',0,3,174,8,12
	.word	.L54,.L81
	.byte	6
	.word	.L82,.L77,.L83
	.byte	10
	.word	.L84,.L85
	.byte	5
	.byte	'reg',0,3,231,6,21
	.word	.L88,.L89
	.byte	0,0,11
	.word	.L82,.L86,.L87
	.byte	6
	.word	.L56,.L90,.L91
	.byte	7
	.word	.L58,.L59
	.byte	8
	.word	.L60,.L90,.L91
	.byte	5
	.byte	'password',0,2,222,4,12
	.word	.L61,.L92
	.byte	0,0,6
	.word	.L63,.L91,.L93
	.byte	7
	.word	.L66,.L67
	.byte	7
	.word	.L68,.L69
	.byte	12
	.word	.L70,.L94
	.byte	0,8
	.word	.L95,.L93,.L96
	.byte	5
	.byte	'pcon0',0,3,179,8,23
	.word	.L97,.L98
	.byte	6
	.word	.L99,.L100,.L96
	.byte	7
	.word	.L101,.L102
	.byte	7
	.word	.L103,.L104
	.byte	9
	.word	.L105,.L100,.L96
	.byte	0,0,0,0,0,6
	.word	.L106,.L72,.L107
	.byte	7
	.word	.L108,.L109
	.byte	8
	.word	.L110,.L72,.L107
	.byte	5
	.byte	'coreIndex',0,3,139,8,12
	.word	.L54,.L111
	.byte	6
	.word	.L82,.L72,.L112
	.byte	8
	.word	.L84,.L72,.L112
	.byte	5
	.byte	'reg',0,3,231,6,21
	.word	.L88,.L113
	.byte	0,0,6
	.word	.L56,.L114,.L115
	.byte	7
	.word	.L58,.L59
	.byte	8
	.word	.L60,.L114,.L115
	.byte	5
	.byte	'password',0,2,222,4,12
	.word	.L61,.L116
	.byte	0,0,6
	.word	.L63,.L115,.L117
	.byte	7
	.word	.L66,.L67
	.byte	7
	.word	.L68,.L69
	.byte	12
	.word	.L70,.L118
	.byte	0,8
	.word	.L119,.L117,.L120
	.byte	5
	.byte	'dcon0',0,3,144,8,23
	.word	.L121,.L122
	.byte	6
	.word	.L99,.L123,.L120
	.byte	7
	.word	.L101,.L102
	.byte	7
	.word	.L103,.L104
	.byte	9
	.word	.L105,.L123,.L120
	.byte	0,0,0,0,6
	.word	.L63,.L107,.L124
	.byte	7
	.word	.L66,.L67
	.byte	7
	.word	.L68,.L69
	.byte	12
	.word	.L70,.L125
	.byte	0,6
	.word	.L99,.L126,.L127
	.byte	7
	.word	.L101,.L102
	.byte	7
	.word	.L103,.L104
	.byte	9
	.word	.L105,.L126,.L127
	.byte	0,6
	.word	.L128,.L129,.L130
	.byte	7
	.word	.L131,.L132
	.byte	7
	.word	.L133,.L134
	.byte	8
	.word	.L135,.L129,.L130
	.byte	5
	.byte	'k',0,3,181,7,13
	.word	.L54,.L136
	.byte	5
	.byte	'nxt_cxi_val',0,3,182,7,13
	.word	.L54,.L137
	.byte	5
	.byte	'prvCsa',0,3,183,7,13
	.word	.L138,.L139
	.byte	5
	.byte	'nxtCsa',0,3,184,7,13
	.word	.L138,.L140
	.byte	5
	.byte	'numOfCsa',0,3,185,7,13
	.word	.L54,.L141
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('_Core2_start')
	.sect	'.debug_abbrev'
.L34:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,10,11,1
	.byte	49,16,85,6,0,0,11,29,0,49,16,17,1,18,1,0,0,12,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('_Core2_start')
	.sect	'.debug_line'
.L35:
	.word	.L166-.L165
.L165:
	.half	3
	.word	.L168-.L167
.L167:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0
	.byte	'IfxCpu.h',0,2,0,0,0
.L168:
	.byte	4,2,5,33,7,0,5,2
	.word	.L22
	.byte	3,226,4,1,5,14,9
	.half	.L169-.L22
	.byte	3,1,1,4,1,5,5,9
	.half	.L57-.L169
	.byte	3,231,123,1,5,12,9
	.half	.L170-.L57
	.byte	3,1,1,5,21,9
	.half	.L171-.L170
	.byte	3,3,1,5,11,9
	.half	.L172-.L171
	.byte	1,5,19,9
	.half	.L173-.L172
	.byte	3,3,1,5,10,9
	.half	.L174-.L173
	.byte	3,1,1,5,11,9
	.half	.L143-.L174
	.byte	3,1,1,4,2,5,25,9
	.half	.L64-.L143
	.byte	3,210,3,1,5,5,9
	.half	.L144-.L64
	.byte	1,5,45,7,9
	.half	.L175-.L144
	.byte	3,6,1,5,23,9
	.half	.L176-.L175
	.byte	3,125,1,5,45,9
	.half	.L177-.L176
	.byte	3,3,1,5,23,9
	.half	.L178-.L177
	.byte	3,125,1,5,38,9
	.half	.L179-.L178
	.byte	3,2,1,5,69,9
	.half	.L180-.L179
	.byte	1,5,26,3,126,1,5,38,9
	.half	.L2-.L180
	.byte	3,2,1,5,23,3,126,1,5,34,9
	.half	.L142-.L2
	.byte	3,9,1,5,5,9
	.half	.L181-.L142
	.byte	3,116,1,5,41,9
	.half	.L182-.L181
	.byte	3,13,1,5,65,9
	.half	.L183-.L182
	.byte	3,127,1,5,22,3,126,1,5,28,9
	.half	.L3-.L183
	.byte	3,6,1,5,41,9
	.half	.L184-.L3
	.byte	1,4,3,5,23,7,9
	.half	.L65-.L184
	.byte	3,243,3,1,9
	.half	.L145-.L65
	.byte	3,1,1,5,15,9
	.half	.L185-.L145
	.byte	3,1,1,5,19,9
	.half	.L77-.L185
	.byte	3,189,126,1,5,76,9
	.half	.L83-.L77
	.byte	3,199,1,1,5,37,9
	.half	.L86-.L83
	.byte	3,186,126,1,5,76,9
	.half	.L87-.L86
	.byte	3,198,1,1,5,83,9
	.half	.L186-.L87
	.byte	1,4,2,5,33,9
	.half	.L90-.L186
	.byte	3,180,124,1,5,25,9
	.half	.L187-.L90
	.byte	3,67,1,5,14,9
	.half	.L188-.L187
	.byte	3,62,1,5,5,9
	.half	.L91-.L188
	.byte	3,66,1,5,38,7,9
	.half	.L189-.L91
	.byte	3,5,1,5,45,9
	.half	.L190-.L189
	.byte	3,1,1,5,38,9
	.half	.L4-.L190
	.byte	3,127,1,5,34,9
	.half	.L147-.L4
	.byte	3,7,1,5,41,9
	.half	.L191-.L147
	.byte	3,1,1,5,28,9
	.half	.L5-.L191
	.byte	3,3,1,5,41,9
	.half	.L192-.L5
	.byte	1,4,3,5,23,7,9
	.half	.L93-.L192
	.byte	3,254,3,1,9
	.half	.L148-.L93
	.byte	3,1,1,5,15,9
	.half	.L193-.L148
	.byte	3,1,1,4,2,5,25,9
	.half	.L100-.L193
	.byte	3,220,124,1,5,5,9
	.half	.L149-.L100
	.byte	1,5,38,7,9
	.half	.L194-.L149
	.byte	3,5,1,5,45,9
	.half	.L195-.L194
	.byte	3,1,1,5,34,9
	.half	.L6-.L195
	.byte	3,6,1,5,41,3,1,1,5,65,9
	.half	.L196-.L6
	.byte	3,127,1,5,22,3,126,1,5,28,9
	.half	.L7-.L196
	.byte	3,6,1,5,41,9
	.half	.L197-.L7
	.byte	1,4,3,5,12,7,9
	.half	.L96-.L197
	.byte	3,152,3,1,5,19,9
	.half	.L72-.L96
	.byte	3,174,126,1,5,37,9
	.half	.L150-.L72
	.byte	3,1,1,5,83,9
	.half	.L112-.L150
	.byte	3,163,1,1,4,2,5,33,9
	.half	.L114-.L112
	.byte	3,215,124,1,5,14,9
	.half	.L198-.L114
	.byte	3,1,1,5,25,3,66,1,5,5,9
	.half	.L115-.L198
	.byte	1,5,38,7,9
	.half	.L199-.L115
	.byte	3,5,1,5,45,9
	.half	.L200-.L199
	.byte	3,1,1,5,38,9
	.half	.L8-.L200
	.byte	3,127,1,5,34,9
	.half	.L152-.L8
	.byte	3,7,1,5,41,9
	.half	.L201-.L152
	.byte	3,1,1,5,28,9
	.half	.L9-.L201
	.byte	3,3,1,5,41,9
	.half	.L202-.L9
	.byte	1,4,3,5,23,7,9
	.half	.L117-.L202
	.byte	3,219,3,1,9
	.half	.L153-.L117
	.byte	3,1,1,5,15,9
	.half	.L203-.L153
	.byte	3,1,1,4,2,5,25,9
	.half	.L123-.L203
	.byte	3,255,124,1,5,5,9
	.half	.L154-.L123
	.byte	1,5,38,7,9
	.half	.L204-.L154
	.byte	3,5,1,5,45,9
	.half	.L205-.L204
	.byte	3,1,1,5,34,9
	.half	.L10-.L205
	.byte	3,6,1,5,41,3,1,1,5,65,9
	.half	.L206-.L10
	.byte	3,127,1,5,22,3,126,1,5,28,9
	.half	.L11-.L206
	.byte	3,6,1,5,41,9
	.half	.L207-.L11
	.byte	1,4,3,5,12,7,9
	.half	.L120-.L207
	.byte	3,245,2,1,4,2,5,25,9
	.half	.L107-.L120
	.byte	3,143,124,1,5,41,9
	.half	.L208-.L107
	.byte	3,13,1,5,65,9
	.half	.L209-.L208
	.byte	3,127,1,5,22,3,126,1,5,28,9
	.half	.L13-.L209
	.byte	3,6,1,5,41,9
	.half	.L210-.L13
	.byte	1,4,1,5,29,7,9
	.half	.L124-.L210
	.byte	3,173,124,1,5,11,9
	.half	.L211-.L124
	.byte	1,5,29,9
	.half	.L212-.L211
	.byte	3,3,1,5,11,9
	.half	.L213-.L212
	.byte	1,5,29,9
	.half	.L214-.L213
	.byte	3,3,1,5,11,9
	.half	.L215-.L214
	.byte	1,4,2,5,25,9
	.half	.L126-.L215
	.byte	3,169,4,1,5,41,9
	.half	.L216-.L126
	.byte	3,13,1,5,34,9
	.half	.L217-.L216
	.byte	3,127,1,5,41,9
	.half	.L218-.L217
	.byte	3,1,1,5,65,9
	.half	.L219-.L218
	.byte	3,127,1,5,22,3,126,1,5,28,9
	.half	.L15-.L219
	.byte	3,6,1,5,41,9
	.half	.L220-.L15
	.byte	1,4,1,5,5,7,9
	.half	.L127-.L220
	.byte	3,204,123,1,9
	.half	.L221-.L127
	.byte	3,1,1,9
	.half	.L222-.L221
	.byte	3,3,1,9
	.half	.L223-.L222
	.byte	3,1,1,5,30,9
	.half	.L129-.L223
	.byte	3,3,1,5,50,9
	.half	.L155-.L129
	.byte	1,5,30,9
	.half	.L224-.L155
	.byte	1,5,50,9
	.half	.L225-.L224
	.byte	1,4,3,5,44,9
	.half	.L226-.L225
	.byte	3,195,6,1,5,25,3,126,1,5,44,9
	.half	.L156-.L226
	.byte	3,2,1,5,12,9
	.half	.L158-.L156
	.byte	3,2,1,5,55,9
	.half	.L159-.L158
	.byte	3,2,1,5,29,3,126,1,5,32,9
	.half	.L17-.L159
	.byte	3,2,1,5,55,9
	.half	.L227-.L17
	.byte	1,5,79,9
	.half	.L228-.L227
	.byte	1,5,39,9
	.half	.L229-.L228
	.byte	1,5,61,9
	.half	.L160-.L229
	.byte	1,5,9,9
	.half	.L230-.L160
	.byte	3,2,1,5,19,7,9
	.half	.L231-.L230
	.byte	3,2,1,5,41,9
	.half	.L232-.L231
	.byte	1,5,21,9
	.half	.L18-.L232
	.byte	3,4,1,5,28,9
	.half	.L19-.L18
	.byte	3,3,1,5,9,9
	.half	.L233-.L19
	.byte	1,5,19,7,9
	.half	.L234-.L233
	.byte	3,2,1,5,32,9
	.half	.L20-.L234
	.byte	3,113,1,5,17,3,18,1,5,16,9
	.half	.L235-.L20
	.byte	3,1,1,5,29,9
	.half	.L16-.L235
	.byte	3,109,1,5,15,7,9
	.half	.L236-.L16
	.byte	3,22,1,5,13,1,4,1,5,5,9
	.half	.L130-.L236
	.byte	3,168,121,1,5,1,9
	.half	.L237-.L130
	.byte	3,1,1,7,9
	.half	.L37-.L237
	.byte	0,1,1
.L166:
	.sdecl	'.debug_ranges',debug,cluster('_Core2_start')
	.sect	'.debug_ranges'
.L36:
	.word	-1,.L22,0,.L37-.L22,0,0
.L85:
	.word	-1,.L22,.L77-.L22,.L83-.L22,.L86-.L22,.L87-.L22,0,0
.L94:
	.word	-1,.L22,.L91-.L22,.L93-.L22,-1,.L26,0,.L47-.L26,0,0
.L118:
	.word	-1,.L22,.L115-.L22,.L117-.L22,-1,.L24,0,.L52-.L24,0,0
.L125:
	.word	-1,.L22,.L107-.L22,.L124-.L22,-1,.L28,0,.L42-.L28,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L38:
	.word	202
	.half	3
	.word	.L39
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\Debug\\',0,12,1
	.word	.L41,.L40
	.byte	2
	.word	.L29
	.byte	3
	.byte	'.cocofun_4',0,1,67,6,1
	.word	.L28,.L42,.L27
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L39:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L40:
	.word	.L239-.L238
.L238:
	.half	3
	.word	.L241-.L240
.L240:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L241:
	.byte	4,2,5,25,7,0,5,2
	.word	.L28
	.byte	3,165,4,1,5,5,9
	.half	.L242-.L28
	.byte	1,5,45,7,9
	.half	.L243-.L242
	.byte	3,6,1,5,38,9
	.half	.L244-.L243
	.byte	3,127,1,5,45,9
	.half	.L245-.L244
	.byte	3,1,1,5,69,9
	.half	.L246-.L245
	.byte	3,127,1,5,26,3,126,1,5,5,9
	.half	.L12-.L246
	.byte	3,125,1,7,9
	.half	.L42-.L12
	.byte	0,1,1,4,2,5,25,0,5,2
	.word	.L28
	.byte	3,145,5,1,5,5,9
	.half	.L242-.L28
	.byte	1,5,45,7,9
	.half	.L243-.L242
	.byte	3,6,1,5,38,9
	.half	.L244-.L243
	.byte	3,127,1,5,45,9
	.half	.L245-.L244
	.byte	3,1,1,5,69,9
	.half	.L246-.L245
	.byte	3,127,1,5,26,3,126,1,5,5,9
	.half	.L12-.L246
	.byte	3,145,127,1,7,9
	.half	.L42-.L12
	.byte	0,1,1
.L239:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L41:
	.word	-1,.L28,0,.L42-.L28,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L43:
	.word	202
	.half	3
	.word	.L44
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\Debug\\',0,12,1
	.word	.L46,.L45
	.byte	2
	.word	.L29
	.byte	3
	.byte	'.cocofun_5',0,1,67,6,1
	.word	.L26,.L47,.L25
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L45:
	.word	.L248-.L247
.L247:
	.half	3
	.word	.L250-.L249
.L249:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L250:
	.byte	4,2,5,45,7,0,5,2
	.word	.L26
	.byte	3,171,4,1,5,69,9
	.half	.L251-.L26
	.byte	3,127,1,5,26,3,126,1,9
	.half	.L47-.L251
	.byte	0,1,1,4,2,5,41,0,5,2
	.word	.L26
	.byte	3,178,4,1,5,65,9
	.half	.L251-.L26
	.byte	3,127,1,5,22,3,126,1,5,26,9
	.half	.L146-.L251
	.byte	3,121,1,7,9
	.half	.L47-.L146
	.byte	0,1,1,4,2,5,45,0,5,2
	.word	.L26
	.byte	3,151,5,1,5,69,9
	.half	.L251-.L26
	.byte	3,127,1,5,26,3,126,1,9
	.half	.L146-.L251
	.byte	3,148,127,1,7,9
	.half	.L47-.L146
	.byte	0,1,1
.L248:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L46:
	.word	-1,.L26,0,.L47-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L48:
	.word	202
	.half	3
	.word	.L49
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\Debug\\',0,12,1
	.word	.L51,.L50
	.byte	2
	.word	.L29
	.byte	3
	.byte	'.cocofun_6',0,1,67,6,1
	.word	.L24,.L52,.L23
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L49:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L50:
	.word	.L253-.L252
.L252:
	.half	3
	.word	.L255-.L254
.L254:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_MulitiCANFD\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart2.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L255:
	.byte	4,2,5,45,7,0,5,2
	.word	.L24
	.byte	3,171,4,1,5,69,9
	.half	.L256-.L24
	.byte	3,127,1,5,26,3,126,1,9
	.half	.L52-.L256
	.byte	0,1,1,4,2,5,41,0,5,2
	.word	.L24
	.byte	3,178,4,1,5,65,9
	.half	.L256-.L24
	.byte	3,127,1,5,22,3,126,1,5,26,9
	.half	.L151-.L256
	.byte	3,121,1,7,9
	.half	.L52-.L151
	.byte	0,1,1,4,2,5,45,0,5,2
	.word	.L24
	.byte	3,151,5,1,5,69,9
	.half	.L256-.L24
	.byte	3,127,1,5,26,3,126,1,9
	.half	.L151-.L256
	.byte	3,148,127,1,7,9
	.half	.L52-.L151
	.byte	0,1,1
.L253:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L51:
	.word	-1,.L24,0,.L52-.L24,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L27:
	.word	-1,.L28,0,.L42-.L28
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L25:
	.word	-1,.L26,0,.L47-.L26
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L52-.L24
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('_Core2_start')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L53-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L111:
	.word	0,0
.L81:
	.word	0,0
.L132:
	.word	0,0
.L134:
	.word	0,0
.L122:
	.word	-1,.L22,.L153-.L22,.L154-.L22
	.half	1
	.byte	95
	.word	0,0
.L109:
	.word	0,0
.L74:
	.word	0,0
.L136:
	.word	-1,.L22,.L159-.L22,.L53-.L22
	.half	1
	.byte	81
	.word	0,0
.L141:
	.word	-1,.L22,.L158-.L22,.L53-.L22
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L140:
	.word	-1,.L22,.L155-.L22,.L53-.L22
	.half	1
	.byte	98
	.word	0,0
.L137:
	.word	-1,.L22,.L160-.L22,.L16-.L22
	.half	1
	.byte	82
	.word	0,0
.L69:
	.word	0,0
.L62:
	.word	-1,.L22,.L57-.L22,.L142-.L22
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L92:
	.word	-1,.L22,.L26-.L22,.L146-.L22
	.half	5
	.byte	144,32,157,32,0
	.word	.L91-.L22,.L147-.L22
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L116:
	.word	-1,.L22,.L24-.L22,.L151-.L22
	.half	5
	.byte	144,32,157,32,0
	.word	.L115-.L22,.L152-.L22
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L104:
	.word	0,0
.L98:
	.word	-1,.L22,.L148-.L22,.L149-.L22
	.half	1
	.byte	95
	.word	0,0
.L79:
	.word	-1,.L22,.L145-.L22,.L83-.L22
	.half	1
	.byte	95
	.word	0,0
.L55:
	.word	-1,.L22,.L143-.L22,.L144-.L22
	.half	1
	.byte	95
	.word	0,0
.L139:
	.word	-1,.L22,.L156-.L22,.L157-.L22
	.half	1
	.byte	111
	.word	0,0
.L89:
	.word	-1,.L22,.L83-.L22,.L87-.L22
	.half	1
	.byte	95
	.word	0,0
.L113:
	.word	-1,.L22,.L150-.L22,.L112-.L22
	.half	1
	.byte	95
	.word	0,0
.L67:
	.word	0,0
.L59:
	.word	0,0
.L102:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L257:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('_Core2_start')
	.sect	'.debug_frame'
	.word	20
	.word	.L257,.L22,.L53-.L22
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L258:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L258,.L24,.L52-.L24
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L258,.L26,.L47-.L26
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L258,.L28,.L42-.L28
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   123  2));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   125      /*Call main function of Cpu0 */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart2.c	   126      __non_return_call(core2_main);
	; Module end
