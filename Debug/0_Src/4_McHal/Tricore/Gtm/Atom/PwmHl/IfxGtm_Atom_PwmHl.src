	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\.IfxGtm_Atom_PwmHl.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.src ..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c'

	
$TC162
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_getDeadtime',code,cluster('IfxGtm_Atom_PwmHl_getDeadtime')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_getDeadtime'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_getDeadtime

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     2   * \file IfxGtm_Atom_PwmHl.c
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     3   * \brief GTM PWMHL details
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     4   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     7   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     8   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    10   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    15   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    17   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    24   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    31   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    39   *
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    40   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    41  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    43  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    45  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    46  #include "IfxGtm_Atom_PwmHl.h"
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    47  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    48  #include "stddef.h"
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    49  #include "string.h"
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    50  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    51  /** \addtogroup IfxLld_Gtm_Atom_PwmHl_PwmHl_StdIf_Functions
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    54  /*------------------------Inline Function Prototypes--------------------------*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    56  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    57  /** \brief Inverts the active state
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    58   * \param activeState Active state
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    59   * \return State
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    60   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    61  IFX_INLINE Ifx_ActiveState IfxGtm_Atom_PwmHl_invertActiveState(Ifx_ActiveState activeState);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    62  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    64  /*-----------------------Private Function Prototypes--------------------------*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    66  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    67  /** \brief Sets switched to OFF
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    68   * \param driver GTM ATOM PWM driver
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    69   * \param tOn ON time
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    70   * \param shift Shift value in ticks
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    71   * \return None
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    72   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    73  IFX_STATIC void IfxGtm_Atom_PwmHl_updateAndShiftOff(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    74  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    75  /** \brief Updates the x output duty cycle in center aligned and center aligned inverted modes
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    76   * \param driver GTM ATOM PWM driver
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    77   * \param tOn T on
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    78   * \return None
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    79   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    80  IFX_STATIC void IfxGtm_Atom_PwmHl_updateCenterAligned(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    81  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    82  /** \brief Updates the x output duty cycle in edge aligned modes (left and right aligned)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    83   * \param driver GTM ATOM PWM driver
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    84   * \param tOn T on
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    85   * \return None
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    86   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    87  IFX_STATIC void IfxGtm_Atom_PwmHl_updateEdgeAligned(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    88  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    89  /** \brief Set the outputs to inactive
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    90   * \param driver GTM ATOM PWM driver
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    91   * \param tOn T on
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    92   * \return None
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    93   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    94  IFX_STATIC void IfxGtm_Atom_PwmHl_updateOff(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    95  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    96  /** \brief Update Pulse
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    97   * \param driver GTM ATOM PWM driver
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    98   * \param tOn ON times. Phase 0 top, phase 1 top, ... phase 0 bottom, phase 1 botteom, ...
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	    99   * \param offset Offset value in ticks. Phase 0 top, phase 1 top, ... phase 0 bottom, phase 1 botteom, ...
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   100   * \return None
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   101   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   102  IFX_STATIC void IfxGtm_Atom_PwmHl_updatePulse(IfxGtm_Atom_PwmHl *driver, float32 *tOn, float32 *offset);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   103  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   104  /** \brief Set Pulse to OFF
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   105   * \param driver GTM ATOM PWM driver
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   106   * \param tOn ON times. Phase 0 top, phase 1 top, ... phase 0 bottom, phase 1 botteom, ...
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   107   * \param offset Offset value in ticks. Phase 0 top, phase 1 top, ... phase 0 bottom, phase 1 botteom, ...
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   108   * \return None
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   109   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   110  IFX_STATIC void IfxGtm_Atom_PwmHl_updatePulseOff(IfxGtm_Atom_PwmHl *driver, float32 *tOn, float32 *offset);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   111  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   112  /** \brief Update Shift Center Aligned
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   113   * \param driver GTM ATOM PWM driver
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   114   * \param tOn ON time
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   115   * \param shift Shift value in ticks
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   116   * \return None
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   117   */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   118  IFX_STATIC void IfxGtm_Atom_PwmHl_updateShiftCenterAligned(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   119  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   120  /** \} */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   121  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   122  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   123  /*------------------------Private Variables/Constants-------------------------*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   124  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   125  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   126  IFX_STATIC IFX_CONST IfxGtm_Atom_PwmHl_Mode IfxGtm_Atom_PwmHl_modes[Ifx_Pwm_Mode_off + 1] = {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   127      {Ifx_Pwm_Mode_centerAligned,         FALSE, &IfxGtm_Atom_PwmHl_updateCenterAligned, &IfxGtm_Atom_PwmHl_updateShiftCenterAligned, &IfxGtm_Atom_PwmHl_updatePulse   },
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   128      {Ifx_Pwm_Mode_centerAlignedInverted, TRUE,  &IfxGtm_Atom_PwmHl_updateCenterAligned, &IfxGtm_Atom_PwmHl_updateShiftCenterAligned, &IfxGtm_Atom_PwmHl_updatePulse   },
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   129      {Ifx_Pwm_Mode_leftAligned,           FALSE, &IfxGtm_Atom_PwmHl_updateEdgeAligned,   &IfxGtm_Atom_PwmHl_updateAndShiftOff,        &IfxGtm_Atom_PwmHl_updatePulse   },
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   130      {Ifx_Pwm_Mode_rightAligned,          TRUE,  &IfxGtm_Atom_PwmHl_updateEdgeAligned,   &IfxGtm_Atom_PwmHl_updateAndShiftOff,        &IfxGtm_Atom_PwmHl_updatePulse   },
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   131      {Ifx_Pwm_Mode_off,                   FALSE, &IfxGtm_Atom_PwmHl_updateOff,           &IfxGtm_Atom_PwmHl_updateAndShiftOff,        &IfxGtm_Atom_PwmHl_updatePulseOff},
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   132  };
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   133  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   134  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   135  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   136  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   137  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   138  IFX_INLINE Ifx_ActiveState IfxGtm_Atom_PwmHl_invertActiveState(Ifx_ActiveState activeState)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   139  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   140      return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   141  }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   142  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   143  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   144  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   145  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   146  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   147  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   148  float32 IfxGtm_Atom_PwmHl_getDeadtime(IfxGtm_Atom_PwmHl *driver)
; Function IfxGtm_Atom_PwmHl_getDeadtime
.L93:
IfxGtm_Atom_PwmHl_getDeadtime:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   149  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   150      return IfxStdIf_Timer_tickToS(driver->timer->base.clockFreq, driver->base.deadtime);
	ld.w	d15,[a4]
.L724:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
	fcall	.cocofun_7
.L554:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   151  }
	ret
.L361:
	
__IfxGtm_Atom_PwmHl_getDeadtime_function_end:
	.size	IfxGtm_Atom_PwmHl_getDeadtime,__IfxGtm_Atom_PwmHl_getDeadtime_function_end-IfxGtm_Atom_PwmHl_getDeadtime
.L178:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_7'
	.align	2
; Function .cocofun_7
.L95:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	ld.a	a15,[a4]20
.L986:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
	utof	d15,d15
.L987:
	ld.w	d0,[a15]6
.L988:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
	div.f	d2,d15,d0
	fret
.L288:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_getMinPulse',code,cluster('IfxGtm_Atom_PwmHl_getMinPulse')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_getMinPulse'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_getMinPulse

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   152  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   153  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   154  float32 IfxGtm_Atom_PwmHl_getMinPulse(IfxGtm_Atom_PwmHl *driver)
; Function IfxGtm_Atom_PwmHl_getMinPulse
.L97:
IfxGtm_Atom_PwmHl_getMinPulse:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   155  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   156      return IfxStdIf_Timer_tickToS(driver->timer->base.clockFreq, driver->base.minPulse - driver->base.deadtime);
	ld.w	d15,[a4]4
.L729:
	ld.w	d0,[a4]
.L730:
	sub	d15,d0
.L731:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
	fcall	.cocofun_7
.L732:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   157  }
	ret
.L364:
	
__IfxGtm_Atom_PwmHl_getMinPulse_function_end:
	.size	IfxGtm_Atom_PwmHl_getMinPulse,__IfxGtm_Atom_PwmHl_getMinPulse_function_end-IfxGtm_Atom_PwmHl_getMinPulse
.L183:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_getMode',code,cluster('IfxGtm_Atom_PwmHl_getMode')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_getMode'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_getMode

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   158  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   159  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   160  Ifx_Pwm_Mode IfxGtm_Atom_PwmHl_getMode(IfxGtm_Atom_PwmHl *driver)
; Function IfxGtm_Atom_PwmHl_getMode
.L99:
IfxGtm_Atom_PwmHl_getMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   161  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   162      return driver->base.mode;
	ld.bu	d2,[a4]12
.L737:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   163  }
	ret
.L367:
	
__IfxGtm_Atom_PwmHl_getMode_function_end:
	.size	IfxGtm_Atom_PwmHl_getMode,__IfxGtm_Atom_PwmHl_getMode_function_end-IfxGtm_Atom_PwmHl_getMode
.L188:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_init',code,cluster('IfxGtm_Atom_PwmHl_init')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_init'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_init

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   164  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   165  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   166  boolean IfxGtm_Atom_PwmHl_init(IfxGtm_Atom_PwmHl *driver, const IfxGtm_Atom_PwmHl_Config *config)
; Function IfxGtm_Atom_PwmHl_init
.L101:
IfxGtm_Atom_PwmHl_init:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   167  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   168      boolean            result       = TRUE;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   169      uint16             channelMask;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   170      uint16             channelsMask = 0;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   171      uint32             channelIndex;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   172  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   173      IfxGtm_Atom_Timer *timer = config->timer;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   174  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   175      driver->base.mode             = Ifx_Pwm_Mode_init;
	mov	d15,#5
	mov.aa	a12,a4
.L557:
	mov.aa	a15,a5
.L558:
	mov	d8,#0
	ld.a	a13,[a15]16
.L560:
	st.b	[a12]12,d15
.L658:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   176      driver->timer                 = timer;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   177      driver->base.setMode          = 0;
	mov	d15,d8
	st.a	[a12]20,a13
.L561:
	st.b	[a12]13,d15
.L659:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   178      driver->base.inverted         = FALSE;
	st.b	[a12]16,d15
.L660:
	sub.a	a10,#40
.L555:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   179      driver->base.ccxActiveState   = config->base.ccxActiveState;
	ld.bu	d15,[a15]14
.L562:
	st.b	[a12]14,d15
.L661:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   180      driver->base.coutxActiveState = config->base.coutxActiveState;
	ld.bu	d15,[a15]15
.L662:
	st.b	[a12]15,d15
.L663:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   181      driver->base.channelCount     = config->base.channelCount;
	ld.bu	d15,[a15]8
.L664:
	st.b	[a12]17,d15
.L665:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   182  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   183      IfxGtm_Atom_PwmHl_setDeadtime(driver, config->base.deadtime);
	ld.w	d4,[a15]
	call	IfxGtm_Atom_PwmHl_setDeadtime
.L556:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   184      IfxGtm_Atom_PwmHl_setMinPulse(driver, config->base.minPulse);
	ld.w	d4,[a15]4
	mov.aa	a4,a12
.L563:
	call	IfxGtm_Atom_PwmHl_setMinPulse
.L564:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   185  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   186      driver->atom = &(timer->gtm->ATOM[config->atom]);
	ld.a	a2,[a13]12
.L666:
	ld.bu	d15,[a15]20
	sha	d15,d15,#11
.L667:
	addsc.a	a2,a2,d15,#0
	movh.a	a3,#15
	add.a	a3,a2
	lea	a2,[a3]-32768
.L668:
	st.a	[a12]36,a2
.L669:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   187      /* Only one AGC  */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   188      driver->agc  = (Ifx_GTM_ATOM_AGC *)&driver->atom->AGC.GLB_CTRL;
	lea	a2,[a2]64
.L670:
	st.a	[a12]40,a2
.L349:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   189  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   190      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->base.channelCount <= IFXGTM_ATOM_PWMHL_MAX_NUM_CHANNELS);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   191  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   192      IfxGtm_Cmu_Clk clock = IfxGtm_Atom_Ch_getClockSource(timer->atom, timer->timerChannel);
	ld.a	a4,[a13]16
.L671:
	ld.b	d4,[a13]25
	call	IfxGtm_Atom_Ch_getClockSource
.L565:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   193  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   194      for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
	mov	d9,d2
	mov.aa	a14,a12
.L566:
	mov	d10,#0
	j	.L5
.L6:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   195      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   196          IfxGtm_Atom_Ch channel;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   197          /* CCX */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   198          channel                   = config->ccx[channelIndex]->channel;
	ld.a	a2,[a15]24
.L672:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   199          driver->ccx[channelIndex] = channel;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   200          channelMask               = 1 << channel;
	mov	d0,#1
.L673:
	addsc.a	a2,a2,d10,#2
	ld.a	a2,[a2]
.L674:
	ld.b	d4,[a2]1
.L568:
	st.b	[a14]44,d4
.L675:
	sha	d0,d0,d4
.L676:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   201          channelsMask             |= channelMask;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   202  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   203          /* Initialize the timer part */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   204          IfxGtm_Atom_Ch_configurePwmMode(driver->atom, channel, clock,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   205              driver->base.inverted ? config->base.ccxActiveState :
	ld.bu	d15,[a12]16
.L677:
	extr.u	d0,d0,#0,#16
	ld.bu	d6,[a15]14
.L570:
	or	d8,d0
.L678:
	jne	d15,#0,.L8
.L679:
	eq	d6,d6,#0
.L8:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   206              IfxGtm_Atom_PwmHl_invertActiveState(config->base.ccxActiveState),
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   207              IfxGtm_Atom_Ch_ResetEvent_onTrigger, IfxGtm_Atom_Ch_OutputTrigger_forward);
	mov	d5,d9
	ld.a	a4,[a12]36
.L572:
	mov	d0,#0
	st.b	[a10],d0
.L571:
	mov	d7,#1
	call	IfxGtm_Atom_Ch_configurePwmMode
.L569:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   208  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   209          /* Initialize the port */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   210          if (config->initPins == TRUE)
	ld.bu	d15,[a15]32
.L680:
	jne	d15,#1,.L9
.L681:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   211          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   212              IfxGtm_PinMap_setAtomTout(config->ccx[channelIndex],
	ld.a	a2,[a15]24
.L682:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   213                  config->base.outputMode, config->base.outputDriver);
	ld.bu	d4,[a15]10
.L683:
	ld.bu	d5,[a15]11
.L684:
	addsc.a	a2,a2,d10,#2
	ld.a	a4,[a2]
.L685:
	call	IfxGtm_PinMap_setAtomTout
.L9:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   214          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   215  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   216          /* COUTX */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   217          channel                     = config->coutx[channelIndex]->channel;
	ld.a	a2,[a15]28
.L686:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   218          driver->coutx[channelIndex] = channel;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   219          channelMask                 = 1 << channel;
	mov	d15,#1
.L687:
	addsc.a	a2,a2,d10,#2
	ld.a	a2,[a2]
.L688:
	ld.b	d4,[a2]1
.L573:
	st.b	[a14]52,d4
.L689:
	sha	d15,d15,d4
	add.a	a14,#1
.L690:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   220          channelsMask               |= channelMask;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   221  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   222          /* Initialize the timer part */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   223          IfxGtm_Atom_Ch_configurePwmMode(driver->atom, channel, clock,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   224              driver->base.inverted ?
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   225              IfxGtm_Atom_PwmHl_invertActiveState(config->base.coutxActiveState)
	extr.u	d15,d15,#0,#16
	ld.bu	d6,[a15]15
.L575:
	or	d8,d15
	ld.bu	d15,[a12]16
.L576:
	jeq	d15,#0,.L10
.L691:
	eq	d6,d6,#0

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   226              : config->base.coutxActiveState,
.L10:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   227              IfxGtm_Atom_Ch_ResetEvent_onTrigger, IfxGtm_Atom_Ch_OutputTrigger_forward);
	mov	d5,d9
	ld.a	a4,[a12]36
.L577:
	mov	d15,#0
	st.b	[a10],d15
.L692:
	mov	d7,#1
	call	IfxGtm_Atom_Ch_configurePwmMode
.L574:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   228  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   229          /* Initialize the port */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   230          if (config->initPins == TRUE)
	ld.bu	d15,[a15]32
.L693:
	jne	d15,#1,.L12
.L694:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   231          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   232              IfxGtm_PinMap_setAtomTout(config->coutx[channelIndex],
	ld.a	a2,[a15]28
.L695:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   233                  config->base.outputMode, config->base.outputDriver);
	ld.bu	d4,[a15]10
.L696:
	ld.bu	d5,[a15]11
.L697:
	addsc.a	a2,a2,d10,#2
	ld.a	a4,[a2]
.L698:
	call	IfxGtm_PinMap_setAtomTout
.L12:
	add	d10,#1
.L5:
	ld.bu	d15,[a15]8
.L699:
	jlt.u	d10,d15,.L6
.L700:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   234          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   235      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   236  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   237      IfxGtm_Atom_Agc_enableChannelsOutput(driver->agc, channelsMask, 0, TRUE);
	mov	d4,d8
	ld.a	a4,[a12]40
.L578:
	mov	d5,#0
.L701:
	mov	d6,#1
	call	IfxGtm_Atom_Agc_enableChannelsOutput
.L579:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   238      IfxGtm_Atom_Agc_enableChannels(driver->agc, channelsMask, 0, TRUE);
	mov	d4,d8
	ld.a	a4,[a12]40
.L580:
	mov	d5,#0
.L702:
	mov	d6,#1
	call	IfxGtm_Atom_Agc_enableChannels
.L581:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   239  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   240      IfxGtm_Atom_PwmHl_setMode(driver, Ifx_Pwm_Mode_off);
	mov	d4,#4
	mov.aa	a4,a12
.L582:
	call	IfxGtm_Atom_PwmHl_setMode
.L354:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   241  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   242      Ifx_TimerValue tOn[IFXGTM_ATOM_PWMHL_MAX_NUM_CHANNELS] = {0};
	movh.a	a15,#@his(.2.ini)
.L559:
	lea	a15,[a15]@los(.2.ini)
.L703:
	lea	a2,[a10]4
	mov.a	a4,#7
.L13:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a4,.L13
.L704:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   243      IfxGtm_Atom_PwmHl_updateOff(driver, tOn); /* tOn do not need defined values */
	lea	a5,[a10]4
	mov.aa	a4,a12
.L583:
	call	IfxGtm_Atom_PwmHl_updateOff
.L584:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   244  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   245      /* Transfer the shadow registers */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   246      IfxGtm_Atom_Agc_setChannelsForceUpdate(driver->agc, channelsMask, 0, 0, 0);
	mov	d5,#0
	ld.a	a4,[a12]40
.L705:
	mov	d4,d8
.L585:
	mov	e6,d5,d5
	call	IfxGtm_Atom_Agc_setChannelsForceUpdate
.L586:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   247      IfxGtm_Atom_Agc_trigger(driver->agc);
	ld.a	a4,[a12]40
	call	IfxGtm_Atom_Agc_trigger
.L706:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   248      IfxGtm_Atom_Agc_setChannelsForceUpdate(driver->agc, 0, channelsMask, 0, 0);
	mov	d4,#0
	ld.a	a4,[a12]40
.L707:
	mov	d5,d8
.L587:
	mov	e6,d4,d4
	call	IfxGtm_Atom_Agc_setChannelsForceUpdate
.L588:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   249  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   250      /* Enable timer to update the channels */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   251  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   252      for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	mov	d15,#0
	mov.aa	a15,a12
.L567:
	j	.L14
.L15:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   253      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   254          IfxGtm_Atom_Timer_addToChannelMask(timer, driver->ccx[channelIndex]);
	ld.b	d4,[a15]44
	mov.aa	a4,a13
.L589:
	call	IfxGtm_Atom_Timer_addToChannelMask
.L590:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   255          IfxGtm_Atom_Timer_addToChannelMask(timer, driver->coutx[channelIndex]);
	ld.b	d4,[a15]52
	mov.aa	a4,a13
.L591:
	call	IfxGtm_Atom_Timer_addToChannelMask
.L592:
	add	d15,#1
	add.a	a15,#1
.L14:
	ld.bu	d0,[a12]17
.L708:
	jlt.u	d15,d0,.L15
.L709:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   256      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   257  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   258      return result;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   259  }
	mov	d2,#1
	ret
.L337:
	
__IfxGtm_Atom_PwmHl_init_function_end:
	.size	IfxGtm_Atom_PwmHl_init,__IfxGtm_Atom_PwmHl_init_function_end-IfxGtm_Atom_PwmHl_init
.L168:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_initConfig',code,cluster('IfxGtm_Atom_PwmHl_initConfig')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_initConfig'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_initConfig

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   260  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   261  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   262  void IfxGtm_Atom_PwmHl_initConfig(IfxGtm_Atom_PwmHl_Config *config)
; Function IfxGtm_Atom_PwmHl_initConfig
.L103:
IfxGtm_Atom_PwmHl_initConfig:	.type	func
	mov.aa	a12,a4
.L594:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   263  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   264      IfxStdIf_PwmHl_initConfig(&config->base);
	call	IfxStdIf_PwmHl_initConfig
.L593:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   265      config->timer    = NULL_PTR;
	mov.a	a15,#0
.L714:
	st.a	[a12]16,a15
.L715:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   266      config->atom     = IfxGtm_Atom_0;
	mov	d15,#0
	st.b	[a12]20,d15
.L716:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   267      config->ccx      = NULL_PTR;
	st.a	[a12]24,a15
.L717:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   268      config->coutx    = NULL_PTR;
	st.a	[a12]28,a15
.L718:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   269      config->initPins = TRUE;
	mov	d15,#1
	st.b	[a12]32,d15
.L719:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   270  }
	ret
.L357:
	
__IfxGtm_Atom_PwmHl_initConfig_function_end:
	.size	IfxGtm_Atom_PwmHl_initConfig,__IfxGtm_Atom_PwmHl_initConfig_function_end-IfxGtm_Atom_PwmHl_initConfig
.L173:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setDeadtime',code,cluster('IfxGtm_Atom_PwmHl_setDeadtime')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setDeadtime'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_setDeadtime

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   271  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   272  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   273  boolean IfxGtm_Atom_PwmHl_setDeadtime(IfxGtm_Atom_PwmHl *driver, float32 deadtime)
; Function IfxGtm_Atom_PwmHl_setDeadtime
.L105:
IfxGtm_Atom_PwmHl_setDeadtime:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   274  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   275      Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, deadtime);
	fcall	.cocofun_8
.L742:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   276      driver->base.deadtime = value;
	st.w	[a4],d15
.L595:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   277  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   278      return TRUE;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   279  }
	mov	d2,#1
	ret
.L369:
	
__IfxGtm_Atom_PwmHl_setDeadtime_function_end:
	.size	IfxGtm_Atom_PwmHl_setDeadtime,__IfxGtm_Atom_PwmHl_setDeadtime_function_end-IfxGtm_Atom_PwmHl_setDeadtime
.L193:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_8'
	.align	2
; Function .cocofun_8
.L107:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	ld.a	a15,[a4]20
.L993:
	ld.w	d15,[a15]6
.L994:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   438  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   441  /** \brief Convert seconds to timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   442   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   443   * \param  seconds time value in seconds to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   444   * \return Return the converted time in timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   446  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   447  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   448      return seconds * clockFreq;
	mul.f	d15,d4,d15
	ftouz	d15,d15
	fret
.L293:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setMinPulse',code,cluster('IfxGtm_Atom_PwmHl_setMinPulse')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setMinPulse'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_setMinPulse

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   280  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   281  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   282  boolean IfxGtm_Atom_PwmHl_setMinPulse(IfxGtm_Atom_PwmHl *driver, float32 minPulse)
; Function IfxGtm_Atom_PwmHl_setMinPulse
.L109:
IfxGtm_Atom_PwmHl_setMinPulse:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   283  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   284      Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, minPulse);
	fcall	.cocofun_8
.L596:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   285  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   286      driver->base.minPulse = value + driver->base.deadtime;
	ld.w	d0,[a4]
.L747:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   287      driver->base.maxPulse = driver->timer->base.period - driver->base.minPulse;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   288  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   289      return TRUE;
	mov	d2,#1
.L748:
	add	d15,d0
	st.w	[a4]4,d15
.L749:
	ld.w	d0,[a15]
.L750:
	sub	d0,d15
	st.w	[a4]8,d0
.L751:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   290  }
	ret
.L373:
	
__IfxGtm_Atom_PwmHl_setMinPulse_function_end:
	.size	IfxGtm_Atom_PwmHl_setMinPulse,__IfxGtm_Atom_PwmHl_setMinPulse_function_end-IfxGtm_Atom_PwmHl_setMinPulse
.L198:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setMode',code,cluster('IfxGtm_Atom_PwmHl_setMode')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setMode'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_setMode

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   291  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   292  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   293  boolean IfxGtm_Atom_PwmHl_setMode(IfxGtm_Atom_PwmHl *driver, Ifx_Pwm_Mode mode)
; Function IfxGtm_Atom_PwmHl_setMode
.L111:
IfxGtm_Atom_PwmHl_setMode:	.type	func
	mov.aa	a15,a4
.L598:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   294  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   295      boolean                 result = TRUE;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   296      IfxGtm_Atom_PwmHl_Base *base   = &driver->base;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   297  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   298      if (base->mode != mode)
	ld.bu	d15,[a15]12
.L756:
	mov	d9,#1
.L599:
	jeq	d15,d4,.L19
.L757:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   299      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   300          if ((mode > Ifx_Pwm_Mode_off) || (IfxGtm_Atom_PwmHl_modes[mode].update == NULL_PTR))
	jge.u	d4,#5,.L20
.L758:
	fcall	.cocofun_9
.L759:
	ld.w	d15,[a2]4
.L760:
	jne	d15,#0,.L21
.L20:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   301          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   302              mode   = Ifx_Pwm_Mode_off;
	mov	d4,#4
.L761:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   303              result = FALSE;
	mov	d9,#0
.L21:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   304          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   305  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   306          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mode == IfxGtm_Atom_PwmHl_modes[mode].mode);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   307  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   308          base->mode             = mode;
	st.b	[a15]12,d4
.L762:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   309          driver->update         = IfxGtm_Atom_PwmHl_modes[mode].update;
	fcall	.cocofun_9
.L763:
	ld.a	a4,[a2]4
.L597:
	st.a	[a15]24,a4
.L764:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   310          driver->updateAndShift = IfxGtm_Atom_PwmHl_modes[mode].updateAndShift;
	ld.a	a4,[a2]8
.L765:
	st.a	[a15]28,a4
.L766:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   311          driver->updatePulse    = IfxGtm_Atom_PwmHl_modes[mode].updatePulse;
	ld.a	a4,[a2]12
.L767:
	st.a	[a15]32,a4
.L768:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   312  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   313          if (base->mode != Ifx_Pwm_Mode_off)
	jeq	d4,#4,.L22
.L769:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   314          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   315              base->inverted = IfxGtm_Atom_PwmHl_modes[mode].inverted;
	ld.bu	d15,[a2]1
.L770:
	st.b	[a15]16,d15
.L22:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   316          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   317          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   318          {   /* Keep previous inverted for off mode */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   319          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   320  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   321          if (base->inverted)
	ld.bu	d15,[a15]16
.L771:
	jeq	d15,#0,.L23
.L772:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   322          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   323              driver->ccxTemp   = driver->coutx;
	lea	a2,[a15]52
.L773:
	st.a	[a15]60,a2
.L774:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   324              driver->coutxTemp = driver->ccx;
	lea	a2,[a15]44
.L775:
	j	.L24
.L23:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   325          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   326          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   327          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   328              driver->ccxTemp   = driver->ccx;
	lea	a2,[a15]44
.L776:
	st.a	[a15]60,a2
.L777:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   329              driver->coutxTemp = driver->coutx;
	lea	a2,[a15]52
.L24:
	st.a	[a15]64,a2
.L383:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   330          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   331  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   332          {   /* Workaround to enable the signal inversion required for center aligned inverted
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   333               * and right aligned modes */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   334              /** \note Changing signal level may produce short circuit at the power stage,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   335               * in which case the inverter must be disable during this action.*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   336  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   337              /* Ifx_Pwm_Mode_centerAligned and Ifx_Pwm_Mode_LeftAligned use inverted=FALSE */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   338              /* Ifx_Pwm_Mode_centerAlignedInverted and Ifx_Pwm_Mode_RightAligned use inverted=TRUE */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   339              uint32 channelIndex;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   340  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   341              for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	mov	d8,#0
	mov.aa	a12,a15
.L600:
	j	.L25
.L26:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   342              {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   343                  IfxGtm_Atom_Ch channel;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   344  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   345                  channel = driver->ccx[channelIndex];
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   346                  IfxGtm_Atom_Ch_setSignalLevel(driver->atom, channel, base->inverted
	ld.bu	d15,[a15]16
.L778:
	ld.b	d4,[a12]44
.L601:
	jeq	d15,#0,.L27
.L779:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   347                      ? base->ccxActiveState
	ld.bu	d5,[a15]14
.L780:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   348                      : IfxGtm_Atom_PwmHl_invertActiveState(driver->base.ccxActiveState));
	j	.L28
.L27:
	ld.bu	d15,[a15]14
.L781:
	eq	d5,d15,#0
.L28:
	ld.a	a4,[a15]36
.L782:
	call	IfxGtm_Atom_Ch_setSignalLevel
.L602:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   349  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   350                  channel = driver->coutx[channelIndex];
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   351                  IfxGtm_Atom_Ch_setSignalLevel(driver->atom, channel, base->inverted
	ld.bu	d15,[a15]16
.L783:
	ld.b	d4,[a12]52
.L603:
	add.a	a12,#1
.L784:
	jeq	d15,#0,.L29
.L785:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   352                      ? IfxGtm_Atom_PwmHl_invertActiveState(driver->base.coutxActiveState)
	ld.bu	d15,[a15]15
.L786:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   353                      : base->coutxActiveState);
	eq	d5,d15,#0
	j	.L30
.L29:
	ld.bu	d5,[a15]15
.L30:
	ld.a	a4,[a15]36
.L787:
	call	IfxGtm_Atom_Ch_setSignalLevel
.L385:
	add	d8,#1
.L25:
	ld.bu	d15,[a15]17
.L788:
	jlt.u	d8,d15,.L26
.L19:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   354              }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   355          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   356      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   357  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   358      return result;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   359  }
	mov	d2,d9
	ret
.L376:
	
__IfxGtm_Atom_PwmHl_setMode_function_end:
	.size	IfxGtm_Atom_PwmHl_setMode,__IfxGtm_Atom_PwmHl_setMode_function_end-IfxGtm_Atom_PwmHl_setMode
.L203:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_9'
	.align	2
; Function .cocofun_9
.L113:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:0
	sha	d15,d4,#4
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_modes)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_modes)
.L999:
	addsc.a	a2,a2,d15,#0
.L1000:
	fret
.L298:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setOnTime',code,cluster('IfxGtm_Atom_PwmHl_setOnTime')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setOnTime'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_setOnTime

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   360  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   361  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   362  void IfxGtm_Atom_PwmHl_setOnTime(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn)
; Function IfxGtm_Atom_PwmHl_setOnTime
.L115:
IfxGtm_Atom_PwmHl_setOnTime:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   363  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   364      driver->update(driver, tOn);
	ld.a	a15,[a4]24
.L793:
	ji	a15
.L387:
	
__IfxGtm_Atom_PwmHl_setOnTime_function_end:
	.size	IfxGtm_Atom_PwmHl_setOnTime,__IfxGtm_Atom_PwmHl_setOnTime_function_end-IfxGtm_Atom_PwmHl_setOnTime
.L208:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setOnTimeAndShift',code,cluster('IfxGtm_Atom_PwmHl_setOnTimeAndShift')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setOnTimeAndShift'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_setOnTimeAndShift

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   365  }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   366  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   367  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   368  void IfxGtm_Atom_PwmHl_setOnTimeAndShift(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift)
; Function IfxGtm_Atom_PwmHl_setOnTimeAndShift
.L117:
IfxGtm_Atom_PwmHl_setOnTimeAndShift:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   369  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   370      driver->updateAndShift(driver, tOn, shift);
	ld.a	a15,[a4]28
.L798:
	ji	a15
.L391:
	
__IfxGtm_Atom_PwmHl_setOnTimeAndShift_function_end:
	.size	IfxGtm_Atom_PwmHl_setOnTimeAndShift,__IfxGtm_Atom_PwmHl_setOnTimeAndShift_function_end-IfxGtm_Atom_PwmHl_setOnTimeAndShift
.L213:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setPulse',code,cluster('IfxGtm_Atom_PwmHl_setPulse')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setPulse'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_setPulse

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   371  }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   372  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   373  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   374  void IfxGtm_Atom_PwmHl_setPulse(IfxGtm_Atom_PwmHl *driver, float32 *tOn, float32 *offset)
; Function IfxGtm_Atom_PwmHl_setPulse
.L119:
IfxGtm_Atom_PwmHl_setPulse:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   375  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   376      driver->updatePulse(driver, tOn, offset);
	ld.a	a15,[a4]32
.L803:
	ji	a15
.L395:
	
__IfxGtm_Atom_PwmHl_setPulse_function_end:
	.size	IfxGtm_Atom_PwmHl_setPulse,__IfxGtm_Atom_PwmHl_setPulse_function_end-IfxGtm_Atom_PwmHl_setPulse
.L218:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setupChannels',code,cluster('IfxGtm_Atom_PwmHl_setupChannels')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_setupChannels'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_setupChannels

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   377  }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   378  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   379  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   380  void IfxGtm_Atom_PwmHl_setupChannels(IfxGtm_Atom_PwmHl *driver, boolean *activeCh, boolean *stuckSt)
; Function IfxGtm_Atom_PwmHl_setupChannels
.L121:
IfxGtm_Atom_PwmHl_setupChannels:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   381  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   382      /* Dummy Function for StdIf Compile*/
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   383      IFX_UNUSED_PARAMETER(driver)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   384      IFX_UNUSED_PARAMETER(activeCh)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   385      IFX_UNUSED_PARAMETER(stuckSt)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   386  }
	ret
.L400:
	
__IfxGtm_Atom_PwmHl_setupChannels_function_end:
	.size	IfxGtm_Atom_PwmHl_setupChannels,__IfxGtm_Atom_PwmHl_setupChannels_function_end-IfxGtm_Atom_PwmHl_setupChannels
.L223:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_stdIfPwmHlInit',code,cluster('IfxGtm_Atom_PwmHl_stdIfPwmHlInit')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_stdIfPwmHlInit'
	.align	2
	
	.global	IfxGtm_Atom_PwmHl_stdIfPwmHlInit

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   387  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   388  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   389  boolean IfxGtm_Atom_PwmHl_stdIfPwmHlInit(IfxStdIf_PwmHl *stdif, IfxGtm_Atom_PwmHl *driver)
; Function IfxGtm_Atom_PwmHl_stdIfPwmHlInit
.L123:
IfxGtm_Atom_PwmHl_stdIfPwmHlInit:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   390  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   391      /* Ensure the stdif is reset to zeros */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   392      memset(stdif, 0, sizeof(IfxStdIf_PwmHl));
	mov	d4,#0
	mov.aa	a15,a4
.L605:
	mov	d5,#116
	mov.aa	a12,a5
.L606:
	call	memset
.L604:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   393  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   394      /* *INDENT-OFF* Note: this file was indented manually by the author. */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   395      /* Set the API link */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   396      stdif->driver               = driver;
	st.a	[a15],a12
.L812:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   397      stdif->setDeadtime          = (IfxStdIf_PwmHl_SetDeadtime      )&IfxGtm_Atom_PwmHl_setDeadtime;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_setDeadtime)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_setDeadtime)
.L813:
	st.a	[a15]4,a2
.L814:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   398      stdif->getDeadtime          = (IfxStdIf_PwmHl_GetDeadtime      )&IfxGtm_Atom_PwmHl_getDeadtime;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_getDeadtime)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_getDeadtime)
.L815:
	st.a	[a15]8,a2
.L816:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   399      stdif->setMinPulse          = (IfxStdIf_PwmHl_SetMinPulse      )&IfxGtm_Atom_PwmHl_setMinPulse;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_setMinPulse)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_setMinPulse)
.L817:
	st.a	[a15]16,a2
.L818:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   400      stdif->getMinPulse          = (IfxStdIf_PwmHl_GetMinPulse      )&IfxGtm_Atom_PwmHl_getMinPulse;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_getMinPulse)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_getMinPulse)
.L819:
	st.a	[a15]20,a2
.L820:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   401      stdif->getMode              = (IfxStdIf_PwmHl_GetMode          )&IfxGtm_Atom_PwmHl_getMode;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_getMode)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_getMode)
.L821:
	st.a	[a15]24,a2
.L822:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   402      stdif->setMode              = (IfxStdIf_PwmHl_SetMode          )&IfxGtm_Atom_PwmHl_setMode;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_setMode)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_setMode)
.L823:
	st.a	[a15]28,a2
.L824:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   403      stdif->setOnTime            = (IfxStdIf_PwmHl_SetOnTime        )&IfxGtm_Atom_PwmHl_setOnTime;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_setOnTime)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_setOnTime)
.L825:
	st.a	[a15]32,a2
.L826:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   404      stdif->setOnTimeAndShift    = (IfxStdIf_PwmHl_SetOnTimeAndShift)&IfxGtm_Atom_PwmHl_setOnTimeAndShift;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_setOnTimeAndShift)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_setOnTimeAndShift)
.L827:
	st.a	[a15]36,a2
.L828:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   405      stdif->setPulse             = (IfxStdIf_PwmHl_SetPulse         )&IfxGtm_Atom_PwmHl_setPulse;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_setPulse)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_setPulse)
.L829:
	st.a	[a15]40,a2
.L830:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   406      stdif->setupChannels        = (IfxStdIf_PwmHl_SetupChannels    )&IfxGtm_Atom_PwmHl_setupChannels;
	movh.a	a2,#@his(IfxGtm_Atom_PwmHl_setupChannels)
	lea	a2,[a2]@los(IfxGtm_Atom_PwmHl_setupChannels)
.L831:
	st.a	[a15]44,a2
.L832:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   407      IfxGtm_Atom_Timer_stdIfTimerInit(&stdif->timer, driver->timer);
	lea	a4,[a15]48
.L833:
	ld.a	a5,[a12]20
	call	IfxGtm_Atom_Timer_stdIfTimerInit
.L834:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   408      /* *INDENT-ON* */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   409  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   410      return TRUE;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   411  }
	mov	d2,#1
	ret
.L405:
	
__IfxGtm_Atom_PwmHl_stdIfPwmHlInit_function_end:
	.size	IfxGtm_Atom_PwmHl_stdIfPwmHlInit,__IfxGtm_Atom_PwmHl_stdIfPwmHlInit_function_end-IfxGtm_Atom_PwmHl_stdIfPwmHlInit
.L228:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateAndShiftOff',code,cluster('IfxGtm_Atom_PwmHl_updateAndShiftOff')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateAndShiftOff'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   412  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   413  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   414  IFX_STATIC void IfxGtm_Atom_PwmHl_updateAndShiftOff(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift)
; Function IfxGtm_Atom_PwmHl_updateAndShiftOff
.L125:
IfxGtm_Atom_PwmHl_updateAndShiftOff:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   415  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   416      IfxGtm_Atom_PwmHl_updateOff(driver, NULL_PTR);
	mov.a	a5,#0
.L607:
	j	IfxGtm_Atom_PwmHl_updateOff
.L409:
	
__IfxGtm_Atom_PwmHl_updateAndShiftOff_function_end:
	.size	IfxGtm_Atom_PwmHl_updateAndShiftOff,__IfxGtm_Atom_PwmHl_updateAndShiftOff_function_end-IfxGtm_Atom_PwmHl_updateAndShiftOff
.L233:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateCenterAligned',code,cluster('IfxGtm_Atom_PwmHl_updateCenterAligned')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateCenterAligned'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   417      IFX_UNUSED_PARAMETER(tOn)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   418      IFX_UNUSED_PARAMETER(shift)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   419  }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   420  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   421  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   422  IFX_STATIC void IfxGtm_Atom_PwmHl_updateCenterAligned(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn)
; Function IfxGtm_Atom_PwmHl_updateCenterAligned
.L127:
IfxGtm_Atom_PwmHl_updateCenterAligned:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   423  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   424      uint8          channelIndex;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   425      Ifx_TimerValue period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   426      Ifx_TimerValue deadtime = driver->base.deadtime;
	fcall	.cocofun_13
.L619:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   427  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   428      period = driver->timer->base.period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   429  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   430      for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	j	.L33
.L34:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   431      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   432          Ifx_TimerValue x; /* x=period*dutyCycle, x=OnTime+deadTime */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   433          Ifx_TimerValue cm0, cm1;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   434          x = tOn[channelIndex];
	addsc.a	a15,a5,d4,#2
	ld.w	d0,[a15]
.L610:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   435  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   436          if (driver->base.inverted != FALSE)
	fcall	.cocofun_10
.L843:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   437          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   438              x = period - x;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   439          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   440          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   441          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   442  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   443          if ((x < driver->base.minPulse) || (x <= deadtime))
	jlt.u	d0,d15,.L36
.L844:
	jlt.u	d2,d0,.L37
.L36:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   444          {   /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   445              x = 0;
	mov	d0,#0
	j	.L38
.L37:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   446          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   447          else if (x > driver->base.maxPulse)
	ld.w	d15,[a4]8
.L845:
	ge.u	d15,d15,d0
.L846:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   448          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   449              x = period;
	cmovn	d0,d15,d3
.L38:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   450          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   451          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   452          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   453  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   454          /* Special handling due to GTM issue */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   455          if (x == period)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   456          {   /* 100% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   457              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex],
	fcall	.cocofun_5
.L847:
	jne	d0,d3,.L40
.L425:
	fcall	.cocofun_3
.L426:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   458                  period + 1 /* No compare event */,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   459                  2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
	j	.L41
.L40:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   460              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex],
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   461                  period + 2 /* No compare event, issues has been seen with +1 */,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   462                  2 /* 1st compare event (issue: expected to be 1)*/);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   463          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   464          else if (x == 0)
	jne	d0,#0,.L42
.L848:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   465          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   466              cm0 = 1;
	fcall	.cocofun_11
.L443:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d6
.L849:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d5
.L444:
	j	.L43
.L42:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   467              cm1 = period + 2;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   468              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   469              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   470          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   471          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   472          {                           /* x% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   473              cm1 = (period - x) / 2; // CM1
	sub	d15,d3,d0
	sh	d5,d15,#-1
.L621:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   474              cm0 = (period + x) / 2; // CM0
	add	d0,d3
.L620:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   475              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
	sh	d6,d0,#-1
	fcall	.cocofun_12
.L43:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   476              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
	fcall	.cocofun_4
.L41:
	fcall	.cocofun_14
.L33:
	ld.bu	d15,[a4]17
.L850:
	jlt.u	d4,d15,.L34
.L851:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   477          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   478      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   479  }
	ret
.L413:
	
__IfxGtm_Atom_PwmHl_updateCenterAligned_function_end:
	.size	IfxGtm_Atom_PwmHl_updateCenterAligned,__IfxGtm_Atom_PwmHl_updateCenterAligned_function_end-IfxGtm_Atom_PwmHl_updateCenterAligned
.L238:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_14',code,cluster('.cocofun_14')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_14'
	.align	2
; Function .cocofun_14
.L129:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:0
	add	d4,#1
.L626:
	extr.u	d4,d4,#0,#8
	fret
.L323:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_13'
	.align	2
; Function .cocofun_13
.L131:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:0
	ld.a	a15,[a4]20
.L627:
	mov	d4,#0
	ld.w	d2,[a4]
.L608:
	ld.w	d3,[a15]
.L609:
	fret
.L318:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_12',code,cluster('.cocofun_12')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_12'
	.align	2
; Function .cocofun_12
.L133:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:0
	fcall	.cocofun_16
.L622:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d6
.L648:
	add	d15,d5,d2

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d15
.L623:
	fret
.L313:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_11',code,cluster('.cocofun_11')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_11'
	.align	2
; Function .cocofun_11
.L135:
.cocofun_11:	.type	func
; Function body .cocofun_11, coco_iter:0
	mov	d6,#1
.L618:
	add	d5,d3,#2
	fcall	.cocofun_16
.L617:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
	fret
.L308:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_10',code,cluster('.cocofun_10')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_10'
	.align	2
; Function .cocofun_10
.L137:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:0
	ld.bu	d15,[a4]16
.L636:
	jeq	d15,#0,.L35
.L1005:
	sub	d0,d3,d0
.L35:
	ld.w	d15,[a4]4
.L1006:
	fret
.L303:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_5'
	.align	2
; Function .cocofun_5
.L139:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	ld.a	a2,[a4]60
.L971:
	ld.a	a15,[a4]36
.L972:
	addsc.a	a2,a2,d4,#0
	ld.b	d1,[a2]0
.L973:
	fret
.L278:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_4'
	.align	2
; Function .cocofun_4
.L141:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	fcall	.cocofun_15
.L624:
	add	d6,d2

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d6
.L625:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d5
	fret
.L273:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_3'
	.align	2
; Function .cocofun_3
.L143:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	fcall	.cocofun_16
.L612:
	add	d15,d3,#1

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d15
.L961:
	add	d15,d2,#2

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d15
.L613:
	fcall	.cocofun_15
.L615:
	add	d15,d3,#2

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d15
.L962:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	mov	d15,#2
	st.w	[a15]12,d15
.L616:
	fret
.L268:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateEdgeAligned',code,cluster('IfxGtm_Atom_PwmHl_updateEdgeAligned')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateEdgeAligned'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   480  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   481  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   482  IFX_STATIC void IfxGtm_Atom_PwmHl_updateEdgeAligned(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn)
; Function IfxGtm_Atom_PwmHl_updateEdgeAligned
.L145:
IfxGtm_Atom_PwmHl_updateEdgeAligned:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   483  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   484      uint8          channelIndex;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   485      Ifx_TimerValue period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   486      Ifx_TimerValue deadtime = driver->base.deadtime;
	fcall	.cocofun_13
.L629:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   487  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   488      period = driver->timer->base.period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   489  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   490      for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	j	.L44
.L45:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   491      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   492          Ifx_TimerValue x; /* x=period*dutyCycle, x=OnTime+deadTime */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   493          Ifx_TimerValue cm0, cm1;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   494          x = tOn[channelIndex];
	addsc.a	a15,a5,d4,#2
.L856:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   495  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   496          if (driver->base.inverted != FALSE)
	ld.bu	d15,[a4]16
.L857:
	ld.w	d5,[a15]
.L630:
	jeq	d15,#0,.L46
.L858:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   497          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   498              x = period - x;
	sub	d5,d3,d5
.L46:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   499          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   500          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   501          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   502  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   503          if ((x < driver->base.minPulse) || (x <= deadtime))
	ld.w	d15,[a4]4
.L859:
	jlt.u	d5,d15,.L47
.L860:
	jlt.u	d2,d5,.L48
.L47:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   504          {   /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   505              x = 0;
	mov	d5,#0
	j	.L49
.L48:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   506          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   507          else if (x > driver->base.maxPulse)
	ld.w	d15,[a4]8
.L861:
	ge.u	d15,d15,d5
.L862:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   508          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   509              x = period;
	cmovn	d5,d15,d3
.L49:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   510          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   511          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   512          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   513  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   514          /* Special handling due to GTM issue */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   515          if (x == period)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   516          {   /* 100% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   517              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex],
	fcall	.cocofun_5
.L863:
	jne	d5,d3,.L51
.L455:
	fcall	.cocofun_3
.L456:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   518                  period + 1 /* No compare event */,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   519                  2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
	j	.L52
.L51:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   520              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex],
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   521                  period + 2 /* No compare event, issues has been seen with +1 */,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   522                  2 /* 1st compare event (issue: expected to be 1)*/);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   523          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   524          else if (x == 0)
	jne	d5,#0,.L53
.L864:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   525          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   526              cm0 = 1;
	mov	d5,#1
.L628:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   527              cm1 = period + 2;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   528              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1);
	add	d6,d3,#2
	fcall	.cocofun_16
.L463:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d5
.L865:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d6
.L464:
	j	.L54
.L53:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   529              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   530          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   531          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   532          {            /* x% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   533              cm1 = 2; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   534              cm0 = x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   535              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
	mov	d6,#2
	fcall	.cocofun_16
.L465:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d5
.L866:
	add	d15,d2,#2

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d15
.L54:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   536              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
	fcall	.cocofun_15
.L466:
	add	d5,d2

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d5
.L631:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d6
.L52:
	fcall	.cocofun_14
.L44:
	ld.bu	d15,[a4]17
.L867:
	jlt.u	d4,d15,.L45
.L868:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   537          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   538      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   539  }
	ret
.L445:
	
__IfxGtm_Atom_PwmHl_updateEdgeAligned_function_end:
	.size	IfxGtm_Atom_PwmHl_updateEdgeAligned,__IfxGtm_Atom_PwmHl_updateEdgeAligned_function_end-IfxGtm_Atom_PwmHl_updateEdgeAligned
.L243:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_16',code,cluster('.cocofun_16')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_16'
	.align	2
; Function .cocofun_16
.L147:
.cocofun_16:	.type	func
; Function body .cocofun_16, coco_iter:2
	mov.d	d0,a15
.L611:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
	sha	d1,#7
.L1034:
	add	d0,d1
.L1035:
	mov.a	a15,d0
	fret
.L333:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_15',code,cluster('.cocofun_15')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_15'
	.align	2
; Function .cocofun_15
.L149:
.cocofun_15:	.type	func
; Function body .cocofun_15, coco_iter:1
	ld.a	a2,[a4]64
.L1027:
	ld.a	a15,[a4]36
.L1028:
	addsc.a	a2,a2,d4,#0
	ld.b	d1,[a2]0
.L1029:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
	fcall	.cocofun_16
.L614:
	fret
.L328:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateOff',code,cluster('IfxGtm_Atom_PwmHl_updateOff')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateOff'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   540  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   541  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   542  IFX_STATIC void IfxGtm_Atom_PwmHl_updateOff(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn)
; Function IfxGtm_Atom_PwmHl_updateOff
.L151:
IfxGtm_Atom_PwmHl_updateOff:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   543  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   544      IFX_UNUSED_PARAMETER(tOn)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   545      uint8 channelIndex;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   546      Ifx_TimerValue period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   547      period = driver->timer->base.period;
	ld.a	a15,[a4]20
.L873:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   548  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   549      for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	mov	d1,#0
.L473:
	mov	d2,#2
.L474:
	ld.w	d0,[a15]
.L633:
	j	.L55
.L56:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   550      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   551          IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex],
	ld.a	a15,[a4]36
.L874:
	ld.a	a2,[a4]60
.L875:
	fcall	.cocofun_6
.L480:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d2
.L876:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   552              2 /* 1 will keep the previous level*/, period + 2);
	add	d15,d0,#2

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d15
.L481:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   553          IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], period + 1, 2);
	ld.a	a15,[a4]36
.L877:
	ld.a	a2,[a4]64
.L878:
	fcall	.cocofun_6
.L482:
	add	d15,d0,#1

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d15
.L483:
	add	d1,#1

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d2
.L632:
	extr.u	d1,d1,#0,#8
.L55:
	ld.bu	d15,[a4]17
.L879:
	jlt.u	d1,d15,.L56
.L880:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   554      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   555  }
	ret
.L467:
	
__IfxGtm_Atom_PwmHl_updateOff_function_end:
	.size	IfxGtm_Atom_PwmHl_updateOff,__IfxGtm_Atom_PwmHl_updateOff_function_end-IfxGtm_Atom_PwmHl_updateOff
.L248:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxGtm_Atom_PwmHl..cocofun_6'
	.align	2
; Function .cocofun_6
.L153:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	addsc.a	a2,a2,d1,#0
	ld.b	d3,[a2]0
.L978:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
	mov.d	d15,a15
.L979:
	sha	d3,#7
.L980:
	add	d15,d3
.L981:
	mov.a	a15,d15
	fret
.L283:
	; End of function
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updatePulse',code,cluster('IfxGtm_Atom_PwmHl_updatePulse')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updatePulse'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   556  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   557  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   558  IFX_STATIC void IfxGtm_Atom_PwmHl_updatePulse(IfxGtm_Atom_PwmHl *driver, float32 *tOn, float32 *offset)
; Function IfxGtm_Atom_PwmHl_updatePulse
.L155:
IfxGtm_Atom_PwmHl_updatePulse:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   559  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   560      uint8          channelIndex;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   561      Ifx_TimerValue period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   562  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   563      period = driver->timer->base.period;
	ld.a	a15,[a4]20
.L885:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   564  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   565      /* Top channels */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   566      for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	mov	d4,#0
.L639:
	ld.w	d3,[a15]
.L640:
	j	.L57
.L58:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   567      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   568          Ifx_TimerValue x; /* x=period*dutyCycle, x=OnTime+deadTime */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   569          Ifx_TimerValue o;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   570          Ifx_TimerValue cm0, cm1;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   571  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   572          x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex]);
	ld.a	a15,[a4]20
.L886:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   573          o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex]);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   574  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   575          if (driver->base.inverted != FALSE)
	ld.bu	d15,[a4]16
.L887:
	ld.w	d0,[a15]6
.L888:
	addsc.a	a15,a5,d4,#2
	ld.w	d1,[a15]
.L889:
	addsc.a	a15,a6,d4,#2
.L495:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   438  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   441  /** \brief Convert seconds to timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   442   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   443   * \param  seconds time value in seconds to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   444   * \return Return the converted time in timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   446  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   447  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   448      return seconds * clockFreq;
	mul.f	d1,d1,d0
.L496:
	ld.w	d2,[a15]
.L503:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   438  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   441  /** \brief Convert seconds to timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   442   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   443   * \param  seconds time value in seconds to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   444   * \return Return the converted time in timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   446  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   447  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   448      return seconds * clockFreq;
	ftouz	d1,d1
.L504:
	mul.f	d0,d2,d0
	ftouz	d0,d0
.L505:
	jeq	d15,#0,.L59
.L890:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   576          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   577              x = period - x;
	sub	d1,d3,d1
.L59:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   578          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   579          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   580          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   581  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   582          if ((x < driver->base.minPulse) || (o > period))
	ld.w	d15,[a4]4
.L891:
	jlt.u	d1,d15,.L60
.L892:
	jge.u	d3,d0,.L61
.L60:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   583          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   584              x = 0;
	mov	d1,#0
	j	.L62
.L61:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   585          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   586          else if ((x > driver->base.maxPulse) || (o + x > period))
	ld.w	d15,[a4]8
.L893:
	jlt.u	d15,d1,.L63
.L894:
	add	d15,d0,d1
.L895:
	jge.u	d3,d15,.L64
.L63:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   587          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   588              x = period;
	mov	d1,d3
.L64:
.L62:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   589          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   590          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   591          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   592  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   593          /* Special handling due to GTM issue */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   594          if (x == period)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   595          {   /* 100% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   596              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex],
	ld.a	a2,[a4]60
.L896:
	ld.a	a15,[a4]36
.L897:
	addsc.a	a2,a2,d4,#0
	ld.b	d2,[a2]0
.L898:
	jne	d1,d3,.L65
.L506:
	mov.d	d0,a15
.L899:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
	sha	d2,#7
.L900:
	add	d0,d2
.L901:
	mov.a	a15,d0
.L511:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   597                  period + 1 /* No compare event */,
	add	d15,d3,#1
.L902:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d15
.L903:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	mov	d15,#2

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   598                  2 /* 1st compare event (issue: expected to be 1)*/);
	j	.L66
.L65:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   599          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   600          else if (x == 0)
	jne	d1,#0,.L67
.L904:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   601          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   602              cm0 = 1;
	mov	d1,#1
.L634:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   603              cm1 = period + 2;
	add	d15,d3,#2
	j	.L68
.L67:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   604              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   605          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   606          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   607          {                /* x% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   608              cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
	add	d15,d0,#2
.L635:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   609              cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
	add	d1,d0
.L68:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   610              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1);
	mov.d	d0,a15
.L905:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
	sha	d2,#7
.L906:
	add	d0,d2
.L907:
	mov.a	a15,d0
.L514:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d1
.L66:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d15
.L490:
	fcall	.cocofun_14
.L57:
	ld.bu	d15,[a4]17
.L908:
	jlt.u	d4,d15,.L58
.L909:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   611          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   612      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   613  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   614      /* Bottom channels */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   615      for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	mov	d4,#0
	j	.L69
.L70:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   616      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   617          Ifx_TimerValue x; /* x=period*dutyCycle, x=OnTime+deadTime */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   618          Ifx_TimerValue o;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   619          Ifx_TimerValue cm0, cm1;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   620  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   621          x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex + driver->base.channelCount]);
	ld.a	a15,[a4]20
.L910:
	ld.bu	d0,[a4]17
.L911:
	add	d15,d4,d0
	ld.w	d1,[a15]6
.L912:
	addsc.a	a15,a5,d15,#2
	ld.w	d0,[a15]
.L913:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   622          o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex + driver->base.channelCount]);
	addsc.a	a15,a6,d15,#2
.L519:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   438  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   441  /** \brief Convert seconds to timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   442   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   443   * \param  seconds time value in seconds to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   444   * \return Return the converted time in timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   446  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   447  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   448      return seconds * clockFreq;
	mul.f	d0,d0,d1
.L520:
	ld.w	d2,[a15]
.L522:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     2   * \file IfxStdIf_Timer.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     3   * \brief Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     6   * \version disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    42   * \defgroup library_srvsw_stdif_timer Standard interface: Timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    45   * The standard interface timer (Timer) abstract the hardware used for timer feature. It provide, after proper initialization an hardware
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    46   * independant way to interact with the timer functionallity like setting period, trigger points, ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    48   * The figure below shows the standard timer interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    49   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    50   * \image html "Timer.png" "Standard timer interface"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    51   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    52   * This interface defines the following features:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    53   * - Timer with configurable frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    54   * - Configurable counting direction
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    55   * - Optional interrupt on timer event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    56   * - Optional trigger signal with:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    57   *   - Optional interrupt on trigger event with configurable service request provider and priority
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    58   *   - Configurable trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    59   *   - Configurable trigger edge
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    60   *   - trigger signal can be internal only or forwarded to a port pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    61   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    63  #ifndef IFXSTDIF_TIMER_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    64  #define IFXSTDIF_TIMER_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    66  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    67  #include "Src/Std/IfxSrc.h"     
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    68  #include "Port/Std/IfxPort.h"   
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    69  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    70  /** \brief Output event enable / disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    71  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    72  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    73      IfxStdIf_Timer_Output_disabled,              /**< \brief Timer output is set to the inactive, no change in the output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    74      IfxStdIf_Timer_Output_enabled                /**< \brief In case the trigger is enabled,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    75                                                    *          the output is set to active between time 0 to the trigger point,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    76                                                    *          and is set to inactive between the trigger point and the period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    77                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_up, the output is toggled when the timer is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    78                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_down, the output is toggled when the timer is reloaded
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    79                                                    *          In case the trigger is disabled and counting direction if IfxStdIf_Timer_CountDir_upAndDown, the output is toggled when the timer reach 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    80                                                    *          In case the trigger is enabled the trigger is active before the trigger point and inactive after the trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    81                                                    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    82  } IfxStdIf_Timer_OutputEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    83  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    84  /** \brief Timer increment direction */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    87      IfxStdIf_Timer_CountDir_up,                      /**< \brief Timer is counting up */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    88      IfxStdIf_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    89      IfxStdIf_Timer_CountDir_down                     /**< \brief Timer is counting down */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    90  } IfxStdIf_Timer_CountDir;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    92  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    93  typedef struct IfxStdIf_Timer_ IfxStdIf_Timer;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    95  /** \brief Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    96   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    97   * \return Return the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	    99  typedef float32 (*IfxStdIf_Timer_GetFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   101  /** \brief Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   102   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   103   * \return Return the timer period in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   105  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetPeriod)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   107  /** \brief Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   108   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   109   * \return Return the timer resolution in seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   111  typedef float32 (*IfxStdIf_Timer_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   113  /** \brief Return the timer trigger point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   114   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   115   * \return Return the timer timer point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   117  typedef Ifx_TimerValue (*IfxStdIf_Timer_GetTrigger)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   119  /** \brief Set the timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   120   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   121   * \param frequency Requested timer frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   122   * \retval TRUE The requested frequency could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   123   * \retval FALSE The requested frequency is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   124   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   125  typedef boolean (*IfxStdIf_Timer_SetFrequency)(IfxStdIf_InterfaceDriver stdIf, float32 frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   127  /** \brief Indicates the stdIf that the imput frequency has changed and that it should be taken in account
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   128   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   129   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   131  typedef void (*IfxStdIf_Timer_UpdateInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   133  /** \brief Apply requested updates.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   135   * Such requested update are calls to:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   136   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   137   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   138   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   139   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   140   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   141   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   142   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   143   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   145   * It is important to note, that only one call to Timer_applyUpdate() is allowed within
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   146   * one timer period!!!
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   147   * In order to ensure correct update synchronisation, disableUpdate() should have been called previously.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   149   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   150   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   152  typedef void (*IfxStdIf_Timer_ApplyUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   154  /** \brief Disable updates
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   156   * The following API action will not be taken in account before applyUpdate is called:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   157   * - IfxStdIf_Timer_setSingleMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   158   * - IfxStdIf_Timer_setTrigger()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   159   * - IfxStdIf_Timer_setPeriod() or IfxStdIf_Timer_setFrequency()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   160   * as well as PWM generation related calls such as:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   161   * - IfxStdIf_PwmHl_setDeadtime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   162   * - IfxStdIf_PwmHl_setMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   163   * - IfxStdIf_PwmHl_setOnTime()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   164   * - IfxStdIf_PwmHl_setupChannels()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   166   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   169  typedef void (*IfxStdIf_Timer_DisableUpdate)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   171  /** \brief Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   172   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   173   * \return Return the timer input frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   175  typedef float32 (*IfxStdIf_Timer_GetInputFrequency)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   177  /** \brief Immediately start the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   179   * Please note that other mechanism may avoid the timer to tick, such as when the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   180   * global (input) clock to the timer block is inactive.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   181   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   182   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   184  typedef void (*IfxStdIf_Timer_Run)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   186  /** \brief Set the timer period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   188   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   189   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   190   * \param period Period value in ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   191   * \retval TRUE The requested period could be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   192   * \retval FALSE The requested period is out of range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   194  typedef boolean (*IfxStdIf_Timer_SetPeriod)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   195  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   196  /** \brief Stop timer at the end of the period
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   198   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   199   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   200   * \param enabled If TRUE, enable the single mode, else disable the single mode (continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   201   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   203  typedef void (*IfxStdIf_Timer_SetSingleMode)(IfxStdIf_InterfaceDriver stdIf, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   205  /** \brief Set trigger point.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   207   * \see Timer_OutputEvent for the definition of the output level.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   208   * Active state is defined by Timer_Config::outputActiveState.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   210   * Timer_applyUpdate() shall be invoked in order this to take effect.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   211   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   212   * \param triggerPoint Trigger point in ticks from the period start.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   213   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   215  typedef void (*IfxStdIf_Timer_SetTrigger)(IfxStdIf_InterfaceDriver stdIf, Ifx_TimerValue triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   217  /** \brief Immediately stops the timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   218   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   219   * \return none
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   221  typedef void (*IfxStdIf_Timer_Stop)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   223  /** \brief Return the timer interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   224   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   225   * \return Return the timer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   227  typedef boolean (*IfxStdIf_Timer_AckTimerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   229  /** \brief Return the trigger interrupt flag and reset it
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   230   * \param stdIf Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   231   * \return Return the trigger interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   233  typedef boolean (*IfxStdIf_Timer_AckTriggerIrq)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   235  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   237  struct IfxStdIf_Timer_
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   239      IfxStdIf_InterfaceDriver            driver;                  /**< \brief Interface driver object                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   240      IfxStdIf_Timer_GetFrequency         getFrequency;            /**< \brief \see IfxStdIf_Timer_GetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   241      IfxStdIf_Timer_GetPeriod            getPeriod;               /**< \brief \see IfxStdIf_Timer_GetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   242      IfxStdIf_Timer_GetResolution        getResolution;           /**< \brief \see IfxStdIf_Timer_GetResolution        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   243      IfxStdIf_Timer_GetTrigger           getTrigger;              /**< \brief \see IfxStdIf_Timer_GetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   244      IfxStdIf_Timer_SetFrequency         setFrequency;            /**< \brief \see IfxStdIf_Timer_SetFrequency         */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   245      IfxStdIf_Timer_UpdateInputFrequency updateInputFrequency;    /**< \brief \see IfxStdIf_Timer_UpdateInputFrequency */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   246      IfxStdIf_Timer_ApplyUpdate          applyUpdate;             /**< \brief \see IfxStdIf_Timer_ApplyUpdate          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   247      IfxStdIf_Timer_DisableUpdate        disableUpdate;           /**< \brief \see IfxStdIf_Timer_DisableUpdate        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   248      IfxStdIf_Timer_GetInputFrequency    getInputFrequency;       /**< \brief \see IfxStdIf_Timer_GetInputFrequency    */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   249      IfxStdIf_Timer_Run                  run;                     /**< \brief \see IfxStdIf_Timer_Run                  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   250      IfxStdIf_Timer_SetPeriod            setPeriod;               /**< \brief \see IfxStdIf_Timer_SetPeriod            */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   251      IfxStdIf_Timer_SetSingleMode        setSingleMode;           /**< \brief \see IfxStdIf_Timer_SetSingleMode        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   252      IfxStdIf_Timer_SetTrigger           setTrigger;              /**< \brief \see IfxStdIf_Timer_SetTrigger           */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   253      IfxStdIf_Timer_Stop                 stop;                    /**< \brief \see IfxStdIf_Timer_Stop                 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   254      IfxStdIf_Timer_AckTimerIrq          ackTimerIrq;             /**< \brief \see IfxStdIf_Timer_AckTimerIrq          */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   255      IfxStdIf_Timer_AckTriggerIrq        ackTriggerIrq;           /**< \brief \see IfxStdIf_Timer_AckTriggerIrq        */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   256  };
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   258  /** \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   259  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   261      boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   262      Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   263      Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   264      IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   265      IfxPort_OutputMode outputMode;          /**< \brief Output mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   266      IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   267      boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   268      boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   269  } IfxStdIf_Timer_TrigConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   271  /** \brief Timer configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   272  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   274      float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   275      Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   276      IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   277      float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   278      IfxStdIf_Timer_TrigConfig trigger;       /**< \brief Trigger configuration */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   279      IfxStdIf_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   280      float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   281  } IfxStdIf_Timer_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   283  /** \addtogroup library_srvsw_stdif_timer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   284   *  \{
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   286  /** \copydoc IfxStdIf_Timer_GetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   287   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   289  IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   290  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   291      return stdIf->getFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   295  /** \copydoc IfxStdIf_Timer_GetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   296   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   298  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   299  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   300      return stdIf->getPeriod(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   301  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   304  /** \copydoc IfxStdIf_Timer_GetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   305   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   307  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   309      return stdIf->getTrigger(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   313  /** \copydoc IfxStdIf_Timer_GetResolution
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   314   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   316  IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   317  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   318      return stdIf->getResolution(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   319  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   322  /** \copydoc IfxStdIf_Timer_SetFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   323   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   324   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   325  IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   326  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   327      return stdIf->setFrequency(stdIf->driver, frequency);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   328  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   330  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   331  /** \copydoc IfxStdIf_Timer_UpdateInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   332   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   334  IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   336      stdIf->updateInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   337  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   338  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   340  /** \copydoc IfxStdIf_Timer_ApplyUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   341   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   343  IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   344  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   345      stdIf->applyUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   346  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   348  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   349  /** \copydoc IfxStdIf_Timer_DisableUpdate
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   350   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   352  IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   354      stdIf->disableUpdate(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   358  /** \copydoc IfxStdIf_Timer_GetInputFrequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   359   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   361  IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   363      return stdIf->getInputFrequency(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   364  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   367  /** \copydoc IfxStdIf_Timer_Run
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   368   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   370  IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   371  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   372      stdIf->run(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   373  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   375  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   376  /** \copydoc IfxStdIf_Timer_SetPeriod
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   377   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   379  IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   380  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   381      return stdIf->setPeriod(stdIf->driver, period);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   382  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   385  /** \copydoc IfxStdIf_Timer_SetSingleMode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   386   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   388  IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   389  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   390      stdIf->setSingleMode(stdIf->driver, enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   391  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   394  /** \copydoc IfxStdIf_Timer_SetTrigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   395   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   396   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   397  IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   398  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   399      stdIf->setTrigger(stdIf->driver, triggerPoint);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   400  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   403  /** \copydoc IfxStdIf_Timer_Stop
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   404   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   406  IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   407  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   408      stdIf->stop(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   409  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   410  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   411  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   412  /** \copydoc IfxStdIf_Timer_AckTimerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   413   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   415  IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   416  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   417      return stdIf->ackTimerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   418  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   421  /** \copydoc IfxStdIf_Timer_AckTriggerIrq
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   422   * \param stdIf Standard interface pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   424  IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   426      return stdIf->ackTriggerIrq(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   427  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   430  /** \brief Convert timer ticks to seconds
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   431   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   432   * \param  ticks time value in ticks to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   433   * \return Return the converted time in s
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   435  IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   436  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   437      return ticks / clockFreq;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   438  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   441  /** \brief Convert seconds to timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   442   * \param  clockFreq Timer clock frequency
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   443   * \param  seconds time value in seconds to be converted
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   444   * \return Return the converted time in timer ticks
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   446  IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   447  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\1_SrvSw\StdIf\IfxStdIf_Timer.h	   448      return seconds * clockFreq;
	ftouz	d0,d0
.L523:
	mul.f	d1,d2,d1
.L914:
	ftouz	d1,d1

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   623  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   624          if (driver->base.inverted != FALSE)
	fcall	.cocofun_10
.L524:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   625          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   626              x = period - x;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   627          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   628          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   629          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   630  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   631          if (x < driver->base.minPulse)
	jge.u	d0,d15,.L72
.L915:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   632          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   633              x = 0;
	mov	d0,#0
	j	.L73
.L72:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   634          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   635          else if (x > driver->base.maxPulse)
	ld.w	d15,[a4]8
.L916:
	ge.u	d15,d15,d0
.L917:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   636          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   637              x = period;
	cmovn	d0,d15,d3
.L73:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   638          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   639          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   640          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   641  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   642          /* Special handling due to GTM issue */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   643          if (x == period)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   644          {   /* 100% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   645              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex],
	ld.a	a2,[a4]64
.L918:
	ld.a	a15,[a4]36
.L919:
	addsc.a	a2,a2,d4,#0
	ld.b	d2,[a2]0
.L920:
	jne	d0,d3,.L75
.L525:
	mov.d	d15,a15
.L921:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
	sha	d2,#7
.L922:
	add	d15,d2
.L923:
	mov.a	a15,d15
.L526:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   646                  period + 2 /* No compare event, issues has been seen with +1 */,
	add	d15,d3,#2
.L924:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d15
.L925:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	mov	d15,#2

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   647                  2 /* 1st compare event (issue: expected to be 1)*/);
	j	.L76
.L75:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   648          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   649          else if (x == 0)
	jne	d0,#0,.L77
.L926:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   650          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   651              cm0 = 1;
	mov	d0,#1
.L637:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   652              cm1 = period + 2;
	add	d15,d3,#2
	j	.L78
.L77:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   653              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0, cm1);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   654          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   655          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   656          {                /* x% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   657              cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
	add	d15,d1,#2
.L638:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   658              cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
	add	d0,d1
.L78:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   659              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0, cm1);
	mov.d	d1,a15
.L927:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
	sha	d2,#7
.L928:
	add	d1,d2
.L929:
	mov.a	a15,d1
.L527:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	st.w	[a15]8,d0
.L76:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d15
.L515:
	fcall	.cocofun_14
.L69:
	ld.bu	d15,[a4]17
.L930:
	jlt.u	d4,d15,.L70
.L931:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   660          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   661      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   662  }
	ret
.L484:
	
__IfxGtm_Atom_PwmHl_updatePulse_function_end:
	.size	IfxGtm_Atom_PwmHl_updatePulse,__IfxGtm_Atom_PwmHl_updatePulse_function_end-IfxGtm_Atom_PwmHl_updatePulse
.L253:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updatePulseOff',code,cluster('IfxGtm_Atom_PwmHl_updatePulseOff')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updatePulseOff'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   663  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   664  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   665  IFX_STATIC void IfxGtm_Atom_PwmHl_updatePulseOff(IfxGtm_Atom_PwmHl *driver, float32 *tOn, float32 *offset)
; Function IfxGtm_Atom_PwmHl_updatePulseOff
.L157:
IfxGtm_Atom_PwmHl_updatePulseOff:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   666  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   667      IFX_UNUSED_PARAMETER(tOn)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   668      IFX_UNUSED_PARAMETER(offset)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   669  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   670      IfxGtm_Atom_PwmHl_updateOff(driver, NULL_PTR);
	mov.a	a5,#0
.L641:
	j	IfxGtm_Atom_PwmHl_updateOff
.L528:
	
__IfxGtm_Atom_PwmHl_updatePulseOff_function_end:
	.size	IfxGtm_Atom_PwmHl_updatePulseOff,__IfxGtm_Atom_PwmHl_updatePulseOff_function_end-IfxGtm_Atom_PwmHl_updatePulseOff
.L258:
	; End of function
	
	.sdecl	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateShiftCenterAligned',code,cluster('IfxGtm_Atom_PwmHl_updateShiftCenterAligned')
	.sect	'.text.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_updateShiftCenterAligned'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   671  }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   672  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   673  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   674  IFX_STATIC void IfxGtm_Atom_PwmHl_updateShiftCenterAligned(IfxGtm_Atom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift)
; Function IfxGtm_Atom_PwmHl_updateShiftCenterAligned
.L159:
IfxGtm_Atom_PwmHl_updateShiftCenterAligned:	.type	func

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   675  {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   676      uint8          channelIndex;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   677      Ifx_TimerValue period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   678      Ifx_TimerValue deadtime = driver->base.deadtime;
	fcall	.cocofun_13
.L643:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   679  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   680      period = driver->timer->base.period;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   681  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   682      for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
	j	.L79
.L80:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   683      {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   684          Ifx_TimerValue x; /* x=period*dutyCycle, x=OnTime+deadTime */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   685          Ifx_TimerValue s; /* Shift value */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   686          Ifx_TimerValue cm0, cm1;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   687          x = tOn[channelIndex];
	addsc.a	a15,a5,d4,#2
.L940:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   688  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   689          if (driver->base.inverted != FALSE)
	ld.bu	d15,[a4]16
.L941:
	ld.w	d6,[a15]
.L642:
	jeq	d15,#0,.L81
.L942:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   690          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   691              x = period - x;
	sub	d6,d3,d6
.L81:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   692          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   693          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   694          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   695  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   696          if ((x < driver->base.minPulse) || (x <= deadtime))
	ld.w	d15,[a4]4
.L943:
	jlt.u	d6,d15,.L82
.L944:
	jlt.u	d2,d6,.L83
.L82:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   697          {   /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   698              x = 0;
	mov	d6,#0
	j	.L84
.L83:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   699          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   700          else if (x > driver->base.maxPulse)
	ld.w	d15,[a4]8
.L945:
	ge.u	d15,d15,d6
.L946:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   701          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   702              x = period;
	cmovn	d6,d15,d3
.L84:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   703          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   704          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   705          {}
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   706  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   707          /* Special handling due to GTM issue */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   708          if (x == period)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   709          {   /* 100% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   710              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex],
	fcall	.cocofun_5
.L947:
	jne	d6,d3,.L86
.L543:
	fcall	.cocofun_3
.L544:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   711                  period + 1 /* No compare event */,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   712                  2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
	j	.L87
.L86:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   713              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex],
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   714                  period + 2 /* No compare event, issues has been seen with +1 */,
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   715                  2 /* 1st compare event (issue: expected to be 1)*/);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   716          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   717          else if (x == 0)
	jne	d6,#0,.L88
.L948:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   718          {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   719              cm0 = 1;
	fcall	.cocofun_11
.L551:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     2   * \file IfxGtm_Atom.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     3   * \brief GTM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     4   * \ingroup IfxLld_Gtm
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    43   * \defgroup IfxLld_Gtm_Std_Atom Atom Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    44   * \ingroup IfxLld_Gtm_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    45   * \defgroup IfxLld_Gtm_Std_Atom_Enumerations ATOM Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    46   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    47   * \defgroup IfxLld_Gtm_Std_Atom_Channel_Functions ATOM Channel Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    48   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    49   * \defgroup IfxLld_Gtm_Std_Atom_AGC_Functions ATOM AGC Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    50   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    51   * \defgroup IfxLld_Gtm_Std_Atom_Module_Functions ATOM Module Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    52   * \ingroup IfxLld_Gtm_Std_Atom
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    55  #ifndef IFXGTM_ATOM_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    56  #define IFXGTM_ATOM_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    59  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    60  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    62  #include "_Impl/IfxGtm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    63  #include "IfxGtm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    64  #include "IfxGtm_Tbu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    65  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    66  #include "IfxGtm_Cmu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    67  #include "stddef.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    69  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    70  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    71  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    73  /** \addtogroup IfxLld_Gtm_Std_Atom_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    74   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    75  /** \brief Reset source for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    79      IfxGtm_Atom_Ch_OutputTrigger_forward  = 0, /**< \brief Forward the trigger from the previous channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    80      IfxGtm_Atom_Ch_OutputTrigger_generate = 1  /**< \brief Generate the trigger from the current channel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    81  } IfxGtm_Atom_Ch_OutputTrigger;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    83  /** \brief Reset event for channel counter CN0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    84   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    85  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    87      IfxGtm_Atom_Ch_ResetEvent_onCm0     = 0,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    88      IfxGtm_Atom_Ch_ResetEvent_onTrigger = 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    89  } IfxGtm_Atom_Ch_ResetEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    91  /** \brief Enum for ATOM mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    92   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    93  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    94  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    95      IfxGtm_Atom_Mode_outputImmediate,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    96      IfxGtm_Atom_Mode_outputCompare,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    97      IfxGtm_Atom_Mode_outputPwm,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    98      IfxGtm_Atom_Mode_outputSerial
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	    99  } IfxGtm_Atom_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   101  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   103  /** \brief Enable/disable of Aru Input to ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   104   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   105  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   106  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   107      IfxGtm_Atom_AruInput_disabled = 0,  /**< \brief ARU input disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   108      IfxGtm_Atom_AruInput_enabled  = 1   /**< \brief ARU input enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   109  } IfxGtm_Atom_AruInput;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   111  /** \brief Match Compare control modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   115      IfxGtm_Atom_SomcControl_compareBoth     = 0,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   116      IfxGtm_Atom_SomcControl_compareBoth1    = 1,  /**< \brief compare CCU0 and CCU1 in parallel */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   117      IfxGtm_Atom_SomcControl_ccu0Ts0         = 2,  /**< \brief compare CCU0 against TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   118      IfxGtm_Atom_SomcControl_ccu1Ts12        = 3,  /**< \brief compare only CCU1 against TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   119      IfxGtm_Atom_SomcControl_ccu0ccu1Ts0     = 4,  /**< \brief compare CCU0 then CCU1, use TS0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   120      IfxGtm_Atom_SomcControl_ccu0ccu1Ts12    = 5,  /**< \brief compare CCU0 then CCU1. Use TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   121      IfxGtm_Atom_SomcControl_ccu0Ts0ccu1Ts12 = 6,  /**< \brief compare CCU0 with TS0 then CCU1 with TS1 or TS2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   122      IfxGtm_Atom_SomcControl_cancelCompare   = 7   /**< \brief Cancel pending compare events */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   123  } IfxGtm_Atom_SomcControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   125  /** \brief SOMC signal level Control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   127  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   128  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   129      IfxGtm_Atom_SomcSignalLevelControl_noChange = 0,  /**< \brief no signal level change at output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   130      IfxGtm_Atom_SomcSignalLevelControl_sl0out1  = 1,  /**< \brief SL= 0 -> Out=1; SL=1->Out=0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   131      IfxGtm_Atom_SomcSignalLevelControl_sl0out0  = 2,  /**< \brief SL=0->Out=0; SL=1->Out=1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   132      IfxGtm_Atom_SomcSignalLevelControl_toggle   = 3   /**< \brief toggle the output signal level */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   133  } IfxGtm_Atom_SomcSignalLevelControl;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   135  /** \addtogroup IfxLld_Gtm_Std_Atom_Channel_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   136   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   138  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   139  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   140  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   142  /** \brief Returns the base addredd of selected Atom channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   143   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   144   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   145   * \return Pointer to channel base address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   147  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   149  /** \brief Sets the compare 0 and 1 shadow values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   150   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   151   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   152   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   153   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   156  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   159  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   162  /** \brief Clears the channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   163   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   164   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   167  IFX_EXTERN void IfxGtm_Atom_Ch_clearOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   169  /** \brief Clears the channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   170   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   171   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   172   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   174  IFX_EXTERN void IfxGtm_Atom_Ch_clearZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   176  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   177   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   178   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   179   * \param clock Clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   180   * \param activeState Active State
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   181   * \param resetEvent Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   182   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   185  IFX_EXTERN void IfxGtm_Atom_Ch_configurePwmMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock, Ifx_ActiveState activeState, IfxGtm_Atom_Ch_ResetEvent resetEvent, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   186  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   187  /** \brief Returns the ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   188   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   189   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   190   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   191   * \return ATOM channel input clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   193  IFX_EXTERN float32 IfxGtm_Atom_Ch_getClockFrequency(Ifx_GTM *gtm, Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   195  /** \brief Returns the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   196   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   197   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   198   * \return The clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   200  IFX_EXTERN IfxGtm_Cmu_Clk IfxGtm_Atom_Ch_getClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   202  /** \brief Returns the compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   203   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   204   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   205   * \return compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   207  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   209  /** \brief Returns the compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   210   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   211   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   212   * \return compare one pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   213   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   214  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   216  /** \brief Returns the compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   217   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   218   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   219   * \return compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   221  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   223  /** \brief Returns the compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   224   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   225   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   226   * \return compare zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   227   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   228  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getCompareZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   230  /** \brief Gets the ATOM output level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   231   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   232   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   233   * \return TRUE the output is high, FALSE the output is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   235  IFX_EXTERN boolean IfxGtm_Atom_Ch_getOutputLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   237  /** \brief Returns a pointer to the ATOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   238   * \param gtm Pointer to GTM module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   239   * \param atom Specifies the atom object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   240   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   241   * \return Pointer to the TOM channel SRC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   243  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxGtm_Atom_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Atom atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   244  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   245  /** \brief Returns the Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   246   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   247   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   248   * \return Timer pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   250  IFX_EXTERN volatile uint32 *IfxGtm_Atom_Ch_getTimerPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   252  /** \brief Returns the status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   253   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   254   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   255   * \return Status of channel One notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   256   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   257  IFX_EXTERN boolean IfxGtm_Atom_Ch_isOneNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   259  /** \brief Returns the status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   260   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   261   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   262   * \return Status of channel Zero notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   263   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   264  IFX_EXTERN boolean IfxGtm_Atom_Ch_isZeroNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   266  /** \brief Raises the interrupt for Compare 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   267   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   268   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   269   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   271  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   273  /** \brief Raises the interrupt for Compare 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   274   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   275   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   276   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   277   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   278  IFX_EXTERN void IfxGtm_Atom_Ch_raiseInterruptZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   280  /** \brief Sets the channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   281   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   282   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   283   * \param clock Channel clock source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   284   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   285   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   286  IFX_EXTERN void IfxGtm_Atom_Ch_setClockSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Cmu_Clk clock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   288  /** \brief Sets the compare 0 and 1 values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   289   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   290   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   291   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   292   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   295  IFX_EXTERN void IfxGtm_Atom_Ch_setCompare(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   297  /** \brief Sets the compare 1 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   298   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   299   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   300   * \param compareOne Compare one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   301   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   302   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   303  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   305  /** \brief Sets the compare 1 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   306   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   307   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   308   * \param shadowOne Compare one shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   309   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   311  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareOneShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   313  /** \brief Sets the compare 0 value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   314   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   315   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   316   * \param compareZero Compare zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   317   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   318   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   319  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 compareZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   321  /** \brief Sets the compare 0 shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   322   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   323   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   324   * \param shadowZero Compare zero shadow value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   325   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   327  IFX_EXTERN void IfxGtm_Atom_Ch_setCompareZeroShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   329  /** \brief Sets the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   330   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   331   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   332   * \param value Counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   333   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   335  IFX_EXTERN void IfxGtm_Atom_Ch_setCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   337  /** \brief set the Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   338   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   339   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   340   * \param mode Atom operating mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   341   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   342   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   343  IFX_EXTERN void IfxGtm_Atom_Ch_setMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   345  /** \brief Sets the channel notification
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   346   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   347   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   348   * \param mode Interrupt mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   349   * \param interruptOnCompareZero If TRUE, an interrupt is generated on compare 0, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   350   * \param interruptOnCompareOne If TRUE, an interrupt is generated on compare 1, else no interrupt is generated
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   351   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   352   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   353  IFX_EXTERN void IfxGtm_Atom_Ch_setNotification(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_IrqMode mode, boolean interruptOnCompareZero, boolean interruptOnCompareOne);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   354  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   355  /** \brief Enable/disable the one shot mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   356   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   357   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   358   * \param enabled If TRUE, the feature is enabled, else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   359   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   361  IFX_EXTERN void IfxGtm_Atom_Ch_setOneShotMode(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   362  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   363  /** \brief Sets the channel clock source either from local or from previous channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   364   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   365   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   366   * \param event Channel reset event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   367   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   368   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   369  IFX_EXTERN void IfxGtm_Atom_Ch_setResetSource(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_ResetEvent event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   371  /** \brief Sets the signal level
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   372   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   373   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   374   * \param activeState Signal level active state. In case the channel is reset, the output is set to not active. The signal is active between 0 and the leading edge (CM1) and inactive between the leading edge and the trailing edge (CM0).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   375   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   377  IFX_EXTERN void IfxGtm_Atom_Ch_setSignalLevel(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, Ifx_ActiveState activeState);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   379  /** \brief Sets the channel trigger output
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   380   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   381   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   382   * \param trigger Channel trigger output mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   385  IFX_EXTERN void IfxGtm_Atom_Ch_setTriggerOutput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_Ch_OutputTrigger trigger);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   387  /** \brief Get the counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   388   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   389   * \param channel channel index of the ATOM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   390   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   391   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   392  IFX_EXTERN uint32 IfxGtm_Atom_Ch_getCounterValue(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   394  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   396  /** \addtogroup IfxLld_Gtm_Std_Atom_AGC_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   397   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   399  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   400  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   401  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   403  /** \brief Sets the channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   404   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   405   * \param value value for the channel enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   406   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   408  IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   410  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   411  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   412  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   414  /** \brief Builds the register value for the feature enable/disable
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   415   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   416   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   417   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   418   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   419   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   420  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   422  /** \brief Builds the register value for the feature enable/disable for a single channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   423   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   424   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   425   * \param bitfieldOffset Offset of the channel 0 bitfield in the register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   426   * \return The register value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   427   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   428  IFX_EXTERN uint32 IfxGtm_Atom_Agc_buildFeatureForChannel(IfxGtm_Atom_Ch channel, boolean enabled, uint8 bitfieldOffset);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   430  /** \brief Enable/disable one channel (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   431   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   432   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   433   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   434   * \param immediate If TRUE, the action is done immediately else, the action is done on AGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   435   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   436   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   437  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannel(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   438  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   439  /** \brief Enable/disable one channel output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   440   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   441   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   442   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   443   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   444   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   446  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelOutput(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   448  /** \brief Enable/disable one channel for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   449   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   450   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   451   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   454  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   456  /** \brief Enable/disable one or more channels (ENDIS)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   457   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   458   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   459   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   460   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   461   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   463  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannels(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   465  /** \brief Enable/disable one or more channels output (OUTEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   466   * \param agc Pointer to the TGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   467   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   468   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   469   * \param immediate If TRUE, the action is done immediately else, the action is done on TGC trigger (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   470   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   472  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsOutput(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, boolean immediate);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   474  /** \brief Enable/disable the TGC channels trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   475   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   476   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   477   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   480  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsTrigger(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   482  /** \brief Enable/disable one or more channels for update (UPEN)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   483   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   484   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   485   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   486   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   488  IFX_EXTERN void IfxGtm_Atom_Agc_enableChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   490  /** \brief Enable/disable the time base trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   491   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   492   * \param enabled If TRUE, the trigger is enabled else disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   493   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   495  IFX_EXTERN void IfxGtm_Atom_Agc_enableTimeTrigger(Ifx_GTM_ATOM_AGC *agc, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   497  /** \brief Reset one or more channels
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   498   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   499   * \param resetMask Mask for the channel reset (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   501   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   502  IFX_EXTERN void IfxGtm_Atom_Agc_resetChannels(Ifx_GTM_ATOM_AGC *agc, uint32 resetMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   504  /** \brief Enable/disable one channel for update (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   505   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   506   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   507   * \param enabled Enable/ Disable choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   508   * \param resetEnabled Enable/ Disable reset choise of the feature
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   509   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   511  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelForceUpdate(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Atom_Ch channel, boolean enabled, boolean resetEnabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   513  /** \brief Enable/disable one or more channels for the force update feature (FUPD)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   514   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   515   * \param enableMask Mask for the channel feature enable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   516   * \param disableMask Mask for the channel feature disable (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   517   * \param resetEnableMask Mask for the enabled channels counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...) Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   518   * \param resetDisableMask Mask for the disabled channels with no counter reset on force update (bit 0: Channel 0, bit 1: channel 1, ...)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   519   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   520   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   521  IFX_EXTERN void IfxGtm_Atom_Agc_setChannelsForceUpdate(Ifx_GTM_ATOM_AGC *agc, uint16 enableMask, uint16 disableMask, uint16 resetEnableMask, uint16 resetDisableMask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   522  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   523  /** \brief Sets the trigger time base and time base value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   524   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   525   * \param base Time base used for comparison
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   526   * \param value Compare value that raise the trigger
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   529  IFX_EXTERN void IfxGtm_Atom_Agc_setTimeTrigger(Ifx_GTM_ATOM_AGC *agc, IfxGtm_Tbu_Ts base, uint32 value);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   531  /** \brief Raise the trigger for the channel enable/disable settings,  output enable settings, and force update event (CTRL_TRIG)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   532   * \param agc Pointer to the AGC object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   535  IFX_EXTERN void IfxGtm_Atom_Agc_trigger(Ifx_GTM_ATOM_AGC *agc);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   537  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   539  /** \addtogroup IfxLld_Gtm_Std_Atom_Module_Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   540   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   542  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   543  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   546  /** \brief Configures the tout selection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   547   * \param toutNum TOUT number
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   548   * \param toutSel TOUTselection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   549   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   551  IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   553  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   555  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   556  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   557  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   559  /** \brief enable/disable ARU input for the ATOM channel specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   560   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   561   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   562   * \param enabled ARU enable status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   563   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   565  IFX_EXTERN void IfxGtm_Atom_Ch_setAruInput(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   567  /** \brief sets the SOMC control bits for the specified ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   568   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   569   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   570   * \param control SOMC control mode enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   571   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   573  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcControl control);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   575  /** \brief sets the SL control for SOMC mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   576   * \param atom pointer to the ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   577   * \param channel index of ATOM channel
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   578   * \param ctrl SIgnal level control
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   579   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   581  IFX_EXTERN void IfxGtm_Atom_Ch_setSomcSignalLevelControl(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, IfxGtm_Atom_SomcSignalLevelControl ctrl);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   583  /** \brief set the ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   584   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   585   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   586   * \param address ARU read address 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   589  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress0(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   591  /** \brief set the ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   592   * \param atom pointer to ATOM instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   593   * \param channel ATOM channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   594   * \param address ARU read address 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   595   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   596   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   597  IFX_EXTERN void IfxGtm_Atom_Ch_setAruReadAddress1(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   599  /** \brief Returns the shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   600   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   601   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   602   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   603   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   604  IFX_EXTERN uint32 IfxGtm_Atom_getShadowZero(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   606  /** \brief Returns the shadow zero pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   607   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   608   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   609   * \return shadow zero value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   611  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowZeroPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   613  /** \brief Returns the shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   614   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   615   * \param channel Channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   616   * \return shadow one value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   617   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   618  IFX_EXTERN uint32 IfxGtm_Atom_getShadowOne(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   620  /** \brief Returns the shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   621   * \param atom Pointer to the ATOM object
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   622   * \param channel channel index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   623   * \return shadow One pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   625  IFX_EXTERN volatile uint32 *IfxGtm_Atom_getShadowOnePointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   628  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   629  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   631  IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   633      return (Ifx_GTM_ATOM_CH *)((uint32)&atom->CH0.RDADDR.U + 0x80 * channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   634  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   635  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   637  IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   638  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   639      Ifx_GTM_ATOM_CH *atomCh = IfxGtm_Atom_Ch_getChannelPointer(atom, channel);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   641      atomCh->SR0.U = shadowZero; // TK: replaced .B access to optimize runtime
	mov	d15,d6
	st.w	[a15]8,d15
.L644:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Gtm\Std\IfxGtm_Atom.h	   642      atomCh->SR1.U = shadowOne;
	st.w	[a15]12,d5
.L552:
	j	.L89
.L88:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   720              cm1 = period + 2;
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   721              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   722              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   723          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   724          else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   725          {                           /* x% duty cycle */
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   726              s = shift[channelIndex];
	addsc.a	a2,a6,d4,#2
.L949:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   727  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   728              if (s > 0)
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   729              {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   730                  s = __minX(s, (period - x) / 2 - 1);
	sub	d5,d3,d6
.L950:
	ld.w	d0,[a2]
.L645:
	sh	d5,#-1
.L951:
	jeq	d0,#0,.L90
.L952:
	add	d15,d5,#-1
.L953:
	min.u	d15,d0,d15
	j	.L91
.L90:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   731              }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   732              else
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   733              {
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   734                  s = __maxX(s, (x - period) / 2 + 1);
	sub	d0,d6,d3
.L646:
	sh	d0,#-1
	add	d15,d0,#1
.L91:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   735              }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   736  
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   737              cm1 = s + (period - x) / 2; // CM1
	add	d5,d15
.L954:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   738              cm0 = s + (period + x) / 2; // CM0
	add	d0,d3,d6
	sh	d0,#-1
.L647:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   739              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
	add	d6,d15,d0
	fcall	.cocofun_12
.L89:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   740              IfxGtm_Atom_Ch_setCompareShadow(driver->atom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
	fcall	.cocofun_4
.L87:
	fcall	.cocofun_14
.L79:
	ld.bu	d15,[a4]17
.L955:
	jlt.u	d4,d15,.L80
.L956:

; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   741          }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   742      }
; ..\0_Src\4_McHal\Tricore\Gtm\Atom\PwmHl\IfxGtm_Atom_PwmHl.c	   743  }
	ret
.L532:
	
__IfxGtm_Atom_PwmHl_updateShiftCenterAligned_function_end:
	.size	IfxGtm_Atom_PwmHl_updateShiftCenterAligned,__IfxGtm_Atom_PwmHl_updateShiftCenterAligned_function_end-IfxGtm_Atom_PwmHl_updateShiftCenterAligned
.L263:
	; End of function
	
	.sdecl	'.rodata.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_modes',data,rom,cluster('IfxGtm_Atom_PwmHl_modes')
	.sect	'.rodata.IfxGtm_Atom_PwmHl.IfxGtm_Atom_PwmHl_modes'
	.align	4
IfxGtm_Atom_PwmHl_modes:	.type	object
	.size	IfxGtm_Atom_PwmHl_modes,80
	.space	4
	.word	IfxGtm_Atom_PwmHl_updateCenterAligned,IfxGtm_Atom_PwmHl_updateShiftCenterAligned,IfxGtm_Atom_PwmHl_updatePulse
	.byte	1,1
	.space	2
	.word	IfxGtm_Atom_PwmHl_updateCenterAligned,IfxGtm_Atom_PwmHl_updateShiftCenterAligned,IfxGtm_Atom_PwmHl_updatePulse
	.byte	2
	.space	3
	.word	IfxGtm_Atom_PwmHl_updateEdgeAligned,IfxGtm_Atom_PwmHl_updateAndShiftOff,IfxGtm_Atom_PwmHl_updatePulse
	.byte	3,1
	.space	2
	.word	IfxGtm_Atom_PwmHl_updateEdgeAligned,IfxGtm_Atom_PwmHl_updateAndShiftOff,IfxGtm_Atom_PwmHl_updatePulse
	.byte	4
	.space	3
	.word	IfxGtm_Atom_PwmHl_updateOff,IfxGtm_Atom_PwmHl_updateAndShiftOff,IfxGtm_Atom_PwmHl_updatePulseOff
	.sdecl	'.rodata.IfxGtm_Atom_PwmHl..2.ini',data,rom
	.sect	'.rodata.IfxGtm_Atom_PwmHl..2.ini'
	.align	2
.2.ini:	.type	object
	.size	.2.ini,32
	.space	32
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_getDeadtime'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_getMinPulse'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_getMode'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_setDeadtime'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_setMinPulse'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_setMode'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_setOnTime'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_setOnTimeAndShift'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_setPulse'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_setupChannels'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_updateAndShiftOff'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_updateCenterAligned'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_updateEdgeAligned'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_updateOff'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_updatePulse'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_updatePulseOff'
	.calls	'__INDIRECT__','IfxGtm_Atom_PwmHl_updateShiftCenterAligned'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_PwmHl_setDeadtime'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_PwmHl_setMinPulse'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_Ch_getClockSource'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_Ch_configurePwmMode'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_PinMap_setAtomTout'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_Agc_enableChannelsOutput'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_Agc_enableChannels'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_PwmHl_setMode'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_PwmHl_updateOff'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_Agc_setChannelsForceUpdate'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_Agc_trigger'
	.calls	'IfxGtm_Atom_PwmHl_init','IfxGtm_Atom_Timer_addToChannelMask'
	.calls	'IfxGtm_Atom_PwmHl_initConfig','IfxStdIf_PwmHl_initConfig'
	.calls	'IfxGtm_Atom_PwmHl_setMode','IfxGtm_Atom_Ch_setSignalLevel'
	.calls	'IfxGtm_Atom_PwmHl_setOnTime','__INDIRECT__'
	.calls	'IfxGtm_Atom_PwmHl_setOnTimeAndShift','__INDIRECT__'
	.calls	'IfxGtm_Atom_PwmHl_setPulse','__INDIRECT__'
	.calls	'IfxGtm_Atom_PwmHl_stdIfPwmHlInit','memset'
	.calls	'IfxGtm_Atom_PwmHl_stdIfPwmHlInit','IfxGtm_Atom_Timer_stdIfTimerInit'
	.calls	'IfxGtm_Atom_PwmHl_updateAndShiftOff','IfxGtm_Atom_PwmHl_updateOff'
	.calls	'IfxGtm_Atom_PwmHl_updatePulseOff','IfxGtm_Atom_PwmHl_updateOff'
	.calls	'IfxGtm_Atom_PwmHl_getDeadtime','.cocofun_7'
	.calls	'IfxGtm_Atom_PwmHl_getMinPulse','.cocofun_7'
	.calls	'IfxGtm_Atom_PwmHl_setDeadtime','.cocofun_8'
	.calls	'IfxGtm_Atom_PwmHl_setMinPulse','.cocofun_8'
	.calls	'IfxGtm_Atom_PwmHl_setMode','.cocofun_9'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_13'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_10'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_5'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_3'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_11'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_12'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_4'
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','.cocofun_14'
	.calls	'.cocofun_12','.cocofun_16'
	.calls	'.cocofun_11','.cocofun_16'
	.calls	'.cocofun_4','.cocofun_15'
	.calls	'.cocofun_3','.cocofun_16'
	.calls	'.cocofun_3','.cocofun_15'
	.calls	'IfxGtm_Atom_PwmHl_updateEdgeAligned','.cocofun_13'
	.calls	'IfxGtm_Atom_PwmHl_updateEdgeAligned','.cocofun_5'
	.calls	'IfxGtm_Atom_PwmHl_updateEdgeAligned','.cocofun_3'
	.calls	'IfxGtm_Atom_PwmHl_updateEdgeAligned','.cocofun_16'
	.calls	'IfxGtm_Atom_PwmHl_updateEdgeAligned','.cocofun_15'
	.calls	'IfxGtm_Atom_PwmHl_updateEdgeAligned','.cocofun_14'
	.calls	'.cocofun_15','.cocofun_16'
	.calls	'IfxGtm_Atom_PwmHl_updateOff','.cocofun_6'
	.calls	'IfxGtm_Atom_PwmHl_updatePulse','.cocofun_14'
	.calls	'IfxGtm_Atom_PwmHl_updatePulse','.cocofun_10'
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','.cocofun_13'
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','.cocofun_5'
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','.cocofun_3'
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','.cocofun_11'
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','.cocofun_12'
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','.cocofun_4'
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','.cocofun_14'
	.calls	'IfxGtm_Atom_PwmHl_getDeadtime','',0
	.calls	'.cocofun_7','',0
	.calls	'IfxGtm_Atom_PwmHl_getMinPulse','',0
	.calls	'IfxGtm_Atom_PwmHl_getMode','',0
	.calls	'IfxGtm_Atom_PwmHl_init','',40
	.calls	'IfxGtm_Atom_PwmHl_initConfig','',0
	.calls	'IfxGtm_Atom_PwmHl_setDeadtime','',0
	.calls	'.cocofun_8','',0
	.calls	'IfxGtm_Atom_PwmHl_setMinPulse','',0
	.calls	'IfxGtm_Atom_PwmHl_setMode','',0
	.calls	'.cocofun_9','',0
	.calls	'IfxGtm_Atom_PwmHl_setOnTime','',0
	.calls	'IfxGtm_Atom_PwmHl_setOnTimeAndShift','',0
	.calls	'IfxGtm_Atom_PwmHl_setPulse','',0
	.calls	'IfxGtm_Atom_PwmHl_setupChannels','',0
	.calls	'IfxGtm_Atom_PwmHl_stdIfPwmHlInit','',0
	.calls	'IfxGtm_Atom_PwmHl_updateAndShiftOff','',0
	.calls	'IfxGtm_Atom_PwmHl_updateCenterAligned','',0
	.calls	'.cocofun_14','',0
	.calls	'.cocofun_13','',0
	.calls	'.cocofun_12','',0
	.calls	'.cocofun_11','',0
	.calls	'.cocofun_10','',0
	.calls	'.cocofun_5','',0
	.calls	'.cocofun_4','',0
	.calls	'.cocofun_3','',0
	.calls	'IfxGtm_Atom_PwmHl_updateEdgeAligned','',0
	.calls	'.cocofun_16','',0
	.calls	'.cocofun_15','',0
	.calls	'IfxGtm_Atom_PwmHl_updateOff','',0
	.calls	'.cocofun_6','',0
	.calls	'IfxGtm_Atom_PwmHl_updatePulse','',0
	.calls	'IfxGtm_Atom_PwmHl_updatePulseOff','',0
	.extern	IfxStdIf_PwmHl_initConfig
	.extern	IfxGtm_Atom_Ch_configurePwmMode
	.extern	IfxGtm_Atom_Ch_getClockSource
	.extern	IfxGtm_Atom_Ch_setSignalLevel
	.extern	IfxGtm_Atom_Agc_enableChannels
	.extern	IfxGtm_Atom_Agc_enableChannelsOutput
	.extern	IfxGtm_Atom_Agc_setChannelsForceUpdate
	.extern	IfxGtm_Atom_Agc_trigger
	.extern	IfxGtm_PinMap_setAtomTout
	.extern	IfxGtm_Atom_Timer_addToChannelMask
	.extern	IfxGtm_Atom_Timer_stdIfTimerInit
	.extern	memset
	.extern	__INDIRECT__
	.calls	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L161:
	.word	249453
	.half	3
	.word	.L162
	.byte	4
.L160:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L163
	.byte	2,1,1,3
	.word	172
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	175
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L360:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	220
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	232
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,9
	.byte	'void',0,10
	.word	318
	.byte	3
	.word	324
	.byte	7
	.byte	'unsigned int',0,4,7,4
	.byte	'__ldmst_c',0,3,2,108,17,1,1,5
	.byte	'address',0,2,108,42
	.word	329
	.byte	5
	.byte	'mask',0,2,108,60
	.word	334
	.byte	5
	.byte	'value',0,2,108,75
	.word	334
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,3
	.word	318
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	412
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	438
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	438
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	412
	.byte	6,0,7
	.byte	'int',0,4,5
.L336:
	.byte	7
	.byte	'unsigned char',0,1,8,11
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,12
	.byte	'SRPN',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'SRE',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'TOS',0,1
	.word	531
	.byte	3,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'ECC',0,1
	.word	531
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	3,0,2,35,2,12
	.byte	'SRR',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'CLRR',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'SETR',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'IOV',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'IOVCLR',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'SWS',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'SWSCLR',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	531
	.byte	1,0,2,35,3,0,13,4,93,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	548
	.byte	4,2,35,0,0,10
	.word	838
	.byte	3
	.word	877
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1,5
	.byte	'src',0,3,247,1,60
	.word	882
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,11
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,6,208,9,16,4,12
	.byte	'ENDINIT',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'LCK',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'PW',0,4
	.word	930
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,6,135,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	946
	.byte	4,2,35,0,0
.L342:
	.byte	7
	.byte	'unsigned short int',0,2,7,11
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,6,217,9,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'UR',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PAR',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'TCR',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'TCTR',0,1
	.word	531
	.byte	7,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,6,143,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	1104
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,6,233,9,16,4,12
	.byte	'AE',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'US',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PAS',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'TCS',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'TCT',0,1
	.word	531
	.byte	7,0,2,35,1,12
	.byte	'TIM',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,6,151,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	1370
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_SCU_WDTCPU',0,6,210,16,25,12,14
	.byte	'CON0',0
	.word	1042
	.byte	4,2,35,0,14
	.byte	'CON1',0
	.word	1330
	.byte	4,2,35,4,14
	.byte	'SR',0
	.word	1561
	.byte	4,2,35,8,0,10
	.word	1601
	.byte	3
	.word	1664
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,5,164,4,17,1,1,5
	.byte	'watchdog',0,5,164,4,65
	.word	1669
	.byte	5
	.byte	'password',0,5,164,4,82
	.word	1082
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,5,197,4,17,1,1,5
	.byte	'password',0,5,197,4,59
	.word	1082
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,5,144,5,17,1,1,5
	.byte	'watchdog',0,5,144,5,63
	.word	1669
	.byte	5
	.byte	'password',0,5,144,5,80
	.word	1082
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,5,177,5,17,1,1,5
	.byte	'password',0,5,177,5,57
	.word	1082
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,5,220,4,19
	.word	1082
	.byte	1,1,5
	.byte	'watchdog',0,5,220,4,74
	.word	1669
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,5,129,5,19
	.word	1082
	.byte	1,1,6,0,11
	.byte	'_Ifx_P_OUT_Bits',0,8,145,3,16,4,12
	.byte	'P0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'P2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'P3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'P4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'P5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'P6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'P7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'P8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'P9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'P10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'P11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'P12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'P13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'P14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'P15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,171,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2079
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMR_Bits',0,8,171,2,16,4,12
	.byte	'PS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'PS2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'PS3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'PS4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'PS5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'PS6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PS7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'PS8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'PS9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'PS10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'PS11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'PS12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'PS13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'PS14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'PS15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'PCL0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'PCL2',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'PCL3',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'PCL4',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'PCL5',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'PCL6',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'PCL7',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'PCL8',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'PCL9',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'PCL10',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'PCL11',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'PCL12',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'PCL13',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'PCL14',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'PCL15',0,1
	.word	531
	.byte	1,0,2,35,3,0,13,8,251,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2395
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_ID_Bits',0,8,133,1,16,4,12
	.byte	'MODREV',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'MODTYPE',0,1
	.word	531
	.byte	8,0,2,35,1,12
	.byte	'MODNUMBER',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,155,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2966
	.byte	4,2,35,0,0,15,4
	.word	531
	.byte	16,3,0,11
	.byte	'_Ifx_P_IOCR0_Bits',0,8,163,1,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'PC0',0,1
	.word	531
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'PC1',0,1
	.word	531
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	531
	.byte	3,5,2,35,2,12
	.byte	'PC2',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'PC3',0,1
	.word	531
	.byte	5,0,2,35,3,0,13,8,171,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3095
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IOCR4_Bits',0,8,189,1,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'PC4',0,1
	.word	531
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'PC5',0,1
	.word	531
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	531
	.byte	3,5,2,35,2,12
	.byte	'PC6',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'PC7',0,1
	.word	531
	.byte	5,0,2,35,3,0,13,8,187,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3310
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IOCR8_Bits',0,8,202,1,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'PC8',0,1
	.word	531
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'PC9',0,1
	.word	531
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	531
	.byte	3,5,2,35,2,12
	.byte	'PC10',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'PC11',0,1
	.word	531
	.byte	5,0,2,35,3,0,13,8,195,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3525
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IOCR12_Bits',0,8,176,1,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'PC12',0,1
	.word	531
	.byte	5,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'PC13',0,1
	.word	531
	.byte	5,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	531
	.byte	3,5,2,35,2,12
	.byte	'PC14',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'PC15',0,1
	.word	531
	.byte	5,0,2,35,3,0,13,8,179,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3742
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_IN_Bits',0,8,141,1,16,4,12
	.byte	'P0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'P2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'P3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'P4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'P5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'P6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'P7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'P8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'P9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'P10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'P11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'P12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'P13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'P14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'P15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,163,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3962
	.byte	4,2,35,0,0,15,24
	.word	531
	.byte	16,23,0,11
	.byte	'_Ifx_P_PDR0_Bits',0,8,212,3,16,4,12
	.byte	'PD0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'PL0',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'PD1',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'PL1',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'PD2',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'PL2',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'PD3',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'PL3',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'PD4',0,1
	.word	531
	.byte	2,6,2,35,2,12
	.byte	'PL4',0,1
	.word	531
	.byte	2,4,2,35,2,12
	.byte	'PD5',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'PL5',0,1
	.word	531
	.byte	2,0,2,35,2,12
	.byte	'PD6',0,1
	.word	531
	.byte	2,6,2,35,3,12
	.byte	'PL6',0,1
	.word	531
	.byte	2,4,2,35,3,12
	.byte	'PD7',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'PL7',0,1
	.word	531
	.byte	2,0,2,35,3,0,13,8,195,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4286
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_PDR1_Bits',0,8,233,3,16,4,12
	.byte	'PD8',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'PL8',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'PD9',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'PL9',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'PD10',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'PL10',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'PD11',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'PL11',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'PD12',0,1
	.word	531
	.byte	2,6,2,35,2,12
	.byte	'PL12',0,1
	.word	531
	.byte	2,4,2,35,2,12
	.byte	'PD13',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'PL13',0,1
	.word	531
	.byte	2,0,2,35,2,12
	.byte	'PD14',0,1
	.word	531
	.byte	2,6,2,35,3,12
	.byte	'PL14',0,1
	.word	531
	.byte	2,4,2,35,3,12
	.byte	'PD15',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'PL15',0,1
	.word	531
	.byte	2,0,2,35,3,0,13,8,203,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4590
	.byte	4,2,35,0,0,15,8
	.word	531
	.byte	16,7,0,11
	.byte	'_Ifx_P_ESR_Bits',0,8,111,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,147,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4915
	.byte	4,2,35,0,0,15,12
	.word	531
	.byte	16,11,0,11
	.byte	'_Ifx_P_PDISC_Bits',0,8,190,3,16,4,12
	.byte	'PDIS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PDIS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'PDIS2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'PDIS3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'PDIS4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'PDIS5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'PDIS6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PDIS7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'PDIS8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'PDIS9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'PDIS10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'PDIS11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'PDIS12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'PDIS13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'PDIS14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'PDIS15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,187,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	5255
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_PCSR_Bits',0,8,167,3,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'SEL3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'SEL4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'SEL5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'SEL6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'SEL7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'SEL8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'SEL9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'SEL10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'SEL11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'SEL12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'SEL13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'SEL14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'SEL15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	15,1,2,35,2,12
	.byte	'LCK',0,1
	.word	531
	.byte	1,0,2,35,3,0,13,8,179,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	5621
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR0_Bits',0,8,230,2,16,4,12
	.byte	'PS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'PS2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'PS3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,13,8,139,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	5985
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR4_Bits',0,8,251,2,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'PS4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'PS5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'PS6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PS7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	334
	.byte	24,0,2,35,0,0,13,8,155,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6132
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR8_Bits',0,8,134,3,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'PS8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'PS9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'PS10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'PS11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'reserved_12',0,4
	.word	334
	.byte	20,0,2,35,0,0,13,8,163,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6301
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR12_Bits',0,8,240,2,16,4,12
	.byte	'reserved_0',0,2
	.word	1082
	.byte	12,4,2,35,0,12
	.byte	'PS12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'PS13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'PS14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'PS15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,147,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6473
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR0_Bits',0,8,128,2,16,4,12
	.byte	'reserved_0',0,2
	.word	1082
	.byte	16,0,2,35,0,12
	.byte	'PCL0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'PCL2',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'PCL3',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'reserved_20',0,2
	.word	1082
	.byte	12,0,2,35,2,0,13,8,219,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6648
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR4_Bits',0,8,149,2,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	20,12,2,35,0,12
	.byte	'PCL4',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'PCL5',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'PCL6',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'PCL7',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	8,0,2,35,3,0,13,8,235,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6822
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR8_Bits',0,8,160,2,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	24,8,2,35,0,12
	.byte	'PCL8',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'PCL9',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'PCL10',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'PCL11',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,8,243,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	6996
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR12_Bits',0,8,139,2,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	28,4,2,35,0,12
	.byte	'PCL12',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'PCL13',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'PCL14',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'PCL15',0,1
	.word	531
	.byte	1,0,2,35,3,0,13,8,227,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7172
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMSR_Bits',0,8,208,2,16,4,12
	.byte	'PS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'PS2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'PS3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'PS4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'PS5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'PS6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PS7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'PS8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'PS9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'PS10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'PS11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'PS12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'PS13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'PS14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'PS15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,131,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7328
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_OMCR_Bits',0,8,234,1,16,4,12
	.byte	'reserved_0',0,2
	.word	1082
	.byte	16,0,2,35,0,12
	.byte	'PCL0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'PCL2',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'PCL3',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'PCL4',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'PCL5',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'PCL6',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'PCL7',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'PCL8',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'PCL9',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'PCL10',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'PCL11',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'PCL12',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'PCL13',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'PCL14',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'PCL15',0,1
	.word	531
	.byte	1,0,2,35,3,0,13,8,211,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	7661
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_LPCR_Bits',0,8,215,1,16,4,12
	.byte	'REN_CTRL',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'RX_EN',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'TERM',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'LRXTERM',0,1
	.word	531
	.byte	3,2,2,35,0,12
	.byte	'LVDSM',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PS',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'TEN_CTRL',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'TX_EN',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'VDIFFADJ',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'VOSDYN',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'VOSEXT',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'TX_PD',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'TX_PWDPD',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,8,203,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	8009
	.byte	4,2,35,0,0,15,32
	.word	8289
	.byte	16,7,0,15,56
	.word	531
	.byte	16,55,0,11
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,105,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,13,8,139,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	8347
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,68,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	531
	.byte	1,0,2,35,3,0,13,8,131,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	8434
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_P',0,8,220,5,25,128,2,14
	.byte	'OUT',0
	.word	2355
	.byte	4,2,35,0,14
	.byte	'OMR',0
	.word	2926
	.byte	4,2,35,4,14
	.byte	'ID',0
	.word	3046
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3086
	.byte	4,2,35,12,14
	.byte	'IOCR0',0
	.word	3270
	.byte	4,2,35,16,14
	.byte	'IOCR4',0
	.word	3485
	.byte	4,2,35,20,14
	.byte	'IOCR8',0
	.word	3702
	.byte	4,2,35,24,14
	.byte	'IOCR12',0
	.word	3922
	.byte	4,2,35,28,14
	.byte	'reserved_20',0
	.word	3086
	.byte	4,2,35,32,14
	.byte	'IN',0
	.word	4237
	.byte	4,2,35,36,14
	.byte	'reserved_28',0
	.word	4277
	.byte	24,2,35,40,14
	.byte	'PDR0',0
	.word	4550
	.byte	4,2,35,64,14
	.byte	'PDR1',0
	.word	4866
	.byte	4,2,35,68,14
	.byte	'reserved_48',0
	.word	4906
	.byte	8,2,35,72,14
	.byte	'ESR',0
	.word	5206
	.byte	4,2,35,80,14
	.byte	'reserved_54',0
	.word	5246
	.byte	12,2,35,84,14
	.byte	'PDISC',0
	.word	5581
	.byte	4,2,35,96,14
	.byte	'PCSR',0
	.word	5945
	.byte	4,2,35,100,14
	.byte	'reserved_68',0
	.word	4906
	.byte	8,2,35,104,14
	.byte	'OMSR0',0
	.word	6092
	.byte	4,2,35,112,14
	.byte	'OMSR4',0
	.word	6261
	.byte	4,2,35,116,14
	.byte	'OMSR8',0
	.word	6433
	.byte	4,2,35,120,14
	.byte	'OMSR12',0
	.word	6608
	.byte	4,2,35,124,14
	.byte	'OMCR0',0
	.word	6782
	.byte	4,3,35,128,1,14
	.byte	'OMCR4',0
	.word	6956
	.byte	4,3,35,132,1,14
	.byte	'OMCR8',0
	.word	7132
	.byte	4,3,35,136,1,14
	.byte	'OMCR12',0
	.word	7288
	.byte	4,3,35,140,1,14
	.byte	'OMSR',0
	.word	7621
	.byte	4,3,35,144,1,14
	.byte	'OMCR',0
	.word	7969
	.byte	4,3,35,148,1,14
	.byte	'reserved_98',0
	.word	4906
	.byte	8,3,35,152,1,14
	.byte	'LPCR',0
	.word	8329
	.byte	32,3,35,160,1,14
	.byte	'reserved_C0',0
	.word	8338
	.byte	56,3,35,192,1,14
	.byte	'ACCEN1',0
	.word	8394
	.byte	4,3,35,248,1,14
	.byte	'ACCEN0',0
	.word	8961
	.byte	4,3,35,252,1,0,10
	.word	9001
	.byte	3
	.word	9571
	.byte	17,7,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,169,5,17,1,1,5
	.byte	'port',0,7,169,5,44
	.word	9576
	.byte	5
	.byte	'pinIndex',0,7,169,5,56
	.word	531
	.byte	5
	.byte	'action',0,7,169,5,80
	.word	9581
	.byte	6,0,19
	.byte	'IfxStdIf_InterfaceDriver',0,10,115,15
	.word	438
	.byte	20
	.word	232
	.byte	1,1,21
	.word	438
	.byte	0,3
	.word	9795
	.byte	19
	.byte	'IfxStdIf_Timer_GetFrequency',0,9,99,19
	.word	9808
.L345:
	.byte	7
	.byte	'unsigned long int',0,4,7,20
	.word	9849
	.byte	1,1,21
	.word	438
	.byte	0,3
	.word	9870
	.byte	19
	.byte	'IfxStdIf_Timer_GetPeriod',0,9,105,26
	.word	9883
	.byte	19
	.byte	'IfxStdIf_Timer_GetResolution',0,9,111,19
	.word	9808
	.byte	19
	.byte	'IfxStdIf_Timer_GetTrigger',0,9,117,26
	.word	9883
	.byte	20
	.word	531
	.byte	1,1,21
	.word	438
	.byte	21
	.word	232
	.byte	0,3
	.word	9992
	.byte	19
	.byte	'IfxStdIf_Timer_SetFrequency',0,9,125,19
	.word	10010
	.byte	22,1,1,21
	.word	438
	.byte	0,3
	.word	10051
	.byte	19
	.byte	'IfxStdIf_Timer_UpdateInputFrequency',0,9,131,1,16
	.word	10060
	.byte	19
	.byte	'IfxStdIf_Timer_ApplyUpdate',0,9,152,1,16
	.word	10060
	.byte	19
	.byte	'IfxStdIf_Timer_DisableUpdate',0,9,169,1,16
	.word	10060
	.byte	19
	.byte	'IfxStdIf_Timer_GetInputFrequency',0,9,175,1,19
	.word	9808
	.byte	19
	.byte	'IfxStdIf_Timer_Run',0,9,184,1,16
	.word	10060
	.byte	20
	.word	531
	.byte	1,1,21
	.word	438
	.byte	21
	.word	9849
	.byte	0,3
	.word	10254
	.byte	19
	.byte	'IfxStdIf_Timer_SetPeriod',0,9,194,1,19
	.word	10272
	.byte	22,1,1,21
	.word	438
	.byte	21
	.word	531
	.byte	0,3
	.word	10311
	.byte	19
	.byte	'IfxStdIf_Timer_SetSingleMode',0,9,203,1,16
	.word	10325
	.byte	22,1,1,21
	.word	438
	.byte	21
	.word	9849
	.byte	0,3
	.word	10368
	.byte	19
	.byte	'IfxStdIf_Timer_SetTrigger',0,9,215,1,16
	.word	10382
	.byte	19
	.byte	'IfxStdIf_Timer_Stop',0,9,221,1,16
	.word	10060
	.byte	20
	.word	531
	.byte	1,1,21
	.word	438
	.byte	0,3
	.word	10451
	.byte	19
	.byte	'IfxStdIf_Timer_AckTimerIrq',0,9,227,1,19
	.word	10464
	.byte	19
	.byte	'IfxStdIf_Timer_AckTriggerIrq',0,9,233,1,19
	.word	10464
	.byte	11
	.byte	'IfxStdIf_Timer_',0,9,237,1,8,68,14
	.byte	'driver',0
	.word	9762
	.byte	4,2,35,0,14
	.byte	'getFrequency',0
	.word	9813
	.byte	4,2,35,4,14
	.byte	'getPeriod',0
	.word	9888
	.byte	4,2,35,8,14
	.byte	'getResolution',0
	.word	9921
	.byte	4,2,35,12,14
	.byte	'getTrigger',0
	.word	9958
	.byte	4,2,35,16,14
	.byte	'setFrequency',0
	.word	10015
	.byte	4,2,35,20,14
	.byte	'updateInputFrequency',0
	.word	10065
	.byte	4,2,35,24,14
	.byte	'applyUpdate',0
	.word	10110
	.byte	4,2,35,28,14
	.byte	'disableUpdate',0
	.word	10146
	.byte	4,2,35,32,14
	.byte	'getInputFrequency',0
	.word	10184
	.byte	4,2,35,36,14
	.byte	'run',0
	.word	10226
	.byte	4,2,35,40,14
	.byte	'setPeriod',0
	.word	10277
	.byte	4,2,35,44,14
	.byte	'setSingleMode',0
	.word	10330
	.byte	4,2,35,48,14
	.byte	'setTrigger',0
	.word	10387
	.byte	4,2,35,52,14
	.byte	'stop',0
	.word	10422
	.byte	4,2,35,56,14
	.byte	'ackTimerIrq',0
	.word	10469
	.byte	4,2,35,60,14
	.byte	'ackTriggerIrq',0
	.word	10505
	.byte	4,2,35,64,0,3
	.word	10543
	.byte	8
	.byte	'IfxStdIf_Timer_getInputFrequency',0,3,9,233,2,20
	.word	232
	.byte	1,1,5
	.byte	'stdIf',0,9,233,2,69
	.word	10922
	.byte	6,0,3
	.word	318
	.byte	3
	.word	9795
	.byte	3
	.word	9870
	.byte	3
	.word	9795
	.byte	3
	.word	9870
	.byte	3
	.word	9992
	.byte	3
	.word	10051
	.byte	3
	.word	10051
	.byte	3
	.word	10051
	.byte	3
	.word	9795
	.byte	3
	.word	10051
	.byte	3
	.word	10254
	.byte	3
	.word	10311
	.byte	3
	.word	10368
	.byte	3
	.word	10051
	.byte	3
	.word	10451
	.byte	3
	.word	10451
	.byte	8
	.byte	'IfxStdIf_Timer_tickToS',0,3,9,179,3,20
	.word	232
	.byte	1,1,5
	.byte	'clockFreq',0,9,179,3,51
	.word	232
	.byte	5
	.byte	'ticks',0,9,179,3,77
	.word	9849
	.byte	6,0
.L494:
	.byte	8
	.byte	'IfxStdIf_Timer_sToTick',0,3,9,190,3,27
	.word	9849
	.byte	1,1
.L497:
	.byte	5
	.byte	'clockFreq',0,9,190,3,58
	.word	232
.L499:
	.byte	5
	.byte	'seconds',0,9,190,3,77
	.word	232
.L501:
	.byte	6,0,11
	.byte	'_Ifx_GTM_ATOM_CH_RDADDR_Bits',0,12,154,4,16,4,12
	.byte	'RDADDR0',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'RDADDR1',0,4
	.word	930
	.byte	9,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,13,12,144,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11218
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_CTRL_Bits',0,12,222,3,16,4,12
	.byte	'MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'TB12_SEL',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ARU_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ACB',0,4
	.word	930
	.byte	5,23,2,35,0,12
	.byte	'CMP_CTRL',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EUPM',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SL',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'CLK_SRC_SR',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'ECLK_SRC',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WR_REQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TRIG_PULSE',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'UDMODE',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'RST_CCU0',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'OSM_TRIG',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EXT_TRIG',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EXTTRIGOUT',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TRIGOUT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'SLA',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'OSM',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'ABM',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EXT_FUPD',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'SOMB',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FREEZE',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,232,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11377
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_SOMB_Bits',0,12,163,4,16,4,12
	.byte	'MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'TB12_SEL',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ARU_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ACB_1_0',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'ACB_4_3_2',0,4
	.word	930
	.byte	3,23,2,35,0,12
	.byte	'CMP_CTRL',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EUPM',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SL',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WR_REQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	2,9,2,35,0,12
	.byte	'EXTTRIGOUT',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TRIGOUT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'ABM',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'SOMB',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FREEZE',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,152,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	11893
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_SOMC_Bits',0,12,192,4,16,4,12
	.byte	'MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'TB12_SEL',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ARU_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ACB_1_0',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'ACB_4_3_2',0,4
	.word	930
	.byte	3,23,2,35,0,12
	.byte	'CMP_CTRL',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EUPM',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SL',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WR_REQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	2,9,2,35,0,12
	.byte	'EXTTRIGOUT',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TRIGOUT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'SLA',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'ABM',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FREEZE',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,160,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	12449
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_SOMI_Bits',0,12,221,4,16,4,12
	.byte	'MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ARU_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ACB0',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	4,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SL',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	3,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FREEZE',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,168,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	13004
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_SOMP_Bits',0,12,249,4,16,4,12
	.byte	'MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ARU_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ADL',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'BITREV',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'SR0_TRIG',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SL',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'CLK_SRC_SR',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'ECLK_SRC',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TRIG_PULSE',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'UDMODE',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'RST_CCU0',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'OSM_TRIG',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EXT_TRIG',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EXTTRIGOUT',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TRIGOUT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'OSM',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EXT_FUPD',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FREEZE',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,176,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	13571
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_SOMS_Bits',0,12,153,5,16,4,12
	.byte	'MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ARU_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ACB0',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	2,25,2,35,0,12
	.byte	'DSO',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SL',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'CLK_SRC_SR',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'ECLK_SRC',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	3,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'OSM',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EXT_FUPD',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FREEZE',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,184,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	14186
	.byte	4,2,35,0,0,13,12,205,78,8,4,14
	.byte	'CTRL',0
	.word	11853
	.byte	4,2,35,0,14
	.byte	'SOMB',0
	.word	12409
	.byte	4,2,35,0,14
	.byte	'SOMC',0
	.word	12964
	.byte	4,2,35,0,14
	.byte	'SOMI',0
	.word	13531
	.byte	4,2,35,0,14
	.byte	'SOMP',0
	.word	14146
	.byte	4,2,35,0,14
	.byte	'SOMS',0
	.word	14735
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_SR0_Bits',0,12,183,5,16,4,12
	.byte	'SR0',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	14866
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_SR1_Bits',0,12,190,5,16,4,12
	.byte	'SR1',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	14977
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_CM0_Bits',0,12,201,3,16,4,12
	.byte	'CM0',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15088
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_CM1_Bits',0,12,208,3,16,4,12
	.byte	'CM1',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15199
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_CN0_Bits',0,12,215,3,16,4,12
	.byte	'CN0',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15310
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_STAT_Bits',0,12,197,5,16,4,12
	.byte	'OL',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	15,16,2,35,0,12
	.byte	'ACBI',0,4
	.word	930
	.byte	5,11,2,35,0,12
	.byte	'DV',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'WRF',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'DR',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'ACBO',0,4
	.word	930
	.byte	5,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,208,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15421
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,12,146,4,16,4,12
	.byte	'CCU0TC',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CCU1TC',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,136,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15629
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,12,251,3,16,4,12
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,240,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15767
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,12,131,4,16,4,12
	.byte	'TRG_CCU0TC',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_CCU1TC',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,248,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	15915
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,12,139,4,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,128,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	16062
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_CH_IRQ',0,12,181,78,25,16,14
	.byte	'NOTIFY',0
	.word	15727
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	15875
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	16022
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	16142
	.byte	4,2,35,12,0,10
	.word	16182
	.byte	11
	.byte	'_Ifx_GTM_ATOM_CH',0,12,202,78,25,48,14
	.byte	'RDADDR',0
	.word	11337
	.byte	4,2,35,0,23
	.word	14775
	.byte	4,2,35,4,14
	.byte	'SR0',0
	.word	14937
	.byte	4,2,35,8,14
	.byte	'SR1',0
	.word	15048
	.byte	4,2,35,12,14
	.byte	'CM0',0
	.word	15159
	.byte	4,2,35,16,14
	.byte	'CM1',0
	.word	15270
	.byte	4,2,35,20,14
	.byte	'CN0',0
	.word	15381
	.byte	4,2,35,24,14
	.byte	'STAT',0
	.word	15589
	.byte	4,2,35,28,14
	.byte	'IRQ',0
	.word	16269
	.byte	16,2,35,32,0,10
	.word	16274
	.byte	3
	.word	16415
	.byte	10
	.word	16274
	.byte	15,16
	.word	531
	.byte	16,15,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,12,136,3,16,4,12
	.byte	'HOST_TRIG',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	7,24,2,35,0,12
	.byte	'RST_CH0',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'RST_CH1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'RST_CH2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'RST_CH3',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'RST_CH4',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'RST_CH5',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'RST_CH6',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'RST_CH7',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'UPEN_CTRL0',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'UPEN_CTRL1',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'UPEN_CTRL2',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'UPEN_CTRL3',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'UPEN_CTRL4',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'UPEN_CTRL5',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'UPEN_CTRL6',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'UPEN_CTRL7',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,176,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	16439
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,12,215,2,16,4,12
	.byte	'ENDIS_CTRL0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'ENDIS_CTRL1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'ENDIS_CTRL2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'ENDIS_CTRL3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'ENDIS_CTRL4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'ENDIS_CTRL5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'ENDIS_CTRL6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'ENDIS_CTRL7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,152,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	16889
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,12,229,2,16,4,12
	.byte	'ENDIS_CTRL0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'ENDIS_CTRL1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'ENDIS_CTRL2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'ENDIS_CTRL3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'ENDIS_CTRL4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'ENDIS_CTRL5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'ENDIS_CTRL6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'ENDIS_CTRL7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,160,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	17177
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,12,206,2,16,4,12
	.byte	'ACT_TB',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'TB_TRIG',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TBU_SEL',0,4
	.word	930
	.byte	2,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	5,0,2,35,0,0,13,12,144,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	17465
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,12,173,3,16,4,12
	.byte	'OUTEN_CTRL0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'OUTEN_CTRL1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'OUTEN_CTRL2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'OUTEN_CTRL3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'OUTEN_CTRL4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'OUTEN_CTRL5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'OUTEN_CTRL6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'OUTEN_CTRL7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,192,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	17621
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,12,187,3,16,4,12
	.byte	'OUTEN_STAT0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'OUTEN_STAT1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'OUTEN_STAT2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'OUTEN_STAT3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'OUTEN_STAT4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'OUTEN_STAT5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'OUTEN_STAT6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'OUTEN_STAT7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,200,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	17909
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,12,243,2,16,4,12
	.byte	'FUPD_CTRL0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'FUPD_CTRL1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'FUPD_CTRL2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'FUPD_CTRL3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'FUPD_CTRL4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'FUPD_CTRL5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'FUPD_CTRL6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'FUPD_CTRL7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'RSTCN0_CH0',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'RSTCN0_CH1',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'RSTCN0_CH2',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'RSTCN0_CH3',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'RSTCN0_CH4',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'RSTCN0_CH5',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'RSTCN0_CH6',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'RSTCN0_CH7',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,168,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	18197
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,12,159,3,16,4,12
	.byte	'INT_TRIG0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'INT_TRIG1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'INT_TRIG2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'INT_TRIG3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'INT_TRIG4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'INT_TRIG5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'INT_TRIG6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'INT_TRIG7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,184,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	18629
	.byte	4,2,35,0,0,15,32
	.word	531
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_ATOM_AGC',0,12,236,78,25,64,14
	.byte	'GLB_CTRL',0
	.word	16849
	.byte	4,2,35,0,14
	.byte	'ENDIS_CTRL',0
	.word	17137
	.byte	4,2,35,4,14
	.byte	'ENDIS_STAT',0
	.word	17425
	.byte	4,2,35,8,14
	.byte	'ACT_TB',0
	.word	17581
	.byte	4,2,35,12,14
	.byte	'OUTEN_CTRL',0
	.word	17869
	.byte	4,2,35,16,14
	.byte	'OUTEN_STAT',0
	.word	18157
	.byte	4,2,35,20,14
	.byte	'FUPD_CTRL',0
	.word	18589
	.byte	4,2,35,24,14
	.byte	'INT_TRIG',0
	.word	18859
	.byte	4,2,35,28,14
	.byte	'reserved_20',0
	.word	18899
	.byte	32,2,35,32,0,10
	.word	18908
	.byte	10
	.word	16274
	.byte	15,80
	.word	531
	.byte	16,79,0,10
	.word	16274
	.byte	10
	.word	16274
	.byte	10
	.word	16274
	.byte	10
	.word	16274
	.byte	10
	.word	16274
	.byte	10
	.word	16274
	.byte	15,208,8
	.word	531
	.byte	16,207,8,0,11
	.byte	'_Ifx_GTM_ATOM',0,12,134,79,25,128,16,14
	.byte	'CH0',0
	.word	16425
	.byte	48,2,35,0,14
	.byte	'reserved_30',0
	.word	16430
	.byte	16,2,35,48,14
	.byte	'AGC',0
	.word	19105
	.byte	64,2,35,64,14
	.byte	'CH1',0
	.word	19110
	.byte	48,3,35,128,1,14
	.byte	'reserved_B0',0
	.word	19115
	.byte	80,3,35,176,1,14
	.byte	'CH2',0
	.word	19124
	.byte	48,3,35,128,2,14
	.byte	'reserved_130',0
	.word	19115
	.byte	80,3,35,176,2,14
	.byte	'CH3',0
	.word	19129
	.byte	48,3,35,128,3,14
	.byte	'reserved_1B0',0
	.word	19115
	.byte	80,3,35,176,3,14
	.byte	'CH4',0
	.word	19134
	.byte	48,3,35,128,4,14
	.byte	'reserved_230',0
	.word	19115
	.byte	80,3,35,176,4,14
	.byte	'CH5',0
	.word	19139
	.byte	48,3,35,128,5,14
	.byte	'reserved_2B0',0
	.word	19115
	.byte	80,3,35,176,5,14
	.byte	'CH6',0
	.word	19144
	.byte	48,3,35,128,6,14
	.byte	'reserved_330',0
	.word	19115
	.byte	80,3,35,176,6,14
	.byte	'CH7',0
	.word	19149
	.byte	48,3,35,128,7,14
	.byte	'reserved_3B0',0
	.word	19154
	.byte	208,8,3,35,176,7,0,10
	.word	19165
	.byte	3
	.word	19493
.L352:
	.byte	17,13,255,1,9,1,18
	.byte	'IfxGtm_Atom_Ch_none',0,127,18
	.byte	'IfxGtm_Atom_Ch_0',0,0,18
	.byte	'IfxGtm_Atom_Ch_1',0,1,18
	.byte	'IfxGtm_Atom_Ch_2',0,2,18
	.byte	'IfxGtm_Atom_Ch_3',0,3,18
	.byte	'IfxGtm_Atom_Ch_4',0,4,18
	.byte	'IfxGtm_Atom_Ch_5',0,5,18
	.byte	'IfxGtm_Atom_Ch_6',0,6,18
	.byte	'IfxGtm_Atom_Ch_7',0,7,0
.L436:
	.byte	8
	.byte	'IfxGtm_Atom_Ch_getChannelPointer',0,3,11,247,4,29
	.word	16420
	.byte	1,1
.L437:
	.byte	5
	.byte	'atom',0,11,247,4,76
	.word	19498
.L439:
	.byte	5
	.byte	'channel',0,11,247,4,97
	.word	19503
.L441:
	.byte	6,0
.L424:
	.byte	4
	.byte	'IfxGtm_Atom_Ch_setCompareShadow',0,3,11,253,4,17,1,1
.L427:
	.byte	5
	.byte	'atom',0,11,253,4,63
	.word	19498
.L429:
	.byte	5
	.byte	'channel',0,11,253,4,84
	.word	19503
.L431:
	.byte	5
	.byte	'shadowZero',0,11,253,4,100
	.word	9849
.L433:
	.byte	5
	.byte	'shadowOne',0,11,253,4,119
	.word	9849
.L435:
	.byte	24,6,0,0,17,15,155,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_none',0,3,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,14,229,6,31
	.word	19876
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,14,227,5,20
	.word	531
	.byte	1,1,6,0,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,14,249,6,19
	.word	9849
	.byte	1,1,5
	.byte	'address',0,14,249,6,55
	.word	1082
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,14,150,7,20
	.word	531
	.byte	1,1,5
	.byte	'address',0,14,150,7,70
	.word	1082
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,14,132,9,17,1,1,5
	.byte	'address',0,14,132,9,56
	.word	9849
	.byte	5
	.byte	'count',0,14,132,9,72
	.word	9849
	.byte	24,6,0,0,4
	.byte	'IfxScuCcu_wait',0,3,16,205,13,17,1,1,5
	.byte	'timeSec',0,16,205,13,40
	.word	232
	.byte	24,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,16,128,13,20
	.word	232
	.byte	1,1,6,0,17,18,113,9,1,18
	.byte	'Ifx_ActiveState_low',0,0,18
	.byte	'Ifx_ActiveState_high',0,1,0,8
	.byte	'IfxGtm_Atom_PwmHl_invertActiveState',0,3,17,138,1,28
	.word	20348
	.byte	1,1,5
	.byte	'activeState',0,17,138,1,80
	.word	20348
	.byte	6,0,25
	.word	524
	.byte	26
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,21
	.word	20470
	.byte	0,10
	.word	334
	.byte	3
	.word	334
	.byte	27
	.byte	'__cmpswapw',0
	.word	20512
	.byte	1,1,1,1,28
	.byte	'p',0
	.word	20517
	.byte	28
	.byte	'value',0
	.word	334
	.byte	28
	.byte	'compare',0
	.word	334
	.byte	0,29
	.word	180
	.byte	30
	.word	206
	.byte	6,0,29
	.word	241
	.byte	30
	.word	273
	.byte	6,0,29
	.word	286
	.byte	6,0,29
	.word	350
	.byte	30
	.word	367
	.byte	30
	.word	383
	.byte	30
	.word	396
	.byte	6,0,29
	.word	443
	.byte	30
	.word	462
	.byte	6,0,29
	.word	478
	.byte	30
	.word	493
	.byte	30
	.word	507
	.byte	6,0,29
	.word	887
	.byte	30
	.word	915
	.byte	6,0,29
	.word	1674
	.byte	30
	.word	1714
	.byte	30
	.word	1732
	.byte	6,0,29
	.word	1752
	.byte	30
	.word	1795
	.byte	6,0,29
	.word	1815
	.byte	30
	.word	1853
	.byte	30
	.word	1871
	.byte	6,0,29
	.word	1891
	.byte	30
	.word	1932
	.byte	6,0,29
	.word	1952
	.byte	30
	.word	2003
	.byte	6,0,29
	.word	2023
	.byte	6,0,29
	.word	9684
	.byte	30
	.word	9712
	.byte	30
	.word	9726
	.byte	30
	.word	9744
	.byte	6,0,29
	.word	10927
	.byte	30
	.word	10972
	.byte	6,0,29
	.word	11074
	.byte	30
	.word	11109
	.byte	30
	.word	11128
	.byte	6,0,29
	.word	11145
	.byte	30
	.word	11180
	.byte	30
	.word	11199
	.byte	6,0,17,7,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,17,7,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,31,19,200,1,9,16,14
	.byte	'deadtime',0
	.word	232
	.byte	4,2,35,0,14
	.byte	'minPulse',0
	.word	232
	.byte	4,2,35,4,14
	.byte	'channelCount',0
	.word	531
	.byte	1,2,35,8,14
	.byte	'emergencyEnabled',0
	.word	531
	.byte	1,2,35,9,14
	.byte	'outputMode',0
	.word	20813
	.byte	1,2,35,10,14
	.byte	'outputDriver',0
	.word	20909
	.byte	1,2,35,11,14
	.byte	'ccxOutputEnabled',0
	.word	20348
	.byte	1,2,35,12,14
	.byte	'coutxOutputEnabled',0
	.word	20348
	.byte	1,2,35,13,14
	.byte	'ccxActiveState',0
	.word	20348
	.byte	1,2,35,14,14
	.byte	'coutxActiveState',0
	.word	20348
	.byte	1,2,35,15,0,3
	.word	21332
	.byte	32
	.byte	'IfxStdIf_PwmHl_initConfig',0,19,209,2,17,1,1,1,1,5
	.byte	'config',0,19,209,2,66
	.word	21569
	.byte	0,29
	.word	19684
	.byte	30
	.word	19729
	.byte	30
	.word	19743
	.byte	6,0,29
	.word	19762
	.byte	30
	.word	19802
	.byte	30
	.word	19816
	.byte	30
	.word	19833
	.byte	30
	.word	19853
	.byte	24,33
	.word	19684
	.byte	30
	.word	19729
	.byte	30
	.word	19743
	.byte	34
	.word	19760
	.byte	0,6,0,0
.L350:
	.byte	17,20,64,9,1,18
	.byte	'IfxGtm_Cmu_Clk_0',0,0,18
	.byte	'IfxGtm_Cmu_Clk_1',0,1,18
	.byte	'IfxGtm_Cmu_Clk_2',0,2,18
	.byte	'IfxGtm_Cmu_Clk_3',0,3,18
	.byte	'IfxGtm_Cmu_Clk_4',0,4,18
	.byte	'IfxGtm_Cmu_Clk_5',0,5,18
	.byte	'IfxGtm_Cmu_Clk_6',0,6,18
	.byte	'IfxGtm_Cmu_Clk_7',0,7,0,17,11,85,9,1,18
	.byte	'IfxGtm_Atom_Ch_ResetEvent_onCm0',0,0,18
	.byte	'IfxGtm_Atom_Ch_ResetEvent_onTrigger',0,1,0,17,11,77,9,1,18
	.byte	'IfxGtm_Atom_Ch_OutputTrigger_forward',0,0,18
	.byte	'IfxGtm_Atom_Ch_OutputTrigger_generate',0,1,0,32
	.byte	'IfxGtm_Atom_Ch_configurePwmMode',0,11,185,1,17,1,1,1,1,5
	.byte	'atom',0,11,185,1,63
	.word	19498
	.byte	5
	.byte	'channel',0,11,185,1,84
	.word	19503
	.byte	5
	.byte	'clock',0,11,185,1,108
	.word	21693
	.byte	5
	.byte	'activeState',0,11,185,1,131,1
	.word	20348
	.byte	5
	.byte	'resetEvent',0,11,185,1,170,1
	.word	21851
	.byte	5
	.byte	'trigger',0,11,185,1,211,1
	.word	21929
	.byte	0,35
	.byte	'IfxGtm_Atom_Ch_getClockSource',0,11,200,1,27
	.word	21693
	.byte	1,1,1,1,5
	.byte	'atom',0,11,200,1,71
	.word	19498
	.byte	5
	.byte	'channel',0,11,200,1,92
	.word	19503
	.byte	0,32
	.byte	'IfxGtm_Atom_Ch_setSignalLevel',0,11,249,2,17,1,1,1,1,5
	.byte	'atom',0,11,249,2,61
	.word	19498
	.byte	5
	.byte	'channel',0,11,249,2,82
	.word	19503
	.byte	5
	.byte	'activeState',0,11,249,2,107
	.word	20348
	.byte	0,10
	.word	18908
	.byte	3
	.word	22330
	.byte	32
	.byte	'IfxGtm_Atom_Agc_enableChannels',0,11,207,3,17,1,1,1,1,5
	.byte	'agc',0,11,207,3,66
	.word	22335
	.byte	5
	.byte	'enableMask',0,11,207,3,78
	.word	1082
	.byte	5
	.byte	'disableMask',0,11,207,3,97
	.word	1082
	.byte	5
	.byte	'immediate',0,11,207,3,118
	.word	531
	.byte	0,32
	.byte	'IfxGtm_Atom_Agc_enableChannelsOutput',0,11,216,3,17,1,1,1,1,5
	.byte	'agc',0,11,216,3,72
	.word	22335
	.byte	5
	.byte	'enableMask',0,11,216,3,84
	.word	1082
	.byte	5
	.byte	'disableMask',0,11,216,3,103
	.word	1082
	.byte	5
	.byte	'immediate',0,11,216,3,124
	.word	531
	.byte	0,32
	.byte	'IfxGtm_Atom_Agc_setChannelsForceUpdate',0,11,137,4,17,1,1,1,1,5
	.byte	'agc',0,11,137,4,74
	.word	22335
	.byte	5
	.byte	'enableMask',0,11,137,4,86
	.word	1082
	.byte	5
	.byte	'disableMask',0,11,137,4,105
	.word	1082
	.byte	5
	.byte	'resetEnableMask',0,11,137,4,125
	.word	1082
	.byte	5
	.byte	'resetDisableMask',0,11,137,4,149,1
	.word	1082
	.byte	0,32
	.byte	'IfxGtm_Atom_Agc_trigger',0,11,151,4,17,1,1,1,1,5
	.byte	'agc',0,11,151,4,59
	.word	22335
	.byte	0,17,13,243,1,9,1,18
	.byte	'IfxGtm_Atom_0',0,0,18
	.byte	'IfxGtm_Atom_1',0,1,18
	.byte	'IfxGtm_Atom_2',0,2,18
	.byte	'IfxGtm_Atom_3',0,3,18
	.byte	'IfxGtm_Atom_4',0,4,18
	.byte	'IfxGtm_Atom_5',0,5,0,17,21,83,9,1,18
	.byte	'IfxGtm_ToutSel_a',0,0,18
	.byte	'IfxGtm_ToutSel_b',0,1,18
	.byte	'IfxGtm_ToutSel_c',0,2,18
	.byte	'IfxGtm_ToutSel_d',0,3,18
	.byte	'IfxGtm_ToutSel_e',0,4,18
	.byte	'IfxGtm_ToutSel_f',0,5,18
	.byte	'IfxGtm_ToutSel_g',0,6,18
	.byte	'IfxGtm_ToutSel_h',0,7,18
	.byte	'IfxGtm_ToutSel_i',0,8,18
	.byte	'IfxGtm_ToutSel_j',0,9,18
	.byte	'IfxGtm_ToutSel_k',0,10,18
	.byte	'IfxGtm_ToutSel_l',0,11,0,31,7,246,1,9,8,14
	.byte	'port',0
	.word	9576
	.byte	4,2,35,0,14
	.byte	'pinIndex',0
	.word	531
	.byte	1,2,35,4,0,17,7,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,31,21,110,15,20,14
	.byte	'atom',0
	.word	22776
	.byte	1,2,35,0,14
	.byte	'channel',0
	.word	19503
	.byte	1,2,35,1,14
	.byte	'toutSel',0
	.word	22879
	.byte	1,2,35,2,14
	.byte	'toutn',0
	.word	9849
	.byte	4,2,35,4,14
	.byte	'pin',0
	.word	23113
	.byte	8,2,35,8,14
	.byte	'select',0
	.word	23152
	.byte	1,2,35,16,0,25
	.word	23369
	.byte	3
	.word	23467
	.byte	32
	.byte	'IfxGtm_PinMap_setAtomTout',0,21,146,1,17,1,1,1,1,5
	.byte	'config',0,21,146,1,64
	.word	23472
	.byte	5
	.byte	'outputMode',0,21,146,1,91
	.word	20813
	.byte	5
	.byte	'padDriver',0,21,146,1,121
	.word	20909
	.byte	0,29
	.word	19978
	.byte	6,0,29
	.word	20012
	.byte	6,0,29
	.word	20054
	.byte	30
	.word	20095
	.byte	6,0,29
	.word	20114
	.byte	30
	.word	20169
	.byte	6,0,29
	.word	20188
	.byte	30
	.word	20228
	.byte	30
	.word	20245
	.byte	24,6,0,0,29
	.word	20264
	.byte	30
	.word	20287
	.byte	24,33
	.word	20308
	.byte	34
	.word	20346
	.byte	0,6,0,0,29
	.word	20308
	.byte	6,0,17,9,85,9,1,18
	.byte	'IfxStdIf_Timer_CountDir_up',0,0,18
	.byte	'IfxStdIf_Timer_CountDir_upAndDown',0,1,18
	.byte	'IfxStdIf_Timer_CountDir_down',0,2,0,31,22,104,9,12,14
	.byte	'period',0
	.word	9849
	.byte	4,2,35,0,14
	.byte	'triggerEnabled',0
	.word	531
	.byte	1,2,35,4,14
	.byte	'clockFreq',0
	.word	232
	.byte	4,2,35,6,14
	.byte	'countDir',0
	.word	23657
	.byte	1,2,35,10,0,11
	.byte	'_Ifx_GTM_REV_Bits',0,12,211,36,16,4,12
	.byte	'STEP',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'NO',0,4
	.word	930
	.byte	4,20,2,35,0,12
	.byte	'MINOR',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'MAJOR',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'DEV_CODE0',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'DEV_CODE1',0,4
	.word	930
	.byte	4,4,2,35,0,12
	.byte	'DEV_CODE2',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,216,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	23842
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_RST_Bits',0,12,223,36,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	26,5,2,35,0,12
	.byte	'BRIDGE_MODE_WRDIS',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,224,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	24034
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CTRL_Bits',0,12,136,12,16,4,12
	.byte	'RF_PROT',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TO_MODE',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'TO_VAL',0,4
	.word	930
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	3,20,2,35,0,12
	.byte	'AEIM_CLUSTER',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,248,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	24195
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_AEI_ADDR_XPT_Bits',0,12,139,1,16,4,12
	.byte	'TO_ADDR',0,4
	.word	930
	.byte	20,12,2,35,0,12
	.byte	'TO_W1R0',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	11,0,2,35,0,0,13,12,208,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	24408
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_IRQ_NOTIFY_Bits',0,12,187,29,16,4,12
	.byte	'AEI_TO_XPT',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'AEI_USP_ADDR',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'AEI_IM_ADDR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'AEI_USP_BE',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'AEIM_USP_ADDR',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'AEIM_IM_ADDR',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'AEIM_USP_BE',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'CLK_EN_ERR',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'CLK_PER_ERR',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	15,8,2,35,0,12
	.byte	'CLK_EN_ERR_STATE0',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'CLK_EN_ERR_STATE1',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'CLK_EN_EXP_STATE0',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'CLK_EN_EXP_STATE1',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,152,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	24543
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_IRQ_EN_Bits',0,12,150,29,16,4,12
	.byte	'AEI_TO_XPT_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'AEI_USP_ADDR_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'AEI_IM_ADDR_IRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'AEI_USP_BE_IRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'AEIM_USP_ADDR_IRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'AEIM_IM_ADDR_IRQ_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'AEIM_USP_BE_IRQ_EN',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'CLK_EN_ERR_IRQ_EN',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'CLK_PER_ERR_IRQ_EN',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,128,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	25007
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_IRQ_FORCINT_Bits',0,12,165,29,16,4,12
	.byte	'TRG_AEI_TO_XPT',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_AEI_USP_ADDR',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_AEI_IM_ADDR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG_AEI_USP_BE',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG_AEIM_USP_ADDR',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TRG_AEIM_IM_ADDR',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TRG_AEIM_USP_BE',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TRG_CLK_EN_ERR',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TRG_CLK_PER_ERR',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,136,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	25368
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_IRQ_MODE_Bits',0,12,180,29,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,144,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	25707
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_IRQ',0,12,249,67,25,16,14
	.byte	'NOTIFY',0
	.word	24967
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	25328
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	25667
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	25779
	.byte	4,2,35,12,0,10
	.word	25819
	.byte	11
	.byte	'_Ifx_GTM_EIRQ_EN_Bits',0,12,207,22,16,4,12
	.byte	'AEI_TO_XPT_EIRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'AEI_USP_ADDR_EIRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'AEI_IM_ADDR_EIRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'AEI_USP_BE_EIRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'AEIM_USP_ADDR_EIRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'AEIM_IM_ADDR_EIRQ_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'AEIM_USP_BE_EIRQ_EN',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'CLK_EN_ERR_EIRQ_EN',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'CLK_PER_ERR_EIRQ_EN',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,152,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	25903
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_HW_CONF_Bits',0,12,230,22,16,4,12
	.byte	'GRSTEN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'BRIDGE_MODE_RST',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SYNC_INPUT_REG',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'CFG_CLOCK_RATE',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ATOM_OUT_RST',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ATOM_TRIG_CHAIN',0,4
	.word	930
	.byte	3,24,2,35,0,12
	.byte	'TOM_OUT_RST',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TOM_TRIG_CHAIN',0,4
	.word	930
	.byte	3,20,2,35,0,12
	.byte	'RAM_INIT_RST',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'ERM',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'ARU_CONNECT_CONFIG',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'IRQ_MODE_LEVEL',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'IRQ_MODE_PULSE',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'IRQ_MODE_PULSE_NOTIFY',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'IRQ_MODE_SINGLE_PULSE',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'ATOM_TRIG_INTCHAIN',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'TOM_TRIG_INTCHAIN',0,4
	.word	930
	.byte	5,3,2,35,0,12
	.byte	'INT_CLK_EN_GEN',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,168,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	26274
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CFG_Bits',0,12,245,9,16,4,12
	.byte	'SRC_IN_MUX',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,13,12,232,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	26858
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_AEI_STA_XPT_Bits',0,12,147,1,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	20,12,2,35,0,12
	.byte	'W1R0',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	11,0,2,35,0,0,13,12,216,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	26967
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRIDGE_MODE_Bits',0,12,233,6,16,4,12
	.byte	'BRG_MODE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MSK_WR_RSP',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'BYPASS_SYNC',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	5,24,2,35,0,12
	.byte	'MODE_UP_PGR',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'BUFF_OVL',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'SYNC_INPUT_REG',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	3,16,2,35,0,12
	.byte	'BRG_RST',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	7,8,2,35,0,12
	.byte	'BUFF_DPT',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	27095
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRIDGE_PTR1_Bits',0,12,250,6,16,4,12
	.byte	'NEW_TRAN_PTR',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'FIRST_RSP_PTR',0,4
	.word	930
	.byte	5,22,2,35,0,12
	.byte	'TRAN_IN_PGR',0,4
	.word	930
	.byte	5,17,2,35,0,12
	.byte	'ABT_TRAN_PGR',0,4
	.word	930
	.byte	5,12,2,35,0,12
	.byte	'FBC',0,4
	.word	930
	.byte	6,6,2,35,0,12
	.byte	'RSP_TRAN_RDY',0,4
	.word	930
	.byte	6,0,2,35,0,0,13,12,168,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	27432
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRIDGE_PTR2_Bits',0,12,133,7,16,4,12
	.byte	'TRAN_IN_PGR2',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,176,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	27640
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRIDGE',0,12,142,68,25,12,14
	.byte	'MODE',0
	.word	27392
	.byte	4,2,35,0,14
	.byte	'PTR1',0
	.word	27600
	.byte	4,2,35,4,14
	.byte	'PTR2',0
	.word	27719
	.byte	4,2,35,8,0,10
	.word	27759
	.byte	11
	.byte	'_Ifx_GTM_MCS_AEM_DIS_Bits',0,12,161,30,16,4,12
	.byte	'DIS_CLS0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'DIS_CLS1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'DIS_CLS2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'DIS_CLS3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'DIS_CLS4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'DIS_CLS5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'DIS_CLS6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'DIS_CLS7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'DIS_CLS8',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'DIS_CLS9',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'DIS_CLS10',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'DIS_CLS11',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	27829
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_AUX_IN_SRC_TIM_Bits',0,12,210,5,16,4,12
	.byte	'SRC_CH0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SRC_CH1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SRC_CH2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SRC_CH3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SRC_CH4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SRC_CH5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SRC_CH6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'SRC_CH7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'SEL_OUT_N_CH0',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'SEL_OUT_N_CH1',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'SEL_OUT_N_CH2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'SEL_OUT_N_CH3',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'SEL_OUT_N_CH4',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'SEL_OUT_N_CH5',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'SEL_OUT_N_CH6',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'SEL_OUT_N_CH7',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	28167
	.byte	4,2,35,0,0,15,24
	.word	28600
	.byte	16,5,0,11
	.byte	'_Ifx_GTM_AUX_IN_SRC',0,12,162,68,25,24,14
	.byte	'TIM',0
	.word	28640
	.byte	24,2,35,0,0,10
	.word	28649
	.byte	11
	.byte	'_Ifx_GTM_EXT_CAP_EN_Bits',0,12,222,22,16,4,12
	.byte	'TIM_I_EXT_CAP_EN',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'TIM_IP1_EXT_CAP_EN',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,160,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	28694
	.byte	4,2,35,0,0,15,24
	.word	28807
	.byte	16,5,0,11
	.byte	'_Ifx_GTM_OUT_TOM_Bits',0,12,248,34,16,4,12
	.byte	'TOM_OUT',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'TOM_OUT_N',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,144,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	28856
	.byte	4,2,35,0,0,15,12
	.word	28925
	.byte	16,2,0,11
	.byte	'_Ifx_GTM_OUT_ATOM_Bits',0,12,239,34,16,4,12
	.byte	'ATOM_I_OUT',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'ATOM_I_OUT_N',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'ATOM_IP1_OUT',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'ATOM_IP1_OUT_N',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,136,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	28974
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OUT',0,12,180,68,25,48,14
	.byte	'TOM',0
	.word	28965
	.byte	12,2,35,0,14
	.byte	'reserved_C',0
	.word	5246
	.byte	12,2,35,12,14
	.byte	'ATOM0',0
	.word	29100
	.byte	4,2,35,24,14
	.byte	'ATOM2',0
	.word	29100
	.byte	4,2,35,28,14
	.byte	'ATOM4',0
	.word	29100
	.byte	4,2,35,32,14
	.byte	'reserved_24',0
	.word	5246
	.byte	12,2,35,36,0,10
	.word	29140
	.byte	11
	.byte	'_Ifx_GTM_CLS_CLK_CFG_Bits',0,12,134,10,16,4,12
	.byte	'CLS0_CLK_DIV',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'CLS1_CLK_DIV',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'CLS2_CLK_DIV',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'CLS3_CLK_DIV',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'CLS4_CLK_DIV',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'CLS5_CLK_DIV',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,248,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	29264
	.byte	4,2,35,0,0,15,76
	.word	531
	.byte	16,75,0,11
	.byte	'_Ifx_GTM_TBU_CHEN_Bits',0,12,189,38,16,4,12
	.byte	'ENDIS_CH0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'ENDIS_CH1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'ENDIS_CH2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'ENDIS_CH3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,160,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	29651
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH0_CTRL_Bits',0,12,249,37,16,4,12
	.byte	'LOW_RES',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CH_CLK_SRC',0,4
	.word	930
	.byte	3,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,216,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	29827
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH0_BASE_Bits',0,12,242,37,16,4,12
	.byte	'BASE',0,4
	.word	930
	.byte	27,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	5,0,2,35,0,0,13,12,208,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	29964
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH1_CTRL_Bits',0,12,136,38,16,4,12
	.byte	'CH_MODE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CH_CLK_SRC',0,4
	.word	930
	.byte	3,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,232,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30077
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH1_BASE_Bits',0,12,129,38,16,4,12
	.byte	'BASE',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30214
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH2_CTRL_Bits',0,12,151,38,16,4,12
	.byte	'CH_MODE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CH_CLK_SRC',0,4
	.word	930
	.byte	3,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,248,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30327
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH2_BASE_Bits',0,12,144,38,16,4,12
	.byte	'BASE',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,240,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30464
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH3_CTRL_Bits',0,12,180,38,16,4,12
	.byte	'CH_MODE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	3,28,2,35,0,12
	.byte	'USE_CH2',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,152,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30577
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH3_BASE_Bits',0,12,159,38,16,4,12
	.byte	'BASE',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,128,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30733
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH3_BASE_MARK_Bits',0,12,173,38,16,4,12
	.byte	'BASE_MARK',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,144,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30846
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU_CH3_BASE_CAPTURE_Bits',0,12,166,38,16,4,12
	.byte	'BASE_CAPTURE',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,136,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	30969
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TBU',0,12,203,68,25,44,14
	.byte	'CHEN',0
	.word	29787
	.byte	4,2,35,0,14
	.byte	'CH0_CTRL',0
	.word	29924
	.byte	4,2,35,4,14
	.byte	'CH0_BASE',0
	.word	30037
	.byte	4,2,35,8,14
	.byte	'CH1_CTRL',0
	.word	30174
	.byte	4,2,35,12,14
	.byte	'CH1_BASE',0
	.word	30287
	.byte	4,2,35,16,14
	.byte	'CH2_CTRL',0
	.word	30424
	.byte	4,2,35,20,14
	.byte	'CH2_BASE',0
	.word	30537
	.byte	4,2,35,24,14
	.byte	'CH3_CTRL',0
	.word	30693
	.byte	4,2,35,28,14
	.byte	'CH3_BASE',0
	.word	30806
	.byte	4,2,35,32,14
	.byte	'CH3_BASE_MARK',0
	.word	30929
	.byte	4,2,35,36,14
	.byte	'CH3_BASE_CAPTURE',0
	.word	31058
	.byte	4,2,35,40,0,10
	.word	31098
	.byte	15,84
	.word	531
	.byte	16,83,0,11
	.byte	'_Ifx_GTM_MON_STATUS_Bits',0,12,253,32,16,4,12
	.byte	'ACT_CMU0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ACT_CMU1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ACT_CMU2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ACT_CMU3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ACT_CMU4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ACT_CMU5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ACT_CMU6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ACT_CMU7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ACT_CMUFX0',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ACT_CMUFX1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ACT_CMUFX2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ACT_CMUFX3',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'ACT_CMUFX4',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'ACT_CMU8',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'CMP_ERR',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	3,12,2,35,0,12
	.byte	'MCS0_ERR',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'MCS1_ERR',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'MCS2_ERR',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'MCS3_ERR',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'MCS4_ERR',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,128,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	31339
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MON_ACTIVITY_R0_Bits',0,12,179,32,16,4,12
	.byte	'MCA_0_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCA_0_1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCA_0_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCA_0_3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCA_0_4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCA_0_5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCA_0_6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCA_0_7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'MCA_1_0',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MCA_1_1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'MCA_1_2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'MCA_1_3',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'MCA_1_4',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'MCA_1_5',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'MCA_1_6',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'MCA_1_7',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'MCA_2_0',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCA_2_1',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'MCA_2_2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MCA_2_3',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'MCA_2_4',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'MCA_2_5',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'MCA_2_6',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'MCA_2_7',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'MCA_3_0',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'MCA_3_1',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'MCA_3_2',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'MCA_3_3',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'MCA_3_4',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'MCA_3_5',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'MCA_3_6',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'MCA_3_7',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,240,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	32027
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MON_ACTIVITY_R1_Bits',0,12,216,32,16,4,12
	.byte	'MCA_4_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCA_4_1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCA_4_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCA_4_3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCA_4_4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCA_4_5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCA_4_6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCA_4_7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'MCA_5_0',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MCA_5_1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'MCA_5_2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'MCA_5_3',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'MCA_5_4',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'MCA_5_5',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'MCA_5_6',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'MCA_5_7',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'MCA_6_0',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCA_6_1',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'MCA_6_2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MCA_6_3',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'MCA_6_4',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'MCA_6_5',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'MCA_6_6',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'MCA_6_7',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'MCA_7_0',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'MCA_7_1',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'MCA_7_2',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'MCA_7_3',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'MCA_7_4',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'MCA_7_5',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'MCA_7_6',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'MCA_7_7',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,248,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	32712
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MON_ACTIVITY_MCS_Bits',0,12,165,32,16,4,12
	.byte	'MCA_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCA_1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCA_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCA_3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCA_4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCA_5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCA_6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCA_7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,232,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	33397
	.byte	4,2,35,0,0,15,20
	.word	33593
	.byte	16,4,0,11
	.byte	'_Ifx_GTM_MON_ACTIVITY',0,12,231,68,25,28,14
	.byte	'R0',0
	.word	32672
	.byte	4,2,35,0,14
	.byte	'R1',0
	.word	33357
	.byte	4,2,35,4,14
	.byte	'MCS',0
	.word	33633
	.byte	20,2,35,8,0,10
	.word	33642
	.byte	15,20
	.word	531
	.byte	16,19,0,11
	.byte	'_Ifx_GTM_MON',0,12,251,68,25,52,14
	.byte	'STATUS',0
	.word	31987
	.byte	4,2,35,0,14
	.byte	'ACTIVITY',0
	.word	33708
	.byte	28,2,35,4,14
	.byte	'reserved_20',0
	.word	33713
	.byte	20,2,35,32,0,10
	.word	33722
	.byte	11
	.byte	'_Ifx_GTM_CMP_EN_Bits',0,12,182,10,16,4,12
	.byte	'ABWC0_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ABWC1_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ABWC2_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ABWC3_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ABWC4_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ABWC5_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ABWC6_EN',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ABWC7_EN',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ABWC8_EN',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ABWC9_EN',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ABWC10_EN',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ABWC11_EN',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TBWC0_EN',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TBWC1_EN',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TBWC2_EN',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TBWC3_EN',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TBWC4_EN',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TBWC5_EN',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TBWC6_EN',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TBWC7_EN',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TBWC8_EN',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TBWC9_EN',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TBWC10_EN',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TBWC11_EN',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,136,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	33802
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,12,151,11,16,4,12
	.byte	'ABWC0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ABWC1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ABWC2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ABWC3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ABWC4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ABWC5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ABWC6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ABWC7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ABWC8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ABWC9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ABWC10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ABWC11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TBWC0',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TBWC1',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TBWC2',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TBWC3',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TBWC4',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TBWC5',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TBWC6',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TBWC7',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TBWC8',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TBWC9',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TBWC10',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TBWC11',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	34377
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMP_IRQ_EN_Bits',0,12,212,10,16,4,12
	.byte	'ABWC0_EN_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ABWC1_EN_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ABWC2_EN_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ABWC3_EN_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ABWC4_EN_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ABWC5_EN_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ABWC6_EN_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ABWC7_EN_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ABWC8_EN_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ABWC9_EN_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ABWC10_EN_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ABWC11_EN_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TBWC0_EN_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TBWC1_EN_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TBWC2_EN_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TBWC3_EN_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TBWC4_EN_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TBWC5_EN_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TBWC6_EN_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TBWC7_EN_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TBWC8_EN_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TBWC9_EN_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TBWC10_EN_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TBWC11_EN_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,144,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	34888
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,12,242,10,16,4,12
	.byte	'TRG_ABWC0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_ABWC1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_ABWC2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG_ABWC3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG_ABWC4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TRG_ABWC5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TRG_ABWC6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TRG_ABWC7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TRG_ABWC8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TRG_ABWC9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TRG_ABWC10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TRG_ABWC11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TRG_TBWC0',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TRG_TBWC1',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TRG_TBWC2',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TRG_TBWC3',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TRG_TBWC4',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TRG_TBWC5',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TRG_TBWC6',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TRG_TBWC7',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TRG_TBWC8',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TRG_TBWC9',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TRG_TBWC10',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TRG_TBWC11',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,152,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	35563
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMP_IRQ_MODE_Bits',0,12,144,11,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,160,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36171
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMP_IRQ',0,12,143,69,25,16,14
	.byte	'NOTIFY',0
	.word	34848
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	35523
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	36131
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	36247
	.byte	4,2,35,12,0,10
	.word	36287
	.byte	11
	.byte	'_Ifx_GTM_CMP_EIRQ_EN_Bits',0,12,152,10,16,4,12
	.byte	'ABWC0_EN_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ABWC1_EN_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ABWC2_EN_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ABWC3_EN_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ABWC4_EN_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ABWC5_EN_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ABWC6_EN_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ABWC7_EN_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ABWC8_EN_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ABWC9_EN_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ABWC10_EN_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ABWC11_EN_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TBWC0_EN_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TBWC1_EN_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TBWC2_EN_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TBWC3_EN_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TBWC4_EN_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TBWC5_EN_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TBWC6_EN_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TBWC7_EN_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TBWC8_EN_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TBWC9_EN_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TBWC10_EN_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TBWC11_EN_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,128,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	36375
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMP',0,12,164,69,25,24,14
	.byte	'EN',0
	.word	34337
	.byte	4,2,35,0,14
	.byte	'IRQ',0
	.word	36370
	.byte	16,2,35,4,14
	.byte	'EIRQ_EN',0
	.word	37035
	.byte	4,2,35,20,0,10
	.word	37075
	.byte	15,104
	.word	531
	.byte	16,103,0,11
	.byte	'_Ifx_GTM_ARU_ACCESS_Bits',0,12,155,1,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	3,20,2,35,0,12
	.byte	'RREQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'WREQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	18,0,2,35,0,0,13,12,224,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37151
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DATA_H_Bits',0,12,190,1,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	29,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,128,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37316
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DATA_L_Bits',0,12,197,1,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	29,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,136,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37427
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,12,204,1,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,144,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37538
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,12,218,1,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	29,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,160,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37653
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,12,225,1,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	29,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,168,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37769
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,12,211,1,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,152,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	37885
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,12,232,1,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	29,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,176,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38000
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,12,239,1,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	29,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,184,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38116
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DBG',0,12,184,69,25,24,14
	.byte	'ACCESS0',0
	.word	37613
	.byte	4,2,35,0,14
	.byte	'DATA0_H',0
	.word	37729
	.byte	4,2,35,4,14
	.byte	'DATA0_L',0
	.word	37845
	.byte	4,2,35,8,14
	.byte	'ACCESS1',0
	.word	37960
	.byte	4,2,35,12,14
	.byte	'DATA1_H',0
	.word	38076
	.byte	4,2,35,16,14
	.byte	'DATA1_L',0
	.word	38192
	.byte	4,2,35,20,0,10
	.word	38232
	.byte	11
	.byte	'_Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,12,197,2,16,4,12
	.byte	'NEW_DATA0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'NEW_DATA1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ACC_ACK',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,13,12,136,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38363
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_IRQ_EN_Bits',0,12,172,2,16,4,12
	.byte	'NEW_DATA0_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'NEW_DATA1_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ACC_ACK_IRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,13,12,240,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38522
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,12,181,2,16,4,12
	.byte	'TRG_NEW_DATA0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_NEW_DATA1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_ACC_ACK',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,13,12,248,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38698
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_IRQ_MODE_Bits',0,12,190,2,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,128,44,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	38870
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_IRQ',0,12,207,69,25,16,14
	.byte	'NOTIFY',0
	.word	38482
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	38658
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	38830
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	38946
	.byte	4,2,35,12,0,10
	.word	38986
	.byte	11
	.byte	'_Ifx_GTM_ARU_CADDR_END_Bits',0,12,174,1,16,4,12
	.byte	'CADDR_END',0,4
	.word	930
	.byte	7,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	25,0,2,35,0,0,13,12,240,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39074
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_CTRL_Bits',0,12,181,1,16,4,12
	.byte	'ARU_0_DYN_EN',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'ARU_1_DYN_EN',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'ARU_DYN_RING_MODE',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,248,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39192
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU_DYN_CTRL_Bits',0,12,246,1,16,4,12
	.byte	'DYN_ARU_UPDATE_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DYN_ROUTE_SWAP',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,192,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39361
	.byte	4,2,35,0,0,15,8
	.word	39472
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_LOW_Bits',0,12,143,2,16,4,12
	.byte	'DYN_READ_ID0',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'DYN_READ_ID1',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'DYN_READ_ID2',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39521
	.byte	4,2,35,0,0,15,8
	.word	39655
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_HIGH_Bits',0,12,133,2,16,4,12
	.byte	'DYN_READ_ID3',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'DYN_READ_ID4',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'DYN_READ_ID5',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'DYN_CLK_WAIT',0,4
	.word	930
	.byte	4,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,208,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39704
	.byte	4,2,35,0,0,15,8
	.word	39863
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_SR_LOW_Bits',0,12,163,2,16,4,12
	.byte	'DYN_READ_ID6',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'DYN_READ_ID7',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'DYN_READ_ID8',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	39912
	.byte	4,2,35,0,0,15,8
	.word	40049
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_SR_HIGH_Bits',0,12,152,2,16,4,12
	.byte	'DYN_READ_ID9',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'DYN_READ_ID10',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'DYN_READ_ID11',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'DYN_CLK_WAIT',0,4
	.word	930
	.byte	4,4,2,35,0,12
	.byte	'DYN_UPDATE_EN',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,224,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40098
	.byte	4,2,35,0,0,15,8
	.word	40287
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ARU_DYN_RDADDR_Bits',0,12,254,1,16,4,12
	.byte	'DYN_ARU_RDADDR',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,200,43,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40336
	.byte	4,2,35,0,0,15,8
	.word	40420
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ARU_CADDR_Bits',0,12,165,1,16,4,12
	.byte	'CADDR_0',0,4
	.word	930
	.byte	7,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	9,16,2,35,0,12
	.byte	'CADDR_1',0,4
	.word	930
	.byte	7,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	9,0,2,35,0,0,13,12,232,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40469
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ARU',0,12,228,69,25,128,1,14
	.byte	'ACCESS',0
	.word	37276
	.byte	4,2,35,0,14
	.byte	'DATA_H',0
	.word	37387
	.byte	4,2,35,4,14
	.byte	'DATA_L',0
	.word	37498
	.byte	4,2,35,8,14
	.byte	'DBG',0
	.word	38358
	.byte	24,2,35,12,14
	.byte	'IRQ',0
	.word	39069
	.byte	16,2,35,36,14
	.byte	'CADDR_END',0
	.word	39152
	.byte	4,2,35,52,14
	.byte	'reserved_38',0
	.word	3086
	.byte	4,2,35,56,14
	.byte	'CTRL',0
	.word	39321
	.byte	4,2,35,60,14
	.byte	'DYN_CTRL',0
	.word	39512
	.byte	8,2,35,64,14
	.byte	'DYN_ROUTE_LOW',0
	.word	39695
	.byte	8,2,35,72,14
	.byte	'DYN_ROUTE_HIGH',0
	.word	39903
	.byte	8,2,35,80,14
	.byte	'DYN_ROUTE_SR_LOW',0
	.word	40089
	.byte	8,2,35,88,14
	.byte	'DYN_ROUTE_SR_HIGH',0
	.word	40327
	.byte	8,2,35,96,14
	.byte	'DYN_RDADDR',0
	.word	40460
	.byte	8,2,35,104,14
	.byte	'reserved_70',0
	.word	5246
	.byte	12,2,35,112,14
	.byte	'CADDR',0
	.word	40583
	.byte	4,2,35,124,0,10
	.word	40623
	.byte	11
	.byte	'_Ifx_GTM_CMU_CLK_EN_Bits',0,12,196,11,16,4,12
	.byte	'EN_CLK0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'EN_CLK1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'EN_CLK2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'EN_CLK3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'EN_CLK4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'EN_CLK5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'EN_CLK6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'EN_CLK7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'EN_ECLK0',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'EN_ECLK1',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'EN_ECLK2',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'EN_FXCLK',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	40951
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_GCLK_NUM_Bits',0,12,250,11,16,4,12
	.byte	'GCLK_NUM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41278
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_GCLK_DEN_Bits',0,12,243,11,16,4,12
	.byte	'GCLK_DEN',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41395
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_CLK__CTRL_Bits',0,12,214,11,16,4,12
	.byte	'CLK_CNT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'CLK_SEL',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	6,0,2,35,0,0,13,12,192,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41512
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_CLK',0,12,133,70,25,4,14
	.byte	'CTRL',0
	.word	41608
	.byte	4,2,35,0,0,15,32
	.word	41648
	.byte	16,7,0,10
	.word	41686
	.byte	11
	.byte	'_Ifx_GTM_CMU_ECLK_NUM_Bits',0,12,229,11,16,4,12
	.byte	'ECLK_NUM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41700
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_ECLK_DEN_Bits',0,12,222,11,16,4,12
	.byte	'ECLK_DEN',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41817
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_ECLK',0,12,151,70,25,8,14
	.byte	'NUM',0
	.word	41777
	.byte	4,2,35,0,14
	.byte	'DEN',0
	.word	41894
	.byte	4,2,35,4,0,15,24
	.word	41934
	.byte	16,2,0,10
	.word	41985
	.byte	11
	.byte	'_Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,12,236,11,16,4,12
	.byte	'FXCLK_SEL',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,216,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	41999
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_FXCLK',0,12,170,70,25,4,14
	.byte	'CTRL',0
	.word	42078
	.byte	4,2,35,0,0,10
	.word	42118
	.byte	11
	.byte	'_Ifx_GTM_CMU_GLB_CTRL_Bits',0,12,129,12,16,4,12
	.byte	'ARU_ADDR_RSTGLB',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,13,12,240,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42163
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU_CLK_CTRL_Bits',0,12,181,11,16,4,12
	.byte	'CLK0_EXT_DIVIDER',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CLK1_EXT_DIVIDER',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'CLK2_EXT_DIVIDER',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'CLK3_EXT_DIVIDER',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'CLK4_EXT_DIVIDER',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'CLK5_EXT_DIVIDER',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CLK6_EXT_DIVIDER',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'CLK7_EXT_DIVIDER',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'CLK8_EXT_DIVIDER',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,176,48,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42286
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CMU',0,12,188,70,25,80,14
	.byte	'CLK_EN',0
	.word	41238
	.byte	4,2,35,0,14
	.byte	'GCLK_NUM',0
	.word	41355
	.byte	4,2,35,4,14
	.byte	'GCLK_DEN',0
	.word	41472
	.byte	4,2,35,8,14
	.byte	'CLK',0
	.word	41695
	.byte	32,2,35,12,14
	.byte	'ECLK',0
	.word	41994
	.byte	24,2,35,44,14
	.byte	'FXCLK',0
	.word	42158
	.byte	4,2,35,68,14
	.byte	'GLB_CTRL',0
	.word	42246
	.byte	4,2,35,72,14
	.byte	'CLK_CTRL',0
	.word	42594
	.byte	4,2,35,76,0,10
	.word	42634
	.byte	15,176,1
	.word	531
	.byte	16,175,1,0,11
	.byte	'_Ifx_GTM_BRC_SRC_ADDR_Bits',0,12,195,6,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	3,20,2,35,0,12
	.byte	'BRC_MODE',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	19,0,2,35,0,0,13,12,144,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42800
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC_SRC_DEST_Bits',0,12,204,6,16,4,12
	.byte	'EN_DEST0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN_DEST1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN_DEST2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN_DEST3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN_DEST4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN_DEST5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN_DEST6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN_DEST7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN_DEST8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN_DEST9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN_DEST10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN_DEST11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN_DEST12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN_DEST13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN_DEST14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN_DEST15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN_DEST16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN_DEST17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN_DEST18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN_DEST19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN_DEST20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN_DEST21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN_TRASHBIN',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	9,0,2,35,0,0,13,12,152,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	42955
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC_SRC',0,12,213,70,25,8,14
	.byte	'ADDR',0
	.word	42915
	.byte	4,2,35,0,14
	.byte	'DEST',0
	.word	43487
	.byte	4,2,35,4,0,15,96
	.word	43527
	.byte	16,11,0,10
	.word	43579
	.byte	11
	.byte	'_Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,12,169,6,16,4,12
	.byte	'DEST_ERR',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DID0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'DID1',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DID2',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'DID3',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'DID4',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'DID5',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'DID6',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'DID7',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'DID8',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'DID9',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'DID10',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'DID11',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	19,0,2,35,0,0,13,12,128,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43593
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC_IRQ_EN_Bits',0,12,252,5,16,4,12
	.byte	'DEST_ERR_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DID_IRQ_EN0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'DID_IRQ_EN1',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DID_IRQ_EN2',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'DID_IRQ_EN3',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'DID_IRQ_EN4',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'DID_IRQ_EN5',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'DID_IRQ_EN6',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'DID_IRQ_EN7',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'DID_IRQ_EN8',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'DID_IRQ_EN9',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'DID_IRQ_EN10',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'DID_IRQ_EN11',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	19,0,2,35,0,0,13,12,232,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	43906
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,12,143,6,16,4,12
	.byte	'TRG_DEST_ERR',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_DID0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_DID1',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG_DID2',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG_DID3',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TRG_DID4',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TRG_DID5',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TRG_DID6',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TRG_DID7',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TRG_DID8',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TRG_DID9',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TRG_DID10',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TRG_DID11',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	19,0,2,35,0,0,13,12,240,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44306
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC_IRQ_MODE_Bits',0,12,162,6,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,248,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44672
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC_IRQ',0,12,232,70,25,16,14
	.byte	'NOTIFY',0
	.word	43866
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	44266
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	44632
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	44748
	.byte	4,2,35,12,0,10
	.word	44788
	.byte	11
	.byte	'_Ifx_GTM_BRC_RST_Bits',0,12,188,6,16,4,12
	.byte	'RST',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,13,12,136,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44876
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC_EIRQ_EN_Bits',0,12,233,5,16,4,12
	.byte	'DEST_ERR_EIRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DID_EIRQ_EN0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'DID_EIRQ_EN1',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DID_EIRQ_EN2',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'DID_EIRQ_EN3',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'DID_EIRQ_EN4',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'DID_EIRQ_EN5',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'DID_EIRQ_EN6',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'DID_EIRQ_EN7',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'DID_EIRQ_EN8',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'DID_EIRQ_EN9',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'DID_EIRQ_EN10',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'DID_EIRQ_EN11',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	19,0,2,35,0,0,13,12,224,45,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	44982
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_BRC',0,12,253,70,25,120,14
	.byte	'SRC',0
	.word	43588
	.byte	96,2,35,0,14
	.byte	'IRQ',0
	.word	44871
	.byte	16,2,35,96,14
	.byte	'RST',0
	.word	44942
	.byte	4,2,35,112,14
	.byte	'EIRQ_EN',0
	.word	45356
	.byte	4,2,35,116,0,10
	.word	45396
	.byte	15,136,3
	.word	531
	.byte	16,135,3,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R0_Bits',0,12,164,26,16,4,12
	.byte	'ARU_NEW_DATA0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ARU_NEW_DATA1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ARU_ACC_ACK_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'BRC_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'AEI_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'CMP_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SPE0_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'SPE1_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SPE2_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'SPE3_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'SPE4_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SPE5_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'PSM0_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'PSM0_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'PSM0_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'PSM0_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'PSM0_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'PSM0_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'PSM0_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'PSM0_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'PSM1_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'PSM1_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'PSM1_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'PSM1_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'PSM1_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'PSM1_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'PSM1_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'PSM1_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,168,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	45488
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R1_Bits',0,12,198,26,16,4,12
	.byte	'DPLL_DCGI_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DPLL_EDI_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'DPLL_TINI_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DPLL_TAXI_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'DPLL_SISI_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'DPLL_TISI_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'DPLL_MSI_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'DPLL_MTI_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'DPLL_SASI_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'DPLL_TASI_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'DPLL_PWI_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'DPLL_W2I_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'DPLL_W1I_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'DPLL_GL1I_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'DPLL_LL1I_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'DPLL_EI_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'DPLL_GL2I_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'DPLL_LL2I_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'DPLL_TE0I_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'DPLL_TE1I_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'DPLL_TE2I_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'DPLL_TE3I_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'DPLL_TE4I_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'DPLL_CDTI_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'DPLL_CDSI_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'DPLL_TORI_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'DPLL_SORI_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	5,0,2,35,0,0,13,12,176,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	46230
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R2_Bits',0,12,140,27,16,4,12
	.byte	'TIM0_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TIM0_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TIM0_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TIM0_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TIM0_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TIM0_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TIM0_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TIM0_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TIM1_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TIM1_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TIM1_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TIM1_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TIM1_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TIM1_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TIM1_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TIM1_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TIM2_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TIM2_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TIM2_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TIM2_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TIM2_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TIM2_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TIM2_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TIM2_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TIM3_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TIM3_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TIM3_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TIM3_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TIM3_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TIM3_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TIM3_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TIM3_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,192,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	46993
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R3_Bits',0,12,177,27,16,4,12
	.byte	'TIM4_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TIM4_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TIM4_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TIM4_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TIM4_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TIM4_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TIM4_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TIM4_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TIM5_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TIM5_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TIM5_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TIM5_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TIM5_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TIM5_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TIM5_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TIM5_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TIM6_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TIM6_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TIM6_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TIM6_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TIM6_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TIM6_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TIM6_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TIM6_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TIM7_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TIM7_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TIM7_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TIM7_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TIM7_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TIM7_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TIM7_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TIM7_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,200,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	47834
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R4_Bits',0,12,214,27,16,4,12
	.byte	'MCS0_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCS0_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCS0_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCS0_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCS0_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCS0_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCS0_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCS0_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'MCS1_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MCS1_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'MCS1_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'MCS1_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'MCS1_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'MCS1_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'MCS1_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'MCS1_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'MCS2_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCS2_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'MCS2_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MCS2_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'MCS2_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'MCS2_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'MCS2_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'MCS2_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'MCS3_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'MCS3_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'MCS3_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'MCS3_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'MCS3_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'MCS3_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'MCS3_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'MCS3_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,208,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	48675
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R5_Bits',0,12,251,27,16,4,12
	.byte	'MCS4_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCS4_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCS4_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCS4_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCS4_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCS4_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCS4_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCS4_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'MCS5_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MCS5_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'MCS5_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'MCS5_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'MCS5_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'MCS5_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'MCS5_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'MCS5_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'MCS6_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCS6_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'MCS6_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MCS6_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'MCS6_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'MCS6_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'MCS6_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'MCS6_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'MCS7_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'MCS7_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'MCS7_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'MCS7_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'MCS7_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'MCS7_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'MCS7_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'MCS7_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,216,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	49516
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R6_Bits',0,12,160,28,16,4,12
	.byte	'TOM0_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TOM0_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TOM0_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TOM0_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TOM0_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TOM0_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TOM0_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TOM0_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TOM0_CH8_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TOM0_CH9_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TOM0_CH10_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TOM0_CH11_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TOM0_CH12_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TOM0_CH13_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TOM0_CH14_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TOM0_CH15_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TOM1_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TOM1_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TOM1_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TOM1_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TOM1_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TOM1_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TOM1_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TOM1_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TOM1_CH8_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TOM1_CH9_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TOM1_CH10_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TOM1_CH11_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TOM1_CH12_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TOM1_CH13_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TOM1_CH14_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TOM1_CH15_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,224,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	50357
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R7_Bits',0,12,197,28,16,4,12
	.byte	'TOM2_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TOM2_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TOM2_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TOM2_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TOM2_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TOM2_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TOM2_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TOM2_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TOM2_CH8_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TOM2_CH9_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TOM2_CH10_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TOM2_CH11_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TOM2_CH12_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TOM2_CH13_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TOM2_CH14_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TOM2_CH15_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TOM3_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TOM3_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TOM3_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TOM3_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TOM3_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TOM3_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TOM3_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TOM3_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TOM3_CH8_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TOM3_CH9_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TOM3_CH10_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TOM3_CH11_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TOM3_CH12_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TOM3_CH13_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TOM3_CH14_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TOM3_CH15_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,232,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	51210
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R9_Bits',0,12,234,28,16,4,12
	.byte	'ATOM0_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ATOM0_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ATOM0_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ATOM0_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ATOM0_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ATOM0_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ATOM0_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ATOM0_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ATOM1_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ATOM1_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ATOM1_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ATOM1_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'ATOM1_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'ATOM1_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'ATOM1_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'ATOM1_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'ATOM2_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'ATOM2_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'ATOM2_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'ATOM2_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'ATOM2_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'ATOM2_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'ATOM2_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'ATOM2_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'ATOM3_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'ATOM3_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'ATOM3_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'ATOM3_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'ATOM3_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'ATOM3_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'ATOM3_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'ATOM3_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,240,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	52063
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_R10_Bits',0,12,231,26,16,4,12
	.byte	'ATOM4_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ATOM4_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ATOM4_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ATOM4_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ATOM4_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ATOM4_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ATOM4_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ATOM4_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ATOM5_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ATOM5_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ATOM5_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ATOM5_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'ATOM5_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'ATOM5_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'ATOM5_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'ATOM5_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'ATOM6_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'ATOM6_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'ATOM6_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'ATOM6_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'ATOM6_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'ATOM6_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'ATOM6_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'ATOM6_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'ATOM7_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'ATOM7_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'ATOM7_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'ATOM7_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'ATOM7_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'ATOM7_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'ATOM7_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'ATOM7_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,184,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	52936
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_MEI_Bits',0,12,235,25,16,4,12
	.byte	'GTM_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'BRC_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FIFO0_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FIFO1_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TIM0_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TIM1_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TIM2_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TIM3_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TIM4_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TIM5_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TIM6_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TIM7_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'MCS0_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'MCS1_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'MCS2_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'MCS3_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'MCS4_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCS5_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'MCS6_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MCS7_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'SPE0_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'SPE1_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'SPE2_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'SPE3_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'CMP_EIRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'DPLL_EIRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	6,0,2,35,0,0,13,12,152,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	53810
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI0_Bits',0,12,255,22,16,4,12
	.byte	'FIFO0_CH0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'FIFO0_CH1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FIFO0_CH2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FIFO0_CH3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'FIFO0_CH4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'FIFO0_CH5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'FIFO0_CH6_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'FIFO0_CH7_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'FIFO1_CH0_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'FIFO1_CH1_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'FIFO1_CH2_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'FIFO1_CH3_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'FIFO1_CH4_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'FIFO1_CH5_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'FIFO1_CH6_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'FIFO1_CH7_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'FIFO2_CH0_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'FIFO2_CH1_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'FIFO2_CH2_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'FIFO2_CH3_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'FIFO2_CH4_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'FIFO2_CH5_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'FIFO2_CH6_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'FIFO2_CH7_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	54452
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI1_Bits',0,12,157,23,16,4,12
	.byte	'TIM0_CH0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TIM0_CH1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TIM0_CH2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TIM0_CH3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TIM0_CH4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TIM0_CH5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TIM0_CH6_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TIM0_CH7_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TIM1_CH0_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TIM1_CH1_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TIM1_CH2_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TIM1_CH3_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TIM1_CH4_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TIM1_CH5_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TIM1_CH6_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TIM1_CH7_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TIM2_CH0_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TIM2_CH1_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TIM2_CH2_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TIM2_CH3_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TIM2_CH4_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TIM2_CH5_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TIM2_CH6_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TIM2_CH7_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TIM3_CH0_EIRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TIM3_CH1_EIRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TIM3_CH2_EIRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TIM3_CH3_EIRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TIM3_CH4_EIRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TIM3_CH5_EIRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TIM3_CH6_EIRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TIM3_CH7_EIRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,184,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	55174
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI2_Bits',0,12,194,23,16,4,12
	.byte	'TIM4_CH0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TIM4_CH1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TIM4_CH2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TIM4_CH3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TIM4_CH4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TIM4_CH5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TIM4_CH6_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TIM4_CH7_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TIM5_CH0_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TIM5_CH1_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TIM5_CH2_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TIM5_CH3_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TIM5_CH4_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TIM5_CH5_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TIM5_CH6_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TIM5_CH7_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TIM6_CH0_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TIM6_CH1_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TIM6_CH2_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TIM6_CH3_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TIM6_CH4_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TIM6_CH5_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TIM6_CH6_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TIM6_CH7_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TIM7_CH0_EIRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TIM7_CH1_EIRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TIM7_CH2_EIRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TIM7_CH3_EIRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TIM7_CH4_EIRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TIM7_CH5_EIRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TIM7_CH6_EIRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TIM7_CH7_EIRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,192,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	56049
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI3_Bits',0,12,231,23,16,4,12
	.byte	'MCS0_CH0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCS0_CH1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCS0_CH2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCS0_CH3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCS0_CH4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCS0_CH5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCS0_CH6_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCS0_CH7_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'MCS1_CH0_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MCS1_CH1_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'MCS1_CH2_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'MCS1_CH3_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'MCS1_CH4_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'MCS1_CH5_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'MCS1_CH6_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'MCS1_CH7_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'MCS2_CH0_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCS2_CH1_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'MCS2_CH2_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MCS2_CH3_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'MCS2_CH4_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'MCS2_CH5_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'MCS2_CH6_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'MCS2_CH7_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'MCS3_CH0_EIRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'MCS3_CH1_EIRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'MCS3_CH2_EIRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'MCS3_CH3_EIRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'MCS3_CH4_EIRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'MCS3_CH5_EIRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'MCS3_CH6_EIRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'MCS3_CH7_EIRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,200,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	56924
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI4_Bits',0,12,140,24,16,4,12
	.byte	'MCS4_CH0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCS4_CH1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCS4_CH2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCS4_CH3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCS4_CH4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCS4_CH5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCS4_CH6_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCS4_CH7_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'MCS5_CH0_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MCS5_CH1_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'MCS5_CH2_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'MCS5_CH3_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'MCS5_CH4_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'MCS5_CH5_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'MCS5_CH6_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'MCS5_CH7_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'MCS6_CH0_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCS6_CH1_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'MCS6_CH2_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MCS6_CH3_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'MCS6_CH4_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'MCS6_CH5_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'MCS6_CH6_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'MCS6_CH7_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'MCS7_CH0_EIRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'MCS7_CH1_EIRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'MCS7_CH2_EIRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'MCS7_CH3_EIRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'MCS7_CH4_EIRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'MCS7_CH5_EIRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'MCS7_CH6_EIRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'MCS7_CH7_EIRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,208,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	57799
	.byte	4,2,35,0,0,15,28
	.word	531
	.byte	16,27,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI_MCS_Bits',0,12,177,24,16,4,12
	.byte	'MCS_CH0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCS_CH1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCS_CH2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCS_CH3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCS_CH4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCS_CH5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCS_CH6_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCS_CH7_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,216,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	58683
	.byte	4,2,35,0,0,15,20
	.word	58935
	.byte	16,4,0,15,44
	.word	531
	.byte	16,43,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI_PSM_Bits',0,12,191,24,16,4,12
	.byte	'PSM_M0_CH0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PSM_M0_CH1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'PSM_M0_CH2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'PSM_M0_CH3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'PSM_M0_CH4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'PSM_M0_CH5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'PSM_M0_CH6_EIRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PSM_M0_CH7_EIRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'PSM_M1_CH0_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'PSM_M1_CH1_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PSM_M1_CH2_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'PSM_M1_CH3_EIRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'PSM_M1_CH4_EIRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'PSM_M1_CH5_EIRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'PSM_M1_CH6_EIRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'PSM_M1_CH7_EIRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'PSM_M2_CH0_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'PSM_M2_CH1_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'PSM_M2_CH2_EIRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'PSM_M2_CH3_EIRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'PSM_M2_CH4_EIRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'PSM_M2_CH5_EIRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'PSM_M2_CH6_EIRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'PSM_M2_CH7_EIRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	58993
	.byte	4,2,35,0,0,15,4
	.word	59702
	.byte	16,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CEI_SPE_Bits',0,12,221,24,16,4,12
	.byte	'SPE0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SPE1_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SPE2_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SPE3_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SPE4_EIRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SPE5_EIRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	26,0,2,35,0,0,13,12,232,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	59751
	.byte	4,2,35,0,0,15,88
	.word	531
	.byte	16,87,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_MEI_CLS_Bits',0,12,139,26,16,4,12
	.byte	'TIM_M0_EIRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCS_M0_EIRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SPE_M0_EIRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FIFO_M0_EIRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	4,24,2,35,0,12
	.byte	'TIM_M1_EIRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MCS_M1_EIRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'SPE_M1_EIRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'TIM_M2_EIRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'MCS_M2_EIRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'TIM_M3_EIRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'MCS_M3_EIRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,160,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	59986
	.byte	4,2,35,0,0,15,8
	.word	60484
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CI_MCS_Bits',0,12,142,25,16,4,12
	.byte	'MCS_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'MCS_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'MCS_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'MCS_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MCS_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'MCS_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MCS_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MCS_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,248,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	60533
	.byte	4,2,35,0,0,15,20
	.word	60776
	.byte	16,4,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CI_PSM_Bits',0,12,156,25,16,4,12
	.byte	'PSM_M0_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PSM_M0_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'PSM_M0_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'PSM_M0_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'PSM_M0_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'PSM_M0_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'PSM_M0_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PSM_M0_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'PSM_M1_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'PSM_M1_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PSM_M1_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'PSM_M1_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'PSM_M1_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'PSM_M1_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'PSM_M1_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'PSM_M1_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'PSM_M2_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'PSM_M2_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'PSM_M2_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'PSM_M2_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'PSM_M2_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'PSM_M2_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'PSM_M2_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'PSM_M2_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,128,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	60825
	.byte	4,2,35,0,0,15,4
	.word	61509
	.byte	16,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CI_SPE_Bits',0,12,186,25,16,4,12
	.byte	'SPE0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SPE1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SPE2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SPE3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SPE4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SPE5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	26,0,2,35,0,0,13,12,136,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61558
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CI_ATOM_Bits',0,12,233,24,16,4,12
	.byte	'ATOM_M0_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ATOM_M0_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ATOM_M0_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ATOM_M0_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ATOM_M0_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ATOM_M0_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ATOM_M0_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ATOM_M0_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'ATOM_M1_CH0_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ATOM_M1_CH1_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'ATOM_M1_CH2_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'ATOM_M1_CH3_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'ATOM_M1_CH4_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'ATOM_M1_CH5_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'ATOM_M1_CH6_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'ATOM_M1_CH7_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'ATOM_M2_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'ATOM_M2_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'ATOM_M2_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'ATOM_M2_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'ATOM_M2_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'ATOM_M2_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'ATOM_M2_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'ATOM_M2_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'ATOM_M3_CH0_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'ATOM_M3_CH1_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'ATOM_M3_CH2_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'ATOM_M3_CH3_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'ATOM_M3_CH4_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'ATOM_M3_CH5_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'ATOM_M3_CH6_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'ATOM_M3_CH7_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,240,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	61777
	.byte	4,2,35,0,0,15,8
	.word	62679
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ICM_IRQG_CI_TOM_Bits',0,12,198,25,16,4,12
	.byte	'TOM_M0_CH0_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TOM_M0_CH1_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TOM_M0_CH2_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TOM_M0_CH3_IRQ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TOM_M0_CH4_IRQ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TOM_M0_CH5_IRQ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TOM_M0_CH6_IRQ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TOM_M0_CH7_IRQ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TOM_M0_CH8_IRQ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TOM_M0_CH9_IRQ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TOM_M0_CH10_IRQ',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TOM_M0_CH11_IRQ',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TOM_M0_CH12_IRQ',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TOM_M0_CH13_IRQ',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TOM_M0_CH14_IRQ',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TOM_M0_CH15_IRQ',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TOM_M1_CH0_IRQ',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TOM_M1_CH1_IRQ',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TOM_M1_CH2_IRQ',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TOM_M1_CH3_IRQ',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TOM_M1_CH4_IRQ',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TOM_M1_CH5_IRQ',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TOM_M1_CH6_IRQ',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TOM_M1_CH7_IRQ',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TOM_M1_CH8_IRQ',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TOM_M1_CH9_IRQ',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TOM_M1_CH10_IRQ',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TOM_M1_CH11_IRQ',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TOM_M1_CH12_IRQ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TOM_M1_CH13_IRQ',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TOM_M1_CH14_IRQ',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TOM_M1_CH15_IRQ',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,144,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	62728
	.byte	4,2,35,0,0,15,8
	.word	63609
	.byte	16,1,0,11
	.byte	'_Ifx_GTM_ICM_IRQG',0,12,146,71,25,172,3,14
	.byte	'R0',0
	.word	46190
	.byte	4,2,35,0,14
	.byte	'R1',0
	.word	46953
	.byte	4,2,35,4,14
	.byte	'R2',0
	.word	47794
	.byte	4,2,35,8,14
	.byte	'R3',0
	.word	48635
	.byte	4,2,35,12,14
	.byte	'R4',0
	.word	49476
	.byte	4,2,35,16,14
	.byte	'R5',0
	.word	50317
	.byte	4,2,35,20,14
	.byte	'R6',0
	.word	51170
	.byte	4,2,35,24,14
	.byte	'R7',0
	.word	52023
	.byte	4,2,35,28,14
	.byte	'reserved_20',0
	.word	3086
	.byte	4,2,35,32,14
	.byte	'R9',0
	.word	52896
	.byte	4,2,35,36,14
	.byte	'R10',0
	.word	53770
	.byte	4,2,35,40,14
	.byte	'reserved_2C',0
	.word	3086
	.byte	4,2,35,44,14
	.byte	'MEI',0
	.word	54412
	.byte	4,2,35,48,14
	.byte	'CEI0',0
	.word	55134
	.byte	4,2,35,52,14
	.byte	'CEI1',0
	.word	56009
	.byte	4,2,35,56,14
	.byte	'CEI2',0
	.word	56884
	.byte	4,2,35,60,14
	.byte	'CEI3',0
	.word	57759
	.byte	4,2,35,64,14
	.byte	'CEI4',0
	.word	58634
	.byte	4,2,35,68,14
	.byte	'reserved_48',0
	.word	58674
	.byte	28,2,35,72,14
	.byte	'CEI_MCS',0
	.word	58975
	.byte	20,2,35,100,14
	.byte	'reserved_78',0
	.word	58984
	.byte	44,2,35,120,14
	.byte	'CEI_PSM',0
	.word	59742
	.byte	4,3,35,164,1,14
	.byte	'reserved_A8',0
	.word	5246
	.byte	12,3,35,168,1,14
	.byte	'CEI_SPE',0
	.word	59937
	.byte	4,3,35,180,1,14
	.byte	'reserved_B8',0
	.word	59977
	.byte	88,3,35,184,1,14
	.byte	'MEI_CLS',0
	.word	60524
	.byte	8,3,35,144,2,14
	.byte	'reserved_118',0
	.word	4906
	.byte	8,3,35,152,2,14
	.byte	'CI_MCS',0
	.word	60816
	.byte	20,3,35,160,2,14
	.byte	'reserved_134',0
	.word	58984
	.byte	44,3,35,180,2,14
	.byte	'CI_PSM',0
	.word	61549
	.byte	4,3,35,224,2,14
	.byte	'reserved_164',0
	.word	5246
	.byte	12,3,35,228,2,14
	.byte	'CI_SPE',0
	.word	61737
	.byte	4,3,35,240,2,14
	.byte	'reserved_174',0
	.word	58674
	.byte	28,3,35,244,2,14
	.byte	'CI_ATOM',0
	.word	62719
	.byte	8,3,35,144,3,14
	.byte	'reserved_198',0
	.word	4906
	.byte	8,3,35,152,3,14
	.byte	'CI_TOM',0
	.word	63649
	.byte	8,3,35,160,3,14
	.byte	'reserved_1A8',0
	.word	3086
	.byte	4,3,35,168,3,0,10
	.word	63658
	.byte	11
	.byte	'_Ifx_GTM_ICM',0,12,200,71,25,172,3,14
	.byte	'IRQG',0
	.word	64311
	.byte	172,3,2,35,0,0,10
	.word	64316
	.byte	11
	.byte	'_Ifx_GTM_SPE_CTRL_STAT_Bits',0,12,241,36,16,4,12
	.byte	'EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SIE0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SIE1',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SIE2',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRIG_SEL',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'TIM_SEL',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'FSOM',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SPE_PAT_PTR',0,4
	.word	930
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'AIP',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'ADIR',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'PIP',0,4
	.word	930
	.byte	3,13,2,35,0,12
	.byte	'PDIR',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'NIP',0,4
	.word	930
	.byte	3,9,2,35,0,12
	.byte	'ETRIG_SEL',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'FSOL',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,240,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	64357
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_PAT_Bits',0,12,207,37,16,4,12
	.byte	'IP0_VAL',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'IP0_PAT',0,4
	.word	930
	.byte	3,28,2,35,0,12
	.byte	'IP1_VAL',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'IP1_PAT',0,4
	.word	930
	.byte	3,24,2,35,0,12
	.byte	'IP2_VAL',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'IP2_PAT',0,4
	.word	930
	.byte	3,20,2,35,0,12
	.byte	'IP3_VAL',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'IP3_PAT',0,4
	.word	930
	.byte	3,16,2,35,0,12
	.byte	'IP4_VAL',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'IP4_PAT',0,4
	.word	930
	.byte	3,12,2,35,0,12
	.byte	'IP5_VAL',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'IP5_PAT',0,4
	.word	930
	.byte	3,8,2,35,0,12
	.byte	'IP6_VAL',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'IP6_PAT',0,4
	.word	930
	.byte	3,4,2,35,0,12
	.byte	'IP7_VAL',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'IP7_PAT',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,184,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	64709
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_OUT_PAT_Bits',0,12,200,37,16,4,12
	.byte	'SPE_OUT_PAT',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,176,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	65082
	.byte	4,2,35,0,0,15,32
	.word	65161
	.byte	16,7,0,11
	.byte	'_Ifx_GTM_SPE_OUT_CTRL_Bits',0,12,193,37,16,4,12
	.byte	'SPE_OUT_CTRL',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,168,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	65210
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,12,182,37,16,4,12
	.byte	'SPE_NIPD',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SPE_DCHG',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SPE_PERR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SPE_BIS',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SPE_RCMP',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,160,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	65331
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_IRQ_EN_Bits',0,12,153,37,16,4,12
	.byte	'SPE_NIPD_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SPE_DCHG_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SPE_PERR_IRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SPE_BIS_IRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SPE_RCMP_IRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,136,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	65528
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,12,164,37,16,4,12
	.byte	'TRG_SPE_NIPD',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_SPE_DCHG',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_SPE_PERR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG_SPE_BIS',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG_SPE_RCMP',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,144,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	65756
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_IRQ_MODE_Bits',0,12,175,37,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,152,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	65974
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_IRQ',0,12,218,71,25,16,14
	.byte	'NOTIFY',0
	.word	65488
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	65716
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	65934
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	66050
	.byte	4,2,35,12,0,10
	.word	66090
	.byte	11
	.byte	'_Ifx_GTM_SPE_EIRQ_EN_Bits',0,12,142,37,16,4,12
	.byte	'SPE_NIPD_EIRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SPE_DCHG_EIRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SPE_PERR_EIRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SPE_BIS_EIRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SPE_RCMP_EIRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,128,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66178
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_REV_CNT_Bits',0,12,235,37,16,4,12
	.byte	'REV_CNT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66412
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_REV_CMP_Bits',0,12,228,37,16,4,12
	.byte	'REV_CMP',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,64,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66527
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_CTRL_STAT2_Bits',0,12,134,37,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'SPE_PAT_PTR_BWD',0,4
	.word	930
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	21,0,2,35,0,0,13,12,248,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66642
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_SPE_CMD_Bits',0,12,232,36,16,4,12
	.byte	'SPE_CTRL_CMD',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	14,16,2,35,0,12
	.byte	'SPE_UPD_TRIG',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	15,0,2,35,0,0,13,12,232,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	66790
	.byte	4,2,35,0,0,15,48
	.word	531
	.byte	16,47,0,11
	.byte	'_Ifx_GTM_SPE',0,12,239,71,25,128,1,14
	.byte	'CTRL_STAT',0
	.word	64669
	.byte	4,2,35,0,14
	.byte	'PAT',0
	.word	65042
	.byte	4,2,35,4,14
	.byte	'OUT_PAT',0
	.word	65201
	.byte	32,2,35,8,14
	.byte	'OUT_CTRL',0
	.word	65291
	.byte	4,2,35,40,14
	.byte	'IRQ',0
	.word	66173
	.byte	16,2,35,44,14
	.byte	'EIRQ_EN',0
	.word	66372
	.byte	4,2,35,60,14
	.byte	'REV_CNT',0
	.word	66487
	.byte	4,2,35,64,14
	.byte	'REV_CMP',0
	.word	66602
	.byte	4,2,35,68,14
	.byte	'CTRL_STAT2',0
	.word	66750
	.byte	4,2,35,72,14
	.byte	'CMD',0
	.word	66912
	.byte	4,2,35,76,14
	.byte	'reserved_50',0
	.word	66952
	.byte	48,2,35,80,0,15,128,2
	.word	66961
	.byte	16,1,0,10
	.word	67167
	.byte	15,128,12
	.word	531
	.byte	16,255,11,0,11
	.byte	'_Ifx_GTM_MAP_CTRL_Bits',0,12,215,29,16,4,12
	.byte	'TSEL',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SSL',0,4
	.word	930
	.byte	3,28,2,35,0,12
	.byte	'LSEL',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	11,16,2,35,0,12
	.byte	'TSPP0_EN',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TSPP0_DLD',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'TSPP0_I0V',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TSPP0_I1V',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TSPP0_I2V',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TSPP1_EN',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TSPP1_DLD',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'TSPP1_I0V',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'TSPP1_I1V',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TSPP1_I2V',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,168,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67193
	.byte	4,2,35,0,0,15,60
	.word	531
	.byte	16,59,0,11
	.byte	'_Ifx_GTM_MCFG_CTRL_Bits',0,12,238,29,16,4,12
	.byte	'MEM0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'MEM1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'MEM2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'MEM3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'MEM4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,13,12,176,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67641
	.byte	4,2,35,0,0,15,188,1
	.word	531
	.byte	16,187,1,0,11
	.byte	'_Ifx_GTM_TIM_CH_GPR0_Bits',0,12,183,39,16,4,12
	.byte	'GPR0',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'ECNT',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,240,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	67941
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_GPR1_Bits',0,12,190,39,16,4,12
	.byte	'GPR1',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'ECNT',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,248,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68046
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_CNT_Bits',0,12,212,38,16,4,12
	.byte	'CNT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68151
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_ECNT_Bits',0,12,255,38,16,4,12
	.byte	'ECNT',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,200,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68261
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_CNTS_Bits',0,12,219,38,16,4,12
	.byte	'CNTS',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'ECNT',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68373
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_TDUC_Bits',0,12,240,39,16,4,12
	.byte	'TO_CNT',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'TO_CNT1',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'TO_CNT2',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68478
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_TDUV_Bits',0,12,249,39,16,4,12
	.byte	'TOV',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'TOV1',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'TOV2',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'SLICING',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'TCS_USE_SAMPLE_EVT',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TDU_SAME_CNT_CLK',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'TCS',0,4
	.word	930
	.byte	3,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,168,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68630
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_FLT_RE_Bits',0,12,176,39,16,4,12
	.byte	'FLT_RE',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68865
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_FLT_FE_Bits',0,12,169,39,16,4,12
	.byte	'FLT_FE',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	68981
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_CTRL_Bits',0,12,226,38,16,4,12
	.byte	'TIM_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TIM_MODE',0,4
	.word	930
	.byte	3,28,2,35,0,12
	.byte	'OSM',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ARU_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CICTRL',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TBU0_SEL',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'GPR0_SEL',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'GPR1_SEL',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'CNTS_SEL',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'DSL',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'ISL',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'ECNT_RESET',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'FLT_EN',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'FLT_CNT_FRQ',0,4
	.word	930
	.byte	2,13,2,35,0,12
	.byte	'EXT_CAP_EN',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'FLT_MODE_RE',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'FLT_CTR_RE',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'FLT_MODE_FE',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'FLT_CTR_FE',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'CLK_SEL',0,4
	.word	930
	.byte	3,5,2,35,0,12
	.byte	'FR_ECNT_OFL',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EGPR0_SEL',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EGPR1_SEL',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TOCTRL',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,192,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69097
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_ECTRL_Bits',0,12,134,39,16,4,12
	.byte	'EXT_CAP_SRC',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'USE_PREV_TDU_IN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TODET_IRQ_SRC',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'TDU_START',0,4
	.word	930
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TDU_STOP',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TDU_RESYNC',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'USE_LUT',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'EFLT_CTR_RE',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EFLT_CTR_FE',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'SWAP_CAPTURE',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'IMM_START',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'ECLK_SEL',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'USE_PREV_CH_IN',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,208,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	69646
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,12,228,39,16,4,12
	.byte	'NEWVAL',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ECNTOFL',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'CNTOFL',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'GPROFL',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TODET',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'GLITCHDET',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	26,0,2,35,0,0,13,12,152,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70128
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,12,197,39,16,4,12
	.byte	'NEWVAL_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ECNTOFL_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'CNTOFL_IRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'GPROFL_IRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TODET_IRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'GLITCHDET_IRQ_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	26,0,2,35,0,0,13,12,128,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70340
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,12,209,39,16,4,12
	.byte	'TRG_NEWVAL',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_ECNTOFL',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_CNTOFL',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG_GPROFL',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG_TODET',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TRG_GLITCHDET',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	26,0,2,35,0,0,13,12,136,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70590
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,12,221,39,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,144,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	70827
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH_IRQ',0,12,139,72,25,16,14
	.byte	'NOTIFY',0
	.word	70300
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	70550
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	70787
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	70906
	.byte	4,2,35,12,0,10
	.word	70946
	.byte	11
	.byte	'_Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,12,157,39,16,4,12
	.byte	'NEWVAL_EIRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ECNTOFL_EIRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'CNTOFL_EIRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'GPROFL_EIRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TODET_EIRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'GLITCHDET_EIRQ_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	26,0,2,35,0,0,13,12,216,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	71037
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_CH',0,12,160,72,25,64,14
	.byte	'GPR0',0
	.word	68006
	.byte	4,2,35,0,14
	.byte	'GPR1',0
	.word	68111
	.byte	4,2,35,4,14
	.byte	'CNT',0
	.word	68221
	.byte	4,2,35,8,14
	.byte	'ECNT',0
	.word	68333
	.byte	4,2,35,12,14
	.byte	'CNTS',0
	.word	68438
	.byte	4,2,35,16,14
	.byte	'TDUC',0
	.word	68590
	.byte	4,2,35,20,14
	.byte	'TDUV',0
	.word	68825
	.byte	4,2,35,24,14
	.byte	'FLT_RE',0
	.word	68941
	.byte	4,2,35,28,14
	.byte	'FLT_FE',0
	.word	69057
	.byte	4,2,35,32,14
	.byte	'CTRL',0
	.word	69606
	.byte	4,2,35,36,14
	.byte	'ECTRL',0
	.word	70088
	.byte	4,2,35,40,14
	.byte	'IRQ',0
	.word	71032
	.byte	16,2,35,44,14
	.byte	'EIRQ_EN',0
	.word	71254
	.byte	4,2,35,60,0,10
	.word	71294
	.byte	15,52
	.word	531
	.byte	16,51,0,11
	.byte	'_Ifx_GTM_TIM_INP_VAL_Bits',0,12,134,40,16,4,12
	.byte	'F_OUT',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'F_IN',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'TIM_IN',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	71519
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_IN_SRC_Bits',0,12,143,40,16,4,12
	.byte	'VAL_0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'MODE_0',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'VAL_1',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'MODE_1',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'VAL_2',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'MODE_2',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'VAL_3',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'MODE_3',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'VAL_4',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'MODE_4',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'VAL_5',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'MODE_5',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'VAL_6',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'MODE_6',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'VAL_7',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'MODE_7',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,184,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	71666
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TIM_RST_Bits',0,12,164,40,16,4,12
	.byte	'RST_CH0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'RST_CH1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'RST_CH2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'RST_CH3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'RST_CH4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'RST_CH5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'RST_CH6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'RST_CH7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,192,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72018
	.byte	4,2,35,0,0,10
	.word	71294
	.byte	15,64
	.word	531
	.byte	16,63,0,10
	.word	71294
	.byte	10
	.word	71294
	.byte	10
	.word	71294
	.byte	10
	.word	71294
	.byte	10
	.word	71294
	.byte	10
	.word	71294
	.byte	15,192,8
	.word	531
	.byte	16,191,8,0,11
	.byte	'_Ifx_GTM_TIM',0,12,190,72,25,128,16,14
	.byte	'CH0',0
	.word	71505
	.byte	64,2,35,0,14
	.byte	'reserved_40',0
	.word	71510
	.byte	52,2,35,64,14
	.byte	'INP_VAL',0
	.word	71626
	.byte	4,2,35,116,14
	.byte	'IN_SRC',0
	.word	71978
	.byte	4,2,35,120,14
	.byte	'RST',0
	.word	72221
	.byte	4,2,35,124,14
	.byte	'CH1',0
	.word	72261
	.byte	64,3,35,128,1,14
	.byte	'reserved_C0',0
	.word	72266
	.byte	64,3,35,192,1,14
	.byte	'CH2',0
	.word	72275
	.byte	64,3,35,128,2,14
	.byte	'reserved_140',0
	.word	72266
	.byte	64,3,35,192,2,14
	.byte	'CH3',0
	.word	72280
	.byte	64,3,35,128,3,14
	.byte	'reserved_1C0',0
	.word	72266
	.byte	64,3,35,192,3,14
	.byte	'CH4',0
	.word	72285
	.byte	64,3,35,128,4,14
	.byte	'reserved_240',0
	.word	72266
	.byte	64,3,35,192,4,14
	.byte	'CH5',0
	.word	72290
	.byte	64,3,35,128,5,14
	.byte	'reserved_2C0',0
	.word	72266
	.byte	64,3,35,192,5,14
	.byte	'CH6',0
	.word	72295
	.byte	64,3,35,128,6,14
	.byte	'reserved_340',0
	.word	72266
	.byte	64,3,35,192,6,14
	.byte	'CH7',0
	.word	72300
	.byte	64,3,35,128,7,14
	.byte	'reserved_3C0',0
	.word	72305
	.byte	192,8,3,35,192,7,0,15,128,96
	.word	72316
	.byte	16,5,0,10
	.word	72676
	.byte	15,128,128,1
	.word	531
	.byte	16,255,127,0,11
	.byte	'_Ifx_GTM_TOM_CH_CTRL_Bits',0,12,199,40,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	7,25,2,35,0,12
	.byte	'SR0_TRIG',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	3,21,2,35,0,12
	.byte	'SL',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'CLK_SRC_SR',0,4
	.word	930
	.byte	3,17,2,35,0,12
	.byte	'ECLK_SRC',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TRIG_PULSE',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'UDMODE',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'RST_CCU0',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'OSM_TRIG',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EXT_TRIG',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EXTTRIGOUT',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TRIGOUT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'SPE_TRIG',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'OSM',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'BITREV',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'SPEM',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'GCM',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FREEZE',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,224,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	72703
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_SR0_Bits',0,12,128,41,16,4,12
	.byte	'SR0',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,136,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73185
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_SR1_Bits',0,12,135,41,16,4,12
	.byte	'SR1',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,144,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73295
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_CM0_Bits',0,12,178,40,16,4,12
	.byte	'CM0',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,200,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73405
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_CM1_Bits',0,12,185,40,16,4,12
	.byte	'CM1',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,208,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73515
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_CN0_Bits',0,12,192,40,16,4,12
	.byte	'CN0',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,216,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73625
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_STAT_Bits',0,12,142,41,16,4,12
	.byte	'OL',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,13,12,152,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73735
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,12,248,40,16,4,12
	.byte	'CCU0TC',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CCU1TC',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,128,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73844
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,12,225,40,16,4,12
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,232,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	73981
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,12,233,40,16,4,12
	.byte	'TRG_CCU0TC0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_CCU1TC0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,240,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	74128
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,12,241,40,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,248,66,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	74276
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_CH_IRQ',0,12,226,72,25,16,14
	.byte	'NOTIFY',0
	.word	73941
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	74088
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	74236
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	74355
	.byte	4,2,35,12,0,10
	.word	74395
	.byte	11
	.byte	'_Ifx_GTM_TOM_CH',0,12,247,72,25,44,14
	.byte	'CTRL',0
	.word	73145
	.byte	4,2,35,0,14
	.byte	'SR0',0
	.word	73255
	.byte	4,2,35,4,14
	.byte	'SR1',0
	.word	73365
	.byte	4,2,35,8,14
	.byte	'CM0',0
	.word	73475
	.byte	4,2,35,12,14
	.byte	'CM1',0
	.word	73585
	.byte	4,2,35,16,14
	.byte	'CN0',0
	.word	73695
	.byte	4,2,35,20,14
	.byte	'STAT',0
	.word	73804
	.byte	4,2,35,24,14
	.byte	'IRQ',0
	.word	74481
	.byte	16,2,35,28,0,10
	.word	74486
	.byte	11
	.byte	'_Ifx_GTM_TOM_TGC_GLB_CTRL_Bits',0,12,207,41,16,4,12
	.byte	'HOST_TRIG',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	7,24,2,35,0,12
	.byte	'RST_CH0',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'RST_CH1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'RST_CH2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'RST_CH3',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'RST_CH4',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'RST_CH5',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'RST_CH6',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'RST_CH7',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'UPEN_CTRL0',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'UPEN_CTRL1',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'UPEN_CTRL2',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'UPEN_CTRL3',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'UPEN_CTRL4',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'UPEN_CTRL5',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'UPEN_CTRL6',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'UPEN_CTRL7',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,192,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	74620
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_TGC_ACT_TB_Bits',0,12,149,41,16,4,12
	.byte	'ACT_TB',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'TB_TRIG',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TBU_SEL',0,4
	.word	930
	.byte	2,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	5,0,2,35,0,0,13,12,160,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75069
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_TGC_FUPD_CTRL_Bits',0,12,186,41,16,4,12
	.byte	'FUPD_CTRL0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'FUPD_CTRL1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'FUPD_CTRL2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'FUPD_CTRL3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'FUPD_CTRL4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'FUPD_CTRL5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'FUPD_CTRL6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'FUPD_CTRL7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'RSTCN0_CH0',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'RSTCN0_CH1',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'RSTCN0_CH2',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'RSTCN0_CH3',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'RSTCN0_CH4',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'RSTCN0_CH5',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'RSTCN0_CH6',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'RSTCN0_CH7',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,184,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75224
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_TGC_INT_TRIG_Bits',0,12,230,41,16,4,12
	.byte	'INT_TRIG0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'INT_TRIG1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'INT_TRIG2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'INT_TRIG3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'INT_TRIG4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'INT_TRIG5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'INT_TRIG6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'INT_TRIG7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,200,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75655
	.byte	4,2,35,0,0,10
	.word	74486
	.byte	11
	.byte	'_Ifx_GTM_TOM_TGC_ENDIS_CTRL_Bits',0,12,158,41,16,4,12
	.byte	'ENDIS_CTRL0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'ENDIS_CTRL1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'ENDIS_CTRL2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'ENDIS_CTRL3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'ENDIS_CTRL4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'ENDIS_CTRL5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'ENDIS_CTRL6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'ENDIS_CTRL7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,168,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	75929
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_TGC_ENDIS_STAT_Bits',0,12,172,41,16,4,12
	.byte	'ENDIS_STAT0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'ENDIS_STAT1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'ENDIS_STAT2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'ENDIS_STAT3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'ENDIS_STAT4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'ENDIS_STAT5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'ENDIS_STAT6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'ENDIS_STAT7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,176,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	76216
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_TGC_OUTEN_CTRL_Bits',0,12,244,41,16,4,12
	.byte	'OUTEN_CTRL0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'OUTEN_CTRL1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'OUTEN_CTRL2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'OUTEN_CTRL3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'OUTEN_CTRL4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'OUTEN_CTRL5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'OUTEN_CTRL6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'OUTEN_CTRL7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,208,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	76503
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TOM_TGC_OUTEN_STAT_Bits',0,12,130,42,16,4,12
	.byte	'OUTEN_STAT0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'OUTEN_STAT1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'OUTEN_STAT2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'OUTEN_STAT3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'OUTEN_STAT4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'OUTEN_STAT5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'OUTEN_STAT6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'OUTEN_STAT7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,216,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	76790
	.byte	4,2,35,0,0,10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	10
	.word	74486
	.byte	15,148,8
	.word	531
	.byte	16,147,8,0,11
	.byte	'_Ifx_GTM_TOM',0,12,144,73,25,128,16,14
	.byte	'CH0',0
	.word	74615
	.byte	44,2,35,0,14
	.byte	'reserved_2C',0
	.word	3086
	.byte	4,2,35,44,14
	.byte	'TGC0_GLB_CTRL',0
	.word	75029
	.byte	4,2,35,48,14
	.byte	'TGC0_ACT_TB',0
	.word	75184
	.byte	4,2,35,52,14
	.byte	'TGC0_FUPD_CTRL',0
	.word	75615
	.byte	4,2,35,56,14
	.byte	'TGC0_INT_TRIG',0
	.word	75884
	.byte	4,2,35,60,14
	.byte	'CH1',0
	.word	75924
	.byte	44,2,35,64,14
	.byte	'reserved_6C',0
	.word	3086
	.byte	4,2,35,108,14
	.byte	'TGC0_ENDIS_CTRL',0
	.word	76176
	.byte	4,2,35,112,14
	.byte	'TGC0_ENDIS_STAT',0
	.word	76463
	.byte	4,2,35,116,14
	.byte	'TGC0_OUTEN_CTRL',0
	.word	76750
	.byte	4,2,35,120,14
	.byte	'TGC0_OUTEN_STAT',0
	.word	77037
	.byte	4,2,35,124,14
	.byte	'CH2',0
	.word	77077
	.byte	44,3,35,128,1,14
	.byte	'reserved_AC',0
	.word	33713
	.byte	20,3,35,172,1,14
	.byte	'CH3',0
	.word	77082
	.byte	44,3,35,192,1,14
	.byte	'reserved_EC',0
	.word	33713
	.byte	20,3,35,236,1,14
	.byte	'CH4',0
	.word	77087
	.byte	44,3,35,128,2,14
	.byte	'reserved_12C',0
	.word	33713
	.byte	20,3,35,172,2,14
	.byte	'CH5',0
	.word	77092
	.byte	44,3,35,192,2,14
	.byte	'reserved_16C',0
	.word	33713
	.byte	20,3,35,236,2,14
	.byte	'CH6',0
	.word	77097
	.byte	44,3,35,128,3,14
	.byte	'reserved_1AC',0
	.word	33713
	.byte	20,3,35,172,3,14
	.byte	'CH7',0
	.word	77102
	.byte	44,3,35,192,3,14
	.byte	'reserved_1EC',0
	.word	33713
	.byte	20,3,35,236,3,14
	.byte	'CH8',0
	.word	77107
	.byte	44,3,35,128,4,14
	.byte	'reserved_22C',0
	.word	3086
	.byte	4,3,35,172,4,14
	.byte	'TGC1_GLB_CTRL',0
	.word	75029
	.byte	4,3,35,176,4,14
	.byte	'TGC1_ACT_TB',0
	.word	75184
	.byte	4,3,35,180,4,14
	.byte	'TGC1_FUPD_CTRL',0
	.word	75615
	.byte	4,3,35,184,4,14
	.byte	'TGC1_INT_TRIG',0
	.word	75884
	.byte	4,3,35,188,4,14
	.byte	'CH9',0
	.word	77112
	.byte	44,3,35,192,4,14
	.byte	'reserved_26C',0
	.word	3086
	.byte	4,3,35,236,4,14
	.byte	'TGC1_ENDIS_CTRL',0
	.word	76176
	.byte	4,3,35,240,4,14
	.byte	'TGC1_ENDIS_STAT',0
	.word	76463
	.byte	4,3,35,244,4,14
	.byte	'TGC1_OUTEN_CTRL',0
	.word	76750
	.byte	4,3,35,248,4,14
	.byte	'TGC1_OUTEN_STAT',0
	.word	77037
	.byte	4,3,35,252,4,14
	.byte	'CH10',0
	.word	77117
	.byte	44,3,35,128,5,14
	.byte	'reserved_2AC',0
	.word	33713
	.byte	20,3,35,172,5,14
	.byte	'CH11',0
	.word	77122
	.byte	44,3,35,192,5,14
	.byte	'reserved_2EC',0
	.word	33713
	.byte	20,3,35,236,5,14
	.byte	'CH12',0
	.word	77127
	.byte	44,3,35,128,6,14
	.byte	'reserved_32C',0
	.word	33713
	.byte	20,3,35,172,6,14
	.byte	'CH13',0
	.word	77132
	.byte	44,3,35,192,6,14
	.byte	'reserved_36C',0
	.word	33713
	.byte	20,3,35,236,6,14
	.byte	'CH14',0
	.word	77137
	.byte	44,3,35,128,7,14
	.byte	'reserved_3AC',0
	.word	33713
	.byte	20,3,35,172,7,14
	.byte	'CH15',0
	.word	77142
	.byte	44,3,35,192,7,14
	.byte	'reserved_3EC',0
	.word	77147
	.byte	148,8,3,35,236,7,0,15,128,48
	.word	77158
	.byte	16,2,0,10
	.word	78160
	.byte	15,128,208,3
	.word	531
	.byte	16,255,207,3,0,11
	.byte	'_Ifx_GTM_PSM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,12,183,35,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,192,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78188
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_F2A_RD_CH',0,12,209,73,25,4,14
	.byte	'ARU_RD_FIFO',0
	.word	78273
	.byte	4,2,35,0,0,15,32
	.word	78313
	.byte	16,7,0,10
	.word	78364
	.byte	11
	.byte	'_Ifx_GTM_PSM_F2A_STR_CH_STR_CFG_Bits',0,12,190,35,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'TMODE',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'DIR',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	13,0,2,35,0,0,13,12,200,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78378
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_F2A_STR_CH',0,12,227,73,25,4,14
	.byte	'STR_CFG',0
	.word	78499
	.byte	4,2,35,0,0,15,32
	.word	78539
	.byte	16,7,0,10
	.word	78587
	.byte	11
	.byte	'_Ifx_GTM_PSM_F2A_ENABLE_Bits',0,12,159,35,16,4,12
	.byte	'STR0_EN',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'STR1_EN',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'STR2_EN',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'STR3_EN',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'STR4_EN',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'STR5_EN',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'STR6_EN',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'STR7_EN',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,176,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78601
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_F2A_F2A_CTRL_Bits',0,12,173,35,16,4,12
	.byte	'STR4_CONF',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'STR5_CONF',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'STR6_CONF',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'STR7_CONF',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,184,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	78852
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_F2A',0,12,245,73,25,72,14
	.byte	'RD_CH',0
	.word	78373
	.byte	32,2,35,0,14
	.byte	'STR_CH',0
	.word	78596
	.byte	32,2,35,32,14
	.byte	'ENABLE',0
	.word	78812
	.byte	4,2,35,64,14
	.byte	'F2A_CTRL',0
	.word	78996
	.byte	4,2,35,68,0,10
	.word	79036
	.byte	11
	.byte	'_Ifx_GTM_PSM_AFD_CH_BUF_ACC_Bits',0,12,152,35,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	29,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,168,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79130
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_AFD_CH',0,12,138,74,25,16,14
	.byte	'BUF_ACC',0
	.word	79209
	.byte	4,2,35,0,14
	.byte	'reserved_4',0
	.word	5246
	.byte	12,2,35,4,0,15,128,1
	.word	79249
	.byte	16,7,0,10
	.word	79313
	.byte	11
	.byte	'_Ifx_GTM_PSM_AFD',0,12,157,74,25,128,1,14
	.byte	'CH',0
	.word	79323
	.byte	128,1,2,35,0,0,10
	.word	79328
	.byte	15,128,6
	.word	531
	.byte	16,255,5,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_CTRL_Bits',0,12,199,35,16,4,12
	.byte	'RBM',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'RAP',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FLUSH',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'WULOCK',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,208,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79382
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_END_ADDR_Bits',0,12,219,35,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,224,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79547
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_START_ADDR_Bits',0,12,158,36,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,160,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79668
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_UPPER_WM_Bits',0,12,175,36,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,176,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79791
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_LOWER_WM_Bits',0,12,144,36,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,144,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	79912
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_STATUS_Bits',0,12,165,36,16,4,12
	.byte	'EMPTY',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'FULL',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'LOW_WM',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'UP_WM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,168,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	80033
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_FILL_LEVEL_Bits',0,12,226,35,16,4,12
	.byte	'LEVEL',0,4
	.word	930
	.byte	11,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	21,0,2,35,0,0,13,12,232,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	80203
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_WR_PTR_Bits',0,12,182,36,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,184,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	80327
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_RD_PTR_Bits',0,12,151,36,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,152,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	80446
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_NOTIFY_Bits',0,12,134,36,16,4,12
	.byte	'FIFO_EMPTY',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'FIFO_FULL',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FIFO_LWM',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FIFO_UWM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,136,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	80565
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_EN_Bits',0,12,233,35,16,4,12
	.byte	'FIFO_EMPTY_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'FIFO_FULL_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FIFO_LWM_IRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FIFO_UWM_IRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,240,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	80754
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_FORCINT_Bits',0,12,243,35,16,4,12
	.byte	'TRG_FIFO_EMPTY',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_FIFO_FULL',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_FIFO_LWM',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG_FIFO_UWM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,248,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	80967
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_MODE_Bits',0,12,253,35,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'DMA_HYSTERESIS',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DMA_HYST_DIR',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,128,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	81173
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ',0,12,175,74,25,16,14
	.byte	'NOTIFY',0
	.word	80714
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	80927
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	81133
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	81307
	.byte	4,2,35,12,0,10
	.word	81347
	.byte	11
	.byte	'_Ifx_GTM_PSM_FIFO_CH_EIRQ_EN_Bits',0,12,209,35,16,4,12
	.byte	'FIFO_EMPTY_EIRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'FIFO_FULL_EIRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FIFO_LWM_EIRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FIFO_UWM_EIRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,216,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	81443
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSM_FIFO_CH',0,12,196,74,25,64,14
	.byte	'CTRL',0
	.word	79507
	.byte	4,2,35,0,14
	.byte	'END_ADDR',0
	.word	79628
	.byte	4,2,35,4,14
	.byte	'START_ADDR',0
	.word	79751
	.byte	4,2,35,8,14
	.byte	'UPPER_WM',0
	.word	79872
	.byte	4,2,35,12,14
	.byte	'LOWER_WM',0
	.word	79993
	.byte	4,2,35,16,14
	.byte	'STATUS',0
	.word	80163
	.byte	4,2,35,20,14
	.byte	'FILL_LEVEL',0
	.word	80287
	.byte	4,2,35,24,14
	.byte	'WR_PTR',0
	.word	80406
	.byte	4,2,35,28,14
	.byte	'RD_PTR',0
	.word	80525
	.byte	4,2,35,32,14
	.byte	'IRQ',0
	.word	81438
	.byte	16,2,35,36,14
	.byte	'EIRQ_EN',0
	.word	81621
	.byte	4,2,35,52,14
	.byte	'reserved_38',0
	.word	4906
	.byte	8,2,35,56,0,15,128,4
	.word	81661
	.byte	16,7,0,10
	.word	81896
	.byte	11
	.byte	'_Ifx_GTM_PSM_FIFO',0,12,225,74,25,128,4,14
	.byte	'CH',0
	.word	81906
	.byte	128,4,2,35,0,0,10
	.word	81911
	.byte	15,128,116
	.word	531
	.byte	16,255,115,0,11
	.byte	'_Ifx_GTM_PSM',0,12,243,74,25,128,128,1,14
	.byte	'F2A',0
	.word	79125
	.byte	72,2,35,0,14
	.byte	'reserved_48',0
	.word	8338
	.byte	56,2,35,72,14
	.byte	'AFD',0
	.word	79366
	.byte	128,1,3,35,128,1,14
	.byte	'reserved_100',0
	.word	79371
	.byte	128,6,3,35,128,2,14
	.byte	'FIFO',0
	.word	81950
	.byte	128,4,3,35,128,8,14
	.byte	'reserved_600',0
	.word	81955
	.byte	128,116,3,35,128,12,0,15,128,128,1
	.word	81966
	.byte	16,0,0,10
	.word	82101
	.byte	15,128,128,3
	.word	531
	.byte	16,255,255,2,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_0_Bits',0,12,133,14,16,4,12
	.byte	'MLT',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'IFP',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SNU',0,4
	.word	930
	.byte	5,16,2,35,0,12
	.byte	'TNU',0,4
	.word	930
	.byte	9,7,2,35,0,12
	.byte	'AMS',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'AMT',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'IDS',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'IDT',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'SEN',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'TEN',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'RMO',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,232,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	82130
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_1_Bits',0,12,175,14,16,4,12
	.byte	'DMO',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DEN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'IDDS',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'COA',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'PIT',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SGE1',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'DLM1',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PCM1',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SGE2',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'DLM2',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PCM2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SYN_NS',0,4
	.word	930
	.byte	5,16,2,35,0,12
	.byte	'SYN_NT',0,4
	.word	930
	.byte	6,10,2,35,0,12
	.byte	'LCD',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'SWR',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'SYSF',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TS0_HRS',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TS0_HRT',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'SMC',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'SSL',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'TSL',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,128,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	82368
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_2_Bits',0,12,139,15,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'AEN0',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'AEN1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'AEN2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'AEN3',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'AEN4',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'AEN5',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'AEN6',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'AEN7',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WAD0',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'WAD1',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'WAD2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'WAD3',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'WAD4',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'WAD5',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'WAD6',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'WAD7',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	82778
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_3_Bits',0,12,162,15,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'AEN8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'AEN9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'AEN10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'AEN11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'AEN12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'AEN13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'AEN14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'AEN15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WAD8',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'WAD9',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'WAD10',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'WAD11',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'WAD12',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'WAD13',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'WAD14',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'WAD15',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	83152
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_4_Bits',0,12,185,15,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'AEN16',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'AEN17',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'AEN18',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'AEN19',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'AEN20',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'AEN21',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'AEN22',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'AEN23',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WAD16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'WAD17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'WAD18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'WAD19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'WAD20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'WAD21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'WAD22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'WAD23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	83538
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_5_Bits',0,12,208,15,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'AEN24',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'AEN25',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'AEN26',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'AEN27',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'AEN28',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'AEN29',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'AEN30',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'AEN31',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WAD24',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'WAD25',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'WAD26',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'WAD27',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'WAD28',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'WAD29',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'WAD30',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'WAD31',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	83928
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_ACT_STA_Bits',0,12,167,12,16,4,12
	.byte	'ACT_N',0,4
	.word	930
	.byte	32,0,2,35,0,0,13,12,144,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	84318
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_OSW_Bits',0,12,167,19,16,4,12
	.byte	'SWON_S',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SWON_T',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	6,24,2,35,0,12
	.byte	'OSS',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,152,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	84409
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_AOSV_2_Bits',0,12,220,12,16,4,12
	.byte	'AOSV_2A',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'AOSV_2B',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'AOSV_2C',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'AOSV_2D',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	84575
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APT_Bits',0,12,161,13,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'WAPT',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'APT',0,4
	.word	930
	.byte	10,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'WAPT_2B',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'APT_2B',0,4
	.word	930
	.byte	10,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,128,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	84724
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APS_Bits',0,12,229,12,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'WAPS',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'APS',0,4
	.word	930
	.byte	6,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	5,19,2,35,0,12
	.byte	'WAPS_1C2',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'APS_1C2',0,4
	.word	930
	.byte	6,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,13,12,208,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	84930
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APT_2C_Bits',0,12,173,13,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'APT_2C',0,4
	.word	930
	.byte	10,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	20,0,2,35,0,0,13,12,136,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	85137
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APS_1C3_Bits',0,12,241,12,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'APS_1C3',0,4
	.word	930
	.byte	6,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,216,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	85273
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NUTC_Bits',0,12,152,19,16,4,12
	.byte	'NUTE',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'FST',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	2,19,2,35,0,12
	.byte	'SYN_T',0,4
	.word	930
	.byte	3,16,2,35,0,12
	.byte	'SYN_T_OLD',0,4
	.word	930
	.byte	3,13,2,35,0,12
	.byte	'VTN',0,4
	.word	930
	.byte	6,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	4,3,2,35,0,12
	.byte	'WNUT',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'WSYN',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'WVTN',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,144,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	85410
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NUSC_Bits',0,12,242,18,16,4,12
	.byte	'NUSE',0,4
	.word	930
	.byte	6,26,2,35,0,12
	.byte	'FSS',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'SYN_S',0,4
	.word	930
	.byte	6,19,2,35,0,12
	.byte	'SYN_S_OLD',0,4
	.word	930
	.byte	6,13,2,35,0,12
	.byte	'VSN',0,4
	.word	930
	.byte	6,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	4,3,2,35,0,12
	.byte	'WNUS',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'WSYN',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'WVSN',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,248,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	85659
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NTI_CNT_Bits',0,12,235,18,16,4,12
	.byte	'NTI_CNT',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,13,12,240,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	85885
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,12,226,17,16,4,12
	.byte	'PDI',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PEI',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TINI',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TAXI',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SISI',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TISI',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MSI',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MTI',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SASI',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TASI',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PWI',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'W2I',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'W1I',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'GL1I',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'LL1I',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EI',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'GL2I',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'LL2I',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TE0I',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TE1I',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TE2I',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TE3I',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TE4I',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'CDTI',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'CDSI',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TORI',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SORI',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'DCGI',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,128,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	86001
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_IRQ_EN_Bits',0,12,151,17,16,4,12
	.byte	'PDI_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PEI_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TINI_IRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TAXI_IRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SISI_IRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TISI_IRQ_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MSI_IRQ_EN',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MTI_IRQ_EN',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SASI_IRQ_EN',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TASI_IRQ_EN',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PWI_IRQ_EN',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'W2I_IRQ_EN',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'W1I_IRQ_EN',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'GL1I_IRQ_EN',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'LL1I_IRQ_EN',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EI_IRQ_EN',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'GL2I_IRQ_EN',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'LL2I_IRQ_EN',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TE0I_IRQ_EN',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TE1I_IRQ_EN',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TE2I_IRQ_EN',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TE3I_IRQ_EN',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TE4I_IRQ_EN',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'CDTI_IRQ_EN',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'CDSI_IRQ_EN',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TORI_IRQ_EN',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SORI_IRQ_EN',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'DCGI_IRQ_EN',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,232,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	86540
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,12,185,17,16,4,12
	.byte	'TRG_PDI',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_PEI',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_TINI',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG_TAXI',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG_SISI',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TRG_TISI',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TRG_MSI',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TRG_MTI',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TRG_SASI',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TRG_TASI',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TRG_PWI',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TRG_W2I',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TRG_W1I',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TRG_GL1I',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TRG_LL1I',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TRG_EI',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TRG_GL2I',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TRG_LL2I',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TRG_TE0I',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TRG_TE1I',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TRG_TE2I',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TRG_TE3I',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TRG_TE4I',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TRG_CDTI',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'TRG_CDSI',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TRG_TORI',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TRG_SORI',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TRG_DCGI',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,240,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	87271
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_IRQ_MODE_Bits',0,12,219,17,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,248,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	87923
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_IRQ',0,12,139,75,25,16,14
	.byte	'NOTIFY',0
	.word	86500
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	87231
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	87883
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	88000
	.byte	4,2,35,12,0,10
	.word	88040
	.byte	11
	.byte	'_Ifx_GTM_DPLL_EIRQ_EN_Bits',0,12,182,16,16,4,12
	.byte	'PDI_EIRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PEI_EIRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TINI_EIRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TAXI_EIRQ_EN',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SISI_EIRQ_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TISI_EIRQ_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'MSI_EIRQ_EN',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'MTI_EIRQ_EN',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SASI_EIRQ_EN',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TASI_EIRQ_EN',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PWI_EIRQ_EN',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'W2I_EIRQ_EN',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'W1I_EIRQ_EN',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'GL1I_EIRQ_EN',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'LL1I_EIRQ_EN',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EI_EIRQ_EN',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'GL2I_EIRQ_EN',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'LL2I_EIRQ_EN',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TE0I_EIRQ_EN',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TE1I_EIRQ_EN',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TE2I_EIRQ_EN',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TE3I_EIRQ_EN',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TE4I_EIRQ_EN',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'CDTI_EIRQ_EN',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'CDSI_EIRQ_EN',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'TORI_EIRQ_EN',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SORI_EIRQ_EN',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'DCGI_EIRQ_EN',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,152,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	88129
	.byte	4,2,35,0,0,15,92
	.word	531
	.byte	16,91,0,11
	.byte	'_Ifx_GTM_DPLL_INC_CNT1_Bits',0,12,251,16,16,4,12
	.byte	'INC_CNT1',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	88898
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_INC_CNT2_Bits',0,12,137,17,16,4,12
	.byte	'INC_CNT2',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89016
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APT_SYNC_Bits',0,12,181,13,16,4,12
	.byte	'APT_2B_EXT',0,4
	.word	930
	.byte	6,26,2,35,0,12
	.byte	'APT_2B_STATUS',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	7,18,2,35,0,12
	.byte	'APT_2B_OLD',0,4
	.word	930
	.byte	10,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,144,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89134
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APS_SYNC_Bits',0,12,141,13,16,4,12
	.byte	'APS_1C2_EXT',0,4
	.word	930
	.byte	6,26,2,35,0,12
	.byte	'APS_1C2_STATUS',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	7,18,2,35,0,12
	.byte	'APS_1C2_OLD',0,4
	.word	930
	.byte	6,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,13,12,240,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89323
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,12,148,21,16,4,12
	.byte	'TBU_TS0_T',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,240,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89515
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,12,141,21,16,4,12
	.byte	'TBU_TS0_S',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89635
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,12,187,12,16,4,12
	.byte	'ADD_IN_LD1',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89755
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,12,194,12,16,4,12
	.byte	'ADD_IN_LD2',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89877
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_STATUS_Bits',0,12,214,20,16,4,12
	.byte	'FPCE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CSO',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'CTO',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'CRO',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'RCS',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'RCT',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PSE',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SOR',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'MS',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TOR',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'MT',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'RAM2_ERR',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	2,17,2,35,0,12
	.byte	'LOW_RES',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'CSVS',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'CSVT',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'CAIP2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'CAIP1',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'ISN',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'ITN',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'BWD2',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'BWD1',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'LOCK2',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SYS',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'SYT',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'FSD',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'FTD',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'LOCK1',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'ERR',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,208,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	89999
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_ID_PMTR_Bits',0,12,230,16,16,4,12
	.byte	'ID_PMTR_X',0,4
	.word	930
	.byte	9,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,176,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	90580
	.byte	4,2,35,0,0,15,128,1
	.word	90657
	.byte	16,31,0,15,96
	.word	531
	.byte	16,95,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,12,162,14,16,4,12
	.byte	'MLT',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'IFP',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	15,6,2,35,0,12
	.byte	'AMT',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'IDT',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	2,1,2,35,0,12
	.byte	'RMO',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,248,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	90716
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,12,149,14,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'IFP',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	14,7,2,35,0,12
	.byte	'AMS',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'IDS',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	3,1,2,35,0,12
	.byte	'RMO',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,240,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	90948
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,12,254,14,16,4,12
	.byte	'DMO',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	2,29,2,35,0,12
	.byte	'COA',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'PIT',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SGE1',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'DLM1',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PCM1',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,152,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	91185
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_1_SHADOW_STATE_Bits',0,12,238,14,16,4,12
	.byte	'DMO',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	2,29,2,35,0,12
	.byte	'COA',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SGE1',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'DLM1',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PCM1',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SGE2',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'DLM2',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PCM2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	21,0,2,35,0,0,13,12,144,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	91410
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RAM_INI_Bits',0,12,248,19,16,4,12
	.byte	'INIT_1A',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'INIT_1BC',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'INIT_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'INIT_RAM',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,240,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	91689
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PSA_Bits',0,12,185,19,16,4,12
	.byte	'PSA',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	91884
	.byte	4,2,35,0,0,15,128,1
	.word	91952
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_DPLL_DLA_Bits',0,12,240,15,16,4,12
	.byte	'DLA',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92002
	.byte	4,2,35,0,0,15,128,1
	.word	92070
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_DPLL_NA_Bits',0,12,178,18,16,4,12
	.byte	'DB',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'DW',0,4
	.word	930
	.byte	10,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92120
	.byte	4,2,35,0,0,15,128,1
	.word	92223
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_DPLL_DTA_Bits',0,12,247,15,16,4,12
	.byte	'DTA',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92273
	.byte	4,2,35,0,0,15,128,1
	.word	92341
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_DPLL_TS_T_Bits',0,12,253,21,16,4,12
	.byte	'TRIGGER_TS',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92391
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TS_T_OLD_Bits',0,12,132,22,16,4,12
	.byte	'TRIGGER_TS_OLD',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92507
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_FTV_T_Bits',0,12,223,16,16,4,12
	.byte	'TRIGGER_FT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92631
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TS_S_Bits',0,12,239,21,16,4,12
	.byte	'STATE_TS',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92748
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TS_S_OLD_Bits',0,12,246,21,16,4,12
	.byte	'STATE_TS_OLD',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92862
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_FTV_S_Bits',0,12,216,16,16,4,12
	.byte	'STATE_FT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	92984
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_THMI_Bits',0,12,163,21,16,4,12
	.byte	'THMI',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,128,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93099
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_THMA_Bits',0,12,155,21,16,4,12
	.byte	'THMA',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,248,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93232
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_THVAL_Bits',0,12,171,21,16,4,12
	.byte	'THVAL',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,136,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93365
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TOV_Bits',0,12,200,21,16,4,12
	.byte	'TOV_DB',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'TOV_DW',0,4
	.word	930
	.byte	6,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93477
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TOV_S_Bits',0,12,209,21,16,4,12
	.byte	'DB',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'DW',0,4
	.word	930
	.byte	6,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93629
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,12,173,12,16,4,12
	.byte	'ADD_IN_CAL1',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,152,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93775
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,12,180,12,16,4,12
	.byte	'ADD_IN_CAL2',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	93899
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_MPVAL1_Bits',0,12,162,18,16,4,12
	.byte	'MPVAL1',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'SIX1',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94023
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_MPVAL2_Bits',0,12,170,18,16,4,12
	.byte	'MPVAL2',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'SIX2',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94153
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,12,219,18,16,4,12
	.byte	'NMB_T_TAR',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94283
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,12,227,18,16,4,12
	.byte	'NMB_T_TAR_OLD',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94426
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,12,195,18,16,4,12
	.byte	'NMB_S_TAR',0,4
	.word	930
	.byte	20,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94577
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,12,203,18,16,4,12
	.byte	'NMB_S_TAR_OLD',0,4
	.word	930
	.byte	20,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94720
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_Bits',0,12,145,20,16,4,12
	.byte	'RCDT_TX',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,136,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94871
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_Bits',0,12,131,20,16,4,12
	.byte	'RCDT_SX',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,248,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	94987
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,12,152,20,16,4,12
	.byte	'RCDT_TX_NOM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,144,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95103
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,12,138,20,16,4,12
	.byte	'RCDT_SX_NOM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,128,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95227
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,12,180,20,16,4,12
	.byte	'RDT_T_ACT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95351
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,12,166,20,16,4,12
	.byte	'RDT_S_ACT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95471
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_DT_T_ACT_Bits',0,12,154,16,16,4,12
	.byte	'DT_T_ACT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,248,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95591
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_DT_S_ACT_Bits',0,12,133,16,16,4,12
	.byte	'DT_S_ACT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95709
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_EDT_T_Bits',0,12,175,16,16,4,12
	.byte	'EDT_T',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,144,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95827
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_MEDT_T_Bits',0,12,139,18,16,4,12
	.byte	'MEDT_T',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,144,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	95939
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_EDT_S_Bits',0,12,168,16,16,4,12
	.byte	'EDT_S',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,136,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96053
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_MEDT_S_Bits',0,12,132,18,16,4,12
	.byte	'MEDT_S',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,136,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96165
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CDT_TX_Bits',0,12,205,13,16,4,12
	.byte	'CDT_TX',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,168,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96279
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CDT_SX_Bits',0,12,191,13,16,4,12
	.byte	'CDT_SX',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,152,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96393
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,12,212,13,16,4,12
	.byte	'CDT_TX_NOM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96507
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,12,198,13,16,4,12
	.byte	'CDT_SX_NOM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96629
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TLR_Bits',0,12,192,21,16,4,12
	.byte	'TLR',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	16,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96751
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_SLR_Bits',0,12,194,20,16,4,12
	.byte	'SLR',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	16,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	96881
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PDT_Bits',0,12,177,19,16,4,12
	.byte	'DB',0,4
	.word	930
	.byte	14,18,2,35,0,12
	.byte	'DW',0,4
	.word	930
	.byte	10,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97011
	.byte	4,2,35,0,0,15,128,1
	.word	97092
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_DPLL_MLS1_Bits',0,12,146,18,16,4,12
	.byte	'MLS1',0,4
	.word	930
	.byte	18,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	6,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,152,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97142
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_MLS2_Bits',0,12,154,18,16,4,12
	.byte	'MLS2',0,4
	.word	930
	.byte	18,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	6,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,160,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97275
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CNT_NUM_1_Bits',0,12,219,13,16,4,12
	.byte	'CNT_NUM_1',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97408
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CNT_NUM_2_Bits',0,12,226,13,16,4,12
	.byte	'CNT_NUM_2',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97528
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PVT_Bits',0,12,241,19,16,4,12
	.byte	'PVT',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97648
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PSTC_Bits',0,12,220,19,16,4,12
	.byte	'PSTC',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97756
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PSSC_Bits',0,12,199,19,16,4,12
	.byte	'PSSC',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97866
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PSTM_Bits',0,12,227,19,16,4,12
	.byte	'PSTM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	97976
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PSTM_OLD_Bits',0,12,234,19,16,4,12
	.byte	'PSTM_OLD',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98086
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PSSM_Bits',0,12,206,19,16,4,12
	.byte	'PSSM',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98204
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_PSSM_OLD_Bits',0,12,213,19,16,4,12
	.byte	'PSSM_OLD',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98314
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NMB_T_Bits',0,12,211,18,16,4,12
	.byte	'NMB_T',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98432
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NMB_S_Bits',0,12,187,18,16,4,12
	.byte	'NMB_S',0,4
	.word	930
	.byte	20,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,53,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98567
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_RDT_S_Bits',0,12,159,20,16,4,12
	.byte	'RDT_S',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,152,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98702
	.byte	4,2,35,0,0,15,128,2
	.word	98774
	.byte	16,63,0,11
	.byte	'_Ifx_GTM_DPLL_TSF_S_Bits',0,12,225,21,16,4,12
	.byte	'TSF_S',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98824
	.byte	4,2,35,0,0,15,128,2
	.word	98896
	.byte	16,63,0,11
	.byte	'_Ifx_GTM_DPLL_ADT_S_Bits',0,12,201,12,16,4,12
	.byte	'PD_S',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'NS',0,4
	.word	930
	.byte	6,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	98946
	.byte	4,2,35,0,0,15,128,2
	.word	99054
	.byte	16,63,0,11
	.byte	'_Ifx_GTM_DPLL_DT_S_Bits',0,12,254,15,16,4,12
	.byte	'DT_S',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	99104
	.byte	4,2,35,0,0,15,128,2
	.word	99174
	.byte	16,63,0,15,128,8
	.word	531
	.byte	16,255,7,0,11
	.byte	'_Ifx_GTM_DPLL_TSAC_Bits',0,12,218,21,16,4,12
	.byte	'TSAC',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	99235
	.byte	4,2,35,0,0,15,128,1
	.word	99305
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_DPLL_PSAC_Bits',0,12,192,19,16,4,12
	.byte	'PSAC',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	99355
	.byte	4,2,35,0,0,15,128,1
	.word	99425
	.byte	16,31,0,11
	.byte	'_Ifx_GTM_DPLL_ACB_Bits',0,12,154,12,16,4,12
	.byte	'ACB_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	3,24,2,35,0,12
	.byte	'ACB_1',0,4
	.word	930
	.byte	5,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	3,16,2,35,0,12
	.byte	'ACB_2',0,4
	.word	930
	.byte	5,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	3,8,2,35,0,12
	.byte	'ACB_3',0,4
	.word	930
	.byte	5,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,13,12,136,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	99475
	.byte	4,2,35,0,0,15,32
	.word	99664
	.byte	16,7,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_11_Bits',0,12,201,14,16,4,12
	.byte	'SIP1',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ERZ1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'PCMF1',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FSYL1',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'INCF1',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'PCMF1_INCCNT_B',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ADT',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ADS',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SIP2',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ERZ2',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'PCMF2',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'FSYL2',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'INCF2',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'PCMF2_INCCNT_B',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'STATE_EXT',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'ACBU',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'WSIP1',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'WERZ1',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'WPCMF1',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'WFSYL1',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'WINCF1',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'WPCMF1_INCCNT_B',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'WADT',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'WADS',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'WSIP2',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'WERZ2',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'WPCMF2',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'WFSYL2',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'WINCF2',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'WPCMF2_INCCNT_B',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'WSTATE_EXT',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'WACBU',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,136,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	99713
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_THVAL2_Bits',0,12,178,21,16,4,12
	.byte	'THVAL',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,144,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	100373
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_TIDEL_Bits',0,12,185,21,16,4,12
	.byte	'TIDEL',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,152,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	100486
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_SIDEL_Bits',0,12,187,20,16,4,12
	.byte	'SIDEL',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	100598
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APS_SYNC_EXT_Bits',0,12,151,13,16,4,12
	.byte	'APS_1C2_EXT',0,4
	.word	930
	.byte	7,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	8,17,2,35,0,12
	.byte	'APS_1C2_STATUS',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'APS_1C2_OLD',0,4
	.word	930
	.byte	7,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	9,0,2,35,0,0,13,12,248,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	100710
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTRL_EXT_Bits',0,12,231,15,16,4,12
	.byte	'SNU',0,4
	.word	930
	.byte	6,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	10,16,2,35,0,12
	.byte	'SYN_NS',0,4
	.word	930
	.byte	6,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	10,0,2,35,0,0,13,12,192,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	100906
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APS_EXT_Bits',0,12,129,13,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'WAPS',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'APS',0,4
	.word	930
	.byte	7,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	4,19,2,35,0,12
	.byte	'WAPS_1C2',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'APS_1C2',0,4
	.word	930
	.byte	7,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	11,0,2,35,0,0,13,12,232,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101059
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_APS_1C3_EXT_Bits',0,12,249,12,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'APS_1C3',0,4
	.word	930
	.byte	7,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	23,0,2,35,0,0,13,12,224,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101270
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_STA_Bits',0,12,202,20,16,4,12
	.byte	'STA_T',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'CNT_T',0,4
	.word	930
	.byte	3,20,2,35,0,12
	.byte	'STA_S',0,4
	.word	930
	.byte	8,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'CNT_S',0,4
	.word	930
	.byte	3,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101411
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_INCF1_OFFSET_Bits',0,12,237,16,16,4,12
	.byte	'DPLL_INCF1_OFFSET',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101617
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_INCF2_OFFSET_Bits',0,12,244,16,16,4,12
	.byte	'DPLL_INCF2_OFFSET',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,192,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101748
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_DT_T_START_Bits',0,12,161,16,16,4,12
	.byte	'DPLL_DT_T_START',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,128,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	101879
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_DT_S_START_Bits',0,12,140,16,16,4,12
	.byte	'DPLL_DT_S_START',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,51,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102006
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_STA_MASK_Bits',0,12,133,21,16,4,12
	.byte	'STA_NOTIFY_T',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'STA_NOTIFY_S',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,224,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102133
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_STA_FLAG_Bits',0,12,250,20,16,4,12
	.byte	'STA_FLAG_T',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	7,24,2,35,0,12
	.byte	'STA_FLAG_S',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'INC_CNT1_FLAG',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'INC_CNT2_FLAG',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	21,0,2,35,0,0,13,12,216,55,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102279
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_INC_CNT1_MASK_Bits',0,12,130,17,16,4,12
	.byte	'INC_CNT1_NOTIFY',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102493
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_INC_CNT2_MASK_Bits',0,12,144,17,16,4,12
	.byte	'INC_CNT2_NOTIFY',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,52,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102623
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NUSC_EXT1_Bits',0,12,128,19,16,4,12
	.byte	'SYN_S',0,4
	.word	930
	.byte	7,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	9,16,2,35,0,12
	.byte	'SYN_S_OLD',0,4
	.word	930
	.byte	7,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	7,2,2,35,0,12
	.byte	'WSYN',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,128,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102753
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_NUSC_EXT2_Bits',0,12,139,19,16,4,12
	.byte	'NUSE',0,4
	.word	930
	.byte	7,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	8,17,2,35,0,12
	.byte	'FSS',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'VSN',0,4
	.word	930
	.byte	7,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	6,3,2,35,0,12
	.byte	'WNUS',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'WVSN',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,136,54,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	102951
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTN_MIN_Bits',0,12,254,13,16,4,12
	.byte	'CTN_MIN',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	103173
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CTN_MAX_Bits',0,12,247,13,16,4,12
	.byte	'CTN_MAX',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,216,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	103289
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CSN_MIN_Bits',0,12,240,13,16,4,12
	.byte	'CSN_MIN',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,208,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	103405
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DPLL_CSN_MAX_Bits',0,12,233,13,16,4,12
	.byte	'CSN_MAX',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,200,50,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	103521
	.byte	4,2,35,0,0,15,132,97
	.word	531
	.byte	16,131,97,0,15,128,64
	.word	334
	.byte	16,255,15,0,15,128,64
	.word	531
	.byte	16,255,63,0,11
	.byte	'_Ifx_GTM_DPLL',0,12,160,75,25,128,128,2,14
	.byte	'CTRL_0',0
	.word	82328
	.byte	4,2,35,0,14
	.byte	'CTRL_1',0
	.word	82738
	.byte	4,2,35,4,14
	.byte	'CTRL_2',0
	.word	83112
	.byte	4,2,35,8,14
	.byte	'CTRL_3',0
	.word	83498
	.byte	4,2,35,12,14
	.byte	'CTRL_4',0
	.word	83888
	.byte	4,2,35,16,14
	.byte	'CTRL_5',0
	.word	84278
	.byte	4,2,35,20,14
	.byte	'ACT_STA',0
	.word	84369
	.byte	4,2,35,24,14
	.byte	'OSW',0
	.word	84535
	.byte	4,2,35,28,14
	.byte	'AOSV_2',0
	.word	84684
	.byte	4,2,35,32,14
	.byte	'APT',0
	.word	84890
	.byte	4,2,35,36,14
	.byte	'APS',0
	.word	85097
	.byte	4,2,35,40,14
	.byte	'APT_2C',0
	.word	85233
	.byte	4,2,35,44,14
	.byte	'APS_1C3',0
	.word	85370
	.byte	4,2,35,48,14
	.byte	'NUTC',0
	.word	85619
	.byte	4,2,35,52,14
	.byte	'NUSC',0
	.word	85845
	.byte	4,2,35,56,14
	.byte	'NTI_CNT',0
	.word	85961
	.byte	4,2,35,60,14
	.byte	'IRQ',0
	.word	88124
	.byte	16,2,35,64,14
	.byte	'EIRQ_EN',0
	.word	88849
	.byte	4,2,35,80,14
	.byte	'reserved_54',0
	.word	88889
	.byte	92,2,35,84,14
	.byte	'INC_CNT1',0
	.word	88976
	.byte	4,3,35,176,1,14
	.byte	'INC_CNT2',0
	.word	89094
	.byte	4,3,35,180,1,14
	.byte	'APT_SYNC',0
	.word	89283
	.byte	4,3,35,184,1,14
	.byte	'APS_SYNC',0
	.word	89475
	.byte	4,3,35,188,1,14
	.byte	'TBU_TS0_T',0
	.word	89595
	.byte	4,3,35,192,1,14
	.byte	'TBU_TS0_S',0
	.word	89715
	.byte	4,3,35,196,1,14
	.byte	'ADD_IN_LD1',0
	.word	89837
	.byte	4,3,35,200,1,14
	.byte	'ADD_IN_LD2',0
	.word	89959
	.byte	4,3,35,204,1,14
	.byte	'reserved_D0',0
	.word	58984
	.byte	44,3,35,208,1,14
	.byte	'STATUS',0
	.word	90540
	.byte	4,3,35,252,1,14
	.byte	'ID_PMTR',0
	.word	90697
	.byte	128,1,3,35,128,2,14
	.byte	'reserved_180',0
	.word	90707
	.byte	96,3,35,128,3,14
	.byte	'CTRL_0_SHADOW_TRIGGER',0
	.word	90908
	.byte	4,3,35,224,3,14
	.byte	'CTRL_0_SHADOW_STATE',0
	.word	91145
	.byte	4,3,35,228,3,14
	.byte	'CTRL_1_SHADOW_TRIGGER',0
	.word	91370
	.byte	4,3,35,232,3,14
	.byte	'CTRL_1_SHADOW_STATE',0
	.word	91649
	.byte	4,3,35,236,3,14
	.byte	'reserved_1F0',0
	.word	5246
	.byte	12,3,35,240,3,14
	.byte	'RAM_INI',0
	.word	91844
	.byte	4,3,35,252,3,14
	.byte	'PSA',0
	.word	91992
	.byte	128,1,3,35,128,4,14
	.byte	'DLA',0
	.word	92110
	.byte	128,1,3,35,128,5,14
	.byte	'NA',0
	.word	92263
	.byte	128,1,3,35,128,6,14
	.byte	'DTA',0
	.word	92381
	.byte	128,1,3,35,128,7,14
	.byte	'TS_T',0
	.word	92467
	.byte	4,3,35,128,8,14
	.byte	'TS_T_OLD',0
	.word	92591
	.byte	4,3,35,132,8,14
	.byte	'FTV_T',0
	.word	92708
	.byte	4,3,35,136,8,14
	.byte	'reserved_40C',0
	.word	3086
	.byte	4,3,35,140,8,14
	.byte	'TS_S',0
	.word	92822
	.byte	4,3,35,144,8,14
	.byte	'TS_S_OLD',0
	.word	92944
	.byte	4,3,35,148,8,14
	.byte	'FTV_S',0
	.word	93059
	.byte	4,3,35,152,8,14
	.byte	'reserved_41C',0
	.word	3086
	.byte	4,3,35,156,8,14
	.byte	'THMI',0
	.word	93192
	.byte	4,3,35,160,8,14
	.byte	'THMA',0
	.word	93325
	.byte	4,3,35,164,8,14
	.byte	'THVAL',0
	.word	93437
	.byte	4,3,35,168,8,14
	.byte	'reserved_42C',0
	.word	3086
	.byte	4,3,35,172,8,14
	.byte	'TOV',0
	.word	93589
	.byte	4,3,35,176,8,14
	.byte	'TOV_S',0
	.word	93735
	.byte	4,3,35,180,8,14
	.byte	'ADD_IN_CAL1',0
	.word	93859
	.byte	4,3,35,184,8,14
	.byte	'ADD_IN_CAL2',0
	.word	93983
	.byte	4,3,35,188,8,14
	.byte	'MPVAL1',0
	.word	94113
	.byte	4,3,35,192,8,14
	.byte	'MPVAL2',0
	.word	94243
	.byte	4,3,35,196,8,14
	.byte	'NMB_T_TAR',0
	.word	94386
	.byte	4,3,35,200,8,14
	.byte	'NMB_T_TAR_OLD',0
	.word	94537
	.byte	4,3,35,204,8,14
	.byte	'NMB_S_TAR',0
	.word	94680
	.byte	4,3,35,208,8,14
	.byte	'NMB_S_TAR_OLD',0
	.word	94831
	.byte	4,3,35,212,8,14
	.byte	'reserved_458',0
	.word	4906
	.byte	8,3,35,216,8,14
	.byte	'RCDT_TX',0
	.word	94947
	.byte	4,3,35,224,8,14
	.byte	'RCDT_SX',0
	.word	95063
	.byte	4,3,35,228,8,14
	.byte	'RCDT_TX_NOM',0
	.word	95187
	.byte	4,3,35,232,8,14
	.byte	'RCDT_SX_NOM',0
	.word	95311
	.byte	4,3,35,236,8,14
	.byte	'RDT_T_ACT',0
	.word	95431
	.byte	4,3,35,240,8,14
	.byte	'RDT_S_ACT',0
	.word	95551
	.byte	4,3,35,244,8,14
	.byte	'DT_T_ACT',0
	.word	95669
	.byte	4,3,35,248,8,14
	.byte	'DT_S_ACT',0
	.word	95787
	.byte	4,3,35,252,8,14
	.byte	'EDT_T',0
	.word	95899
	.byte	4,3,35,128,9,14
	.byte	'MEDT_T',0
	.word	96013
	.byte	4,3,35,132,9,14
	.byte	'EDT_S',0
	.word	96125
	.byte	4,3,35,136,9,14
	.byte	'MEDT_S',0
	.word	96239
	.byte	4,3,35,140,9,14
	.byte	'CDT_TX',0
	.word	96353
	.byte	4,3,35,144,9,14
	.byte	'CDT_SX',0
	.word	96467
	.byte	4,3,35,148,9,14
	.byte	'CDT_TX_NOM',0
	.word	96589
	.byte	4,3,35,152,9,14
	.byte	'CDT_SX_NOM',0
	.word	96711
	.byte	4,3,35,156,9,14
	.byte	'TLR',0
	.word	96841
	.byte	4,3,35,160,9,14
	.byte	'SLR',0
	.word	96971
	.byte	4,3,35,164,9,14
	.byte	'reserved_4A8',0
	.word	59977
	.byte	88,3,35,168,9,14
	.byte	'PDT',0
	.word	97132
	.byte	128,1,3,35,128,10,14
	.byte	'reserved_580',0
	.word	72266
	.byte	64,3,35,128,11,14
	.byte	'MLS1',0
	.word	97235
	.byte	4,3,35,192,11,14
	.byte	'MLS2',0
	.word	97368
	.byte	4,3,35,196,11,14
	.byte	'CNT_NUM_1',0
	.word	97488
	.byte	4,3,35,200,11,14
	.byte	'CNT_NUM_2',0
	.word	97608
	.byte	4,3,35,204,11,14
	.byte	'PVT',0
	.word	97716
	.byte	4,3,35,208,11,14
	.byte	'reserved_5D4',0
	.word	5246
	.byte	12,3,35,212,11,14
	.byte	'PSTC',0
	.word	97826
	.byte	4,3,35,224,11,14
	.byte	'PSSC',0
	.word	97936
	.byte	4,3,35,228,11,14
	.byte	'PSTM',0
	.word	98046
	.byte	4,3,35,232,11,14
	.byte	'PSTM_OLD',0
	.word	98164
	.byte	4,3,35,236,11,14
	.byte	'PSSM',0
	.word	98274
	.byte	4,3,35,240,11,14
	.byte	'PSSM_OLD',0
	.word	98392
	.byte	4,3,35,244,11,14
	.byte	'NMB_T',0
	.word	98527
	.byte	4,3,35,248,11,14
	.byte	'NMB_S',0
	.word	98662
	.byte	4,3,35,252,11,14
	.byte	'RDT_S',0
	.word	98814
	.byte	128,2,3,35,128,12,14
	.byte	'TSF_S',0
	.word	98936
	.byte	128,2,3,35,128,14,14
	.byte	'ADT_S',0
	.word	99094
	.byte	128,2,3,35,128,16,14
	.byte	'DT_S',0
	.word	99214
	.byte	128,2,3,35,128,18,14
	.byte	'reserved_A00',0
	.word	99224
	.byte	128,8,3,35,128,20,14
	.byte	'TSAC',0
	.word	99345
	.byte	128,1,3,35,128,28,14
	.byte	'PSAC',0
	.word	99465
	.byte	128,1,3,35,128,29,14
	.byte	'ACB',0
	.word	99704
	.byte	32,3,35,128,30,14
	.byte	'CTRL_11',0
	.word	100333
	.byte	4,3,35,160,30,14
	.byte	'THVAL2',0
	.word	100446
	.byte	4,3,35,164,30,14
	.byte	'TIDEL',0
	.word	100558
	.byte	4,3,35,168,30,14
	.byte	'SIDEL',0
	.word	100670
	.byte	4,3,35,172,30,14
	.byte	'APS_SYNC_EXT',0
	.word	100866
	.byte	4,3,35,176,30,14
	.byte	'CTRL_EXT',0
	.word	101019
	.byte	4,3,35,180,30,14
	.byte	'APS_EXT',0
	.word	101230
	.byte	4,3,35,184,30,14
	.byte	'APS_1C3_EXT',0
	.word	101371
	.byte	4,3,35,188,30,14
	.byte	'STA',0
	.word	101577
	.byte	4,3,35,192,30,14
	.byte	'INCF1_OFFSET',0
	.word	101708
	.byte	4,3,35,196,30,14
	.byte	'INCF2_OFFSET',0
	.word	101839
	.byte	4,3,35,200,30,14
	.byte	'DT_T_START',0
	.word	101966
	.byte	4,3,35,204,30,14
	.byte	'DT_S_START',0
	.word	102093
	.byte	4,3,35,208,30,14
	.byte	'STA_MASK',0
	.word	102239
	.byte	4,3,35,212,30,14
	.byte	'STA_FLAG',0
	.word	102453
	.byte	4,3,35,216,30,14
	.byte	'INC_CNT1_MASK',0
	.word	102583
	.byte	4,3,35,220,30,14
	.byte	'INC_CNT2_MASK',0
	.word	102713
	.byte	4,3,35,224,30,14
	.byte	'NUSC_EXT1',0
	.word	102911
	.byte	4,3,35,228,30,14
	.byte	'NUSC_EXT2',0
	.word	103133
	.byte	4,3,35,232,30,14
	.byte	'CTN_MIN',0
	.word	103249
	.byte	4,3,35,236,30,14
	.byte	'CTN_MAX',0
	.word	103365
	.byte	4,3,35,240,30,14
	.byte	'CSN_MIN',0
	.word	103481
	.byte	4,3,35,244,30,14
	.byte	'CSN_MAX',0
	.word	103597
	.byte	4,3,35,248,30,14
	.byte	'reserved_F7C',0
	.word	103637
	.byte	132,97,3,35,252,30,14
	.byte	'RR2',0
	.word	103648
	.byte	128,64,4,35,128,128,1,14
	.byte	'reserved_6000',0
	.word	103659
	.byte	128,64,4,35,128,192,1,0,10
	.word	103670
	.byte	15,128,250,27
	.word	531
	.byte	16,255,249,27,0,11
	.byte	'_Ifx_GTM_CLC_Bits',0,12,252,9,16,4,12
	.byte	'DISR',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'DISS',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EDIS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,13,12,240,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	106183
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_RESET_CLR_Bits',0,12,204,36,16,4,12
	.byte	'CLR',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	334
	.byte	31,0,2,35,0,0,13,12,208,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	106340
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_RESET1_Bits',0,12,189,36,16,4,12
	.byte	'RST',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'RSTSTAT',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,13,12,192,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	106448
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_RESET2_Bits',0,12,197,36,16,4,12
	.byte	'RST',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	334
	.byte	31,0,2,35,0,0,13,12,200,63,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	106572
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ACCEN0_Bits',0,12,73,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	531
	.byte	1,0,2,35,3,0,13,12,176,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	106677
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ACCEN1_Bits',0,12,110,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,13,12,184,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107246
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OTBU0T_Bits',0,12,163,34,16,4,12
	.byte	'CV',0,4
	.word	334
	.byte	27,5,2,35,0,12
	.byte	'reserved_27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'CM',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	531
	.byte	2,0,2,35,3,0,13,12,208,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107335
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OTBU1T_Bits',0,12,172,34,16,4,12
	.byte	'CV',0,4
	.word	334
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'EN',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,13,12,216,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107482
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OTBU2T_Bits',0,12,181,34,16,4,12
	.byte	'CV',0,4
	.word	334
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'EN',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,13,12,224,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107629
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OTBU3T_Bits',0,12,190,34,16,4,12
	.byte	'CV',0,4
	.word	334
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'EN',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,13,12,232,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107776
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OTSS_Bits',0,12,226,34,16,4,12
	.byte	'OTGB0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'OTGB1',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'OTGBM0',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'reserved_20',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'OTGBM1',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,128,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	107923
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OTSC0_Bits',0,12,199,34,16,4,12
	.byte	'B0LMT',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'B0LMI',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'B0HMT',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'B0HMI',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'B1LMT',0,1
	.word	531
	.byte	3,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'B1LMI',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'B1HMT',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'reserved_27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'B1HMI',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,240,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	108155
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OTSC1_Bits',0,12,216,34,16,4,12
	.byte	'MCS',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'MI',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'MOE',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'reserved_10',0,4
	.word	334
	.byte	22,0,2,35,0,0,13,12,248,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	108454
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_ODA_Bits',0,12,156,34,16,4,12
	.byte	'DRAC',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,13,12,200,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	108615
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS_OCS_Bits',0,12,146,34,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	24,8,2,35,0,12
	.byte	'SUS',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'SUS_P',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'SUSSTA',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	531
	.byte	2,0,2,35,3,0,13,12,192,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	108723
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_OCDS',0,12,201,76,25,36,14
	.byte	'OTBU0T',0
	.word	107442
	.byte	4,2,35,0,14
	.byte	'OTBU1T',0
	.word	107589
	.byte	4,2,35,4,14
	.byte	'OTBU2T',0
	.word	107736
	.byte	4,2,35,8,14
	.byte	'OTBU3T',0
	.word	107883
	.byte	4,2,35,12,14
	.byte	'OTSS',0
	.word	108115
	.byte	4,2,35,16,14
	.byte	'OTSC0',0
	.word	108414
	.byte	4,2,35,20,14
	.byte	'OTSC1',0
	.word	108575
	.byte	4,2,35,24,14
	.byte	'ODA',0
	.word	108683
	.byte	4,2,35,28,14
	.byte	'OCS',0
	.word	108848
	.byte	4,2,35,32,0,10
	.word	108888
	.byte	11
	.byte	'_Ifx_GTM_TIMINSEL_Bits',0,12,199,38,16,4,12
	.byte	'CH0SEL',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'CH1SEL',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'CH2SEL',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'CH3SEL',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'CH4SEL',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'CH5SEL',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'CH6SEL',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'CH7SEL',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,168,65,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	109048
	.byte	4,2,35,0,0,15,24
	.word	109222
	.byte	16,5,0,11
	.byte	'_Ifx_GTM_TOUTSEL_Bits',0,12,144,42,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'SEL4',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'SEL5',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'SEL6',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'SEL7',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,224,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	109271
	.byte	4,2,35,0,0,15,76
	.word	109428
	.byte	16,18,0,11
	.byte	'_Ifx_GTM_DSADCINSEL_Bits',0,12,139,22,16,4,12
	.byte	'INSEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'INSEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'INSEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'INSEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'INSEL4',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'INSEL5',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'INSEL6',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'INSEL7',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,240,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	109477
	.byte	4,2,35,0,0,15,24
	.word	109653
	.byte	16,5,0,11
	.byte	'_Ifx_GTM_DSADC_OUTSEL0_Bits',0,12,152,22,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'SEL4',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'SEL5',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	8,0,2,35,3,0,13,12,248,56,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	109702
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DSADC',0,12,227,76,25,8,14
	.byte	'OUTSEL0',0
	.word	109856
	.byte	4,2,35,0,14
	.byte	'reserved_4',0
	.word	3086
	.byte	4,2,35,4,0,15,32
	.word	109896
	.byte	16,3,0,10
	.word	109955
	.byte	11
	.byte	'_Ifx_GTM_ADCTRIG_OUT0_Bits',0,12,116,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'SEL4',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'SEL5',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'SEL6',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'SEL7',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,192,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	109969
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ADCTRIG_OUT1_Bits',0,12,129,1,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,12,200,42,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	110170
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_ADCTRIG',0,12,246,76,25,8,14
	.byte	'OUT0',0
	.word	110130
	.byte	4,2,35,0,14
	.byte	'OUT1',0
	.word	110291
	.byte	4,2,35,4,0,15,40
	.word	110331
	.byte	16,4,0,10
	.word	110383
	.byte	11
	.byte	'_Ifx_GTM_DXOUTCON_Bits',0,12,196,22,16,4,12
	.byte	'OUT0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'OUT1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'OUT2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'OUT3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'OUT4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,4
	.word	334
	.byte	27,0,2,35,0,0,13,12,144,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	110397
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_TRIGOUT_Bits',0,12,157,42,16,4,12
	.byte	'TRIG0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'TRIG1',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'TRIG2',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'TRIG3',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'TRIG4',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'TRIG5',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'TRIG6',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'TRIG7',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,12,232,67,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	110569
	.byte	4,2,35,0,0,15,20
	.word	110757
	.byte	16,4,0,11
	.byte	'_Ifx_GTM_INTOUT_Bits',0,12,143,29,16,4,12
	.byte	'INT0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,13,12,248,58,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	110806
	.byte	4,2,35,0,0,15,20
	.word	110872
	.byte	16,4,0,11
	.byte	'_Ifx_GTM_MCSTRIGOUTSEL_Bits',0,12,148,30,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'reserved_20',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,200,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	110921
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCSINTSTAT_Bits',0,12,137,30,16,4,12
	.byte	'MCS00',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'MCS10',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'MCS20',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'MCS30',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'MCS40',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,4
	.word	334
	.byte	27,0,2,35,0,0,13,12,192,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	111152
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCSINTCLR_Bits',0,12,254,29,16,4,12
	.byte	'MCS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'MCS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'MCS2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'MCS3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'MCS4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,4
	.word	334
	.byte	27,0,2,35,0,0,13,12,184,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	111331
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DXINCON_Bits',0,12,179,22,16,4,12
	.byte	'IN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'IN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'IN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'IN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,2
	.word	1082
	.byte	11,0,2,35,0,12
	.byte	'DSS0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'DSS1',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'DSS2',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'DSS3',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'DSS4',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'reserved_21',0,2
	.word	1082
	.byte	11,0,2,35,2,0,13,12,136,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	111504
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DATAIN_Bits',0,12,148,12,16,4,12
	.byte	'DATA',0,4
	.word	334
	.byte	32,0,2,35,0,0,13,12,128,49,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	111773
	.byte	4,2,35,0,0,15,20
	.word	111817
	.byte	16,4,0,11
	.byte	'_Ifx_GTM_MSC_SET_CON0_Bits',0,12,222,33,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	5,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	3,0,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	5,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	3,0,2,35,1,12
	.byte	'SEL2',0,1
	.word	531
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	3,0,2,35,2,12
	.byte	'SEL3',0,1
	.word	531
	.byte	5,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,13,12,160,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	111866
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MSC_SET_CON1_Bits',0,12,235,33,16,4,12
	.byte	'SEL4',0,1
	.word	531
	.byte	5,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	3,0,2,35,0,12
	.byte	'SEL5',0,1
	.word	531
	.byte	5,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	3,0,2,35,1,12
	.byte	'SEL6',0,1
	.word	531
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	3,0,2,35,2,12
	.byte	'SEL7',0,1
	.word	531
	.byte	5,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,13,12,168,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	112095
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MSC_SET_CON2_Bits',0,12,248,33,16,4,12
	.byte	'SEL8',0,1
	.word	531
	.byte	5,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	3,0,2,35,0,12
	.byte	'SEL9',0,1
	.word	531
	.byte	5,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	3,0,2,35,1,12
	.byte	'SEL10',0,1
	.word	531
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	3,0,2,35,2,12
	.byte	'SEL11',0,1
	.word	531
	.byte	5,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,13,12,176,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	112324
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MSC_SET_CON3_Bits',0,12,133,34,16,4,12
	.byte	'SEL12',0,1
	.word	531
	.byte	5,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	3,0,2,35,0,12
	.byte	'SEL13',0,1
	.word	531
	.byte	5,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	3,0,2,35,1,12
	.byte	'SEL14',0,1
	.word	531
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	3,0,2,35,2,12
	.byte	'SEL15',0,1
	.word	531
	.byte	5,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,13,12,184,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	112555
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MSC_SET',0,12,137,77,25,16,14
	.byte	'CON0',0
	.word	112055
	.byte	4,2,35,0,14
	.byte	'CON1',0
	.word	112284
	.byte	4,2,35,4,14
	.byte	'CON2',0
	.word	112515
	.byte	4,2,35,8,14
	.byte	'CON3',0
	.word	112748
	.byte	4,2,35,12,0,15,64
	.word	112788
	.byte	16,3,0,10
	.word	112868
	.byte	11
	.byte	'_Ifx_GTM_MSC_MSCQ_INLCON_Bits',0,12,180,33,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'SEL3',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'SEL4',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'SEL5',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'SEL6',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'SEL7',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'SEL8',0,1
	.word	531
	.byte	2,6,2,35,2,12
	.byte	'SEL9',0,1
	.word	531
	.byte	2,4,2,35,2,12
	.byte	'SEL10',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'SEL11',0,1
	.word	531
	.byte	2,0,2,35,2,12
	.byte	'SEL12',0,1
	.word	531
	.byte	2,6,2,35,3,12
	.byte	'SEL13',0,1
	.word	531
	.byte	2,4,2,35,3,12
	.byte	'SEL14',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'SEL15',0,1
	.word	531
	.byte	2,0,2,35,3,0,13,12,144,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	112882
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MSC_MSCQ_INHCON_Bits',0,12,159,33,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'SEL3',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'SEL4',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'SEL5',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'SEL6',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'SEL7',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'SEL8',0,1
	.word	531
	.byte	2,6,2,35,2,12
	.byte	'SEL9',0,1
	.word	531
	.byte	2,4,2,35,2,12
	.byte	'SEL10',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'SEL11',0,1
	.word	531
	.byte	2,0,2,35,2,12
	.byte	'SEL12',0,1
	.word	531
	.byte	2,6,2,35,3,12
	.byte	'SEL13',0,1
	.word	531
	.byte	2,4,2,35,3,12
	.byte	'SEL14',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'SEL15',0,1
	.word	531
	.byte	2,0,2,35,3,0,13,12,136,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	113221
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MSC_MSCQ_INLEXTCON_Bits',0,12,201,33,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'SEL3',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'SEL4',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'SEL5',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'SEL6',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'SEL7',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'SEL8',0,1
	.word	531
	.byte	2,6,2,35,2,12
	.byte	'SEL9',0,1
	.word	531
	.byte	2,4,2,35,2,12
	.byte	'SEL10',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'SEL11',0,1
	.word	531
	.byte	2,0,2,35,2,12
	.byte	'SEL12',0,1
	.word	531
	.byte	2,6,2,35,3,12
	.byte	'SEL13',0,1
	.word	531
	.byte	2,4,2,35,3,12
	.byte	'SEL14',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'SEL15',0,1
	.word	531
	.byte	2,0,2,35,3,0,13,12,152,61,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	113560
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MSC_MSCQ',0,12,158,77,25,12,14
	.byte	'INLCON',0
	.word	113181
	.byte	4,2,35,0,14
	.byte	'INHCON',0
	.word	113520
	.byte	4,2,35,4,14
	.byte	'INLEXTCON',0
	.word	113862
	.byte	4,2,35,8,0,15,24
	.word	113902
	.byte	16,1,0,10
	.word	113978
	.byte	11
	.byte	'_Ifx_GTM_MSC',0,12,178,77,25,168,1,14
	.byte	'SET',0
	.word	112877
	.byte	64,2,35,0,14
	.byte	'reserved_40',0
	.word	19115
	.byte	80,2,35,64,14
	.byte	'MSCQ',0
	.word	113987
	.byte	24,3,35,144,1,0,10
	.word	113992
	.byte	15,36
	.word	531
	.byte	16,35,0,11
	.byte	'_Ifx_GTM_PSI5OUTSEL_Bits',0,12,255,34,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'SEL4',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'SEL5',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	8,0,2,35,3,0,13,12,152,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	114076
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_PSI5SOUTSEL_Bits',0,12,139,35,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'SEL4',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'SEL5',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'SEL6',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'SEL7',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,160,62,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	114267
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_LCDCDCOUTSEL_Bits',0,12,208,29,16,4,12
	.byte	'SEL',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,13,12,160,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	114468
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_DTMAUXINSEL_Bits',0,12,164,22,16,4,12
	.byte	'ASEL0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'ASEL1',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'ASEL2',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'ASEL3',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'ASEL4',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'reserved_10',0,1
	.word	531
	.byte	6,0,2,35,1,12
	.byte	'TSEL0',0,1
	.word	531
	.byte	2,6,2,35,2,12
	.byte	'TSEL1',0,1
	.word	531
	.byte	2,4,2,35,2,12
	.byte	'TSEL2',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'reserved_22',0,2
	.word	1082
	.byte	10,0,2,35,2,0,13,12,128,57,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	114579
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CANOUTSEL0_Bits',0,12,140,7,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'SEL4',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'SEL5',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'SEL6',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'SEL7',0,1
	.word	531
	.byte	4,0,2,35,3,0,13,12,184,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	114834
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CANOUTSEL1_Bits',0,12,153,7,16,4,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SEL2',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'SEL3',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,13,12,192,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	115034
	.byte	4,2,35,0,0,15,156,192,16
	.word	531
	.byte	16,155,192,16,0,11
	.byte	'_Ifx_GTM_CCM_ARP_CTRL_Bits',0,12,172,7,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'SIZE',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'DIS_PROT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	6,1,2,35,0,12
	.byte	'WPROT_AEI',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,208,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	115206
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_ARP_PROT_Bits',0,12,183,7,16,4,12
	.byte	'WPROT0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'WPROT1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'WPROT2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'WPROT3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'WPROT4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'WPROT5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'WPROT6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'WPROT7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,216,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	115399
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_ARP',0,12,198,77,25,8,14
	.byte	'CTRL',0
	.word	115359
	.byte	4,2,35,0,14
	.byte	'PROT',0
	.word	115599
	.byte	4,2,35,4,0,15,80
	.word	115639
	.byte	16,9,0,10
	.word	115691
	.byte	11
	.byte	'_Ifx_GTM_CCM_AEIM_STA_Bits',0,12,163,7,16,4,12
	.byte	'AEIM_XPT_ADDR',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'AEIM_XPT_STA',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	6,0,2,35,0,0,13,12,200,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	115705
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_HW_CONF_Bits',0,12,132,8,16,4,12
	.byte	'GRSTEN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'BRIDGE_MODE_RST',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SYNC_INPUT_REG',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'CFG_CLOCK_RATE',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ATOM_OUT_RST',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ATOM_TRIG_CHAIN',0,4
	.word	930
	.byte	3,24,2,35,0,12
	.byte	'TOM_OUT_RST',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TOM_TRIG_CHAIN',0,4
	.word	930
	.byte	3,20,2,35,0,12
	.byte	'RAM_INIT_RST',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'ERM',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'ARU_CONNECT_CONFIG',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'IRQ_MODE_LEVEL',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'IRQ_MODE_PULSE',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'IRQ_MODE_PULSE_NOTIFY',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'IRQ_MODE_SINGLE_PULSE',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'ATOM_TRIG_INTCHAIN',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'TOM_TRIG_INTCHAIN',0,4
	.word	930
	.byte	5,3,2,35,0,12
	.byte	'INT_CLK_EN_GEN',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,136,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	115874
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_TIM_AUX_IN_SRC_Bits',0,12,164,8,16,4,12
	.byte	'SRC_CH0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SRC_CH1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SRC_CH2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SRC_CH3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SRC_CH4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SRC_CH5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SRC_CH6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'SRC_CH7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'SEL_OUT_N_CH0',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'SEL_OUT_N_CH1',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'SEL_OUT_N_CH2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'SEL_OUT_N_CH3',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'SEL_OUT_N_CH4',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'SEL_OUT_N_CH5',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'SEL_OUT_N_CH6',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'SEL_OUT_N_CH7',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,152,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	116462
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_EXT_CAP_EN_Bits',0,12,252,7,16,4,12
	.byte	'TIM_I_EXT_CAP_EN',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'TIM_IP1_EXT_CAP_EN',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,128,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	116939
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_TOM_OUT_Bits',0,12,187,8,16,4,12
	.byte	'TOM_OUT',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'TOM_OUT_N',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,160,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	117096
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_ATOM_OUT_Bits',0,12,197,7,16,4,12
	.byte	'ATOM_I_OUT',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'ATOM_I_OUT_N',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'ATOM_IP1_OUT',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'ATOM_IP1_OUT_N',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,224,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	117209
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_CMU_CLK_CFG_Bits',0,12,224,7,16,4,12
	.byte	'CLK0_SRC',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'CLK1_SRC',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'CLK2_SRC',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'CLK3_SRC',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'CLK4_SRC',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'CLK5_SRC',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'CLK6_SRC',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'CLK7_SRC',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,240,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	117379
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_CMU_FXCLK_CFG_Bits',0,12,245,7,16,4,12
	.byte	'FXCLK0_SRC',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	28,0,2,35,0,0,13,12,248,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	117798
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_CFG_Bits',0,12,206,7,16,4,12
	.byte	'EN_TIM',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN_TOM_SPE_TDTM',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN_ATOM_ADTM',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN_MCS',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN_DPLL_MAP',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN_BRC',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN_PSM',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN_CMP_MON',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'CLS_CLK_DIV',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	12,2,2,35,0,12
	.byte	'TBU_DIR1',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'TBU_DIR2',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,232,46,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	117921
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM_PROT_Bits',0,12,157,8,16,4,12
	.byte	'CLS_PROT',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,13,12,144,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	118266
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CCM',0,12,217,77,25,128,4,14
	.byte	'ARP',0
	.word	115700
	.byte	80,2,35,0,14
	.byte	'reserved_50',0
	.word	45477
	.byte	136,3,2,35,80,14
	.byte	'AEIM_STA',0
	.word	115834
	.byte	4,3,35,216,3,14
	.byte	'HW_CONF',0
	.word	116422
	.byte	4,3,35,220,3,14
	.byte	'TIM_AUX_IN_SRC',0
	.word	116899
	.byte	4,3,35,224,3,14
	.byte	'EXT_CAP_EN',0
	.word	117056
	.byte	4,3,35,228,3,14
	.byte	'TOM_OUT',0
	.word	117169
	.byte	4,3,35,232,3,14
	.byte	'ATOM_OUT',0
	.word	117339
	.byte	4,3,35,236,3,14
	.byte	'CMU_CLK_CFG',0
	.word	117758
	.byte	4,3,35,240,3,14
	.byte	'CMU_FXCLK_CFG',0
	.word	117881
	.byte	4,3,35,244,3,14
	.byte	'CFG',0
	.word	118226
	.byte	4,3,35,248,3,14
	.byte	'PROT',0
	.word	118338
	.byte	4,3,35,252,3,0,15,128,24
	.word	118378
	.byte	16,5,0,10
	.word	118629
	.byte	15,128,40
	.word	531
	.byte	16,255,39,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_CTRL_Bits',0,12,219,9,16,4,12
	.byte	'CLK_SEL',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'DTM_SEL',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'UPD_MODE',0,4
	.word	930
	.byte	3,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SR_UPD_EN',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'SHUT_OFF_RST',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	15,0,2,35,0,0,13,12,216,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	118655
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL1_Bits',0,12,194,8,16,4,12
	.byte	'O1SEL_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'I1SEL_0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SWAP_0',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'O1F_0',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'XDT_EN_0_1',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'O1SEL_1',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'I1SEL_1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'SH_EN_1',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SWAP_1',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'O1F_1',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'O1SEL_2',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'I1SEL_2',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'SH_EN_2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'SWAP_2',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'O1F_2',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'XDT_EN_2_3',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'O1SEL_3',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'I1SEL_3',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SH_EN_3',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'SWAP_3',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'O1F_3',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,13,12,168,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	118900
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL2_Bits',0,12,225,8,16,4,12
	.byte	'POL0_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'OC0_0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SL0_0',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DT0_0',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'POL1_0',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'OC1_0',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SL1_0',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'DT1_0',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'POL0_1',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'OC0_1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'SL0_1',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'DT0_1',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'POL1_1',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'OC1_1',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'SL1_1',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'DT1_1',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'POL0_2',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'OC0_2',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'SL0_2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'DT0_2',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'POL1_2',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'OC1_2',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'SL1_2',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'DT1_2',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'POL0_3',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'OC0_3',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SL0_3',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'DT0_3',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'POL1_3',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'OC1_3',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'SL1_3',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'DT1_3',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,176,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	119485
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL2_SR_Bits',0,12,134,9,16,4,12
	.byte	'POL0_0_SR',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'OC0_0_SR',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SL0_0_SR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DT0_0_SR',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'POL1_0_SR',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'OC1_0_SR',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SL1_0_SR',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'DT1_0_SR',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'POL0_1_SR',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'OC0_1_SR',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'SL0_1_SR',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'DT0_1_SR',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'POL1_1_SR',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'OC1_1_SR',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'SL1_1_SR',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'DT1_1_SR',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'POL0_2_SR',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'OC0_2_SR',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'SL0_2_SR',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'DT0_2_SR',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'POL1_2_SR',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'OC1_2_SR',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'SL1_2_SR',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'DT1_2_SR',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'POL0_3_SR',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'OC0_3_SR',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SL0_3_SR',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'DT0_3_SR',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'POL1_3_SR',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'OC1_3_SR',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'SL1_3_SR',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'DT1_3_SR',0,4
	.word	930
	.byte	1,0,2,35,0,0,13,12,184,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	120116
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_PS_CTRL_Bits',0,12,232,9,16,4,12
	.byte	'RELBLK',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	6,16,2,35,0,12
	.byte	'PSU_IN_SEL',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'IN_POL',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TIM_SEL',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'SHIFT_SEL',0,4
	.word	930
	.byte	2,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	10,0,2,35,0,0,13,12,224,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	120846
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_CH_DTV_Bits',0,12,196,9,16,4,12
	.byte	'RELRISE',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	6,16,2,35,0,12
	.byte	'RELFALL',0,4
	.word	930
	.byte	10,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	6,0,2,35,0,0,13,12,200,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	121091
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_CH',0,12,246,77,25,4,14
	.byte	'DTV',0
	.word	121212
	.byte	4,2,35,0,0,15,16
	.word	121252
	.byte	16,3,0,10
	.word	121293
	.byte	11
	.byte	'_Ifx_GTM_CDTM_DTM_CH_SR_Bits',0,12,205,9,16,4,12
	.byte	'SL0_0_SR_SR',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SL1_0_SR_SR',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SL0_1_SR_SR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SL1_1_SR_SR',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SL0_2_SR_SR',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SL1_2_SR_SR',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SL0_3_SR_SR',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'SL1_3_SR_SR',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,208,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	121307
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL3_Bits',0,12,171,9,16,4,12
	.byte	'CII0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CIS0',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TSEL0_0',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TSEL1_0',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	4,24,2,35,0,12
	.byte	'CII1',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'CIS1',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TSEL0_1',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TSEL1_1',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'CII2',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'CIS2',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TSEL0_2',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TSEL1_2',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	4,8,2,35,0,12
	.byte	'CII3',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'CIS3',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'TSEL0_3',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'TSEL1_3',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,13,12,192,47,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	121589
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_CDTM_DTM',0,12,136,78,25,64,14
	.byte	'CTRL',0
	.word	118860
	.byte	4,2,35,0,14
	.byte	'CH_CTRL1',0
	.word	119445
	.byte	4,2,35,4,14
	.byte	'CH_CTRL2',0
	.word	120076
	.byte	4,2,35,8,14
	.byte	'CH_CTRL2_SR',0
	.word	120806
	.byte	4,2,35,12,14
	.byte	'PS_CTRL',0
	.word	121051
	.byte	4,2,35,16,14
	.byte	'CH',0
	.word	121302
	.byte	16,2,35,20,14
	.byte	'CH_SR',0
	.word	121549
	.byte	4,2,35,36,14
	.byte	'CH_CTRL3',0
	.word	121999
	.byte	4,2,35,40,14
	.byte	'reserved_2C',0
	.word	33713
	.byte	20,2,35,44,0,15,128,3
	.word	122039
	.byte	16,5,0,10
	.word	122218
	.byte	15,128,5
	.word	531
	.byte	16,255,4,0,11
	.byte	'_Ifx_GTM_CDTM',0,12,162,78,25,128,8,14
	.byte	'DTM',0
	.word	122228
	.byte	128,3,2,35,0,14
	.byte	'reserved_180',0
	.word	122233
	.byte	128,5,3,35,128,3,0,15,128,40
	.word	122244
	.byte	16,4,0,10
	.word	122304
	.byte	15,128,88
	.word	531
	.byte	16,255,87,0,15,128,96
	.word	19165
	.byte	16,5,0,10
	.word	122330
	.byte	15,128,160,1
	.word	531
	.byte	16,255,159,1,0,11
	.byte	'_Ifx_GTM_MCS_CH_R_Bits',0,12,182,31,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,176,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	122358
	.byte	4,2,35,0,0,15,32
	.word	122427
	.byte	16,7,0,11
	.byte	'_Ifx_GTM_MCS_CH_CTRL_Bits',0,12,234,30,16,4,12
	.byte	'EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ERR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'CY',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'Z',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'V',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'N',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'CAT',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'CWT',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'SAT',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	5,16,2,35,0,12
	.byte	'SP_CNT',0,4
	.word	930
	.byte	3,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	13,0,2,35,0,0,13,12,240,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	122476
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_ACB_Bits',0,12,193,30,16,4,12
	.byte	'ACB0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ACB1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ACB2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ACB3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ACB4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,13,12,224,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	122777
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_CTRG_Bits',0,12,204,30,16,4,12
	.byte	'TRG0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TRG5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TRG6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TRG7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TRG8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TRG9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TRG10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TRG11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TRG12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TRG13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TRG14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TRG15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TRG16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TRG17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TRG18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TRG19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TRG20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TRG21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TRG22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TRG23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,232,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	122951
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_STRG_Bits',0,12,189,31,16,4,12
	.byte	'TRG0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TRG3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TRG4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TRG5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TRG6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TRG7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TRG8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TRG9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TRG10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'TRG11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'TRG12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'TRG13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'TRG14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'TRG15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'TRG16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'TRG17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'TRG18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'TRG19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'TRG20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'TRG21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'TRG22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'TRG23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,13,12,184,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	123445
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_MHB_Bits',0,12,168,31,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,160,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	123939
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_PC_Bits',0,12,175,31,16,4,12
	.byte	'PC',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,168,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	124049
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,12,159,31,16,4,12
	.byte	'MCS_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'STK_ERR_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ERR_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,13,12,152,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	124157
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,12,134,31,16,4,12
	.byte	'MCS_IRQ_EN',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'STK_ERR_IRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ERR_IRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,13,12,128,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	124319
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,12,143,31,16,4,12
	.byte	'TRG_MCS_IRQ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TRG_STK_ERR_IRQ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TRG_ERR_IRQ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,13,12,136,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	124486
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,12,152,31,16,4,12
	.byte	'IRQ_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,13,12,144,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	124661
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH_IRQ',0,12,168,79,25,16,14
	.byte	'NOTIFY',0
	.word	124279
	.byte	4,2,35,0,14
	.byte	'EN',0
	.word	124446
	.byte	4,2,35,4,14
	.byte	'FORCINT',0
	.word	124621
	.byte	4,2,35,8,14
	.byte	'MODE',0
	.word	124740
	.byte	4,2,35,12,0,10
	.word	124780
	.byte	11
	.byte	'_Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,12,253,30,16,4,12
	.byte	'MCS_EIRQ_EN0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'STK_ERR_EIRQ_EN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ERR_EIRQ_EN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,13,12,248,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	124871
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CH',0,12,189,79,25,88,14
	.byte	'R',0
	.word	122467
	.byte	32,2,35,0,14
	.byte	'CTRL',0
	.word	122737
	.byte	4,2,35,32,14
	.byte	'ACB',0
	.word	122911
	.byte	4,2,35,36,14
	.byte	'CTRG',0
	.word	123405
	.byte	4,2,35,40,14
	.byte	'STRG',0
	.word	123899
	.byte	4,2,35,44,14
	.byte	'reserved_30',0
	.word	5246
	.byte	12,2,35,48,14
	.byte	'MHB',0
	.word	124009
	.byte	4,2,35,60,14
	.byte	'PC',0
	.word	124117
	.byte	4,2,35,64,14
	.byte	'IRQ',0
	.word	124866
	.byte	16,2,35,68,14
	.byte	'EIRQ_EN',0
	.word	125003
	.byte	4,2,35,84,0,10
	.word	125043
	.byte	11
	.byte	'_Ifx_GTM_MCS_REG_PROT_Bits',0,12,137,32,16,4,12
	.byte	'WPROT0',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'WPROT1',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'WPROT2',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'WPROT3',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'WPROT4',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'WPROT5',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'WPROT6',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'WPROT7',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,13,12,216,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	125213
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CTRL_STAT_Bits',0,12,219,31,16,4,12
	.byte	'SCD_MODE',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	6,24,2,35,0,12
	.byte	'SCD_CH',0,4
	.word	930
	.byte	4,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'RAM_RST',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'HLT_SP_OFL',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	2,12,2,35,0,12
	.byte	'ERR_SRC_ID',0,4
	.word	930
	.byte	3,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN_TIM_FOUT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN_XOREG',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'HLT_AEIM_ERR',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	5,0,2,35,0,0,13,12,192,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	125454
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_RESET_Bits',0,12,151,32,16,4,12
	.byte	'RST0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'RST1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'RST2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'RST3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'RST4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'RST5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'RST6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'RST7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,224,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	125811
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CAT_Bits',0,12,179,30,16,4,12
	.byte	'CAT0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CAT1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'CAT2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'CAT3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'CAT4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'CAT5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CAT6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'CAT7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,216,59,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	126032
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_CWT_Bits',0,12,237,31,16,4,12
	.byte	'CWT0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CWT1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'CWT2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'CWT3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'CWT4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'CWT5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CWT6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'CWT7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,200,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	126251
	.byte	4,2,35,0,0,11
	.byte	'_Ifx_GTM_MCS_ERR_Bits',0,12,251,31,16,4,12
	.byte	'ERR0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ERR1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'ERR2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'ERR3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'ERR4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ERR5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'ERR6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'ERR7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,13,12,208,60,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	126470
	.byte	4,2,35,0,0,10
	.word	125043
	.byte	15,40
	.word	531
	.byte	16,39,0,10
	.word	125043
	.byte	10
	.word	125043
	.byte	10
	.word	125043
	.byte	10
	.word	125043
	.byte	10
	.word	125043
	.byte	10
	.word	125043
	.byte	15,168,24
	.word	531
	.byte	16,167,24,0,11
	.byte	'_Ifx_GTM_MCS',0,12,216,79,25,128,32,14
	.byte	'CH0',0
	.word	125208
	.byte	88,2,35,0,14
	.byte	'reserved_58',0
	.word	4906
	.byte	8,2,35,88,14
	.byte	'REG_PROT',0
	.word	125414
	.byte	4,2,35,96,14
	.byte	'CTRL_STAT',0
	.word	125771
	.byte	4,2,35,100,14
	.byte	'RESET',0
	.word	125992
	.byte	4,2,35,104,14
	.byte	'CAT',0
	.word	126211
	.byte	4,2,35,108,14
	.byte	'CWT',0
	.word	126430
	.byte	4,2,35,112,14
	.byte	'reserved_74',0
	.word	4906
	.byte	8,2,35,116,14
	.byte	'ERR',0
	.word	126649
	.byte	4,2,35,124,14
	.byte	'CH1',0
	.word	126689
	.byte	88,3,35,128,1,14
	.byte	'reserved_D8',0
	.word	126694
	.byte	40,3,35,216,1,14
	.byte	'CH2',0
	.word	126703
	.byte	88,3,35,128,2,14
	.byte	'reserved_158',0
	.word	126694
	.byte	40,3,35,216,2,14
	.byte	'CH3',0
	.word	126708
	.byte	88,3,35,128,3,14
	.byte	'reserved_1D8',0
	.word	126694
	.byte	40,3,35,216,3,14
	.byte	'CH4',0
	.word	126713
	.byte	88,3,35,128,4,14
	.byte	'reserved_258',0
	.word	126694
	.byte	40,3,35,216,4,14
	.byte	'CH5',0
	.word	126718
	.byte	88,3,35,128,5,14
	.byte	'reserved_2D8',0
	.word	126694
	.byte	40,3,35,216,5,14
	.byte	'CH6',0
	.word	126723
	.byte	88,3,35,128,6,14
	.byte	'reserved_358',0
	.word	126694
	.byte	40,3,35,216,6,14
	.byte	'CH7',0
	.word	126728
	.byte	88,3,35,128,7,14
	.byte	'reserved_3D8',0
	.word	126733
	.byte	168,24,3,35,216,7,0,15,128,160,1
	.word	126744
	.byte	16,4,0,10
	.word	127170
	.byte	15,128,224,2
	.word	531
	.byte	16,255,223,2,0,11
	.byte	'_Ifx_GTM',0,12,128,80,25,128,128,64,14
	.byte	'REV',0
	.word	23994
	.byte	4,2,35,0,14
	.byte	'RST',0
	.word	24155
	.byte	4,2,35,4,14
	.byte	'CTRL',0
	.word	24368
	.byte	4,2,35,8,14
	.byte	'AEI_ADDR_XPT',0
	.word	24503
	.byte	4,2,35,12,14
	.byte	'IRQ',0
	.word	25898
	.byte	16,2,35,16,14
	.byte	'EIRQ_EN',0
	.word	26234
	.byte	4,2,35,32,14
	.byte	'HW_CONF',0
	.word	26818
	.byte	4,2,35,36,14
	.byte	'CFG',0
	.word	26927
	.byte	4,2,35,40,14
	.byte	'AEI_STA_XPT',0
	.word	27055
	.byte	4,2,35,44,14
	.byte	'BRIDGE',0
	.word	27824
	.byte	12,2,35,48,14
	.byte	'MCS_AEM_DIS',0
	.word	28127
	.byte	4,2,35,60,14
	.byte	'AUX_IN_SRC',0
	.word	28689
	.byte	24,2,35,64,14
	.byte	'reserved_58',0
	.word	3086
	.byte	4,2,35,88,14
	.byte	'EXT_CAP_EN',0
	.word	28847
	.byte	24,2,35,92,14
	.byte	'reserved_74',0
	.word	5246
	.byte	12,2,35,116,14
	.byte	'OUT',0
	.word	29259
	.byte	48,3,35,128,1,14
	.byte	'CLS_CLK_CFG',0
	.word	29602
	.byte	4,3,35,176,1,14
	.byte	'reserved_B4',0
	.word	29642
	.byte	76,3,35,180,1,14
	.byte	'TBU',0
	.word	31325
	.byte	44,3,35,128,2,14
	.byte	'reserved_12C',0
	.word	31330
	.byte	84,3,35,172,2,14
	.byte	'MON',0
	.word	33797
	.byte	52,3,35,128,3,14
	.byte	'reserved_1B4',0
	.word	29642
	.byte	76,3,35,180,3,14
	.byte	'CMP',0
	.word	37137
	.byte	24,3,35,128,4,14
	.byte	'reserved_218',0
	.word	37142
	.byte	104,3,35,152,4,14
	.byte	'ARU',0
	.word	40946
	.byte	128,1,3,35,128,5,14
	.byte	'CMU',0
	.word	42784
	.byte	80,3,35,128,6,14
	.byte	'reserved_350',0
	.word	42789
	.byte	176,1,3,35,208,6,14
	.byte	'BRC',0
	.word	45472
	.byte	120,3,35,128,8,14
	.byte	'reserved_478',0
	.word	45477
	.byte	136,3,3,35,248,8,14
	.byte	'ICM',0
	.word	64352
	.byte	172,3,3,35,128,12,14
	.byte	'reserved_7AC',0
	.word	31330
	.byte	84,3,35,172,15,14
	.byte	'SPE',0
	.word	67177
	.byte	128,2,3,35,128,16,14
	.byte	'reserved_900',0
	.word	67182
	.byte	128,12,3,35,128,18,14
	.byte	'MAP_CTRL',0
	.word	67592
	.byte	4,3,35,128,30,14
	.byte	'reserved_F04',0
	.word	67632
	.byte	60,3,35,132,30,14
	.byte	'MCFG_CTRL',0
	.word	67890
	.byte	4,3,35,192,30,14
	.byte	'reserved_F44',0
	.word	67930
	.byte	188,1,3,35,196,30,14
	.byte	'TIM',0
	.word	72686
	.byte	128,96,3,35,128,32,14
	.byte	'reserved_4000',0
	.word	72691
	.byte	128,128,1,4,35,128,128,1,14
	.byte	'TOM',0
	.word	78170
	.byte	128,48,4,35,128,128,2,14
	.byte	'reserved_9800',0
	.word	78175
	.byte	128,208,3,4,35,128,176,2,14
	.byte	'PSM',0
	.word	82112
	.byte	128,128,1,4,35,128,128,6,14
	.byte	'reserved_1C000',0
	.word	82117
	.byte	128,128,3,4,35,128,128,7,14
	.byte	'DPLL',0
	.word	106165
	.byte	128,128,2,4,35,128,128,10,14
	.byte	'reserved_30000',0
	.word	106170
	.byte	128,250,27,4,35,128,128,12,14
	.byte	'CLC',0
	.word	106300
	.byte	4,4,35,128,250,39,14
	.byte	'RESET_CLR',0
	.word	106408
	.byte	4,4,35,132,250,39,14
	.byte	'RESET1',0
	.word	106532
	.byte	4,4,35,136,250,39,14
	.byte	'RESET2',0
	.word	106637
	.byte	4,4,35,140,250,39,14
	.byte	'ACCEN0',0
	.word	107206
	.byte	4,4,35,144,250,39,14
	.byte	'ACCEN1',0
	.word	107295
	.byte	4,4,35,148,250,39,14
	.byte	'OCDS',0
	.word	109043
	.byte	36,4,35,152,250,39,14
	.byte	'reserved_9FD3C',0
	.word	3086
	.byte	4,4,35,188,250,39,14
	.byte	'TIMINSEL',0
	.word	109262
	.byte	24,4,35,192,250,39,14
	.byte	'reserved_9FD58',0
	.word	4906
	.byte	8,4,35,216,250,39,14
	.byte	'TOUTSEL',0
	.word	109468
	.byte	76,4,35,224,250,39,14
	.byte	'reserved_9FDAC',0
	.word	31330
	.byte	84,4,35,172,251,39,14
	.byte	'DSADCINSEL',0
	.word	109693
	.byte	24,4,35,128,252,39,14
	.byte	'reserved_9FE18',0
	.word	4906
	.byte	8,4,35,152,252,39,14
	.byte	'DSADC',0
	.word	109964
	.byte	32,4,35,160,252,39,14
	.byte	'ADCTRIG',0
	.word	110392
	.byte	40,4,35,192,252,39,14
	.byte	'reserved_9FE68',0
	.word	4906
	.byte	8,4,35,232,252,39,14
	.byte	'DXOUTCON',0
	.word	110529
	.byte	4,4,35,240,252,39,14
	.byte	'TRIGOUT',0
	.word	110797
	.byte	20,4,35,244,252,39,14
	.byte	'reserved_9FE88',0
	.word	33713
	.byte	20,4,35,136,253,39,14
	.byte	'INTOUT',0
	.word	110912
	.byte	20,4,35,156,253,39,14
	.byte	'reserved_9FEB0',0
	.word	33713
	.byte	20,4,35,176,253,39,14
	.byte	'MCSTRIGOUTSEL',0
	.word	111112
	.byte	4,4,35,196,253,39,14
	.byte	'MCSINTSTAT',0
	.word	111291
	.byte	4,4,35,200,253,39,14
	.byte	'MCSINTCLR',0
	.word	111464
	.byte	4,4,35,204,253,39,14
	.byte	'DXINCON',0
	.word	111733
	.byte	4,4,35,208,253,39,14
	.byte	'DATAIN',0
	.word	111857
	.byte	20,4,35,212,253,39,14
	.byte	'reserved_9FEE8',0
	.word	4277
	.byte	24,4,35,232,253,39,14
	.byte	'MSC',0
	.word	114062
	.byte	168,1,4,35,128,254,39,14
	.byte	'reserved_9FFA8',0
	.word	114067
	.byte	36,4,35,168,255,39,14
	.byte	'PSI5OUTSEL',0
	.word	114227
	.byte	4,4,35,204,255,39,14
	.byte	'PSI5SOUTSEL',0
	.word	114428
	.byte	4,4,35,208,255,39,14
	.byte	'LCDCDCOUTSEL',0
	.word	114539
	.byte	4,4,35,212,255,39,14
	.byte	'DTMAUXINSEL',0
	.word	114794
	.byte	4,4,35,216,255,39,14
	.byte	'CANOUTSEL0',0
	.word	114994
	.byte	4,4,35,220,255,39,14
	.byte	'CANOUTSEL1',0
	.word	115153
	.byte	4,4,35,224,255,39,14
	.byte	'reserved_9FFE4',0
	.word	115193
	.byte	156,192,16,4,35,228,255,39,14
	.byte	'CCM',0
	.word	118639
	.byte	128,24,4,35,128,192,56,14
	.byte	'reserved_E2C00',0
	.word	118644
	.byte	128,40,4,35,128,216,56,14
	.byte	'CDTM',0
	.word	122314
	.byte	128,40,4,35,128,128,57,14
	.byte	'reserved_E5400',0
	.word	122319
	.byte	128,88,4,35,128,168,57,14
	.byte	'ATOM',0
	.word	122340
	.byte	128,96,4,35,128,128,58,14
	.byte	'reserved_EB000',0
	.word	122345
	.byte	128,160,1,4,35,128,224,58,14
	.byte	'MCS',0
	.word	127181
	.byte	128,160,1,4,35,128,128,60,14
	.byte	'reserved_F5000',0
	.word	127186
	.byte	128,224,2,4,35,128,160,61,0,10
	.word	127199
	.byte	3
	.word	129052
	.byte	10
	.word	122039
	.byte	3
	.word	129062
	.byte	17,13,189,2,9,1,18
	.byte	'IfxGtm_Dtm_Ch_none',0,127,18
	.byte	'IfxGtm_Dtm_Ch_0',0,0,18
	.byte	'IfxGtm_Dtm_Ch_1',0,1,18
	.byte	'IfxGtm_Dtm_Ch_2',0,2,18
	.byte	'IfxGtm_Dtm_Ch_3',0,3,0,31,22,118,9,52,14
	.byte	'base',0
	.word	23759
	.byte	12,2,35,0,14
	.byte	'gtm',0
	.word	129057
	.byte	4,2,35,12,14
	.byte	'atom',0
	.word	19498
	.byte	4,2,35,16,14
	.byte	'agc',0
	.word	22335
	.byte	4,2,35,20,14
	.byte	'atomIndex',0
	.word	22776
	.byte	1,2,35,24,14
	.byte	'timerChannel',0
	.word	19503
	.byte	1,2,35,25,14
	.byte	'triggerChannel',0
	.word	19503
	.byte	1,2,35,26,14
	.byte	'channelsMask',0
	.word	1082
	.byte	2,2,35,28,14
	.byte	'offset',0
	.word	9849
	.byte	4,2,35,30,14
	.byte	'dtm',0
	.word	129067
	.byte	4,2,35,36,14
	.byte	'dtmChannel',0
	.word	129072
	.byte	1,2,35,40,14
	.byte	'agcDisableUpdate',0
	.word	9849
	.byte	4,2,35,42,14
	.byte	'agcApplyUpdate',0
	.word	9849
	.byte	4,2,35,46,0
.L347:
	.byte	3
	.word	129172
	.byte	32
	.byte	'IfxGtm_Atom_Timer_addToChannelMask',0,22,182,1,17,1,1,1,1,5
	.byte	'driver',0,22,182,1,71
	.word	129418
	.byte	5
	.byte	'channel',0,22,182,1,94
	.word	19503
	.byte	0,35
	.byte	'IfxGtm_Atom_Timer_stdIfTimerInit',0,22,148,2,20
	.word	531
	.byte	1,1,1,1,5
	.byte	'stdif',0,22,148,2,69
	.word	10922
	.byte	5
	.byte	'driver',0,22,148,2,95
	.word	129418
	.byte	0
.L366:
	.byte	17,18,175,1,9,1,18
	.byte	'Ifx_Pwm_Mode_centerAligned',0,0,18
	.byte	'Ifx_Pwm_Mode_centerAlignedInverted',0,1,18
	.byte	'Ifx_Pwm_Mode_leftAligned',0,2,18
	.byte	'Ifx_Pwm_Mode_rightAligned',0,3,18
	.byte	'Ifx_Pwm_Mode_off',0,4,18
	.byte	'Ifx_Pwm_Mode_init',0,5,18
	.byte	'Ifx_Pwm_Mode_count',0,6,0,7
	.byte	'char',0,1,6,31,23,128,1,9,20,14
	.byte	'deadtime',0
	.word	9849
	.byte	4,2,35,0,14
	.byte	'minPulse',0
	.word	9849
	.byte	4,2,35,4,14
	.byte	'maxPulse',0
	.word	9849
	.byte	4,2,35,8,14
	.byte	'mode',0
	.word	129579
	.byte	1,2,35,12,14
	.byte	'setMode',0
	.word	129767
	.byte	1,2,35,13,14
	.byte	'ccxActiveState',0
	.word	20348
	.byte	1,2,35,14,14
	.byte	'coutxActiveState',0
	.word	20348
	.byte	1,2,35,15,14
	.byte	'inverted',0
	.word	531
	.byte	1,2,35,16,14
	.byte	'channelCount',0
	.word	531
	.byte	1,2,35,17,0,3
	.word	.L649-.L161
	.byte	3
	.word	9849
	.byte	22,1,1,21
	.word	129957
	.byte	21
	.word	129962
	.byte	0,3
	.word	129967
	.byte	19
	.byte	'IfxGtm_Atom_PwmHl_Update',0,23,114,36
	.word	129981
	.byte	22,1,1,21
	.word	129957
	.byte	21
	.word	129962
	.byte	21
	.word	129962
	.byte	0,3
	.word	130019
	.byte	19
	.byte	'IfxGtm_Atom_PwmHl_UpdateShift',0,23,116,36
	.word	130038
	.byte	3
	.word	232
	.byte	22,1,1,21
	.word	129957
	.byte	21
	.word	130081
	.byte	21
	.word	130081
	.byte	0,3
	.word	130086
	.byte	19
	.byte	'IfxGtm_Atom_PwmHl_UpdatePulse',0,23,118,36
	.word	130105
	.byte	15,8
	.word	19503
	.byte	16,7,0,3
	.word	19503
.L649:
	.byte	11
	.byte	'IfxGtm_Atom_PwmHl_s',0,23,171,1,8,68,14
	.byte	'base',0
	.word	129775
	.byte	20,2,35,0,14
	.byte	'timer',0
	.word	129418
	.byte	4,2,35,20,14
	.byte	'update',0
	.word	129986
	.byte	4,2,35,24,14
	.byte	'updateAndShift',0
	.word	130043
	.byte	4,2,35,28,14
	.byte	'updatePulse',0
	.word	130110
	.byte	4,2,35,32,14
	.byte	'atom',0
	.word	19498
	.byte	4,2,35,36,14
	.byte	'agc',0
	.word	22335
	.byte	4,2,35,40,14
	.byte	'ccx',0
	.word	130148
	.byte	8,2,35,44,14
	.byte	'coutx',0
	.word	130148
	.byte	8,2,35,52,14
	.byte	'ccxTemp',0
	.word	130157
	.byte	4,2,35,60,14
	.byte	'coutxTemp',0
	.word	130157
	.byte	4,2,35,64,0
.L338:
	.byte	3
	.word	130162
	.byte	3
	.word	129967
	.byte	3
	.word	130019
	.byte	3
	.word	130086
	.byte	19
	.byte	'IfxGtm_Atom_ToutMapP',0,21,121,30
	.word	23472
	.byte	25
	.word	130390
	.byte	3
	.word	130419
	.byte	31,23,147,1,9,36,14
	.byte	'base',0
	.word	21332
	.byte	16,2,35,0,14
	.byte	'timer',0
	.word	129418
	.byte	4,2,35,16,14
	.byte	'atom',0
	.word	22776
	.byte	1,2,35,20,14
	.byte	'ccx',0
	.word	130424
	.byte	4,2,35,24,14
	.byte	'coutx',0
	.word	130424
	.byte	4,2,35,28,14
	.byte	'initPins',0
	.word	531
	.byte	1,2,35,32,0,25
	.word	130429
.L340:
	.byte	3
	.word	130525
	.byte	25
	.word	23369
	.byte	3
	.word	130535
.L355:
	.byte	15,32
	.word	9849
	.byte	16,7,0
.L358:
	.byte	3
	.word	130429
.L381:
	.byte	3
	.word	129775
.L389:
	.byte	3
	.word	9849
.L397:
	.byte	3
	.word	232
.L402:
	.byte	3
	.word	531
	.byte	19
	.byte	'IfxStdIf_PwmHl_SetDeadtime',0,19,86,19
	.word	10010
	.byte	19
	.byte	'IfxStdIf_PwmHl_GetDeadtime',0,19,94,19
	.word	9808
	.byte	19
	.byte	'IfxStdIf_PwmHl_GetDeadtimeTick',0,19,102,19
	.word	9808
	.byte	19
	.byte	'IfxStdIf_PwmHl_SetMinPulse',0,19,109,19
	.word	10010
	.byte	19
	.byte	'IfxStdIf_PwmHl_GetMinPulse',0,19,117,19
	.word	9808
	.byte	20
	.word	129579
	.byte	1,1,21
	.word	438
	.byte	0,3
	.word	130758
	.byte	19
	.byte	'IfxStdIf_PwmHl_GetMode',0,19,125,24
	.word	130771
	.byte	20
	.word	531
	.byte	1,1,21
	.word	438
	.byte	21
	.word	129579
	.byte	0,3
	.word	130807
	.byte	19
	.byte	'IfxStdIf_PwmHl_SetMode',0,19,133,1,19
	.word	130825
	.byte	22,1,1,21
	.word	438
	.byte	21
	.word	129962
	.byte	0,3
	.word	130862
	.byte	19
	.byte	'IfxStdIf_PwmHl_SetOnTime',0,19,140,1,16
	.word	130876
	.byte	22,1,1,21
	.word	438
	.byte	21
	.word	129962
	.byte	21
	.word	129962
	.byte	0,3
	.word	130915
	.byte	19
	.byte	'IfxStdIf_PwmHl_SetOnTimeAndShift',0,19,148,1,16
	.word	130934
	.byte	22,1,1,21
	.word	438
	.byte	21
	.word	130081
	.byte	21
	.word	130081
	.byte	0,3
	.word	130981
	.byte	19
	.byte	'IfxStdIf_PwmHl_SetPulse',0,19,156,1,16
	.word	131000
	.byte	3
	.word	531
	.byte	22,1,1,21
	.word	438
	.byte	21
	.word	131038
	.byte	21
	.word	131038
	.byte	0,3
	.word	131043
	.byte	19
	.byte	'IfxStdIf_PwmHl_SetupChannels',0,19,175,1,16
	.word	131062
	.byte	11
	.byte	'IfxStdIf_PwmHl_',0,19,179,1,8,116,14
	.byte	'driver',0
	.word	9762
	.byte	4,2,35,0,14
	.byte	'setDeadtime',0
	.word	130579
	.byte	4,2,35,4,14
	.byte	'getDeadtime',0
	.word	130614
	.byte	4,2,35,8,14
	.byte	'getDeadtimeTick',0
	.word	130649
	.byte	4,2,35,12,14
	.byte	'setMinPulse',0
	.word	130688
	.byte	4,2,35,16,14
	.byte	'getMinPulse',0
	.word	130723
	.byte	4,2,35,20,14
	.byte	'getMode',0
	.word	130776
	.byte	4,2,35,24,14
	.byte	'setMode',0
	.word	130830
	.byte	4,2,35,28,14
	.byte	'setOnTime',0
	.word	130881
	.byte	4,2,35,32,14
	.byte	'setOnTimeAndShift',0
	.word	130939
	.byte	4,2,35,36,14
	.byte	'setPulse',0
	.word	131005
	.byte	4,2,35,40,14
	.byte	'setupChannels',0
	.word	131067
	.byte	4,2,35,44,14
	.byte	'timer',0
	.word	10543
	.byte	68,2,35,48,0
.L406:
	.byte	3
	.word	131105
	.byte	3
	.word	9992
	.byte	3
	.word	9795
	.byte	3
	.word	9795
	.byte	3
	.word	9992
	.byte	3
	.word	9795
	.byte	3
	.word	130758
	.byte	3
	.word	130807
	.byte	3
	.word	130862
	.byte	3
	.word	130915
	.byte	3
	.word	130981
	.byte	3
	.word	131043
	.byte	35
	.byte	'memset',0,24,56,17
	.word	438
	.byte	1,1,1,1,36,24,56,33
	.word	438
	.byte	36,24,56,36
	.word	524
	.byte	36,24,56,41
	.word	334
	.byte	0,29
	.word	20399
	.byte	30
	.word	20447
	.byte	6,0,37
	.byte	'__INDIRECT__',0,17,1,1,1,1,1,7
	.byte	'short int',0,2,5,19
	.byte	'__wchar_t',0,17,1,1
	.word	131525
	.byte	19
	.byte	'__size_t',0,17,1,1
	.word	334
	.byte	19
	.byte	'__ptrdiff_t',0,17,1,1
	.word	524
	.byte	38,1,3
	.word	131593
	.byte	19
	.byte	'__codeptr',0,17,1,1
	.word	131595
	.byte	19
	.byte	'size_t',0,25,24,25
	.word	334
	.byte	19
	.byte	'boolean',0,26,104,29
	.word	531
	.byte	19
	.byte	'uint8',0,26,108,29
	.word	531
	.byte	19
	.byte	'uint16',0,26,112,29
	.word	1082
	.byte	19
	.byte	'uint32',0,26,116,29
	.word	9849
	.byte	19
	.byte	'uint64',0,26,121,29
	.word	412
	.byte	19
	.byte	'sint8',0,26,125,29
	.word	129767
	.byte	19
	.byte	'sint16',0,26,129,1,29
	.word	131525
	.byte	7
	.byte	'long int',0,4,5,19
	.byte	'sint32',0,26,134,1,29
	.word	131738
	.byte	7
	.byte	'long long int',0,8,5,19
	.byte	'sint64',0,26,141,1,29
	.word	131766
	.byte	19
	.byte	'float32',0,26,170,1,29
	.word	232
	.byte	19
	.byte	'pvoid',0,18,54,28
	.word	438
	.byte	19
	.byte	'Ifx_TickTime',0,18,76,28
	.word	131766
	.byte	19
	.byte	'Ifx_Priority',0,18,100,16
	.word	1082
	.byte	19
	.byte	'Ifx_TimerValue',0,18,101,16
	.word	9849
	.byte	19
	.byte	'Ifx_ActiveState',0,18,117,3
	.word	20348
	.byte	17,18,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,19
	.byte	'Ifx_RxSel',0,18,137,1,3
	.word	131919
	.byte	19
	.byte	'Ifx_Pwm_Mode',0,18,184,1,3
	.word	129579
	.byte	17,27,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,0,19
	.byte	'IfxSrc_Tos',0,27,72,3
	.word	132078
	.byte	19
	.byte	'Ifx_UReg_8Bit',0,28,96,24
	.word	531
	.byte	19
	.byte	'Ifx_UReg_32Bit',0,28,98,24
	.word	334
	.byte	19
	.byte	'Ifx_SReg_32Bit',0,28,101,24
	.word	524
	.byte	19
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	548
	.byte	19
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	838
	.byte	11
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,14
	.byte	'SB',0
	.word	838
	.byte	4,2,35,0,0,10
	.word	132289
	.byte	19
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	132324
	.byte	15,12
	.word	132289
	.byte	16,2,0,10
	.word	132353
	.byte	11
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,12,14
	.byte	'CPU',0
	.word	132362
	.byte	12,2,35,0,0,10
	.word	132367
	.byte	19
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	132400
	.byte	15,8
	.word	838
	.byte	16,1,0,11
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,146,1,25,8,14
	.byte	'SR',0
	.word	132426
	.byte	8,2,35,0,0,10
	.word	132435
	.byte	19
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,149,1,3
	.word	132481
	.byte	10
	.word	132435
	.byte	11
	.byte	'_Ifx_SRC_CERBERUS',0,4,164,1,25,8,14
	.byte	'CERBERUS',0
	.word	132521
	.byte	8,2,35,0,0,10
	.word	132526
	.byte	19
	.byte	'Ifx_SRC_CERBERUS',0,4,167,1,3
	.word	132569
	.byte	11
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,182,1,25,12,14
	.byte	'TX',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'RX',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'ERR',0
	.word	838
	.byte	4,2,35,8,0,10
	.word	132600
	.byte	19
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,187,1,3
	.word	132667
	.byte	15,144,1
	.word	132600
	.byte	16,11,0,10
	.word	132703
	.byte	11
	.byte	'_Ifx_SRC_ASCLIN',0,4,202,1,25,144,1,14
	.byte	'ASCLIN',0
	.word	132713
	.byte	144,1,2,35,0,0,10
	.word	132718
	.byte	19
	.byte	'Ifx_SRC_ASCLIN',0,4,205,1,3
	.word	132759
	.byte	11
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,220,1,25,20,14
	.byte	'TX',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'RX',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'ERR',0
	.word	838
	.byte	4,2,35,8,14
	.byte	'PT',0
	.word	838
	.byte	4,2,35,12,14
	.byte	'U',0
	.word	838
	.byte	4,2,35,16,0,10
	.word	132788
	.byte	19
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,227,1,3
	.word	132874
	.byte	15,100
	.word	132788
	.byte	16,4,0,10
	.word	132906
	.byte	11
	.byte	'_Ifx_SRC_QSPI',0,4,242,1,25,100,14
	.byte	'QSPI',0
	.word	132915
	.byte	100,2,35,0,0,10
	.word	132920
	.byte	19
	.byte	'Ifx_SRC_QSPI',0,4,245,1,3
	.word	132955
	.byte	11
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,132,2,25,4,14
	.byte	'SR',0
	.word	838
	.byte	4,2,35,0,0,10
	.word	132982
	.byte	19
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,135,2,3
	.word	133020
	.byte	15,4
	.word	132982
	.byte	16,0,0,10
	.word	133052
	.byte	11
	.byte	'_Ifx_SRC_HSCT',0,4,150,2,25,4,14
	.byte	'HSCT',0
	.word	133061
	.byte	4,2,35,0,0,10
	.word	133066
	.byte	19
	.byte	'Ifx_SRC_HSCT',0,4,153,2,3
	.word	133101
	.byte	11
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,168,2,25,16,14
	.byte	'COK',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'RDI',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'ERR',0
	.word	838
	.byte	4,2,35,8,14
	.byte	'TRG',0
	.word	838
	.byte	4,2,35,12,0,10
	.word	133128
	.byte	19
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,174,2,3
	.word	133209
	.byte	15,64
	.word	133128
	.byte	16,3,0,10
	.word	133244
	.byte	11
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,189,2,25,68,14
	.byte	'CH',0
	.word	133253
	.byte	64,2,35,0,14
	.byte	'EXI',0
	.word	838
	.byte	4,2,35,64,0,10
	.word	133258
	.byte	19
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,193,2,3
	.word	133309
	.byte	15,68
	.word	133258
	.byte	16,0,0,10
	.word	133341
	.byte	11
	.byte	'_Ifx_SRC_HSSL',0,4,208,2,25,68,14
	.byte	'HSSL',0
	.word	133350
	.byte	68,2,35,0,0,10
	.word	133355
	.byte	19
	.byte	'Ifx_SRC_HSSL',0,4,211,2,3
	.word	133390
	.byte	11
	.byte	'_Ifx_SRC_I2C_I2C',0,4,226,2,25,16,14
	.byte	'DTR',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'ERR',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'P',0
	.word	838
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3086
	.byte	4,2,35,12,0,10
	.word	133417
	.byte	19
	.byte	'Ifx_SRC_I2C_I2C',0,4,232,2,3
	.word	133498
	.byte	15,16
	.word	133417
	.byte	16,0,0,10
	.word	133528
	.byte	11
	.byte	'_Ifx_SRC_I2C',0,4,247,2,25,16,14
	.byte	'I2C',0
	.word	133537
	.byte	16,2,35,0,0,10
	.word	133542
	.byte	19
	.byte	'Ifx_SRC_I2C',0,4,250,2,3
	.word	133575
	.byte	11
	.byte	'_Ifx_SRC_SENT_SENT',0,4,137,3,25,4,14
	.byte	'SR',0
	.word	838
	.byte	4,2,35,0,0,10
	.word	133601
	.byte	19
	.byte	'Ifx_SRC_SENT_SENT',0,4,140,3,3
	.word	133639
	.byte	15,40
	.word	133601
	.byte	16,9,0,10
	.word	133671
	.byte	11
	.byte	'_Ifx_SRC_SENT',0,4,155,3,25,40,14
	.byte	'SENT',0
	.word	133680
	.byte	40,2,35,0,0,10
	.word	133685
	.byte	19
	.byte	'Ifx_SRC_SENT',0,4,158,3,3
	.word	133720
	.byte	15,20
	.word	838
	.byte	16,4,0,11
	.byte	'_Ifx_SRC_MSC_MSC',0,4,173,3,25,20,14
	.byte	'SR',0
	.word	133747
	.byte	20,2,35,0,0,10
	.word	133756
	.byte	19
	.byte	'Ifx_SRC_MSC_MSC',0,4,176,3,3
	.word	133792
	.byte	15,40
	.word	133756
	.byte	16,1,0,10
	.word	133822
	.byte	11
	.byte	'_Ifx_SRC_MSC',0,4,191,3,25,40,14
	.byte	'MSC',0
	.word	133831
	.byte	40,2,35,0,0,10
	.word	133836
	.byte	19
	.byte	'Ifx_SRC_MSC',0,4,194,3,3
	.word	133869
	.byte	15,16
	.word	838
	.byte	16,3,0,11
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,209,3,25,16,14
	.byte	'SR',0
	.word	133895
	.byte	16,2,35,0,0,10
	.word	133904
	.byte	19
	.byte	'Ifx_SRC_CCU6_CCU',0,4,212,3,3
	.word	133941
	.byte	15,32
	.word	133904
	.byte	16,1,0,10
	.word	133972
	.byte	11
	.byte	'_Ifx_SRC_CCU6',0,4,227,3,25,32,14
	.byte	'CCU',0
	.word	133981
	.byte	32,2,35,0,0,10
	.word	133986
	.byte	19
	.byte	'Ifx_SRC_CCU6',0,4,230,3,3
	.word	134020
	.byte	11
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,245,3,25,24,14
	.byte	'CIRQ',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'T2',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'T3',0
	.word	838
	.byte	4,2,35,8,14
	.byte	'T4',0
	.word	838
	.byte	4,2,35,12,14
	.byte	'T5',0
	.word	838
	.byte	4,2,35,16,14
	.byte	'T6',0
	.word	838
	.byte	4,2,35,20,0,10
	.word	134047
	.byte	19
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,253,3,3
	.word	134149
	.byte	15,24
	.word	134047
	.byte	16,0,0,10
	.word	134183
	.byte	11
	.byte	'_Ifx_SRC_GPT12',0,4,140,4,25,24,14
	.byte	'GPT12',0
	.word	134192
	.byte	24,2,35,0,0,10
	.word	134197
	.byte	19
	.byte	'Ifx_SRC_GPT12',0,4,143,4,3
	.word	134234
	.byte	11
	.byte	'_Ifx_SRC_STM_STM',0,4,158,4,25,8,14
	.byte	'SR',0
	.word	132426
	.byte	8,2,35,0,0,10
	.word	134262
	.byte	19
	.byte	'Ifx_SRC_STM_STM',0,4,161,4,3
	.word	134298
	.byte	15,24
	.word	134262
	.byte	16,2,0,10
	.word	134328
	.byte	11
	.byte	'_Ifx_SRC_STM',0,4,176,4,25,24,14
	.byte	'STM',0
	.word	134337
	.byte	24,2,35,0,0,10
	.word	134342
	.byte	19
	.byte	'Ifx_SRC_STM',0,4,179,4,3
	.word	134375
	.byte	11
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,194,4,25,4,14
	.byte	'SR',0
	.word	838
	.byte	4,2,35,0,0,10
	.word	134401
	.byte	19
	.byte	'Ifx_SRC_FCE_FCE0',0,4,197,4,3
	.word	134438
	.byte	10
	.word	134401
	.byte	11
	.byte	'_Ifx_SRC_FCE',0,4,212,4,25,4,14
	.byte	'FCE0',0
	.word	134469
	.byte	4,2,35,0,0,10
	.word	134474
	.byte	19
	.byte	'Ifx_SRC_FCE',0,4,215,4,3
	.word	134508
	.byte	15,128,4
	.word	838
	.byte	16,127,0,11
	.byte	'_Ifx_SRC_DMA_DMA',0,4,230,4,25,176,4,14
	.byte	'ERR',0
	.word	133895
	.byte	16,2,35,0,14
	.byte	'reserved_10',0
	.word	18899
	.byte	32,2,35,16,14
	.byte	'CH',0
	.word	134534
	.byte	128,4,2,35,48,0,10
	.word	134544
	.byte	19
	.byte	'Ifx_SRC_DMA_DMA',0,4,235,4,3
	.word	134616
	.byte	15,176,4
	.word	134544
	.byte	16,0,0,10
	.word	134646
	.byte	11
	.byte	'_Ifx_SRC_DMA',0,4,250,4,25,176,4,14
	.byte	'DMA',0
	.word	134656
	.byte	176,4,2,35,0,0,10
	.word	134661
	.byte	19
	.byte	'Ifx_SRC_DMA',0,4,253,4,3
	.word	134696
	.byte	15,40
	.word	838
	.byte	16,9,0,11
	.byte	'_Ifx_SRC_GETH_GETH',0,4,140,5,25,40,14
	.byte	'SR',0
	.word	134722
	.byte	40,2,35,0,0,10
	.word	134731
	.byte	19
	.byte	'Ifx_SRC_GETH_GETH',0,4,143,5,3
	.word	134769
	.byte	15,40
	.word	134731
	.byte	16,0,0,10
	.word	134801
	.byte	11
	.byte	'_Ifx_SRC_GETH',0,4,158,5,25,40,14
	.byte	'GETH',0
	.word	134810
	.byte	40,2,35,0,0,10
	.word	134815
	.byte	19
	.byte	'Ifx_SRC_GETH',0,4,161,5,3
	.word	134850
	.byte	15,64
	.word	838
	.byte	16,15,0,11
	.byte	'_Ifx_SRC_CAN_CAN',0,4,176,5,25,64,14
	.byte	'INT',0
	.word	134877
	.byte	64,2,35,0,0,10
	.word	134886
	.byte	19
	.byte	'Ifx_SRC_CAN_CAN',0,4,179,5,3
	.word	134923
	.byte	15,128,1
	.word	134886
	.byte	16,1,0,10
	.word	134953
	.byte	11
	.byte	'_Ifx_SRC_CAN',0,4,194,5,25,128,1,14
	.byte	'CAN',0
	.word	134963
	.byte	128,1,2,35,0,0,10
	.word	134968
	.byte	19
	.byte	'Ifx_SRC_CAN',0,4,197,5,3
	.word	135003
	.byte	11
	.byte	'_Ifx_SRC_VADC_G',0,4,212,5,25,16,14
	.byte	'SR0',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'SR1',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'SR2',0
	.word	838
	.byte	4,2,35,8,14
	.byte	'SR3',0
	.word	838
	.byte	4,2,35,12,0,10
	.word	135029
	.byte	19
	.byte	'Ifx_SRC_VADC_G',0,4,218,5,3
	.word	135104
	.byte	11
	.byte	'_Ifx_SRC_VADC_FC',0,4,237,5,25,4,14
	.byte	'SR0',0
	.word	838
	.byte	4,2,35,0,0,10
	.word	135133
	.byte	19
	.byte	'Ifx_SRC_VADC_FC',0,4,240,5,3
	.word	135170
	.byte	15,64
	.word	135029
	.byte	16,3,0,10
	.word	135200
	.byte	10
	.word	135029
	.byte	10
	.word	135029
	.byte	10
	.word	135029
	.byte	10
	.word	135029
	.byte	15,16
	.word	135133
	.byte	16,3,0,10
	.word	135234
	.byte	15,32
	.word	135029
	.byte	16,1,0,10
	.word	135248
	.byte	11
	.byte	'_Ifx_SRC_VADC',0,4,128,6,25,128,2,14
	.byte	'G',0
	.word	135209
	.byte	64,2,35,0,14
	.byte	'reserved_40',0
	.word	72266
	.byte	64,2,35,64,14
	.byte	'G8',0
	.word	135214
	.byte	16,3,35,128,1,14
	.byte	'G9',0
	.word	135219
	.byte	16,3,35,144,1,14
	.byte	'G10',0
	.word	135224
	.byte	16,3,35,160,1,14
	.byte	'G11',0
	.word	135229
	.byte	16,3,35,176,1,14
	.byte	'FC',0
	.word	135243
	.byte	16,3,35,192,1,14
	.byte	'reserved_D0',0
	.word	16430
	.byte	16,3,35,208,1,14
	.byte	'CG',0
	.word	135257
	.byte	32,3,35,224,1,0,10
	.word	135262
	.byte	19
	.byte	'Ifx_SRC_VADC',0,4,139,6,3
	.word	135418
	.byte	11
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,154,6,25,8,14
	.byte	'SRM',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'SRA',0
	.word	838
	.byte	4,2,35,4,0,10
	.word	135445
	.byte	19
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,158,6,3
	.word	135499
	.byte	15,48
	.word	135445
	.byte	16,5,0,10
	.word	135533
	.byte	11
	.byte	'_Ifx_SRC_DSADC',0,4,173,6,25,48,14
	.byte	'DSADC',0
	.word	135542
	.byte	48,2,35,0,0,10
	.word	135547
	.byte	19
	.byte	'Ifx_SRC_DSADC',0,4,176,6,3
	.word	135584
	.byte	11
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,191,6,25,48,14
	.byte	'INT0',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'INT1',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'TINT0',0
	.word	838
	.byte	4,2,35,8,14
	.byte	'TINT1',0
	.word	838
	.byte	4,2,35,12,14
	.byte	'NDAT0',0
	.word	838
	.byte	4,2,35,16,14
	.byte	'NDAT1',0
	.word	838
	.byte	4,2,35,20,14
	.byte	'MBSC0',0
	.word	838
	.byte	4,2,35,24,14
	.byte	'MBSC1',0
	.word	838
	.byte	4,2,35,28,14
	.byte	'OBUSY',0
	.word	838
	.byte	4,2,35,32,14
	.byte	'IBUSY',0
	.word	838
	.byte	4,2,35,36,14
	.byte	'reserved_28',0
	.word	4906
	.byte	8,2,35,40,0,10
	.word	135612
	.byte	19
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,204,6,3
	.word	135807
	.byte	15,48
	.word	135612
	.byte	16,0,0,10
	.word	135839
	.byte	11
	.byte	'_Ifx_SRC_ERAY',0,4,219,6,25,48,14
	.byte	'ERAY',0
	.word	135848
	.byte	48,2,35,0,0,10
	.word	135853
	.byte	19
	.byte	'Ifx_SRC_ERAY',0,4,222,6,3
	.word	135888
	.byte	11
	.byte	'_Ifx_SRC_HSM_HSM',0,4,237,6,25,8,14
	.byte	'HSM',0
	.word	132426
	.byte	8,2,35,0,0,10
	.word	135915
	.byte	19
	.byte	'Ifx_SRC_HSM_HSM',0,4,240,6,3
	.word	135952
	.byte	15,8
	.word	135915
	.byte	16,0,0,10
	.word	135982
	.byte	11
	.byte	'_Ifx_SRC_HSM',0,4,255,6,25,8,14
	.byte	'HSM',0
	.word	135991
	.byte	8,2,35,0,0,10
	.word	135996
	.byte	19
	.byte	'Ifx_SRC_HSM',0,4,130,7,3
	.word	136029
	.byte	11
	.byte	'_Ifx_SRC_SCU',0,4,145,7,25,16,14
	.byte	'SCUERU',0
	.word	133895
	.byte	16,2,35,0,0,10
	.word	136055
	.byte	19
	.byte	'Ifx_SRC_SCU',0,4,148,7,3
	.word	136091
	.byte	11
	.byte	'_Ifx_SRC_PMS_PMS',0,4,163,7,25,4,14
	.byte	'SR',0
	.word	838
	.byte	4,2,35,0,0,10
	.word	136117
	.byte	19
	.byte	'Ifx_SRC_PMS_PMS',0,4,166,7,3
	.word	136153
	.byte	15,16
	.word	136117
	.byte	16,3,0,10
	.word	136183
	.byte	11
	.byte	'_Ifx_SRC_PMS',0,4,181,7,25,16,14
	.byte	'PMS',0
	.word	136192
	.byte	16,2,35,0,0,10
	.word	136197
	.byte	19
	.byte	'Ifx_SRC_PMS',0,4,184,7,3
	.word	136230
	.byte	15,12
	.word	838
	.byte	16,2,0,11
	.byte	'_Ifx_SRC_SMU_SMU',0,4,199,7,25,12,14
	.byte	'SR',0
	.word	136256
	.byte	12,2,35,0,0,10
	.word	136265
	.byte	19
	.byte	'Ifx_SRC_SMU_SMU',0,4,202,7,3
	.word	136301
	.byte	15,12
	.word	136265
	.byte	16,0,0,10
	.word	136331
	.byte	11
	.byte	'_Ifx_SRC_SMU',0,4,217,7,25,12,14
	.byte	'SMU',0
	.word	136340
	.byte	12,2,35,0,0,10
	.word	136345
	.byte	19
	.byte	'Ifx_SRC_SMU',0,4,220,7,3
	.word	136378
	.byte	15,32
	.word	838
	.byte	16,7,0,11
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,235,7,25,32,14
	.byte	'SR',0
	.word	136404
	.byte	32,2,35,0,0,10
	.word	136413
	.byte	19
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,238,7,3
	.word	136451
	.byte	15,32
	.word	136413
	.byte	16,0,0,10
	.word	136483
	.byte	11
	.byte	'_Ifx_SRC_PSI5',0,4,253,7,25,32,14
	.byte	'PSI5',0
	.word	136492
	.byte	32,2,35,0,0,10
	.word	136497
	.byte	19
	.byte	'Ifx_SRC_PSI5',0,4,128,8,3
	.word	136532
	.byte	11
	.byte	'_Ifx_SRC_DAM_DAM',0,4,143,8,25,24,14
	.byte	'LI0',0
	.word	838
	.byte	4,2,35,0,14
	.byte	'RI0',0
	.word	838
	.byte	4,2,35,4,14
	.byte	'LI1',0
	.word	838
	.byte	4,2,35,8,14
	.byte	'RI1',0
	.word	838
	.byte	4,2,35,12,14
	.byte	'DR',0
	.word	838
	.byte	4,2,35,16,14
	.byte	'ERR',0
	.word	838
	.byte	4,2,35,20,0,10
	.word	136559
	.byte	19
	.byte	'Ifx_SRC_DAM_DAM',0,4,151,8,3
	.word	136660
	.byte	15,24
	.word	136559
	.byte	16,0,0,10
	.word	136690
	.byte	11
	.byte	'_Ifx_SRC_DAM',0,4,166,8,25,24,14
	.byte	'DAM',0
	.word	136699
	.byte	24,2,35,0,0,10
	.word	136704
	.byte	19
	.byte	'Ifx_SRC_DAM',0,4,169,8,3
	.word	136737
	.byte	11
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,184,8,25,32,14
	.byte	'SR',0
	.word	136404
	.byte	32,2,35,0,0,10
	.word	136763
	.byte	19
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,187,8,3
	.word	136803
	.byte	15,32
	.word	136763
	.byte	16,0,0,10
	.word	136837
	.byte	11
	.byte	'_Ifx_SRC_PSI5S',0,4,202,8,25,32,14
	.byte	'PSI5S',0
	.word	136846
	.byte	32,2,35,0,0,10
	.word	136851
	.byte	19
	.byte	'Ifx_SRC_PSI5S',0,4,205,8,3
	.word	136888
	.byte	11
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,220,8,25,32,14
	.byte	'SR',0
	.word	136404
	.byte	32,2,35,0,0,10
	.word	136916
	.byte	19
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,223,8,3
	.word	136954
	.byte	15,96
	.word	136916
	.byte	16,2,0,10
	.word	136986
	.byte	11
	.byte	'_Ifx_SRC_GPSR',0,4,238,8,25,96,14
	.byte	'GPSR',0
	.word	136995
	.byte	96,2,35,0,0,10
	.word	137000
	.byte	19
	.byte	'Ifx_SRC_GPSR',0,4,241,8,3
	.word	137035
	.byte	19
	.byte	'Ifx_P_ACCEN0_Bits',0,8,102,3
	.word	8434
	.byte	19
	.byte	'Ifx_P_ACCEN1_Bits',0,8,108,3
	.word	8347
	.byte	19
	.byte	'Ifx_P_ESR_Bits',0,8,130,1,3
	.word	4915
	.byte	19
	.byte	'Ifx_P_ID_Bits',0,8,138,1,3
	.word	2966
	.byte	19
	.byte	'Ifx_P_IN_Bits',0,8,160,1,3
	.word	3962
	.byte	19
	.byte	'Ifx_P_IOCR0_Bits',0,8,173,1,3
	.word	3095
	.byte	19
	.byte	'Ifx_P_IOCR12_Bits',0,8,186,1,3
	.word	3742
	.byte	19
	.byte	'Ifx_P_IOCR4_Bits',0,8,199,1,3
	.word	3310
	.byte	19
	.byte	'Ifx_P_IOCR8_Bits',0,8,212,1,3
	.word	3525
	.byte	19
	.byte	'Ifx_P_LPCR_Bits',0,8,231,1,3
	.word	8009
	.byte	19
	.byte	'Ifx_P_OMCR_Bits',0,8,253,1,3
	.word	7661
	.byte	19
	.byte	'Ifx_P_OMCR0_Bits',0,8,136,2,3
	.word	6648
	.byte	19
	.byte	'Ifx_P_OMCR12_Bits',0,8,146,2,3
	.word	7172
	.byte	19
	.byte	'Ifx_P_OMCR4_Bits',0,8,157,2,3
	.word	6822
	.byte	19
	.byte	'Ifx_P_OMCR8_Bits',0,8,168,2,3
	.word	6996
	.byte	19
	.byte	'Ifx_P_OMR_Bits',0,8,205,2,3
	.word	2395
	.byte	19
	.byte	'Ifx_P_OMSR_Bits',0,8,227,2,3
	.word	7328
	.byte	19
	.byte	'Ifx_P_OMSR0_Bits',0,8,237,2,3
	.word	5985
	.byte	19
	.byte	'Ifx_P_OMSR12_Bits',0,8,248,2,3
	.word	6473
	.byte	19
	.byte	'Ifx_P_OMSR4_Bits',0,8,131,3,3
	.word	6132
	.byte	19
	.byte	'Ifx_P_OMSR8_Bits',0,8,142,3,3
	.word	6301
	.byte	19
	.byte	'Ifx_P_OUT_Bits',0,8,164,3,3
	.word	2079
	.byte	19
	.byte	'Ifx_P_PCSR_Bits',0,8,187,3,3
	.word	5621
	.byte	19
	.byte	'Ifx_P_PDISC_Bits',0,8,209,3,3
	.word	5255
	.byte	19
	.byte	'Ifx_P_PDR0_Bits',0,8,230,3,3
	.word	4286
	.byte	19
	.byte	'Ifx_P_PDR1_Bits',0,8,251,3,3
	.word	4590
	.byte	19
	.byte	'Ifx_P_ACCEN0',0,8,136,4,3
	.word	8961
	.byte	19
	.byte	'Ifx_P_ACCEN1',0,8,144,4,3
	.word	8394
	.byte	19
	.byte	'Ifx_P_ESR',0,8,152,4,3
	.word	5206
	.byte	19
	.byte	'Ifx_P_ID',0,8,160,4,3
	.word	3046
	.byte	19
	.byte	'Ifx_P_IN',0,8,168,4,3
	.word	4237
	.byte	19
	.byte	'Ifx_P_IOCR0',0,8,176,4,3
	.word	3270
	.byte	19
	.byte	'Ifx_P_IOCR12',0,8,184,4,3
	.word	3922
	.byte	19
	.byte	'Ifx_P_IOCR4',0,8,192,4,3
	.word	3485
	.byte	19
	.byte	'Ifx_P_IOCR8',0,8,200,4,3
	.word	3702
	.byte	19
	.byte	'Ifx_P_LPCR',0,8,208,4,3
	.word	8289
	.byte	19
	.byte	'Ifx_P_OMCR',0,8,216,4,3
	.word	7969
	.byte	19
	.byte	'Ifx_P_OMCR0',0,8,224,4,3
	.word	6782
	.byte	19
	.byte	'Ifx_P_OMCR12',0,8,232,4,3
	.word	7288
	.byte	19
	.byte	'Ifx_P_OMCR4',0,8,240,4,3
	.word	6956
	.byte	19
	.byte	'Ifx_P_OMCR8',0,8,248,4,3
	.word	7132
	.byte	19
	.byte	'Ifx_P_OMR',0,8,128,5,3
	.word	2926
	.byte	19
	.byte	'Ifx_P_OMSR',0,8,136,5,3
	.word	7621
	.byte	19
	.byte	'Ifx_P_OMSR0',0,8,144,5,3
	.word	6092
	.byte	19
	.byte	'Ifx_P_OMSR12',0,8,152,5,3
	.word	6608
	.byte	19
	.byte	'Ifx_P_OMSR4',0,8,160,5,3
	.word	6261
	.byte	19
	.byte	'Ifx_P_OMSR8',0,8,168,5,3
	.word	6433
	.byte	19
	.byte	'Ifx_P_OUT',0,8,176,5,3
	.word	2355
	.byte	19
	.byte	'Ifx_P_PCSR',0,8,184,5,3
	.word	5945
	.byte	19
	.byte	'Ifx_P_PDISC',0,8,192,5,3
	.word	5581
	.byte	19
	.byte	'Ifx_P_PDR0',0,8,200,5,3
	.word	4550
	.byte	19
	.byte	'Ifx_P_PDR1',0,8,208,5,3
	.word	4866
	.byte	10
	.word	9001
	.byte	19
	.byte	'Ifx_P',0,8,128,6,3
	.word	138256
	.byte	17,29,254,9,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,19
	.byte	'IfxScu_WDTCON1_IR',0,29,131,10,3
	.word	138276
	.byte	11
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,6,68,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_ACCEN00_Bits',0,6,102,3
	.word	138398
	.byte	11
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,6,105,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_ACCEN01_Bits',0,6,108,3
	.word	138957
	.byte	11
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,6,111,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_ACCEN10_Bits',0,6,145,1,3
	.word	139036
	.byte	11
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,6,148,1,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_ACCEN11_Bits',0,6,151,1,3
	.word	139596
	.byte	11
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,6,154,1,16,4,12
	.byte	'STM0DIS',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'STM1DIS',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'STM2DIS',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	334
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,6,164,1,3
	.word	139677
	.byte	11
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,6,167,1,16,4,12
	.byte	'STMDIV',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'GTMDIV',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'SRIDIV',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'LPDIV',0,1
	.word	531
	.byte	3,1,2,35,1,12
	.byte	'reserved_15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'SPBDIV',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'BBBDIV',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'FSIDIV',0,1
	.word	531
	.byte	2,6,2,35,3,12
	.byte	'FSI2DIV',0,1
	.word	531
	.byte	2,4,2,35,3,12
	.byte	'CLKSEL',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'UP',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_CCUCON0_Bits',0,6,181,1,3
	.word	139903
	.byte	11
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,6,184,1,16,4,12
	.byte	'MCANDIV',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'CLKSELMCAN',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PLL1DIVDIS',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'I2CDIV',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'MSCDIV',0,1
	.word	531
	.byte	4,4,2,35,2,12
	.byte	'CLKSELMSC',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	531
	.byte	2,0,2,35,2,12
	.byte	'QSPIDIV',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'CLKSELQSPI',0,1
	.word	531
	.byte	2,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_CCUCON1_Bits',0,6,199,1,3
	.word	140176
	.byte	11
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,6,202,1,16,4,12
	.byte	'ASCLINFDIV',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'ASCLINSDIV',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'CLKSELASCLINS',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'reserved_14',0,4
	.word	334
	.byte	10,8,2,35,0,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'ERAYPERON',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'reserved_26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'reserved_27',0,1
	.word	531
	.byte	4,1,2,35,3,12
	.byte	'LCK',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_CCUCON2_Bits',0,6,214,1,3
	.word	140502
	.byte	11
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,6,217,1,16,4,12
	.byte	'PLL0MONEN',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PLL1MONEN',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'PLL2MONEN',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'SPBMONEN',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'BACKMONEN',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	3,0,2,35,0,12
	.byte	'PLL0MONTST',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'PLL1MONTST',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'PLL2MONTST',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'SPBMONTST',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'BACKMONTST',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,4
	.word	334
	.byte	11,8,2,35,0,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	6,2,2,35,3,12
	.byte	'UP',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_CCUCON3_Bits',0,6,234,1,3
	.word	140780
	.byte	11
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,6,237,1,16,4,12
	.byte	'LOTHR',0,2
	.word	1082
	.byte	12,4,2,35,0,12
	.byte	'UPTHR',0,4
	.word	334
	.byte	12,8,2,35,0,12
	.byte	'MONEN',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'MONTST',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'reserved_26',0,1
	.word	531
	.byte	4,2,2,35,3,12
	.byte	'UP',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_CCUCON4_Bits',0,6,246,1,3
	.word	141149
	.byte	11
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,6,249,1,16,4,12
	.byte	'GETHDIV',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'MCANHDIV',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'reserved_12',0,4
	.word	334
	.byte	18,2,2,35,0,12
	.byte	'UP',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'LCK',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_CCUCON5_Bits',0,6,129,2,3
	.word	141329
	.byte	11
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,6,132,2,16,4,12
	.byte	'CPU0DIV',0,1
	.word	531
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	334
	.byte	26,0,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON6_Bits',0,6,136,2,3
	.word	141501
	.byte	11
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,6,139,2,16,4,12
	.byte	'CPU1DIV',0,1
	.word	531
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	334
	.byte	26,0,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON7_Bits',0,6,143,2,3
	.word	141601
	.byte	11
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,6,146,2,16,4,12
	.byte	'CPU2DIV',0,1
	.word	531
	.byte	6,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	334
	.byte	26,0,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON8_Bits',0,6,150,2,3
	.word	141701
	.byte	11
	.byte	'_Ifx_SCU_CHIPID_Bits',0,6,153,2,16,4,12
	.byte	'CHREV',0,1
	.word	531
	.byte	6,2,2,35,0,12
	.byte	'CHTEC',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'CHPK',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'CHID',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'EEA',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'UCODE',0,1
	.word	531
	.byte	7,0,2,35,2,12
	.byte	'FSIZE',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'VART',0,1
	.word	531
	.byte	3,1,2,35,3,12
	.byte	'SEC',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_CHIPID_Bits',0,6,164,2,3
	.word	141801
	.byte	11
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,6,167,2,16,4,12
	.byte	'LOWER',0,2
	.word	1082
	.byte	12,4,2,35,0,12
	.byte	'reserved_12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'BGPOK',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'LLU',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'UPPER',0,2
	.word	1082
	.byte	12,4,2,35,2,12
	.byte	'INTEN',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'INT',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'UOF',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,6,179,2,3
	.word	142004
	.byte	11
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,6,182,2,16,4,12
	.byte	'RESULT',0,2
	.word	1082
	.byte	12,4,2,35,0,12
	.byte	'reserved_12',0,4
	.word	334
	.byte	20,0,2,35,0,0,19
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,6,186,2,3
	.word	142236
	.byte	11
	.byte	'_Ifx_SCU_EICON0_Bits',0,6,189,2,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ENDINIT',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EPW',0,4
	.word	930
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_SCU_EICON0_Bits',0,6,195,2,3
	.word	142338
	.byte	11
	.byte	'_Ifx_SCU_EICON1_Bits',0,6,198,2,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	334
	.byte	26,0,2,35,0,0,19
	.byte	'Ifx_SCU_EICON1_Bits',0,6,207,2,3
	.word	142466
	.byte	11
	.byte	'_Ifx_SCU_EICR_Bits',0,6,210,2,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'EXIS0',0,1
	.word	531
	.byte	3,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'FEN0',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'REN0',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'LDEN0',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EIEN0',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'INP0',0,1
	.word	531
	.byte	3,1,2,35,1,12
	.byte	'reserved_15',0,4
	.word	334
	.byte	5,12,2,35,0,12
	.byte	'EXIS1',0,1
	.word	531
	.byte	3,1,2,35,2,12
	.byte	'reserved_23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'FEN1',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'REN1',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'LDEN1',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EIEN1',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'INP1',0,1
	.word	531
	.byte	3,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_EICR_Bits',0,6,229,2,3
	.word	142655
	.byte	11
	.byte	'_Ifx_SCU_EIFILT_Bits',0,6,232,2,16,4,12
	.byte	'FILRQ0A',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'FILRQ5A',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'FILRQ2A',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'FILRQ3A',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'FILRQ0C',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'FILRQ1C',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'FILRQ3C',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'FILRQ2C',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'FILRQ4A',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'FILRQ6A',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'FILRQ1A',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'FILRQ7A',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'FILRQ6D',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'FILRQ4D',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'FILRQ2B',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'FILRQ3B',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'FILRQ7C',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	531
	.byte	7,0,2,35,2,12
	.byte	'FILTDIV',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'DEPTH',0,1
	.word	531
	.byte	4,0,2,35,3,0,19
	.byte	'Ifx_SCU_EIFILT_Bits',0,6,254,2,3
	.word	143019
	.byte	11
	.byte	'_Ifx_SCU_EIFR_Bits',0,6,129,3,16,4,12
	.byte	'INTF0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'INTF1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'INTF2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'INTF3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'INTF4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'INTF5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'INTF6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'INTF7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	334
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_SCU_EIFR_Bits',0,6,140,3,3
	.word	143458
	.byte	11
	.byte	'_Ifx_SCU_EISR_Bits',0,6,143,3,16,4,12
	.byte	'AE',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1082
	.byte	10,0,2,35,0,12
	.byte	'TIM',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_EISR_Bits',0,6,153,3,3
	.word	143669
	.byte	11
	.byte	'_Ifx_SCU_EMSR_Bits',0,6,156,3,16,4,12
	.byte	'POL',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'MODE',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'ENON',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'PSEL',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,2
	.word	1082
	.byte	12,0,2,35,0,12
	.byte	'EMSF',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'SEMSF',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'reserved_18',0,2
	.word	1082
	.byte	14,0,2,35,2,0,19
	.byte	'Ifx_SCU_EMSR_Bits',0,6,166,3,3
	.word	143845
	.byte	11
	.byte	'_Ifx_SCU_EMSSW_Bits',0,6,169,3,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	24,8,2,35,0,12
	.byte	'EMSFM',0,1
	.word	531
	.byte	2,6,2,35,3,12
	.byte	'SEMSFM',0,1
	.word	531
	.byte	2,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,19
	.byte	'Ifx_SCU_EMSSW_Bits',0,6,175,3,3
	.word	144039
	.byte	11
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,178,3,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	7,1,2,35,0,12
	.byte	'EDCON',0,2
	.word	1082
	.byte	2,7,2,35,0,12
	.byte	'reserved_9',0,4
	.word	334
	.byte	23,0,2,35,0,0,19
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,183,3,3
	.word	144174
	.byte	11
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,6,186,3,16,4,12
	.byte	'ARI',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'ARC',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_SCU_ESROCFG_Bits',0,6,191,3,3
	.word	144310
	.byte	11
	.byte	'_Ifx_SCU_EXTCON_Bits',0,6,194,3,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'SEL0',0,1
	.word	531
	.byte	4,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1082
	.byte	10,0,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'NSEL',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'SEL1',0,1
	.word	531
	.byte	4,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	531
	.byte	2,0,2,35,2,12
	.byte	'DIV1',0,1
	.word	531
	.byte	8,0,2,35,3,0,19
	.byte	'Ifx_SCU_EXTCON_Bits',0,6,205,3,3
	.word	144421
	.byte	11
	.byte	'_Ifx_SCU_FDR_Bits',0,6,208,3,16,4,12
	.byte	'STEP',0,2
	.word	1082
	.byte	10,6,2,35,0,12
	.byte	'reserved_10',0,1
	.word	531
	.byte	4,2,2,35,1,12
	.byte	'DM',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'RESULT',0,2
	.word	1082
	.byte	10,6,2,35,2,12
	.byte	'reserved_26',0,1
	.word	531
	.byte	5,1,2,35,3,12
	.byte	'DISCLK',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_FDR_Bits',0,6,216,3,3
	.word	144639
	.byte	11
	.byte	'_Ifx_SCU_FMR_Bits',0,6,219,3,16,4,12
	.byte	'FS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'FS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'FS2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'FS3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'FS4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'FS5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'FS6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'FS7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	8,0,2,35,1,12
	.byte	'FC0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'FC1',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'FC2',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'FC3',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'FC4',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'FC5',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'FC6',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'FC7',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	8,0,2,35,3,0,19
	.byte	'Ifx_SCU_FMR_Bits',0,6,239,3,3
	.word	144802
	.byte	11
	.byte	'_Ifx_SCU_ID_Bits',0,6,242,3,16,4,12
	.byte	'MODREV',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'MODTYPE',0,1
	.word	531
	.byte	8,0,2,35,1,12
	.byte	'MODNUMBER',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_ID_Bits',0,6,247,3,3
	.word	145138
	.byte	11
	.byte	'_Ifx_SCU_IGCR_Bits',0,6,250,3,16,4,12
	.byte	'IPEN00',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'IPEN01',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IPEN02',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'IPEN03',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'IPEN04',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IPEN05',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'IPEN06',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'IPEN07',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	5,3,2,35,1,12
	.byte	'GEEN0',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'IGP0',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'IPEN10',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'IPEN11',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'IPEN12',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'IPEN13',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'IPEN14',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'IPEN15',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'IPEN16',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'IPEN17',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	5,3,2,35,3,12
	.byte	'GEEN1',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'IGP1',0,1
	.word	531
	.byte	2,0,2,35,3,0,19
	.byte	'Ifx_SCU_IGCR_Bits',0,6,146,4,3
	.word	145245
	.byte	11
	.byte	'_Ifx_SCU_IN_Bits',0,6,149,4,16,4,12
	.byte	'P0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_SCU_IN_Bits',0,6,154,4,3
	.word	145697
	.byte	11
	.byte	'_Ifx_SCU_IOCR_Bits',0,6,157,4,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'PC0',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'PC1',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_IOCR_Bits',0,6,164,4,3
	.word	145796
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,6,167,4,16,4,12
	.byte	'LBISTREQ',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'LBISTRES',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'PATTERNS',0,4
	.word	334
	.byte	18,12,2,35,0,12
	.byte	'reserved_20',0,2
	.word	1082
	.byte	8,4,2,35,2,12
	.byte	'LBISTDONE',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'LBISTERRINJ',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'LBISTREQRED',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,6,177,4,3
	.word	145946
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,6,180,4,16,4,12
	.byte	'SEED',0,4
	.word	334
	.byte	19,13,2,35,0,12
	.byte	'reserved_19',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'SPLITSH',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'BODY',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'LBISTFREQU',0,1
	.word	531
	.byte	4,0,2,35,3,0,19
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,6,187,4,3
	.word	146184
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,6,190,4,16,4,12
	.byte	'LENGTH',0,2
	.word	1082
	.byte	12,4,2,35,0,12
	.byte	'reserved_12',0,4
	.word	334
	.byte	20,0,2,35,0,0,19
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,6,194,4,3
	.word	146345
	.byte	11
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,6,197,4,16,4,12
	.byte	'SIGNATURE',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,6,200,4,3
	.word	146451
	.byte	11
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,6,203,4,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,2
	.word	1082
	.byte	14,1,2,35,0,12
	.byte	'reserved_15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'LS0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,2
	.word	1082
	.byte	14,1,2,35,2,12
	.byte	'LSEN0',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_LCLCON0_Bits',0,6,211,4,3
	.word	146537
	.byte	11
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,6,214,4,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,2
	.word	1082
	.byte	14,1,2,35,0,12
	.byte	'reserved_15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'LS1',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,2
	.word	1082
	.byte	14,1,2,35,2,12
	.byte	'LSEN1',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_LCLCON1_Bits',0,6,222,4,3
	.word	146718
	.byte	11
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,6,225,4,16,4,12
	.byte	'LCLT0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'LCLT1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'LCLT2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1082
	.byte	10,0,2,35,0,12
	.byte	'PLCLT0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'PLCLT1',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'PLCLT2',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'reserved_20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,2
	.word	1082
	.byte	10,0,2,35,2,0,19
	.byte	'Ifx_SCU_LCLTEST_Bits',0,6,241,4,3
	.word	146899
	.byte	11
	.byte	'_Ifx_SCU_MANID_Bits',0,6,244,4,16,4,12
	.byte	'DEPT',0,1
	.word	531
	.byte	5,3,2,35,0,12
	.byte	'MANUF',0,2
	.word	1082
	.byte	11,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_MANID_Bits',0,6,249,4,3
	.word	147243
	.byte	11
	.byte	'_Ifx_SCU_OMR_Bits',0,6,252,4,16,4,12
	.byte	'PS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,2
	.word	1082
	.byte	14,0,2,35,0,12
	.byte	'PCL0',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'PCL1',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'reserved_18',0,2
	.word	1082
	.byte	14,0,2,35,2,0,19
	.byte	'Ifx_SCU_OMR_Bits',0,6,132,5,3
	.word	147354
	.byte	11
	.byte	'_Ifx_SCU_OSCCON_Bits',0,6,135,5,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PLLLV',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'OSCRES',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'GAINSEL',0,1
	.word	531
	.byte	2,3,2,35,0,12
	.byte	'MODE',0,1
	.word	531
	.byte	2,1,2,35,0,12
	.byte	'SHBY',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'PLLHV',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'HYSEN',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'HYSCTL',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'AMPCTL',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'OSCVAL',0,1
	.word	531
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	2,1,2,35,2,12
	.byte	'APREN',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'CAP0EN',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'CAP1EN',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'CAP2EN',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'CAP3EN',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,19
	.byte	'Ifx_SCU_OSCCON_Bits',0,6,156,5,3
	.word	147512
	.byte	11
	.byte	'_Ifx_SCU_OUT_Bits',0,6,159,5,16,4,12
	.byte	'P0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'P1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_SCU_OUT_Bits',0,6,164,5,3
	.word	147923
	.byte	11
	.byte	'_Ifx_SCU_OVCCON_Bits',0,6,167,5,16,4,12
	.byte	'CSEL0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'CSEL1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'CSEL2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1082
	.byte	10,0,2,35,0,12
	.byte	'OVSTRT',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'OVSTP',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'DCINVAL',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'OVCONF',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'POVCONF',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'reserved_26',0,1
	.word	531
	.byte	6,0,2,35,3,0,19
	.byte	'Ifx_SCU_OVCCON_Bits',0,6,183,5,3
	.word	148024
	.byte	11
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,6,186,5,16,4,12
	.byte	'OVEN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'OVEN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'OVEN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	334
	.byte	26,0,2,35,0,0,19
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,6,195,5,3
	.word	148357
	.byte	11
	.byte	'_Ifx_SCU_PDISC_Bits',0,6,198,5,16,4,12
	.byte	'PDIS0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PDIS1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_SCU_PDISC_Bits',0,6,203,5,3
	.word	148559
	.byte	11
	.byte	'_Ifx_SCU_PDR_Bits',0,6,206,5,16,4,12
	.byte	'PD0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'PL0',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'PD1',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'PL1',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	334
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_SCU_PDR_Bits',0,6,213,5,3
	.word	148670
	.byte	11
	.byte	'_Ifx_SCU_PDRR_Bits',0,6,216,5,16,4,12
	.byte	'PDR0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PDR1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'PDR2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'PDR3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'PDR4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'PDR5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'PDR6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PDR7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	334
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_SCU_PDRR_Bits',0,6,227,5,3
	.word	148803
	.byte	11
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,6,230,5,16,4,12
	.byte	'DIVBY',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,2
	.word	1082
	.byte	8,7,2,35,0,12
	.byte	'NDIV',0,1
	.word	531
	.byte	7,0,2,35,1,12
	.byte	'PLLPWD',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'RESLD',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'PDIV',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'reserved_27',0,1
	.word	531
	.byte	5,0,2,35,3,0,19
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,6,241,5,3
	.word	149006
	.byte	11
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,6,244,5,16,4,12
	.byte	'K2DIV',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	5,0,2,35,0,12
	.byte	'K3DIV',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	334
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,6,250,5,3
	.word	149246
	.byte	11
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,6,253,5,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PWDSTAT',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'LOCK',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'K3RDY',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'K2RDY',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,4
	.word	334
	.byte	25,0,2,35,0,0,19
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,6,135,6,3
	.word	149390
	.byte	11
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,6,138,6,16,4,12
	.byte	'REQSLP',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	334
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR0_Bits',0,6,144,6,3
	.word	149612
	.byte	11
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,6,147,6,16,4,12
	.byte	'REQSLP',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	334
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR1_Bits',0,6,153,6,3
	.word	149748
	.byte	11
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,6,156,6,16,4,12
	.byte	'REQSLP',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	334
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR2_Bits',0,6,162,6,3
	.word	149884
	.byte	11
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,6,165,6,16,4,12
	.byte	'REQSLP',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	334
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR3_Bits',0,6,171,6,3
	.word	150020
	.byte	11
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,6,174,6,16,4,12
	.byte	'REQSLP',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	334
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR4_Bits',0,6,180,6,3
	.word	150156
	.byte	11
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,6,183,6,16,4,12
	.byte	'REQSLP',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	6,0,2,35,0,12
	.byte	'PMST',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,4
	.word	334
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR5_Bits',0,6,189,6,3
	.word	150292
	.byte	11
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,6,192,6,16,4,12
	.byte	'CPU0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'CPU1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'CPU2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'CPU3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'CPU4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'CPU5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1082
	.byte	10,0,2,35,0,12
	.byte	'CPU0LS',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'CPU1LS',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'CPU2LS',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'CPU3LS',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'reserved_20',0,2
	.word	1082
	.byte	12,0,2,35,2,0,19
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,6,206,6,3
	.word	150428
	.byte	11
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,6,209,6,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'CPUIDLSEL',0,1
	.word	531
	.byte	3,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'IRADIS',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,4
	.word	334
	.byte	11,8,2,35,0,12
	.byte	'CPUSEL',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'STBYEVEN',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'STBYEV',0,1
	.word	531
	.byte	3,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,6,220,6,3
	.word	150700
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,6,223,6,16,4,12
	.byte	'LJTEN',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'LJTOVEN',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'LJTOVIEN',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'LJTSTRT',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'LJTSTP',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'LJTCLR',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1082
	.byte	6,4,2,35,0,12
	.byte	'SDSTEP',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'VDTEN',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'VDTOVEN',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'VDTOVIEN',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'VDTSTRT',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'VDTSTP',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'VDTCLR',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,2
	.word	1082
	.byte	7,3,2,35,2,12
	.byte	'LPSLPEN',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	531
	.byte	2,0,2,35,3,0,19
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,6,242,6,3
	.word	150945
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,6,245,6,16,4,12
	.byte	'LJTCV',0,2
	.word	1082
	.byte	16,0,2,35,0,12
	.byte	'VDTCV',0,2
	.word	1082
	.byte	10,6,2,35,2,12
	.byte	'reserved_26',0,1
	.word	531
	.byte	6,0,2,35,3,0,19
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,6,250,6,3
	.word	151333
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,6,253,6,16,4,12
	.byte	'LDJMPREQ',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'LJTRUN',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'LJTOV',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'reserved_9',0,1
	.word	531
	.byte	3,4,2,35,1,12
	.byte	'LJTOVCLR',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	3,0,2,35,1,12
	.byte	'LJTCNT',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,6,136,7,3
	.word	151451
	.byte	11
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,6,139,7,16,4,12
	.byte	'VDROOPREQ',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'VDTRUN',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'VDTOV',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'reserved_9',0,1
	.word	531
	.byte	3,4,2,35,1,12
	.byte	'VDTOVCLR',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	3,0,2,35,1,12
	.byte	'VDTCNT',0,2
	.word	1082
	.byte	10,6,2,35,2,12
	.byte	'reserved_26',0,1
	.word	531
	.byte	6,0,2,35,3,0,19
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,6,151,7,3
	.word	151694
	.byte	11
	.byte	'_Ifx_SCU_RSTCON_Bits',0,6,154,7,16,4,12
	.byte	'ESR0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'ESR1',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	2,2,2,35,0,12
	.byte	'SMU',0,1
	.word	531
	.byte	2,0,2,35,0,12
	.byte	'SW',0,1
	.word	531
	.byte	2,6,2,35,1,12
	.byte	'STM0',0,1
	.word	531
	.byte	2,4,2,35,1,12
	.byte	'STM1',0,1
	.word	531
	.byte	2,2,2,35,1,12
	.byte	'STM2',0,1
	.word	531
	.byte	2,0,2,35,1,12
	.byte	'reserved_16',0,1
	.word	531
	.byte	2,6,2,35,2,12
	.byte	'reserved_18',0,1
	.word	531
	.byte	2,4,2,35,2,12
	.byte	'reserved_20',0,1
	.word	531
	.byte	2,2,2,35,2,12
	.byte	'reserved_22',0,2
	.word	1082
	.byte	10,0,2,35,2,0,19
	.byte	'Ifx_SCU_RSTCON_Bits',0,6,168,7,3
	.word	151961
	.byte	11
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,6,171,7,16,4,12
	.byte	'FRTO',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'CLRC',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'CSSX',0,2
	.word	1082
	.byte	6,3,2,35,0,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'reserved_14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'reserved_15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'USRINFO',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_RSTCON2_Bits',0,6,185,7,3
	.word	152241
	.byte	11
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,6,188,7,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_RSTCON3_Bits',0,6,191,7,3
	.word	152546
	.byte	11
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,6,194,7,16,4,12
	.byte	'ESR0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'ESR1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'SMU',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'SW',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'STM0',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'STM1',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'STM2',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'reserved_9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'reserved_10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'reserved_11',0,1
	.word	531
	.byte	5,0,2,35,1,12
	.byte	'PORST',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'CB0',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'CB1',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'CB3',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'EVRC',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'EVR33',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'SWD',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'HSMS',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'HSMA',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'STBYR',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'LBPORST',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'LBTERM',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'reserved_31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,6,224,7,3
	.word	152627
	.byte	11
	.byte	'_Ifx_SCU_SEICON0_Bits',0,6,227,7,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'ENDINIT',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EPW',0,4
	.word	930
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_SCU_SEICON0_Bits',0,6,233,7,3
	.word	153195
	.byte	11
	.byte	'_Ifx_SCU_SEICON1_Bits',0,6,236,7,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,4
	.word	334
	.byte	26,0,2,35,0,0,19
	.byte	'Ifx_SCU_SEICON1_Bits',0,6,245,7,3
	.word	153325
	.byte	11
	.byte	'_Ifx_SCU_SEISR_Bits',0,6,248,7,16,4,12
	.byte	'AE',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,2
	.word	1082
	.byte	10,0,2,35,0,12
	.byte	'TIM',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_SEISR_Bits',0,6,130,8,3
	.word	153516
	.byte	11
	.byte	'_Ifx_SCU_STCON_Bits',0,6,133,8,16,4,12
	.byte	'reserved_0',0,2
	.word	1082
	.byte	13,3,2,35,0,12
	.byte	'SFCBAE',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'CFCBAE',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'STP',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_STCON_Bits',0,6,140,8,3
	.word	153694
	.byte	11
	.byte	'_Ifx_SCU_STMEM1_Bits',0,6,143,8,16,4,12
	.byte	'MEM',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM1_Bits',0,6,146,8,3
	.word	153845
	.byte	11
	.byte	'_Ifx_SCU_STMEM2_Bits',0,6,149,8,16,4,12
	.byte	'MEM',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM2_Bits',0,6,152,8,3
	.word	153917
	.byte	11
	.byte	'_Ifx_SCU_STMEM3_Bits',0,6,155,8,16,4,12
	.byte	'MEM',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM3_Bits',0,6,158,8,3
	.word	153989
	.byte	11
	.byte	'_Ifx_SCU_STMEM4_Bits',0,6,161,8,16,4,12
	.byte	'MEM',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM4_Bits',0,6,164,8,3
	.word	154061
	.byte	11
	.byte	'_Ifx_SCU_STMEM5_Bits',0,6,167,8,16,4,12
	.byte	'MEM',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM5_Bits',0,6,170,8,3
	.word	154133
	.byte	11
	.byte	'_Ifx_SCU_STMEM6_Bits',0,6,173,8,16,4,12
	.byte	'MEM',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM6_Bits',0,6,176,8,3
	.word	154205
	.byte	11
	.byte	'_Ifx_SCU_STSTAT_Bits',0,6,179,8,16,4,12
	.byte	'HWCFG',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'FTM',0,1
	.word	531
	.byte	7,1,2,35,1,12
	.byte	'MODE',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'FCBAE',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'LUDIS',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'reserved_18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'TRSTL',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'SPDEN',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'reserved_22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'reserved_23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'RAMINT',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'reserved_25',0,1
	.word	531
	.byte	3,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,19
	.byte	'Ifx_SCU_STSTAT_Bits',0,6,195,8,3
	.word	154277
	.byte	11
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,6,198,8,16,4,12
	.byte	'ADDRCFG',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'SPARE',0,2
	.word	1082
	.byte	14,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,6,203,8,3
	.word	154606
	.byte	11
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,6,206,8,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'SWRSTREQ',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	6,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	8,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,6,213,8,3
	.word	154726
	.byte	11
	.byte	'_Ifx_SCU_SYSCON_Bits',0,6,216,8,16,4,12
	.byte	'CCTRIG0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'RAMINTM',0,1
	.word	531
	.byte	2,4,2,35,0,12
	.byte	'SETLUDIS',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'DDC',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'reserved_9',0,1
	.word	531
	.byte	7,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_SYSCON_Bits',0,6,228,8,3
	.word	154896
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,6,231,8,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'MODEN',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,2
	.word	1082
	.byte	6,7,2,35,0,12
	.byte	'NDIV',0,1
	.word	531
	.byte	7,0,2,35,1,12
	.byte	'PLLPWD',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'reserved_17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'RESLD',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'reserved_19',0,1
	.word	531
	.byte	5,0,2,35,2,12
	.byte	'PDIV',0,1
	.word	531
	.byte	3,5,2,35,3,12
	.byte	'reserved_27',0,1
	.word	531
	.byte	3,2,2,35,3,12
	.byte	'INSEL',0,1
	.word	531
	.byte	2,0,2,35,3,0,19
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,6,244,8,3
	.word	155159
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,6,247,8,16,4,12
	.byte	'K2DIV',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,4
	.word	334
	.byte	29,0,2,35,0,0,19
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,6,251,8,3
	.word	155438
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,6,254,8,16,4,12
	.byte	'MODCFG',0,2
	.word	1082
	.byte	16,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,6,130,9,3
	.word	155542
	.byte	11
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,6,133,9,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'PWDSTAT',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'LOCK',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	2,3,2,35,0,12
	.byte	'K2RDY',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'reserved_6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'MODRUN',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'reserved_8',0,4
	.word	334
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,6,143,9,3
	.word	155648
	.byte	11
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,6,146,9,16,4,12
	.byte	'ESR0T',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'ESR1T',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'TRAP2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'SMUT',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,6,153,9,3
	.word	155871
	.byte	11
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,6,156,9,16,4,12
	.byte	'CPU0ESR0T',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'CPU0ESR1T',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'CPU0TRAP2T',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'CPU0SMUT',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'CPU1ESR0T',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'CPU1ESR1T',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'CPU1TRAP2T',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'CPU1SMUT',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'CPU2ESR0T',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'CPU2ESR1T',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'CPU2TRAP2T',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'CPU2SMUT',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'reserved_20',0,1
	.word	531
	.byte	4,0,2,35,2,12
	.byte	'reserved_24',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,19
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,6,175,9,3
	.word	156019
	.byte	11
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,6,178,9,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	4,0,2,35,0,12
	.byte	'reserved_8',0,1
	.word	531
	.byte	4,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,6,185,9,3
	.word	156446
	.byte	11
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,6,188,9,16,4,12
	.byte	'ESR0T',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'ESR1T',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'TRAP2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'SMUT',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPSET_Bits',0,6,195,9,3
	.word	156619
	.byte	11
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,6,198,9,16,4,12
	.byte	'ESR0T',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'ESR1T',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'TRAP2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'SMUT',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,6,205,9,3
	.word	156767
	.byte	19
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,6,214,9,3
	.word	946
	.byte	19
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,6,230,9,3
	.word	1104
	.byte	19
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,6,246,9,3
	.word	1370
	.byte	11
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,6,249,9,16,4,12
	.byte	'ENDINIT',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'LCK',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'PW',0,4
	.word	930
	.byte	14,16,2,35,0,12
	.byte	'REL',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,6,255,9,3
	.word	157017
	.byte	11
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,6,130,10,16,4,12
	.byte	'CLRIRF',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IR0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DR',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IR1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'UR',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PAR',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'TCR',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'TCTR',0,1
	.word	531
	.byte	7,0,2,35,1,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,6,143,10,3
	.word	157143
	.byte	11
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,6,146,10,16,4,12
	.byte	'AE',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'OE',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IS0',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'TO',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'IS1',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'US',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'PAS',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'TCS',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'TCT',0,1
	.word	531
	.byte	7,0,2,35,1,12
	.byte	'TIM',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,6,159,10,3
	.word	157395
	.byte	13,6,167,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	138398
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ACCEN00',0,6,172,10,3
	.word	157614
	.byte	13,6,175,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	138957
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ACCEN01',0,6,180,10,3
	.word	157679
	.byte	13,6,183,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	139036
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ACCEN10',0,6,188,10,3
	.word	157744
	.byte	13,6,191,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	139596
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ACCEN11',0,6,196,10,3
	.word	157809
	.byte	13,6,199,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	139677
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ARSTDIS',0,6,204,10,3
	.word	157874
	.byte	13,6,207,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	139903
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON0',0,6,212,10,3
	.word	157939
	.byte	13,6,215,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	140176
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON1',0,6,220,10,3
	.word	158004
	.byte	13,6,223,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	140502
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON2',0,6,228,10,3
	.word	158069
	.byte	13,6,231,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	140780
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON3',0,6,236,10,3
	.word	158134
	.byte	13,6,239,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	141149
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON4',0,6,244,10,3
	.word	158199
	.byte	13,6,247,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	141329
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON5',0,6,252,10,3
	.word	158264
	.byte	13,6,255,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	141501
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON6',0,6,132,11,3
	.word	158329
	.byte	13,6,135,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	141601
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON7',0,6,140,11,3
	.word	158394
	.byte	13,6,143,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	141701
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CCUCON8',0,6,148,11,3
	.word	158459
	.byte	13,6,151,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	141801
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_CHIPID',0,6,156,11,3
	.word	158524
	.byte	13,6,159,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	142004
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_DTSCLIM',0,6,164,11,3
	.word	158588
	.byte	13,6,167,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	142236
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_DTSCSTAT',0,6,172,11,3
	.word	158653
	.byte	13,6,175,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	142338
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EICON0',0,6,180,11,3
	.word	158719
	.byte	13,6,183,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	142466
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EICON1',0,6,188,11,3
	.word	158783
	.byte	13,6,191,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	142655
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EICR',0,6,196,11,3
	.word	158847
	.byte	13,6,199,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	143019
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EIFILT',0,6,204,11,3
	.word	158909
	.byte	13,6,207,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	143458
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EIFR',0,6,212,11,3
	.word	158973
	.byte	13,6,215,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	143669
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EISR',0,6,220,11,3
	.word	159035
	.byte	13,6,223,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	143845
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EMSR',0,6,228,11,3
	.word	159097
	.byte	13,6,231,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	144039
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EMSSW',0,6,236,11,3
	.word	159159
	.byte	13,6,239,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	144174
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,6,244,11,3
	.word	159222
	.byte	13,6,247,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	144310
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ESROCFG',0,6,252,11,3
	.word	159295
	.byte	13,6,255,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	144421
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_EXTCON',0,6,132,12,3
	.word	159360
	.byte	13,6,135,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	144639
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_FDR',0,6,140,12,3
	.word	159424
	.byte	13,6,143,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	144802
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_FMR',0,6,148,12,3
	.word	159485
	.byte	13,6,151,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	145138
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_ID',0,6,156,12,3
	.word	159546
	.byte	13,6,159,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	145245
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_IGCR',0,6,164,12,3
	.word	159606
	.byte	13,6,167,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	145697
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_IN',0,6,172,12,3
	.word	159668
	.byte	13,6,175,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	145796
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_IOCR',0,6,180,12,3
	.word	159728
	.byte	13,6,183,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	145946
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_LBISTCTRL0',0,6,188,12,3
	.word	159790
	.byte	13,6,191,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	146184
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_LBISTCTRL1',0,6,196,12,3
	.word	159858
	.byte	13,6,199,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	146345
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_LBISTCTRL2',0,6,204,12,3
	.word	159926
	.byte	13,6,207,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	146451
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_LBISTCTRL3',0,6,212,12,3
	.word	159994
	.byte	13,6,215,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	146537
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_LCLCON0',0,6,220,12,3
	.word	160062
	.byte	13,6,223,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	146718
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_LCLCON1',0,6,228,12,3
	.word	160127
	.byte	13,6,231,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	146899
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_LCLTEST',0,6,236,12,3
	.word	160192
	.byte	13,6,239,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	147243
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_MANID',0,6,244,12,3
	.word	160257
	.byte	13,6,247,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	147354
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_OMR',0,6,252,12,3
	.word	160320
	.byte	13,6,255,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	147512
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_OSCCON',0,6,132,13,3
	.word	160381
	.byte	13,6,135,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	147923
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_OUT',0,6,140,13,3
	.word	160445
	.byte	13,6,143,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	148024
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_OVCCON',0,6,148,13,3
	.word	160506
	.byte	13,6,151,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	148357
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_OVCENABLE',0,6,156,13,3
	.word	160570
	.byte	13,6,159,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	148559
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PDISC',0,6,164,13,3
	.word	160637
	.byte	13,6,167,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	148670
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PDR',0,6,172,13,3
	.word	160700
	.byte	13,6,175,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	148803
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PDRR',0,6,180,13,3
	.word	160761
	.byte	13,6,183,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	149006
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PERPLLCON0',0,6,188,13,3
	.word	160823
	.byte	13,6,191,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	149246
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PERPLLCON1',0,6,196,13,3
	.word	160891
	.byte	13,6,199,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	149390
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PERPLLSTAT',0,6,204,13,3
	.word	160959
	.byte	13,6,207,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	149612
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR0',0,6,212,13,3
	.word	161027
	.byte	13,6,215,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	149748
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR1',0,6,220,13,3
	.word	161091
	.byte	13,6,223,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	149884
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR2',0,6,228,13,3
	.word	161155
	.byte	13,6,231,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	150020
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR3',0,6,236,13,3
	.word	161219
	.byte	13,6,239,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	150156
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR4',0,6,244,13,3
	.word	161283
	.byte	13,6,247,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	150292
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMCSR5',0,6,252,13,3
	.word	161347
	.byte	13,6,255,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	150428
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMSTAT0',0,6,132,14,3
	.word	161411
	.byte	13,6,135,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	150700
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMSWCR1',0,6,140,14,3
	.word	161476
	.byte	13,6,143,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	150945
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMTRCSR0',0,6,148,14,3
	.word	161541
	.byte	13,6,151,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	151333
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMTRCSR1',0,6,156,14,3
	.word	161607
	.byte	13,6,159,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	151451
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMTRCSR2',0,6,164,14,3
	.word	161673
	.byte	13,6,167,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	151694
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_PMTRCSR3',0,6,172,14,3
	.word	161739
	.byte	13,6,175,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	151961
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_RSTCON',0,6,180,14,3
	.word	161805
	.byte	13,6,183,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	152241
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_RSTCON2',0,6,188,14,3
	.word	161869
	.byte	13,6,191,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	152546
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_RSTCON3',0,6,196,14,3
	.word	161934
	.byte	13,6,199,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	152627
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_RSTSTAT',0,6,204,14,3
	.word	161999
	.byte	13,6,207,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	153195
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SEICON0',0,6,212,14,3
	.word	162064
	.byte	13,6,215,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	153325
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SEICON1',0,6,220,14,3
	.word	162129
	.byte	13,6,223,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	153516
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SEISR',0,6,228,14,3
	.word	162194
	.byte	13,6,231,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	153694
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STCON',0,6,236,14,3
	.word	162257
	.byte	13,6,239,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	153845
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM1',0,6,244,14,3
	.word	162320
	.byte	13,6,247,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	153917
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM2',0,6,252,14,3
	.word	162384
	.byte	13,6,255,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	153989
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM3',0,6,132,15,3
	.word	162448
	.byte	13,6,135,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	154061
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM4',0,6,140,15,3
	.word	162512
	.byte	13,6,143,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	154133
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM5',0,6,148,15,3
	.word	162576
	.byte	13,6,151,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	154205
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STMEM6',0,6,156,15,3
	.word	162640
	.byte	13,6,159,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	154277
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_STSTAT',0,6,164,15,3
	.word	162704
	.byte	13,6,167,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	154606
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SWAPCTRL',0,6,172,15,3
	.word	162768
	.byte	13,6,175,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	154726
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SWRSTCON',0,6,180,15,3
	.word	162834
	.byte	13,6,183,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	154896
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SYSCON',0,6,188,15,3
	.word	162900
	.byte	13,6,191,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	155159
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SYSPLLCON0',0,6,196,15,3
	.word	162964
	.byte	13,6,199,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	155438
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SYSPLLCON1',0,6,204,15,3
	.word	163032
	.byte	13,6,207,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	155542
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SYSPLLCON2',0,6,212,15,3
	.word	163100
	.byte	13,6,215,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	155648
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_SYSPLLSTAT',0,6,220,15,3
	.word	163168
	.byte	13,6,223,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	155871
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPCLR',0,6,228,15,3
	.word	163236
	.byte	13,6,231,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	156019
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPDIS0',0,6,236,15,3
	.word	163301
	.byte	13,6,239,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	156446
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPDIS1',0,6,244,15,3
	.word	163367
	.byte	13,6,247,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	156619
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPSET',0,6,252,15,3
	.word	163433
	.byte	13,6,255,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	156767
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_TRAPSTAT',0,6,132,16,3
	.word	163498
	.byte	19
	.byte	'Ifx_SCU_WDTCPU_CON0',0,6,140,16,3
	.word	1042
	.byte	19
	.byte	'Ifx_SCU_WDTCPU_CON1',0,6,148,16,3
	.word	1330
	.byte	19
	.byte	'Ifx_SCU_WDTCPU_SR',0,6,156,16,3
	.word	1561
	.byte	13,6,159,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	157017
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_WDTS_CON0',0,6,164,16,3
	.word	163649
	.byte	13,6,167,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	157143
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_WDTS_CON1',0,6,172,16,3
	.word	163716
	.byte	13,6,175,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	157395
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SCU_WDTS_SR',0,6,180,16,3
	.word	163783
	.byte	11
	.byte	'_Ifx_SCU_ESRCFGX',0,6,192,16,25,4,14
	.byte	'ESRCFGX',0
	.word	159222
	.byte	4,2,35,0,0,10
	.word	163848
	.byte	19
	.byte	'Ifx_SCU_ESRCFGX',0,6,195,16,3
	.word	163889
	.byte	10
	.word	1601
	.byte	19
	.byte	'Ifx_SCU_WDTCPU',0,6,215,16,3
	.word	163919
	.byte	11
	.byte	'_Ifx_SCU_WDTS',0,6,230,16,25,12,14
	.byte	'CON0',0
	.word	163649
	.byte	4,2,35,0,14
	.byte	'CON1',0
	.word	163716
	.byte	4,2,35,4,14
	.byte	'SR',0
	.word	163783
	.byte	4,2,35,8,0,10
	.word	163948
	.byte	19
	.byte	'Ifx_SCU_WDTS',0,6,235,16,3
	.word	164009
	.byte	15,8
	.word	163848
	.byte	16,1,0,10
	.word	164036
	.byte	15,16
	.word	158847
	.byte	16,3,0,15,16
	.word	159606
	.byte	16,3,0,15,36
	.word	1601
	.byte	16,2,0,10
	.word	164068
	.byte	10
	.word	163948
	.byte	15,176,2
	.word	531
	.byte	16,175,2,0,11
	.byte	'_Ifx_SCU',0,6,250,16,25,128,8,14
	.byte	'reserved_0',0
	.word	4906
	.byte	8,2,35,0,14
	.byte	'ID',0
	.word	159546
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3086
	.byte	4,2,35,12,14
	.byte	'OSCCON',0
	.word	160381
	.byte	4,2,35,16,14
	.byte	'SYSPLLSTAT',0
	.word	163168
	.byte	4,2,35,20,14
	.byte	'SYSPLLCON0',0
	.word	162964
	.byte	4,2,35,24,14
	.byte	'SYSPLLCON1',0
	.word	163032
	.byte	4,2,35,28,14
	.byte	'SYSPLLCON2',0
	.word	163100
	.byte	4,2,35,32,14
	.byte	'PERPLLSTAT',0
	.word	160959
	.byte	4,2,35,36,14
	.byte	'PERPLLCON0',0
	.word	160823
	.byte	4,2,35,40,14
	.byte	'PERPLLCON1',0
	.word	160891
	.byte	4,2,35,44,14
	.byte	'CCUCON0',0
	.word	157939
	.byte	4,2,35,48,14
	.byte	'CCUCON1',0
	.word	158004
	.byte	4,2,35,52,14
	.byte	'FDR',0
	.word	159424
	.byte	4,2,35,56,14
	.byte	'EXTCON',0
	.word	159360
	.byte	4,2,35,60,14
	.byte	'CCUCON2',0
	.word	158069
	.byte	4,2,35,64,14
	.byte	'CCUCON3',0
	.word	158134
	.byte	4,2,35,68,14
	.byte	'CCUCON4',0
	.word	158199
	.byte	4,2,35,72,14
	.byte	'CCUCON5',0
	.word	158264
	.byte	4,2,35,76,14
	.byte	'RSTSTAT',0
	.word	161999
	.byte	4,2,35,80,14
	.byte	'reserved_54',0
	.word	3086
	.byte	4,2,35,84,14
	.byte	'RSTCON',0
	.word	161805
	.byte	4,2,35,88,14
	.byte	'ARSTDIS',0
	.word	157874
	.byte	4,2,35,92,14
	.byte	'SWRSTCON',0
	.word	162834
	.byte	4,2,35,96,14
	.byte	'RSTCON2',0
	.word	161869
	.byte	4,2,35,100,14
	.byte	'RSTCON3',0
	.word	161934
	.byte	4,2,35,104,14
	.byte	'reserved_6C',0
	.word	3086
	.byte	4,2,35,108,14
	.byte	'ESRCFGX',0
	.word	164045
	.byte	8,2,35,112,14
	.byte	'ESROCFG',0
	.word	159295
	.byte	4,2,35,120,14
	.byte	'SYSCON',0
	.word	162900
	.byte	4,2,35,124,14
	.byte	'CCUCON6',0
	.word	158329
	.byte	4,3,35,128,1,14
	.byte	'CCUCON7',0
	.word	158394
	.byte	4,3,35,132,1,14
	.byte	'CCUCON8',0
	.word	158459
	.byte	4,3,35,136,1,14
	.byte	'reserved_8C',0
	.word	16430
	.byte	16,3,35,140,1,14
	.byte	'PDR',0
	.word	160700
	.byte	4,3,35,156,1,14
	.byte	'IOCR',0
	.word	159728
	.byte	4,3,35,160,1,14
	.byte	'OUT',0
	.word	160445
	.byte	4,3,35,164,1,14
	.byte	'OMR',0
	.word	160320
	.byte	4,3,35,168,1,14
	.byte	'IN',0
	.word	159668
	.byte	4,3,35,172,1,14
	.byte	'reserved_B0',0
	.word	16430
	.byte	16,3,35,176,1,14
	.byte	'STSTAT',0
	.word	162704
	.byte	4,3,35,192,1,14
	.byte	'STCON',0
	.word	162257
	.byte	4,3,35,196,1,14
	.byte	'PMCSR0',0
	.word	161027
	.byte	4,3,35,200,1,14
	.byte	'PMCSR1',0
	.word	161091
	.byte	4,3,35,204,1,14
	.byte	'PMCSR2',0
	.word	161155
	.byte	4,3,35,208,1,14
	.byte	'PMCSR3',0
	.word	161219
	.byte	4,3,35,212,1,14
	.byte	'PMCSR4',0
	.word	161283
	.byte	4,3,35,216,1,14
	.byte	'PMCSR5',0
	.word	161347
	.byte	4,3,35,220,1,14
	.byte	'reserved_E0',0
	.word	3086
	.byte	4,3,35,224,1,14
	.byte	'PMSTAT0',0
	.word	161411
	.byte	4,3,35,228,1,14
	.byte	'PMSWCR1',0
	.word	161476
	.byte	4,3,35,232,1,14
	.byte	'reserved_EC',0
	.word	16430
	.byte	16,3,35,236,1,14
	.byte	'EMSR',0
	.word	159097
	.byte	4,3,35,252,1,14
	.byte	'EMSSW',0
	.word	159159
	.byte	4,3,35,128,2,14
	.byte	'DTSCSTAT',0
	.word	158653
	.byte	4,3,35,132,2,14
	.byte	'DTSCLIM',0
	.word	158588
	.byte	4,3,35,136,2,14
	.byte	'reserved_10C',0
	.word	33713
	.byte	20,3,35,140,2,14
	.byte	'TRAPDIS1',0
	.word	163367
	.byte	4,3,35,160,2,14
	.byte	'TRAPSTAT',0
	.word	163498
	.byte	4,3,35,164,2,14
	.byte	'TRAPSET',0
	.word	163433
	.byte	4,3,35,168,2,14
	.byte	'TRAPCLR',0
	.word	163236
	.byte	4,3,35,172,2,14
	.byte	'TRAPDIS0',0
	.word	163301
	.byte	4,3,35,176,2,14
	.byte	'LCLCON0',0
	.word	160062
	.byte	4,3,35,180,2,14
	.byte	'LCLCON1',0
	.word	160127
	.byte	4,3,35,184,2,14
	.byte	'LCLTEST',0
	.word	160192
	.byte	4,3,35,188,2,14
	.byte	'CHIPID',0
	.word	158524
	.byte	4,3,35,192,2,14
	.byte	'MANID',0
	.word	160257
	.byte	4,3,35,196,2,14
	.byte	'reserved_148',0
	.word	3086
	.byte	4,3,35,200,2,14
	.byte	'SWAPCTRL',0
	.word	162768
	.byte	4,3,35,204,2,14
	.byte	'reserved_150',0
	.word	33713
	.byte	20,3,35,208,2,14
	.byte	'LBISTCTRL0',0
	.word	159790
	.byte	4,3,35,228,2,14
	.byte	'LBISTCTRL1',0
	.word	159858
	.byte	4,3,35,232,2,14
	.byte	'LBISTCTRL2',0
	.word	159926
	.byte	4,3,35,236,2,14
	.byte	'LBISTCTRL3',0
	.word	159994
	.byte	4,3,35,240,2,14
	.byte	'reserved_174',0
	.word	16430
	.byte	16,3,35,244,2,14
	.byte	'STMEM1',0
	.word	162320
	.byte	4,3,35,132,3,14
	.byte	'STMEM2',0
	.word	162384
	.byte	4,3,35,136,3,14
	.byte	'PDISC',0
	.word	160637
	.byte	4,3,35,140,3,14
	.byte	'reserved_190',0
	.word	4906
	.byte	8,3,35,144,3,14
	.byte	'PMTRCSR0',0
	.word	161541
	.byte	4,3,35,152,3,14
	.byte	'PMTRCSR1',0
	.word	161607
	.byte	4,3,35,156,3,14
	.byte	'PMTRCSR2',0
	.word	161673
	.byte	4,3,35,160,3,14
	.byte	'PMTRCSR3',0
	.word	161739
	.byte	4,3,35,164,3,14
	.byte	'reserved_1A8',0
	.word	4277
	.byte	24,3,35,168,3,14
	.byte	'STMEM3',0
	.word	162448
	.byte	4,3,35,192,3,14
	.byte	'STMEM4',0
	.word	162512
	.byte	4,3,35,196,3,14
	.byte	'STMEM5',0
	.word	162576
	.byte	4,3,35,200,3,14
	.byte	'STMEM6',0
	.word	162640
	.byte	4,3,35,204,3,14
	.byte	'reserved_1D0',0
	.word	16430
	.byte	16,3,35,208,3,14
	.byte	'OVCENABLE',0
	.word	160570
	.byte	4,3,35,224,3,14
	.byte	'OVCCON',0
	.word	160506
	.byte	4,3,35,228,3,14
	.byte	'reserved_1E8',0
	.word	114067
	.byte	36,3,35,232,3,14
	.byte	'EIFILT',0
	.word	158909
	.byte	4,3,35,140,4,14
	.byte	'EICR',0
	.word	164050
	.byte	16,3,35,144,4,14
	.byte	'EIFR',0
	.word	158973
	.byte	4,3,35,160,4,14
	.byte	'FMR',0
	.word	159485
	.byte	4,3,35,164,4,14
	.byte	'PDRR',0
	.word	160761
	.byte	4,3,35,168,4,14
	.byte	'IGCR',0
	.word	164059
	.byte	16,3,35,172,4,14
	.byte	'reserved_23C',0
	.word	16430
	.byte	16,3,35,188,4,14
	.byte	'WDTCPU',0
	.word	164077
	.byte	36,3,35,204,4,14
	.byte	'reserved_270',0
	.word	58984
	.byte	44,3,35,240,4,14
	.byte	'EICON0',0
	.word	158719
	.byte	4,3,35,156,5,14
	.byte	'EICON1',0
	.word	158783
	.byte	4,3,35,160,5,14
	.byte	'EISR',0
	.word	159035
	.byte	4,3,35,164,5,14
	.byte	'WDTS',0
	.word	164082
	.byte	12,3,35,168,5,14
	.byte	'SEICON0',0
	.word	162064
	.byte	4,3,35,180,5,14
	.byte	'SEICON1',0
	.word	162129
	.byte	4,3,35,184,5,14
	.byte	'SEISR',0
	.word	162194
	.byte	4,3,35,188,5,14
	.byte	'reserved_2C0',0
	.word	164087
	.byte	176,2,3,35,192,5,14
	.byte	'ACCEN11',0
	.word	157809
	.byte	4,3,35,240,7,14
	.byte	'ACCEN10',0
	.word	157744
	.byte	4,3,35,244,7,14
	.byte	'ACCEN01',0
	.word	157679
	.byte	4,3,35,248,7,14
	.byte	'ACCEN00',0
	.word	157614
	.byte	4,3,35,252,7,0,10
	.word	164098
	.byte	19
	.byte	'Ifx_SCU',0,6,237,17,3
	.word	166163
	.byte	17,7,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,19
	.byte	'IfxPort_ControlledBy',0,7,77,3
	.word	166185
	.byte	17,7,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,19
	.byte	'IfxPort_InputMode',0,7,87,3
	.word	166276
	.byte	17,7,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,19
	.byte	'IfxPort_LvdsMode',0,7,95,3
	.word	166427
	.byte	19
	.byte	'IfxPort_OutputIdx',0,7,136,1,3
	.word	23152
	.byte	19
	.byte	'IfxPort_OutputMode',0,7,145,1,3
	.word	20813
	.byte	19
	.byte	'IfxPort_PadDriver',0,7,165,1,3
	.word	20909
	.byte	17,7,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,19
	.byte	'IfxPort_PadSupply',0,7,173,1,3
	.word	166590
	.byte	17,7,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,19
	.byte	'IfxPort_PinFunctionMode',0,7,181,1,3
	.word	166670
	.byte	19
	.byte	'IfxPort_State',0,7,193,1,3
	.word	9581
	.byte	19
	.byte	'IfxPort_Pin',0,7,250,1,3
	.word	23113
	.byte	19
	.byte	'IfxStdIf_Timer_CountDir',0,9,90,3
	.word	23657
	.byte	19
	.byte	'IfxStdIf_Timer',0,9,93,32
	.word	10543
	.byte	31,9,131,2,9,16,14
	.byte	'enabled',0
	.word	531
	.byte	1,2,35,0,14
	.byte	'triggerPoint',0
	.word	9849
	.byte	4,2,35,2,14
	.byte	'isrPriority',0
	.word	1082
	.byte	2,2,35,6,14
	.byte	'isrProvider',0
	.word	132078
	.byte	1,2,35,8,14
	.byte	'outputMode',0
	.word	20813
	.byte	1,2,35,9,14
	.byte	'outputDriver',0
	.word	20909
	.byte	1,2,35,10,14
	.byte	'risingEdgeAtPeriod',0
	.word	531
	.byte	1,2,35,11,14
	.byte	'outputEnabled',0
	.word	531
	.byte	1,2,35,12,0,19
	.byte	'IfxStdIf_Timer_TrigConfig',0,9,141,2,3
	.word	166876
	.byte	31,9,144,2,9,36,14
	.byte	'frequency',0
	.word	232
	.byte	4,2,35,0,14
	.byte	'isrPriority',0
	.word	1082
	.byte	2,2,35,4,14
	.byte	'isrProvider',0
	.word	132078
	.byte	1,2,35,6,14
	.byte	'minResolution',0
	.word	232
	.byte	4,2,35,8,14
	.byte	'trigger',0
	.word	166876
	.byte	16,2,35,12,14
	.byte	'countDir',0
	.word	23657
	.byte	1,2,35,28,14
	.byte	'startOffset',0
	.word	232
	.byte	4,2,35,30,0,19
	.byte	'IfxStdIf_Timer_Config',0,9,153,2,3
	.word	167092
	.byte	19
	.byte	'IfxStdIf_PwmHl',0,19,78,32
	.word	131105
	.byte	19
	.byte	'IfxStdIf_PwmHl_Config',0,19,213,1,3
	.word	21332
	.byte	19
	.byte	'Ifx_GTM_ACCEN0_Bits',0,12,107,3
	.word	106677
	.byte	19
	.byte	'Ifx_GTM_ACCEN1_Bits',0,12,113,3
	.word	107246
	.byte	19
	.byte	'Ifx_GTM_ADCTRIG_OUT0_Bits',0,12,126,3
	.word	109969
	.byte	19
	.byte	'Ifx_GTM_ADCTRIG_OUT1_Bits',0,12,136,1,3
	.word	110170
	.byte	19
	.byte	'Ifx_GTM_AEI_ADDR_XPT_Bits',0,12,144,1,3
	.word	24408
	.byte	19
	.byte	'Ifx_GTM_AEI_STA_XPT_Bits',0,12,152,1,3
	.word	26967
	.byte	19
	.byte	'Ifx_GTM_ARU_ACCESS_Bits',0,12,162,1,3
	.word	37151
	.byte	19
	.byte	'Ifx_GTM_ARU_CADDR_Bits',0,12,171,1,3
	.word	40469
	.byte	19
	.byte	'Ifx_GTM_ARU_CADDR_END_Bits',0,12,178,1,3
	.word	39074
	.byte	19
	.byte	'Ifx_GTM_ARU_CTRL_Bits',0,12,187,1,3
	.word	39192
	.byte	19
	.byte	'Ifx_GTM_ARU_DATA_H_Bits',0,12,194,1,3
	.word	37316
	.byte	19
	.byte	'Ifx_GTM_ARU_DATA_L_Bits',0,12,201,1,3
	.word	37427
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,12,208,1,3
	.word	37538
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,12,215,1,3
	.word	37885
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,12,222,1,3
	.word	37653
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,12,229,1,3
	.word	37769
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,12,236,1,3
	.word	38000
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,12,243,1,3
	.word	38116
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_CTRL_Bits',0,12,251,1,3
	.word	39361
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_RDADDR_Bits',0,12,130,2,3
	.word	40336
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_HIGH_Bits',0,12,140,2,3
	.word	39704
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_LOW_Bits',0,12,149,2,3
	.word	39521
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_HIGH_Bits',0,12,160,2,3
	.word	40098
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_LOW_Bits',0,12,169,2,3
	.word	39912
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_EN_Bits',0,12,178,2,3
	.word	38522
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,12,187,2,3
	.word	38698
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_MODE_Bits',0,12,194,2,3
	.word	38870
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,12,203,2,3
	.word	38363
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,12,212,2,3
	.word	17465
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,12,226,2,3
	.word	16889
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,12,240,2,3
	.word	17177
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,12,133,3,3
	.word	18197
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,12,156,3,3
	.word	16439
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,12,170,3,3
	.word	18629
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,12,184,3,3
	.word	17621
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,12,198,3,3
	.word	17909
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CM0_Bits',0,12,205,3,3
	.word	15088
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CM1_Bits',0,12,212,3,3
	.word	15199
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CN0_Bits',0,12,219,3,3
	.word	15310
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CTRL_Bits',0,12,248,3,3
	.word	11377
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,12,128,4,3
	.word	15767
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,12,136,4,3
	.word	15915
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,12,143,4,3
	.word	16062
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,12,151,4,3
	.word	15629
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_RDADDR_Bits',0,12,160,4,3
	.word	11218
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMB_Bits',0,12,189,4,3
	.word	11893
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMC_Bits',0,12,218,4,3
	.word	12449
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMI_Bits',0,12,246,4,3
	.word	13004
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMP_Bits',0,12,150,5,3
	.word	13571
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMS_Bits',0,12,180,5,3
	.word	14186
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SR0_Bits',0,12,187,5,3
	.word	14866
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SR1_Bits',0,12,194,5,3
	.word	14977
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_STAT_Bits',0,12,207,5,3
	.word	15421
	.byte	19
	.byte	'Ifx_GTM_AUX_IN_SRC_TIM_Bits',0,12,230,5,3
	.word	28167
	.byte	19
	.byte	'Ifx_GTM_BRC_EIRQ_EN_Bits',0,12,249,5,3
	.word	44982
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_EN_Bits',0,12,140,6,3
	.word	43906
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,12,159,6,3
	.word	44306
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_MODE_Bits',0,12,166,6,3
	.word	44672
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,12,185,6,3
	.word	43593
	.byte	19
	.byte	'Ifx_GTM_BRC_RST_Bits',0,12,192,6,3
	.word	44876
	.byte	19
	.byte	'Ifx_GTM_BRC_SRC_ADDR_Bits',0,12,201,6,3
	.word	42800
	.byte	19
	.byte	'Ifx_GTM_BRC_SRC_DEST_Bits',0,12,230,6,3
	.word	42955
	.byte	19
	.byte	'Ifx_GTM_BRIDGE_MODE_Bits',0,12,247,6,3
	.word	27095
	.byte	19
	.byte	'Ifx_GTM_BRIDGE_PTR1_Bits',0,12,130,7,3
	.word	27432
	.byte	19
	.byte	'Ifx_GTM_BRIDGE_PTR2_Bits',0,12,137,7,3
	.word	27640
	.byte	19
	.byte	'Ifx_GTM_CANOUTSEL0_Bits',0,12,150,7,3
	.word	114834
	.byte	19
	.byte	'Ifx_GTM_CANOUTSEL1_Bits',0,12,160,7,3
	.word	115034
	.byte	19
	.byte	'Ifx_GTM_CCM_AEIM_STA_Bits',0,12,169,7,3
	.word	115705
	.byte	19
	.byte	'Ifx_GTM_CCM_ARP_CTRL_Bits',0,12,180,7,3
	.word	115206
	.byte	19
	.byte	'Ifx_GTM_CCM_ARP_PROT_Bits',0,12,194,7,3
	.word	115399
	.byte	19
	.byte	'Ifx_GTM_CCM_ATOM_OUT_Bits',0,12,203,7,3
	.word	117209
	.byte	19
	.byte	'Ifx_GTM_CCM_CFG_Bits',0,12,221,7,3
	.word	117921
	.byte	19
	.byte	'Ifx_GTM_CCM_CMU_CLK_CFG_Bits',0,12,242,7,3
	.word	117379
	.byte	19
	.byte	'Ifx_GTM_CCM_CMU_FXCLK_CFG_Bits',0,12,249,7,3
	.word	117798
	.byte	19
	.byte	'Ifx_GTM_CCM_EXT_CAP_EN_Bits',0,12,129,8,3
	.word	116939
	.byte	19
	.byte	'Ifx_GTM_CCM_HW_CONF_Bits',0,12,154,8,3
	.word	115874
	.byte	19
	.byte	'Ifx_GTM_CCM_PROT_Bits',0,12,161,8,3
	.word	118266
	.byte	19
	.byte	'Ifx_GTM_CCM_TIM_AUX_IN_SRC_Bits',0,12,184,8,3
	.word	116462
	.byte	19
	.byte	'Ifx_GTM_CCM_TOM_OUT_Bits',0,12,191,8,3
	.word	117096
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL1_Bits',0,12,222,8,3
	.word	118900
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2_Bits',0,12,131,9,3
	.word	119485
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2_SR_Bits',0,12,168,9,3
	.word	120116
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL3_Bits',0,12,193,9,3
	.word	121589
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_DTV_Bits',0,12,202,9,3
	.word	121091
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_SR_Bits',0,12,216,9,3
	.word	121307
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CTRL_Bits',0,12,229,9,3
	.word	118655
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_PS_CTRL_Bits',0,12,242,9,3
	.word	120846
	.byte	19
	.byte	'Ifx_GTM_CFG_Bits',0,12,249,9,3
	.word	26858
	.byte	19
	.byte	'Ifx_GTM_CLC_Bits',0,12,131,10,3
	.word	106183
	.byte	19
	.byte	'Ifx_GTM_CLS_CLK_CFG_Bits',0,12,149,10,3
	.word	29264
	.byte	19
	.byte	'Ifx_GTM_CMP_EIRQ_EN_Bits',0,12,179,10,3
	.word	36375
	.byte	19
	.byte	'Ifx_GTM_CMP_EN_Bits',0,12,209,10,3
	.word	33802
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_EN_Bits',0,12,239,10,3
	.word	34888
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,12,141,11,3
	.word	35563
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_MODE_Bits',0,12,148,11,3
	.word	36171
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,12,178,11,3
	.word	34377
	.byte	19
	.byte	'Ifx_GTM_CMU_CLK_CTRL_Bits',0,12,193,11,3
	.word	42286
	.byte	19
	.byte	'Ifx_GTM_CMU_CLK_EN_Bits',0,12,211,11,3
	.word	40951
	.byte	19
	.byte	'Ifx_GTM_CMU_CLK__CTRL_Bits',0,12,219,11,3
	.word	41512
	.byte	19
	.byte	'Ifx_GTM_CMU_ECLK_DEN_Bits',0,12,226,11,3
	.word	41817
	.byte	19
	.byte	'Ifx_GTM_CMU_ECLK_NUM_Bits',0,12,233,11,3
	.word	41700
	.byte	19
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,12,240,11,3
	.word	41999
	.byte	19
	.byte	'Ifx_GTM_CMU_GCLK_DEN_Bits',0,12,247,11,3
	.word	41395
	.byte	19
	.byte	'Ifx_GTM_CMU_GCLK_NUM_Bits',0,12,254,11,3
	.word	41278
	.byte	19
	.byte	'Ifx_GTM_CMU_GLB_CTRL_Bits',0,12,133,12,3
	.word	42163
	.byte	19
	.byte	'Ifx_GTM_CTRL_Bits',0,12,145,12,3
	.word	24195
	.byte	19
	.byte	'Ifx_GTM_DATAIN_Bits',0,12,151,12,3
	.word	111773
	.byte	19
	.byte	'Ifx_GTM_DPLL_ACB_Bits',0,12,164,12,3
	.word	99475
	.byte	19
	.byte	'Ifx_GTM_DPLL_ACT_STA_Bits',0,12,170,12,3
	.word	84318
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,12,177,12,3
	.word	93775
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,12,184,12,3
	.word	93899
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,12,191,12,3
	.word	89755
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,12,198,12,3
	.word	89877
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADT_S_Bits',0,12,207,12,3
	.word	98946
	.byte	11
	.byte	'_Ifx_GTM_DPLL_ADT_TI_Bits',0,12,210,12,16,4,12
	.byte	'PD',0,4
	.word	930
	.byte	13,19,2,35,0,12
	.byte	'TINT',0,4
	.word	930
	.byte	3,16,2,35,0,12
	.byte	'NT',0,4
	.word	930
	.byte	3,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	5,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_GTM_DPLL_ADT_TI_Bits',0,12,217,12,3
	.word	171402
	.byte	19
	.byte	'Ifx_GTM_DPLL_AOSV_2_Bits',0,12,226,12,3
	.word	84575
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_Bits',0,12,238,12,3
	.word	84930
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_1C3_Bits',0,12,246,12,3
	.word	85273
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_1C3_EXT_Bits',0,12,254,12,3
	.word	101270
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_EXT_Bits',0,12,138,13,3
	.word	101059
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_SYNC_Bits',0,12,148,13,3
	.word	89323
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_SYNC_EXT_Bits',0,12,158,13,3
	.word	100710
	.byte	19
	.byte	'Ifx_GTM_DPLL_APT_Bits',0,12,170,13,3
	.word	84724
	.byte	19
	.byte	'Ifx_GTM_DPLL_APT_2C_Bits',0,12,178,13,3
	.word	85137
	.byte	19
	.byte	'Ifx_GTM_DPLL_APT_SYNC_Bits',0,12,188,13,3
	.word	89134
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_SX_Bits',0,12,195,13,3
	.word	96393
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,12,202,13,3
	.word	96629
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_TX_Bits',0,12,209,13,3
	.word	96279
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,12,216,13,3
	.word	96507
	.byte	19
	.byte	'Ifx_GTM_DPLL_CNT_NUM_1_Bits',0,12,223,13,3
	.word	97408
	.byte	19
	.byte	'Ifx_GTM_DPLL_CNT_NUM_2_Bits',0,12,230,13,3
	.word	97528
	.byte	19
	.byte	'Ifx_GTM_DPLL_CSN_MAX_Bits',0,12,237,13,3
	.word	103521
	.byte	19
	.byte	'Ifx_GTM_DPLL_CSN_MIN_Bits',0,12,244,13,3
	.word	103405
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTN_MAX_Bits',0,12,251,13,3
	.word	103289
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTN_MIN_Bits',0,12,130,14,3
	.word	103173
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_0_Bits',0,12,146,14,3
	.word	82130
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,12,159,14,3
	.word	90948
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,12,172,14,3
	.word	90716
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_1_Bits',0,12,198,14,3
	.word	82368
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_11_Bits',0,12,235,14,3
	.word	99713
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_STATE_Bits',0,12,251,14,3
	.word	91410
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,12,136,15,3
	.word	91185
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_2_Bits',0,12,159,15,3
	.word	82778
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_3_Bits',0,12,182,15,3
	.word	83152
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_4_Bits',0,12,205,15,3
	.word	83538
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_5_Bits',0,12,228,15,3
	.word	83928
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_EXT_Bits',0,12,237,15,3
	.word	100906
	.byte	19
	.byte	'Ifx_GTM_DPLL_DLA_Bits',0,12,244,15,3
	.word	92002
	.byte	19
	.byte	'Ifx_GTM_DPLL_DTA_Bits',0,12,251,15,3
	.word	92273
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_S_Bits',0,12,130,16,3
	.word	99104
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_S_ACT_Bits',0,12,137,16,3
	.word	95709
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_S_START_Bits',0,12,144,16,3
	.word	102006
	.byte	11
	.byte	'_Ifx_GTM_DPLL_DT_TI_Bits',0,12,147,16,16,4,12
	.byte	'DT_T',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_GTM_DPLL_DT_TI_Bits',0,12,151,16,3
	.word	172903
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_T_ACT_Bits',0,12,158,16,3
	.word	95591
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_T_START_Bits',0,12,165,16,3
	.word	101879
	.byte	19
	.byte	'Ifx_GTM_DPLL_EDT_S_Bits',0,12,172,16,3
	.word	96053
	.byte	19
	.byte	'Ifx_GTM_DPLL_EDT_T_Bits',0,12,179,16,3
	.word	95827
	.byte	19
	.byte	'Ifx_GTM_DPLL_EIRQ_EN_Bits',0,12,213,16,3
	.word	88129
	.byte	19
	.byte	'Ifx_GTM_DPLL_FTV_S_Bits',0,12,220,16,3
	.word	92984
	.byte	19
	.byte	'Ifx_GTM_DPLL_FTV_T_Bits',0,12,227,16,3
	.word	92631
	.byte	19
	.byte	'Ifx_GTM_DPLL_ID_PMTR_Bits',0,12,234,16,3
	.word	90580
	.byte	19
	.byte	'Ifx_GTM_DPLL_INCF1_OFFSET_Bits',0,12,241,16,3
	.word	101617
	.byte	19
	.byte	'Ifx_GTM_DPLL_INCF2_OFFSET_Bits',0,12,248,16,3
	.word	101748
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT1_Bits',0,12,255,16,3
	.word	88898
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT1_MASK_Bits',0,12,134,17,3
	.word	102493
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT2_Bits',0,12,141,17,3
	.word	89016
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT2_MASK_Bits',0,12,148,17,3
	.word	102623
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_EN_Bits',0,12,182,17,3
	.word	86540
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,12,216,17,3
	.word	87271
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_MODE_Bits',0,12,223,17,3
	.word	87923
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,12,129,18,3
	.word	86001
	.byte	19
	.byte	'Ifx_GTM_DPLL_MEDT_S_Bits',0,12,136,18,3
	.word	96165
	.byte	19
	.byte	'Ifx_GTM_DPLL_MEDT_T_Bits',0,12,143,18,3
	.word	95939
	.byte	19
	.byte	'Ifx_GTM_DPLL_MLS1_Bits',0,12,151,18,3
	.word	97142
	.byte	19
	.byte	'Ifx_GTM_DPLL_MLS2_Bits',0,12,159,18,3
	.word	97275
	.byte	19
	.byte	'Ifx_GTM_DPLL_MPVAL1_Bits',0,12,167,18,3
	.word	94023
	.byte	19
	.byte	'Ifx_GTM_DPLL_MPVAL2_Bits',0,12,175,18,3
	.word	94153
	.byte	19
	.byte	'Ifx_GTM_DPLL_NA_Bits',0,12,184,18,3
	.word	92120
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_S_Bits',0,12,192,18,3
	.word	98567
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,12,200,18,3
	.word	94577
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,12,208,18,3
	.word	94720
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_T_Bits',0,12,216,18,3
	.word	98432
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,12,224,18,3
	.word	94283
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,12,232,18,3
	.word	94426
	.byte	19
	.byte	'Ifx_GTM_DPLL_NTI_CNT_Bits',0,12,239,18,3
	.word	85885
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUSC_Bits',0,12,253,18,3
	.word	85659
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUSC_EXT1_Bits',0,12,136,19,3
	.word	102753
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUSC_EXT2_Bits',0,12,149,19,3
	.word	102951
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUTC_Bits',0,12,164,19,3
	.word	85410
	.byte	19
	.byte	'Ifx_GTM_DPLL_OSW_Bits',0,12,174,19,3
	.word	84409
	.byte	19
	.byte	'Ifx_GTM_DPLL_PDT_Bits',0,12,182,19,3
	.word	97011
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSA_Bits',0,12,189,19,3
	.word	91884
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSAC_Bits',0,12,196,19,3
	.word	99355
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSSC_Bits',0,12,203,19,3
	.word	97866
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSSM_Bits',0,12,210,19,3
	.word	98204
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSSM_OLD_Bits',0,12,217,19,3
	.word	98314
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSTC_Bits',0,12,224,19,3
	.word	97756
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSTM_Bits',0,12,231,19,3
	.word	97976
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSTM_OLD_Bits',0,12,238,19,3
	.word	98086
	.byte	19
	.byte	'Ifx_GTM_DPLL_PVT_Bits',0,12,245,19,3
	.word	97648
	.byte	19
	.byte	'Ifx_GTM_DPLL_RAM_INI_Bits',0,12,128,20,3
	.word	91689
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_SX_Bits',0,12,135,20,3
	.word	94987
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,12,142,20,3
	.word	95227
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_TX_Bits',0,12,149,20,3
	.word	94871
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,12,156,20,3
	.word	95103
	.byte	19
	.byte	'Ifx_GTM_DPLL_RDT_S_Bits',0,12,163,20,3
	.word	98702
	.byte	19
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,12,170,20,3
	.word	95471
	.byte	11
	.byte	'_Ifx_GTM_DPLL_RDT_TI_Bits',0,12,173,20,16,4,12
	.byte	'RDT_T',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_GTM_DPLL_RDT_TI_Bits',0,12,177,20,3
	.word	174898
	.byte	19
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,12,184,20,3
	.word	95351
	.byte	19
	.byte	'Ifx_GTM_DPLL_SIDEL_Bits',0,12,191,20,3
	.word	100598
	.byte	19
	.byte	'Ifx_GTM_DPLL_SLR_Bits',0,12,199,20,3
	.word	96881
	.byte	19
	.byte	'Ifx_GTM_DPLL_STA_Bits',0,12,211,20,3
	.word	101411
	.byte	19
	.byte	'Ifx_GTM_DPLL_STATUS_Bits',0,12,247,20,3
	.word	89999
	.byte	19
	.byte	'Ifx_GTM_DPLL_STA_FLAG_Bits',0,12,130,21,3
	.word	102279
	.byte	19
	.byte	'Ifx_GTM_DPLL_STA_MASK_Bits',0,12,138,21,3
	.word	102133
	.byte	19
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,12,145,21,3
	.word	89635
	.byte	19
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,12,152,21,3
	.word	89515
	.byte	19
	.byte	'Ifx_GTM_DPLL_THMA_Bits',0,12,160,21,3
	.word	93232
	.byte	19
	.byte	'Ifx_GTM_DPLL_THMI_Bits',0,12,168,21,3
	.word	93099
	.byte	19
	.byte	'Ifx_GTM_DPLL_THVAL_Bits',0,12,175,21,3
	.word	93365
	.byte	19
	.byte	'Ifx_GTM_DPLL_THVAL2_Bits',0,12,182,21,3
	.word	100373
	.byte	19
	.byte	'Ifx_GTM_DPLL_TIDEL_Bits',0,12,189,21,3
	.word	100486
	.byte	19
	.byte	'Ifx_GTM_DPLL_TLR_Bits',0,12,197,21,3
	.word	96751
	.byte	19
	.byte	'Ifx_GTM_DPLL_TOV_Bits',0,12,206,21,3
	.word	93477
	.byte	19
	.byte	'Ifx_GTM_DPLL_TOV_S_Bits',0,12,215,21,3
	.word	93629
	.byte	19
	.byte	'Ifx_GTM_DPLL_TSAC_Bits',0,12,222,21,3
	.word	99235
	.byte	19
	.byte	'Ifx_GTM_DPLL_TSF_S_Bits',0,12,229,21,3
	.word	98824
	.byte	11
	.byte	'_Ifx_GTM_DPLL_TSF_TI_Bits',0,12,232,21,16,4,12
	.byte	'TSF_T',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_GTM_DPLL_TSF_TI_Bits',0,12,236,21,3
	.word	175641
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_S_Bits',0,12,243,21,3
	.word	92748
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_S_OLD_Bits',0,12,250,21,3
	.word	92862
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_T_Bits',0,12,129,22,3
	.word	92391
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_T_OLD_Bits',0,12,136,22,3
	.word	92507
	.byte	19
	.byte	'Ifx_GTM_DSADCINSEL_Bits',0,12,149,22,3
	.word	109477
	.byte	19
	.byte	'Ifx_GTM_DSADC_OUTSEL0_Bits',0,12,161,22,3
	.word	109702
	.byte	19
	.byte	'Ifx_GTM_DTMAUXINSEL_Bits',0,12,176,22,3
	.word	114579
	.byte	19
	.byte	'Ifx_GTM_DXINCON_Bits',0,12,193,22,3
	.word	111504
	.byte	19
	.byte	'Ifx_GTM_DXOUTCON_Bits',0,12,204,22,3
	.word	110397
	.byte	19
	.byte	'Ifx_GTM_EIRQ_EN_Bits',0,12,219,22,3
	.word	25903
	.byte	19
	.byte	'Ifx_GTM_EXT_CAP_EN_Bits',0,12,227,22,3
	.word	28694
	.byte	19
	.byte	'Ifx_GTM_HW_CONF_Bits',0,12,252,22,3
	.word	26274
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI0_Bits',0,12,154,23,3
	.word	54452
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI1_Bits',0,12,191,23,3
	.word	55174
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI2_Bits',0,12,228,23,3
	.word	56049
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI3_Bits',0,12,137,24,3
	.word	56924
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI4_Bits',0,12,174,24,3
	.word	57799
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI_MCS_Bits',0,12,188,24,3
	.word	58683
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI_PSM_Bits',0,12,218,24,3
	.word	58993
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI_SPE_Bits',0,12,230,24,3
	.word	59751
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_ATOM_Bits',0,12,139,25,3
	.word	61777
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_MCS_Bits',0,12,153,25,3
	.word	60533
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_PSM_Bits',0,12,183,25,3
	.word	60825
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_SPE_Bits',0,12,195,25,3
	.word	61558
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_TOM_Bits',0,12,232,25,3
	.word	62728
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_MEI_Bits',0,12,136,26,3
	.word	53810
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_MEI_CLS_Bits',0,12,161,26,3
	.word	59986
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R0_Bits',0,12,195,26,3
	.word	45488
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R1_Bits',0,12,228,26,3
	.word	46230
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R10_Bits',0,12,137,27,3
	.word	52936
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R2_Bits',0,12,174,27,3
	.word	46993
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R3_Bits',0,12,211,27,3
	.word	47834
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R4_Bits',0,12,248,27,3
	.word	48675
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R5_Bits',0,12,157,28,3
	.word	49516
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R6_Bits',0,12,194,28,3
	.word	50357
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R7_Bits',0,12,231,28,3
	.word	51210
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R9_Bits',0,12,140,29,3
	.word	52063
	.byte	19
	.byte	'Ifx_GTM_INTOUT_Bits',0,12,147,29,3
	.word	110806
	.byte	19
	.byte	'Ifx_GTM_IRQ_EN_Bits',0,12,162,29,3
	.word	25007
	.byte	19
	.byte	'Ifx_GTM_IRQ_FORCINT_Bits',0,12,177,29,3
	.word	25368
	.byte	19
	.byte	'Ifx_GTM_IRQ_MODE_Bits',0,12,184,29,3
	.word	25707
	.byte	19
	.byte	'Ifx_GTM_IRQ_NOTIFY_Bits',0,12,205,29,3
	.word	24543
	.byte	19
	.byte	'Ifx_GTM_LCDCDCOUTSEL_Bits',0,12,212,29,3
	.word	114468
	.byte	19
	.byte	'Ifx_GTM_MAP_CTRL_Bits',0,12,235,29,3
	.word	67193
	.byte	19
	.byte	'Ifx_GTM_MCFG_CTRL_Bits',0,12,251,29,3
	.word	67641
	.byte	19
	.byte	'Ifx_GTM_MCSINTCLR_Bits',0,12,134,30,3
	.word	111331
	.byte	19
	.byte	'Ifx_GTM_MCSINTSTAT_Bits',0,12,145,30,3
	.word	111152
	.byte	19
	.byte	'Ifx_GTM_MCSTRIGOUTSEL_Bits',0,12,158,30,3
	.word	110921
	.byte	19
	.byte	'Ifx_GTM_MCS_AEM_DIS_Bits',0,12,176,30,3
	.word	27829
	.byte	19
	.byte	'Ifx_GTM_MCS_CAT_Bits',0,12,190,30,3
	.word	126032
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_ACB_Bits',0,12,201,30,3
	.word	122777
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_CTRG_Bits',0,12,231,30,3
	.word	122951
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_CTRL_Bits',0,12,250,30,3
	.word	122476
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,12,131,31,3
	.word	124871
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,12,140,31,3
	.word	124319
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,12,149,31,3
	.word	124486
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,12,156,31,3
	.word	124661
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,12,165,31,3
	.word	124157
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_MHB_Bits',0,12,172,31,3
	.word	123939
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_PC_Bits',0,12,179,31,3
	.word	124049
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_R_Bits',0,12,186,31,3
	.word	122358
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_STRG_Bits',0,12,216,31,3
	.word	123445
	.byte	19
	.byte	'Ifx_GTM_MCS_CTRL_STAT_Bits',0,12,234,31,3
	.word	125454
	.byte	19
	.byte	'Ifx_GTM_MCS_CWT_Bits',0,12,248,31,3
	.word	126251
	.byte	19
	.byte	'Ifx_GTM_MCS_ERR_Bits',0,12,134,32,3
	.word	126470
	.byte	19
	.byte	'Ifx_GTM_MCS_REG_PROT_Bits',0,12,148,32,3
	.word	125213
	.byte	19
	.byte	'Ifx_GTM_MCS_RESET_Bits',0,12,162,32,3
	.word	125811
	.byte	19
	.byte	'Ifx_GTM_MON_ACTIVITY_MCS_Bits',0,12,176,32,3
	.word	33397
	.byte	19
	.byte	'Ifx_GTM_MON_ACTIVITY_R0_Bits',0,12,213,32,3
	.word	32027
	.byte	19
	.byte	'Ifx_GTM_MON_ACTIVITY_R1_Bits',0,12,250,32,3
	.word	32712
	.byte	19
	.byte	'Ifx_GTM_MON_STATUS_Bits',0,12,156,33,3
	.word	31339
	.byte	19
	.byte	'Ifx_GTM_MSC_MSCQ_INHCON_Bits',0,12,177,33,3
	.word	113221
	.byte	19
	.byte	'Ifx_GTM_MSC_MSCQ_INLCON_Bits',0,12,198,33,3
	.word	112882
	.byte	19
	.byte	'Ifx_GTM_MSC_MSCQ_INLEXTCON_Bits',0,12,219,33,3
	.word	113560
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON0_Bits',0,12,232,33,3
	.word	111866
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON1_Bits',0,12,245,33,3
	.word	112095
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON2_Bits',0,12,130,34,3
	.word	112324
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON3_Bits',0,12,143,34,3
	.word	112555
	.byte	19
	.byte	'Ifx_GTM_OCDS_OCS_Bits',0,12,153,34,3
	.word	108723
	.byte	19
	.byte	'Ifx_GTM_OCDS_ODA_Bits',0,12,160,34,3
	.word	108615
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU0T_Bits',0,12,169,34,3
	.word	107335
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU1T_Bits',0,12,178,34,3
	.word	107482
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU2T_Bits',0,12,187,34,3
	.word	107629
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU3T_Bits',0,12,196,34,3
	.word	107776
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTSC0_Bits',0,12,213,34,3
	.word	108155
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTSC1_Bits',0,12,223,34,3
	.word	108454
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTSS_Bits',0,12,236,34,3
	.word	107923
	.byte	19
	.byte	'Ifx_GTM_OUT_ATOM_Bits',0,12,245,34,3
	.word	28974
	.byte	19
	.byte	'Ifx_GTM_OUT_TOM_Bits',0,12,252,34,3
	.word	28856
	.byte	19
	.byte	'Ifx_GTM_PSI5OUTSEL_Bits',0,12,136,35,3
	.word	114076
	.byte	19
	.byte	'Ifx_GTM_PSI5SOUTSEL_Bits',0,12,149,35,3
	.word	114267
	.byte	19
	.byte	'Ifx_GTM_PSM_AFD_CH_BUF_ACC_Bits',0,12,156,35,3
	.word	79130
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_ENABLE_Bits',0,12,170,35,3
	.word	78601
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_F2A_CTRL_Bits',0,12,180,35,3
	.word	78852
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,12,187,35,3
	.word	78188
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_STR_CH_STR_CFG_Bits',0,12,196,35,3
	.word	78378
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_CTRL_Bits',0,12,206,35,3
	.word	79382
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_EIRQ_EN_Bits',0,12,216,35,3
	.word	81443
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_END_ADDR_Bits',0,12,223,35,3
	.word	79547
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_FILL_LEVEL_Bits',0,12,230,35,3
	.word	80203
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_EN_Bits',0,12,240,35,3
	.word	80754
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_FORCINT_Bits',0,12,250,35,3
	.word	80967
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_MODE_Bits',0,12,131,36,3
	.word	81173
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_NOTIFY_Bits',0,12,141,36,3
	.word	80565
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_LOWER_WM_Bits',0,12,148,36,3
	.word	79912
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_RD_PTR_Bits',0,12,155,36,3
	.word	80446
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_START_ADDR_Bits',0,12,162,36,3
	.word	79668
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_STATUS_Bits',0,12,172,36,3
	.word	80033
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_UPPER_WM_Bits',0,12,179,36,3
	.word	79791
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_WR_PTR_Bits',0,12,186,36,3
	.word	80327
	.byte	19
	.byte	'Ifx_GTM_RESET1_Bits',0,12,194,36,3
	.word	106448
	.byte	19
	.byte	'Ifx_GTM_RESET2_Bits',0,12,201,36,3
	.word	106572
	.byte	19
	.byte	'Ifx_GTM_RESET_CLR_Bits',0,12,208,36,3
	.word	106340
	.byte	19
	.byte	'Ifx_GTM_REV_Bits',0,12,220,36,3
	.word	23842
	.byte	19
	.byte	'Ifx_GTM_RST_Bits',0,12,229,36,3
	.word	24034
	.byte	19
	.byte	'Ifx_GTM_SPE_CMD_Bits',0,12,238,36,3
	.word	66790
	.byte	19
	.byte	'Ifx_GTM_SPE_CTRL_STAT_Bits',0,12,131,37,3
	.word	64357
	.byte	19
	.byte	'Ifx_GTM_SPE_CTRL_STAT2_Bits',0,12,139,37,3
	.word	66642
	.byte	19
	.byte	'Ifx_GTM_SPE_EIRQ_EN_Bits',0,12,150,37,3
	.word	66178
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_EN_Bits',0,12,161,37,3
	.word	65528
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,12,172,37,3
	.word	65756
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_MODE_Bits',0,12,179,37,3
	.word	65974
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,12,190,37,3
	.word	65331
	.byte	19
	.byte	'Ifx_GTM_SPE_OUT_CTRL_Bits',0,12,197,37,3
	.word	65210
	.byte	19
	.byte	'Ifx_GTM_SPE_OUT_PAT_Bits',0,12,204,37,3
	.word	65082
	.byte	19
	.byte	'Ifx_GTM_SPE_PAT_Bits',0,12,225,37,3
	.word	64709
	.byte	19
	.byte	'Ifx_GTM_SPE_REV_CMP_Bits',0,12,232,37,3
	.word	66527
	.byte	19
	.byte	'Ifx_GTM_SPE_REV_CNT_Bits',0,12,239,37,3
	.word	66412
	.byte	19
	.byte	'Ifx_GTM_TBU_CH0_BASE_Bits',0,12,246,37,3
	.word	29964
	.byte	19
	.byte	'Ifx_GTM_TBU_CH0_CTRL_Bits',0,12,254,37,3
	.word	29827
	.byte	19
	.byte	'Ifx_GTM_TBU_CH1_BASE_Bits',0,12,133,38,3
	.word	30214
	.byte	19
	.byte	'Ifx_GTM_TBU_CH1_CTRL_Bits',0,12,141,38,3
	.word	30077
	.byte	19
	.byte	'Ifx_GTM_TBU_CH2_BASE_Bits',0,12,148,38,3
	.word	30464
	.byte	19
	.byte	'Ifx_GTM_TBU_CH2_CTRL_Bits',0,12,156,38,3
	.word	30327
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_BASE_Bits',0,12,163,38,3
	.word	30733
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_BASE_CAPTURE_Bits',0,12,170,38,3
	.word	30969
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_BASE_MARK_Bits',0,12,177,38,3
	.word	30846
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_CTRL_Bits',0,12,186,38,3
	.word	30577
	.byte	19
	.byte	'Ifx_GTM_TBU_CHEN_Bits',0,12,196,38,3
	.word	29651
	.byte	19
	.byte	'Ifx_GTM_TIMINSEL_Bits',0,12,209,38,3
	.word	109048
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_CNT_Bits',0,12,216,38,3
	.word	68151
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_CNTS_Bits',0,12,223,38,3
	.word	68373
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_CTRL_Bits',0,12,252,38,3
	.word	69097
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_ECNT_Bits',0,12,131,39,3
	.word	68261
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_ECTRL_Bits',0,12,154,39,3
	.word	69646
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,12,166,39,3
	.word	71037
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_FLT_FE_Bits',0,12,173,39,3
	.word	68981
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_FLT_RE_Bits',0,12,180,39,3
	.word	68865
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_GPR0_Bits',0,12,187,39,3
	.word	67941
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_GPR1_Bits',0,12,194,39,3
	.word	68046
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,12,206,39,3
	.word	70340
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,12,218,39,3
	.word	70590
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,12,225,39,3
	.word	70827
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,12,237,39,3
	.word	70128
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_TDUC_Bits',0,12,246,39,3
	.word	68478
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_TDUV_Bits',0,12,131,40,3
	.word	68630
	.byte	19
	.byte	'Ifx_GTM_TIM_INP_VAL_Bits',0,12,140,40,3
	.word	71519
	.byte	19
	.byte	'Ifx_GTM_TIM_IN_SRC_Bits',0,12,161,40,3
	.word	71666
	.byte	19
	.byte	'Ifx_GTM_TIM_RST_Bits',0,12,175,40,3
	.word	72018
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CM0_Bits',0,12,182,40,3
	.word	73405
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CM1_Bits',0,12,189,40,3
	.word	73515
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CN0_Bits',0,12,196,40,3
	.word	73625
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CTRL_Bits',0,12,222,40,3
	.word	72703
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,12,230,40,3
	.word	73981
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,12,238,40,3
	.word	74128
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,12,245,40,3
	.word	74276
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,12,253,40,3
	.word	73844
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_SR0_Bits',0,12,132,41,3
	.word	73185
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_SR1_Bits',0,12,139,41,3
	.word	73295
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_STAT_Bits',0,12,146,41,3
	.word	73735
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_ACT_TB_Bits',0,12,155,41,3
	.word	75069
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_CTRL_Bits',0,12,169,41,3
	.word	75929
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_STAT_Bits',0,12,183,41,3
	.word	76216
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_FUPD_CTRL_Bits',0,12,204,41,3
	.word	75224
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_GLB_CTRL_Bits',0,12,227,41,3
	.word	74620
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_INT_TRIG_Bits',0,12,241,41,3
	.word	75655
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_CTRL_Bits',0,12,255,41,3
	.word	76503
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_STAT_Bits',0,12,141,42,3
	.word	76790
	.byte	19
	.byte	'Ifx_GTM_TOUTSEL_Bits',0,12,154,42,3
	.word	109271
	.byte	19
	.byte	'Ifx_GTM_TRIGOUT_Bits',0,12,168,42,3
	.word	110569
	.byte	19
	.byte	'Ifx_GTM_ACCEN0',0,12,181,42,3
	.word	107206
	.byte	19
	.byte	'Ifx_GTM_ACCEN1',0,12,189,42,3
	.word	107295
	.byte	19
	.byte	'Ifx_GTM_ADCTRIG_OUT0',0,12,197,42,3
	.word	110130
	.byte	19
	.byte	'Ifx_GTM_ADCTRIG_OUT1',0,12,205,42,3
	.word	110291
	.byte	19
	.byte	'Ifx_GTM_AEI_ADDR_XPT',0,12,213,42,3
	.word	24503
	.byte	19
	.byte	'Ifx_GTM_AEI_STA_XPT',0,12,221,42,3
	.word	27055
	.byte	19
	.byte	'Ifx_GTM_ARU_ACCESS',0,12,229,42,3
	.word	37276
	.byte	19
	.byte	'Ifx_GTM_ARU_CADDR',0,12,237,42,3
	.word	40583
	.byte	19
	.byte	'Ifx_GTM_ARU_CADDR_END',0,12,245,42,3
	.word	39152
	.byte	19
	.byte	'Ifx_GTM_ARU_CTRL',0,12,253,42,3
	.word	39321
	.byte	19
	.byte	'Ifx_GTM_ARU_DATA_H',0,12,133,43,3
	.word	37387
	.byte	19
	.byte	'Ifx_GTM_ARU_DATA_L',0,12,141,43,3
	.word	37498
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0',0,12,149,43,3
	.word	37613
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1',0,12,157,43,3
	.word	37960
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H',0,12,165,43,3
	.word	37729
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L',0,12,173,43,3
	.word	37845
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H',0,12,181,43,3
	.word	38076
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L',0,12,189,43,3
	.word	38192
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_CTRL',0,12,197,43,3
	.word	39472
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_RDADDR',0,12,205,43,3
	.word	40420
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_HIGH',0,12,213,43,3
	.word	39863
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_LOW',0,12,221,43,3
	.word	39655
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_HIGH',0,12,229,43,3
	.word	40287
	.byte	19
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_LOW',0,12,237,43,3
	.word	40049
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_EN',0,12,245,43,3
	.word	38658
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT',0,12,253,43,3
	.word	38830
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_MODE',0,12,133,44,3
	.word	38946
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY',0,12,141,44,3
	.word	38482
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB',0,12,149,44,3
	.word	17581
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL',0,12,157,44,3
	.word	17137
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT',0,12,165,44,3
	.word	17425
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL',0,12,173,44,3
	.word	18589
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL',0,12,181,44,3
	.word	16849
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG',0,12,189,44,3
	.word	18859
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL',0,12,197,44,3
	.word	17869
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT',0,12,205,44,3
	.word	18157
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CM0',0,12,213,44,3
	.word	15159
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CM1',0,12,221,44,3
	.word	15270
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CN0',0,12,229,44,3
	.word	15381
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_CTRL',0,12,237,44,3
	.word	11853
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN',0,12,245,44,3
	.word	15875
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT',0,12,253,44,3
	.word	16022
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE',0,12,133,45,3
	.word	16142
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY',0,12,141,45,3
	.word	15727
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_RDADDR',0,12,149,45,3
	.word	11337
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMB',0,12,157,45,3
	.word	12409
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMC',0,12,165,45,3
	.word	12964
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMI',0,12,173,45,3
	.word	13531
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMP',0,12,181,45,3
	.word	14146
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SOMS',0,12,189,45,3
	.word	14735
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SR0',0,12,197,45,3
	.word	14937
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_SR1',0,12,205,45,3
	.word	15048
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_STAT',0,12,213,45,3
	.word	15589
	.byte	19
	.byte	'Ifx_GTM_AUX_IN_SRC_TIM',0,12,221,45,3
	.word	28600
	.byte	19
	.byte	'Ifx_GTM_BRC_EIRQ_EN',0,12,229,45,3
	.word	45356
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_EN',0,12,237,45,3
	.word	44266
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT',0,12,245,45,3
	.word	44632
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_MODE',0,12,253,45,3
	.word	44748
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY',0,12,133,46,3
	.word	43866
	.byte	19
	.byte	'Ifx_GTM_BRC_RST',0,12,141,46,3
	.word	44942
	.byte	19
	.byte	'Ifx_GTM_BRC_SRC_ADDR',0,12,149,46,3
	.word	42915
	.byte	19
	.byte	'Ifx_GTM_BRC_SRC_DEST',0,12,157,46,3
	.word	43487
	.byte	19
	.byte	'Ifx_GTM_BRIDGE_MODE',0,12,165,46,3
	.word	27392
	.byte	19
	.byte	'Ifx_GTM_BRIDGE_PTR1',0,12,173,46,3
	.word	27600
	.byte	19
	.byte	'Ifx_GTM_BRIDGE_PTR2',0,12,181,46,3
	.word	27719
	.byte	19
	.byte	'Ifx_GTM_CANOUTSEL0',0,12,189,46,3
	.word	114994
	.byte	19
	.byte	'Ifx_GTM_CANOUTSEL1',0,12,197,46,3
	.word	115153
	.byte	19
	.byte	'Ifx_GTM_CCM_AEIM_STA',0,12,205,46,3
	.word	115834
	.byte	19
	.byte	'Ifx_GTM_CCM_ARP_CTRL',0,12,213,46,3
	.word	115359
	.byte	19
	.byte	'Ifx_GTM_CCM_ARP_PROT',0,12,221,46,3
	.word	115599
	.byte	19
	.byte	'Ifx_GTM_CCM_ATOM_OUT',0,12,229,46,3
	.word	117339
	.byte	19
	.byte	'Ifx_GTM_CCM_CFG',0,12,237,46,3
	.word	118226
	.byte	19
	.byte	'Ifx_GTM_CCM_CMU_CLK_CFG',0,12,245,46,3
	.word	117758
	.byte	19
	.byte	'Ifx_GTM_CCM_CMU_FXCLK_CFG',0,12,253,46,3
	.word	117881
	.byte	19
	.byte	'Ifx_GTM_CCM_EXT_CAP_EN',0,12,133,47,3
	.word	117056
	.byte	19
	.byte	'Ifx_GTM_CCM_HW_CONF',0,12,141,47,3
	.word	116422
	.byte	19
	.byte	'Ifx_GTM_CCM_PROT',0,12,149,47,3
	.word	118338
	.byte	19
	.byte	'Ifx_GTM_CCM_TIM_AUX_IN_SRC',0,12,157,47,3
	.word	116899
	.byte	19
	.byte	'Ifx_GTM_CCM_TOM_OUT',0,12,165,47,3
	.word	117169
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL1',0,12,173,47,3
	.word	119445
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2',0,12,181,47,3
	.word	120076
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2_SR',0,12,189,47,3
	.word	120806
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL3',0,12,197,47,3
	.word	121999
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_DTV',0,12,205,47,3
	.word	121212
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH_SR',0,12,213,47,3
	.word	121549
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CTRL',0,12,221,47,3
	.word	118860
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_PS_CTRL',0,12,229,47,3
	.word	121051
	.byte	19
	.byte	'Ifx_GTM_CFG',0,12,237,47,3
	.word	26927
	.byte	19
	.byte	'Ifx_GTM_CLC',0,12,245,47,3
	.word	106300
	.byte	19
	.byte	'Ifx_GTM_CLS_CLK_CFG',0,12,253,47,3
	.word	29602
	.byte	19
	.byte	'Ifx_GTM_CMP_EIRQ_EN',0,12,133,48,3
	.word	37035
	.byte	19
	.byte	'Ifx_GTM_CMP_EN',0,12,141,48,3
	.word	34337
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_EN',0,12,149,48,3
	.word	35523
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT',0,12,157,48,3
	.word	36131
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_MODE',0,12,165,48,3
	.word	36247
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY',0,12,173,48,3
	.word	34848
	.byte	19
	.byte	'Ifx_GTM_CMU_CLK_CTRL',0,12,181,48,3
	.word	42594
	.byte	19
	.byte	'Ifx_GTM_CMU_CLK_EN',0,12,189,48,3
	.word	41238
	.byte	19
	.byte	'Ifx_GTM_CMU_CLK__CTRL',0,12,197,48,3
	.word	41608
	.byte	19
	.byte	'Ifx_GTM_CMU_ECLK_DEN',0,12,205,48,3
	.word	41894
	.byte	19
	.byte	'Ifx_GTM_CMU_ECLK_NUM',0,12,213,48,3
	.word	41777
	.byte	19
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL',0,12,221,48,3
	.word	42078
	.byte	19
	.byte	'Ifx_GTM_CMU_GCLK_DEN',0,12,229,48,3
	.word	41472
	.byte	19
	.byte	'Ifx_GTM_CMU_GCLK_NUM',0,12,237,48,3
	.word	41355
	.byte	19
	.byte	'Ifx_GTM_CMU_GLB_CTRL',0,12,245,48,3
	.word	42246
	.byte	19
	.byte	'Ifx_GTM_CTRL',0,12,253,48,3
	.word	24368
	.byte	19
	.byte	'Ifx_GTM_DATAIN',0,12,133,49,3
	.word	111817
	.byte	19
	.byte	'Ifx_GTM_DPLL_ACB',0,12,141,49,3
	.word	99664
	.byte	19
	.byte	'Ifx_GTM_DPLL_ACT_STA',0,12,149,49,3
	.word	84369
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1',0,12,157,49,3
	.word	93859
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2',0,12,165,49,3
	.word	93983
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1',0,12,173,49,3
	.word	89837
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2',0,12,181,49,3
	.word	89959
	.byte	19
	.byte	'Ifx_GTM_DPLL_ADT_S',0,12,189,49,3
	.word	99054
	.byte	19
	.byte	'Ifx_GTM_DPLL_AOSV_2',0,12,205,49,3
	.word	84684
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS',0,12,213,49,3
	.word	85097
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_1C3',0,12,221,49,3
	.word	85370
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_1C3_EXT',0,12,229,49,3
	.word	101371
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_EXT',0,12,237,49,3
	.word	101230
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_SYNC',0,12,245,49,3
	.word	89475
	.byte	19
	.byte	'Ifx_GTM_DPLL_APS_SYNC_EXT',0,12,253,49,3
	.word	100866
	.byte	19
	.byte	'Ifx_GTM_DPLL_APT',0,12,133,50,3
	.word	84890
	.byte	19
	.byte	'Ifx_GTM_DPLL_APT_2C',0,12,141,50,3
	.word	85233
	.byte	19
	.byte	'Ifx_GTM_DPLL_APT_SYNC',0,12,149,50,3
	.word	89283
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_SX',0,12,157,50,3
	.word	96467
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM',0,12,165,50,3
	.word	96711
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_TX',0,12,173,50,3
	.word	96353
	.byte	19
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM',0,12,181,50,3
	.word	96589
	.byte	19
	.byte	'Ifx_GTM_DPLL_CNT_NUM_1',0,12,189,50,3
	.word	97488
	.byte	19
	.byte	'Ifx_GTM_DPLL_CNT_NUM_2',0,12,197,50,3
	.word	97608
	.byte	19
	.byte	'Ifx_GTM_DPLL_CSN_MAX',0,12,205,50,3
	.word	103597
	.byte	19
	.byte	'Ifx_GTM_DPLL_CSN_MIN',0,12,213,50,3
	.word	103481
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTN_MAX',0,12,221,50,3
	.word	103365
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTN_MIN',0,12,229,50,3
	.word	103249
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_0',0,12,237,50,3
	.word	82328
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE',0,12,245,50,3
	.word	91145
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER',0,12,253,50,3
	.word	90908
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_1',0,12,133,51,3
	.word	82738
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_11',0,12,141,51,3
	.word	100333
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_STATE',0,12,149,51,3
	.word	91649
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER',0,12,157,51,3
	.word	91370
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_2',0,12,165,51,3
	.word	83112
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_3',0,12,173,51,3
	.word	83498
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_4',0,12,181,51,3
	.word	83888
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_5',0,12,189,51,3
	.word	84278
	.byte	19
	.byte	'Ifx_GTM_DPLL_CTRL_EXT',0,12,197,51,3
	.word	101019
	.byte	19
	.byte	'Ifx_GTM_DPLL_DLA',0,12,205,51,3
	.word	92070
	.byte	19
	.byte	'Ifx_GTM_DPLL_DTA',0,12,213,51,3
	.word	92341
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_S',0,12,221,51,3
	.word	99174
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_S_ACT',0,12,229,51,3
	.word	95787
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_S_START',0,12,237,51,3
	.word	102093
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_T_ACT',0,12,253,51,3
	.word	95669
	.byte	19
	.byte	'Ifx_GTM_DPLL_DT_T_START',0,12,133,52,3
	.word	101966
	.byte	19
	.byte	'Ifx_GTM_DPLL_EDT_S',0,12,141,52,3
	.word	96125
	.byte	19
	.byte	'Ifx_GTM_DPLL_EDT_T',0,12,149,52,3
	.word	95899
	.byte	19
	.byte	'Ifx_GTM_DPLL_EIRQ_EN',0,12,157,52,3
	.word	88849
	.byte	19
	.byte	'Ifx_GTM_DPLL_FTV_S',0,12,165,52,3
	.word	93059
	.byte	19
	.byte	'Ifx_GTM_DPLL_FTV_T',0,12,173,52,3
	.word	92708
	.byte	19
	.byte	'Ifx_GTM_DPLL_ID_PMTR',0,12,181,52,3
	.word	90657
	.byte	19
	.byte	'Ifx_GTM_DPLL_INCF1_OFFSET',0,12,189,52,3
	.word	101708
	.byte	19
	.byte	'Ifx_GTM_DPLL_INCF2_OFFSET',0,12,197,52,3
	.word	101839
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT1',0,12,205,52,3
	.word	88976
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT1_MASK',0,12,213,52,3
	.word	102583
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT2',0,12,221,52,3
	.word	89094
	.byte	19
	.byte	'Ifx_GTM_DPLL_INC_CNT2_MASK',0,12,229,52,3
	.word	102713
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_EN',0,12,237,52,3
	.word	87231
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT',0,12,245,52,3
	.word	87883
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_MODE',0,12,253,52,3
	.word	88000
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY',0,12,133,53,3
	.word	86500
	.byte	19
	.byte	'Ifx_GTM_DPLL_MEDT_S',0,12,141,53,3
	.word	96239
	.byte	19
	.byte	'Ifx_GTM_DPLL_MEDT_T',0,12,149,53,3
	.word	96013
	.byte	19
	.byte	'Ifx_GTM_DPLL_MLS1',0,12,157,53,3
	.word	97235
	.byte	19
	.byte	'Ifx_GTM_DPLL_MLS2',0,12,165,53,3
	.word	97368
	.byte	19
	.byte	'Ifx_GTM_DPLL_MPVAL1',0,12,173,53,3
	.word	94113
	.byte	19
	.byte	'Ifx_GTM_DPLL_MPVAL2',0,12,181,53,3
	.word	94243
	.byte	19
	.byte	'Ifx_GTM_DPLL_NA',0,12,189,53,3
	.word	92223
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_S',0,12,197,53,3
	.word	98662
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR',0,12,205,53,3
	.word	94680
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD',0,12,213,53,3
	.word	94831
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_T',0,12,221,53,3
	.word	98527
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR',0,12,229,53,3
	.word	94386
	.byte	19
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD',0,12,237,53,3
	.word	94537
	.byte	19
	.byte	'Ifx_GTM_DPLL_NTI_CNT',0,12,245,53,3
	.word	85961
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUSC',0,12,253,53,3
	.word	85845
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUSC_EXT1',0,12,133,54,3
	.word	102911
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUSC_EXT2',0,12,141,54,3
	.word	103133
	.byte	19
	.byte	'Ifx_GTM_DPLL_NUTC',0,12,149,54,3
	.word	85619
	.byte	19
	.byte	'Ifx_GTM_DPLL_OSW',0,12,157,54,3
	.word	84535
	.byte	19
	.byte	'Ifx_GTM_DPLL_PDT',0,12,165,54,3
	.word	97092
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSA',0,12,173,54,3
	.word	91952
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSAC',0,12,181,54,3
	.word	99425
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSSC',0,12,189,54,3
	.word	97936
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSSM',0,12,197,54,3
	.word	98274
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSSM_OLD',0,12,205,54,3
	.word	98392
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSTC',0,12,213,54,3
	.word	97826
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSTM',0,12,221,54,3
	.word	98046
	.byte	19
	.byte	'Ifx_GTM_DPLL_PSTM_OLD',0,12,229,54,3
	.word	98164
	.byte	19
	.byte	'Ifx_GTM_DPLL_PVT',0,12,237,54,3
	.word	97716
	.byte	19
	.byte	'Ifx_GTM_DPLL_RAM_INI',0,12,245,54,3
	.word	91844
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_SX',0,12,253,54,3
	.word	95063
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM',0,12,133,55,3
	.word	95311
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_TX',0,12,141,55,3
	.word	94947
	.byte	19
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM',0,12,149,55,3
	.word	95187
	.byte	19
	.byte	'Ifx_GTM_DPLL_RDT_S',0,12,157,55,3
	.word	98774
	.byte	19
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT',0,12,165,55,3
	.word	95551
	.byte	19
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT',0,12,181,55,3
	.word	95431
	.byte	19
	.byte	'Ifx_GTM_DPLL_SIDEL',0,12,189,55,3
	.word	100670
	.byte	19
	.byte	'Ifx_GTM_DPLL_SLR',0,12,197,55,3
	.word	96971
	.byte	19
	.byte	'Ifx_GTM_DPLL_STA',0,12,205,55,3
	.word	101577
	.byte	19
	.byte	'Ifx_GTM_DPLL_STATUS',0,12,213,55,3
	.word	90540
	.byte	19
	.byte	'Ifx_GTM_DPLL_STA_FLAG',0,12,221,55,3
	.word	102453
	.byte	19
	.byte	'Ifx_GTM_DPLL_STA_MASK',0,12,229,55,3
	.word	102239
	.byte	19
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S',0,12,237,55,3
	.word	89715
	.byte	19
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T',0,12,245,55,3
	.word	89595
	.byte	19
	.byte	'Ifx_GTM_DPLL_THMA',0,12,253,55,3
	.word	93325
	.byte	19
	.byte	'Ifx_GTM_DPLL_THMI',0,12,133,56,3
	.word	93192
	.byte	19
	.byte	'Ifx_GTM_DPLL_THVAL',0,12,141,56,3
	.word	93437
	.byte	19
	.byte	'Ifx_GTM_DPLL_THVAL2',0,12,149,56,3
	.word	100446
	.byte	19
	.byte	'Ifx_GTM_DPLL_TIDEL',0,12,157,56,3
	.word	100558
	.byte	19
	.byte	'Ifx_GTM_DPLL_TLR',0,12,165,56,3
	.word	96841
	.byte	19
	.byte	'Ifx_GTM_DPLL_TOV',0,12,173,56,3
	.word	93589
	.byte	19
	.byte	'Ifx_GTM_DPLL_TOV_S',0,12,181,56,3
	.word	93735
	.byte	19
	.byte	'Ifx_GTM_DPLL_TSAC',0,12,189,56,3
	.word	99305
	.byte	19
	.byte	'Ifx_GTM_DPLL_TSF_S',0,12,197,56,3
	.word	98896
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_S',0,12,213,56,3
	.word	92822
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_S_OLD',0,12,221,56,3
	.word	92944
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_T',0,12,229,56,3
	.word	92467
	.byte	19
	.byte	'Ifx_GTM_DPLL_TS_T_OLD',0,12,237,56,3
	.word	92591
	.byte	19
	.byte	'Ifx_GTM_DSADCINSEL',0,12,245,56,3
	.word	109653
	.byte	19
	.byte	'Ifx_GTM_DSADC_OUTSEL0',0,12,253,56,3
	.word	109856
	.byte	19
	.byte	'Ifx_GTM_DTMAUXINSEL',0,12,133,57,3
	.word	114794
	.byte	19
	.byte	'Ifx_GTM_DXINCON',0,12,141,57,3
	.word	111733
	.byte	19
	.byte	'Ifx_GTM_DXOUTCON',0,12,149,57,3
	.word	110529
	.byte	19
	.byte	'Ifx_GTM_EIRQ_EN',0,12,157,57,3
	.word	26234
	.byte	19
	.byte	'Ifx_GTM_EXT_CAP_EN',0,12,165,57,3
	.word	28807
	.byte	19
	.byte	'Ifx_GTM_HW_CONF',0,12,173,57,3
	.word	26818
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI0',0,12,181,57,3
	.word	55134
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI1',0,12,189,57,3
	.word	56009
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI2',0,12,197,57,3
	.word	56884
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI3',0,12,205,57,3
	.word	57759
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI4',0,12,213,57,3
	.word	58634
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI_MCS',0,12,221,57,3
	.word	58935
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI_PSM',0,12,229,57,3
	.word	59702
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CEI_SPE',0,12,237,57,3
	.word	59937
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_ATOM',0,12,245,57,3
	.word	62679
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_MCS',0,12,253,57,3
	.word	60776
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_PSM',0,12,133,58,3
	.word	61509
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_SPE',0,12,141,58,3
	.word	61737
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_CI_TOM',0,12,149,58,3
	.word	63609
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_MEI',0,12,157,58,3
	.word	54412
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_MEI_CLS',0,12,165,58,3
	.word	60484
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R0',0,12,173,58,3
	.word	46190
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R1',0,12,181,58,3
	.word	46953
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R10',0,12,189,58,3
	.word	53770
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R2',0,12,197,58,3
	.word	47794
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R3',0,12,205,58,3
	.word	48635
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R4',0,12,213,58,3
	.word	49476
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R5',0,12,221,58,3
	.word	50317
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R6',0,12,229,58,3
	.word	51170
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R7',0,12,237,58,3
	.word	52023
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG_R9',0,12,245,58,3
	.word	52896
	.byte	19
	.byte	'Ifx_GTM_INTOUT',0,12,253,58,3
	.word	110872
	.byte	19
	.byte	'Ifx_GTM_IRQ_EN',0,12,133,59,3
	.word	25328
	.byte	19
	.byte	'Ifx_GTM_IRQ_FORCINT',0,12,141,59,3
	.word	25667
	.byte	19
	.byte	'Ifx_GTM_IRQ_MODE',0,12,149,59,3
	.word	25779
	.byte	19
	.byte	'Ifx_GTM_IRQ_NOTIFY',0,12,157,59,3
	.word	24967
	.byte	19
	.byte	'Ifx_GTM_LCDCDCOUTSEL',0,12,165,59,3
	.word	114539
	.byte	19
	.byte	'Ifx_GTM_MAP_CTRL',0,12,173,59,3
	.word	67592
	.byte	19
	.byte	'Ifx_GTM_MCFG_CTRL',0,12,181,59,3
	.word	67890
	.byte	19
	.byte	'Ifx_GTM_MCSINTCLR',0,12,189,59,3
	.word	111464
	.byte	19
	.byte	'Ifx_GTM_MCSINTSTAT',0,12,197,59,3
	.word	111291
	.byte	19
	.byte	'Ifx_GTM_MCSTRIGOUTSEL',0,12,205,59,3
	.word	111112
	.byte	19
	.byte	'Ifx_GTM_MCS_AEM_DIS',0,12,213,59,3
	.word	28127
	.byte	19
	.byte	'Ifx_GTM_MCS_CAT',0,12,221,59,3
	.word	126211
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_ACB',0,12,229,59,3
	.word	122911
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_CTRG',0,12,237,59,3
	.word	123405
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_CTRL',0,12,245,59,3
	.word	122737
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN',0,12,253,59,3
	.word	125003
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN',0,12,133,60,3
	.word	124446
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT',0,12,141,60,3
	.word	124621
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE',0,12,149,60,3
	.word	124740
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY',0,12,157,60,3
	.word	124279
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_MHB',0,12,165,60,3
	.word	124009
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_PC',0,12,173,60,3
	.word	124117
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_R',0,12,181,60,3
	.word	122427
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_STRG',0,12,189,60,3
	.word	123899
	.byte	19
	.byte	'Ifx_GTM_MCS_CTRL_STAT',0,12,197,60,3
	.word	125771
	.byte	19
	.byte	'Ifx_GTM_MCS_CWT',0,12,205,60,3
	.word	126430
	.byte	19
	.byte	'Ifx_GTM_MCS_ERR',0,12,213,60,3
	.word	126649
	.byte	19
	.byte	'Ifx_GTM_MCS_REG_PROT',0,12,221,60,3
	.word	125414
	.byte	19
	.byte	'Ifx_GTM_MCS_RESET',0,12,229,60,3
	.word	125992
	.byte	19
	.byte	'Ifx_GTM_MON_ACTIVITY_MCS',0,12,237,60,3
	.word	33593
	.byte	19
	.byte	'Ifx_GTM_MON_ACTIVITY_R0',0,12,245,60,3
	.word	32672
	.byte	19
	.byte	'Ifx_GTM_MON_ACTIVITY_R1',0,12,253,60,3
	.word	33357
	.byte	19
	.byte	'Ifx_GTM_MON_STATUS',0,12,133,61,3
	.word	31987
	.byte	19
	.byte	'Ifx_GTM_MSC_MSCQ_INHCON',0,12,141,61,3
	.word	113520
	.byte	19
	.byte	'Ifx_GTM_MSC_MSCQ_INLCON',0,12,149,61,3
	.word	113181
	.byte	19
	.byte	'Ifx_GTM_MSC_MSCQ_INLEXTCON',0,12,157,61,3
	.word	113862
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON0',0,12,165,61,3
	.word	112055
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON1',0,12,173,61,3
	.word	112284
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON2',0,12,181,61,3
	.word	112515
	.byte	19
	.byte	'Ifx_GTM_MSC_SET_CON3',0,12,189,61,3
	.word	112748
	.byte	19
	.byte	'Ifx_GTM_OCDS_OCS',0,12,197,61,3
	.word	108848
	.byte	19
	.byte	'Ifx_GTM_OCDS_ODA',0,12,205,61,3
	.word	108683
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU0T',0,12,213,61,3
	.word	107442
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU1T',0,12,221,61,3
	.word	107589
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU2T',0,12,229,61,3
	.word	107736
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTBU3T',0,12,237,61,3
	.word	107883
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTSC0',0,12,245,61,3
	.word	108414
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTSC1',0,12,253,61,3
	.word	108575
	.byte	19
	.byte	'Ifx_GTM_OCDS_OTSS',0,12,133,62,3
	.word	108115
	.byte	19
	.byte	'Ifx_GTM_OUT_ATOM',0,12,141,62,3
	.word	29100
	.byte	19
	.byte	'Ifx_GTM_OUT_TOM',0,12,149,62,3
	.word	28925
	.byte	19
	.byte	'Ifx_GTM_PSI5OUTSEL',0,12,157,62,3
	.word	114227
	.byte	19
	.byte	'Ifx_GTM_PSI5SOUTSEL',0,12,165,62,3
	.word	114428
	.byte	19
	.byte	'Ifx_GTM_PSM_AFD_CH_BUF_ACC',0,12,173,62,3
	.word	79209
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_ENABLE',0,12,181,62,3
	.word	78812
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_F2A_CTRL',0,12,189,62,3
	.word	78996
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_RD_CH_ARU_RD_FIFO',0,12,197,62,3
	.word	78273
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_STR_CH_STR_CFG',0,12,205,62,3
	.word	78499
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_CTRL',0,12,213,62,3
	.word	79507
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_EIRQ_EN',0,12,221,62,3
	.word	81621
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_END_ADDR',0,12,229,62,3
	.word	79628
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_FILL_LEVEL',0,12,237,62,3
	.word	80287
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_EN',0,12,245,62,3
	.word	80927
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_FORCINT',0,12,253,62,3
	.word	81133
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_MODE',0,12,133,63,3
	.word	81307
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_NOTIFY',0,12,141,63,3
	.word	80714
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_LOWER_WM',0,12,149,63,3
	.word	79993
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_RD_PTR',0,12,157,63,3
	.word	80525
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_START_ADDR',0,12,165,63,3
	.word	79751
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_STATUS',0,12,173,63,3
	.word	80163
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_UPPER_WM',0,12,181,63,3
	.word	79872
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_WR_PTR',0,12,189,63,3
	.word	80406
	.byte	19
	.byte	'Ifx_GTM_RESET1',0,12,197,63,3
	.word	106532
	.byte	19
	.byte	'Ifx_GTM_RESET2',0,12,205,63,3
	.word	106637
	.byte	19
	.byte	'Ifx_GTM_RESET_CLR',0,12,213,63,3
	.word	106408
	.byte	19
	.byte	'Ifx_GTM_REV',0,12,221,63,3
	.word	23994
	.byte	19
	.byte	'Ifx_GTM_RST',0,12,229,63,3
	.word	24155
	.byte	19
	.byte	'Ifx_GTM_SPE_CMD',0,12,237,63,3
	.word	66912
	.byte	19
	.byte	'Ifx_GTM_SPE_CTRL_STAT',0,12,245,63,3
	.word	64669
	.byte	19
	.byte	'Ifx_GTM_SPE_CTRL_STAT2',0,12,253,63,3
	.word	66750
	.byte	19
	.byte	'Ifx_GTM_SPE_EIRQ_EN',0,12,133,64,3
	.word	66372
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_EN',0,12,141,64,3
	.word	65716
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT',0,12,149,64,3
	.word	65934
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_MODE',0,12,157,64,3
	.word	66050
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY',0,12,165,64,3
	.word	65488
	.byte	19
	.byte	'Ifx_GTM_SPE_OUT_CTRL',0,12,173,64,3
	.word	65291
	.byte	19
	.byte	'Ifx_GTM_SPE_OUT_PAT',0,12,181,64,3
	.word	65161
	.byte	19
	.byte	'Ifx_GTM_SPE_PAT',0,12,189,64,3
	.word	65042
	.byte	19
	.byte	'Ifx_GTM_SPE_REV_CMP',0,12,197,64,3
	.word	66602
	.byte	19
	.byte	'Ifx_GTM_SPE_REV_CNT',0,12,205,64,3
	.word	66487
	.byte	19
	.byte	'Ifx_GTM_TBU_CH0_BASE',0,12,213,64,3
	.word	30037
	.byte	19
	.byte	'Ifx_GTM_TBU_CH0_CTRL',0,12,221,64,3
	.word	29924
	.byte	19
	.byte	'Ifx_GTM_TBU_CH1_BASE',0,12,229,64,3
	.word	30287
	.byte	19
	.byte	'Ifx_GTM_TBU_CH1_CTRL',0,12,237,64,3
	.word	30174
	.byte	19
	.byte	'Ifx_GTM_TBU_CH2_BASE',0,12,245,64,3
	.word	30537
	.byte	19
	.byte	'Ifx_GTM_TBU_CH2_CTRL',0,12,253,64,3
	.word	30424
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_BASE',0,12,133,65,3
	.word	30806
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_BASE_CAPTURE',0,12,141,65,3
	.word	31058
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_BASE_MARK',0,12,149,65,3
	.word	30929
	.byte	19
	.byte	'Ifx_GTM_TBU_CH3_CTRL',0,12,157,65,3
	.word	30693
	.byte	19
	.byte	'Ifx_GTM_TBU_CHEN',0,12,165,65,3
	.word	29787
	.byte	19
	.byte	'Ifx_GTM_TIMINSEL',0,12,173,65,3
	.word	109222
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_CNT',0,12,181,65,3
	.word	68221
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_CNTS',0,12,189,65,3
	.word	68438
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_CTRL',0,12,197,65,3
	.word	69606
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_ECNT',0,12,205,65,3
	.word	68333
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_ECTRL',0,12,213,65,3
	.word	70088
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN',0,12,221,65,3
	.word	71254
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_FLT_FE',0,12,229,65,3
	.word	69057
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_FLT_RE',0,12,237,65,3
	.word	68941
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_GPR0',0,12,245,65,3
	.word	68006
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_GPR1',0,12,253,65,3
	.word	68111
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN',0,12,133,66,3
	.word	70550
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT',0,12,141,66,3
	.word	70787
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE',0,12,149,66,3
	.word	70906
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY',0,12,157,66,3
	.word	70300
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_TDUC',0,12,165,66,3
	.word	68590
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_TDUV',0,12,173,66,3
	.word	68825
	.byte	19
	.byte	'Ifx_GTM_TIM_INP_VAL',0,12,181,66,3
	.word	71626
	.byte	19
	.byte	'Ifx_GTM_TIM_IN_SRC',0,12,189,66,3
	.word	71978
	.byte	19
	.byte	'Ifx_GTM_TIM_RST',0,12,197,66,3
	.word	72221
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CM0',0,12,205,66,3
	.word	73475
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CM1',0,12,213,66,3
	.word	73585
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CN0',0,12,221,66,3
	.word	73695
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_CTRL',0,12,229,66,3
	.word	73145
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN',0,12,237,66,3
	.word	74088
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT',0,12,245,66,3
	.word	74236
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE',0,12,253,66,3
	.word	74355
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY',0,12,133,67,3
	.word	73941
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_SR0',0,12,141,67,3
	.word	73255
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_SR1',0,12,149,67,3
	.word	73365
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_STAT',0,12,157,67,3
	.word	73804
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_ACT_TB',0,12,165,67,3
	.word	75184
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_CTRL',0,12,173,67,3
	.word	76176
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_STAT',0,12,181,67,3
	.word	76463
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_FUPD_CTRL',0,12,189,67,3
	.word	75615
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_GLB_CTRL',0,12,197,67,3
	.word	75029
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_INT_TRIG',0,12,205,67,3
	.word	75884
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_CTRL',0,12,213,67,3
	.word	76750
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_STAT',0,12,221,67,3
	.word	77037
	.byte	19
	.byte	'Ifx_GTM_TOUTSEL',0,12,229,67,3
	.word	109428
	.byte	19
	.byte	'Ifx_GTM_TRIGOUT',0,12,237,67,3
	.word	110757
	.byte	10
	.word	25819
	.byte	19
	.byte	'Ifx_GTM_IRQ',0,12,255,67,3
	.word	194452
	.byte	10
	.word	27759
	.byte	19
	.byte	'Ifx_GTM_BRIDGE',0,12,147,68,3
	.word	194478
	.byte	10
	.word	28649
	.byte	19
	.byte	'Ifx_GTM_AUX_IN_SRC',0,12,165,68,3
	.word	194507
	.byte	10
	.word	29140
	.byte	19
	.byte	'Ifx_GTM_OUT',0,12,188,68,3
	.word	194540
	.byte	10
	.word	31098
	.byte	19
	.byte	'Ifx_GTM_TBU',0,12,216,68,3
	.word	194566
	.byte	10
	.word	33642
	.byte	19
	.byte	'Ifx_GTM_MON_ACTIVITY',0,12,236,68,3
	.word	194592
	.byte	10
	.word	33722
	.byte	19
	.byte	'Ifx_GTM_MON',0,12,128,69,3
	.word	194627
	.byte	10
	.word	36287
	.byte	19
	.byte	'Ifx_GTM_CMP_IRQ',0,12,149,69,3
	.word	194653
	.byte	10
	.word	37075
	.byte	19
	.byte	'Ifx_GTM_CMP',0,12,169,69,3
	.word	194683
	.byte	10
	.word	38232
	.byte	19
	.byte	'Ifx_GTM_ARU_DBG',0,12,192,69,3
	.word	194709
	.byte	10
	.word	38986
	.byte	19
	.byte	'Ifx_GTM_ARU_IRQ',0,12,213,69,3
	.word	194739
	.byte	10
	.word	40623
	.byte	19
	.byte	'Ifx_GTM_ARU',0,12,246,69,3
	.word	194769
	.byte	10
	.word	41648
	.byte	19
	.byte	'Ifx_GTM_CMU_CLK',0,12,136,70,3
	.word	194795
	.byte	10
	.word	41934
	.byte	19
	.byte	'Ifx_GTM_CMU_ECLK',0,12,155,70,3
	.word	194825
	.byte	10
	.word	42118
	.byte	19
	.byte	'Ifx_GTM_CMU_FXCLK',0,12,173,70,3
	.word	194856
	.byte	10
	.word	42634
	.byte	19
	.byte	'Ifx_GTM_CMU',0,12,198,70,3
	.word	194888
	.byte	10
	.word	43527
	.byte	19
	.byte	'Ifx_GTM_BRC_SRC',0,12,217,70,3
	.word	194914
	.byte	10
	.word	44788
	.byte	19
	.byte	'Ifx_GTM_BRC_IRQ',0,12,238,70,3
	.word	194944
	.byte	10
	.word	45396
	.byte	19
	.byte	'Ifx_GTM_BRC',0,12,131,71,3
	.word	194974
	.byte	10
	.word	63658
	.byte	19
	.byte	'Ifx_GTM_ICM_IRQG',0,12,185,71,3
	.word	195000
	.byte	10
	.word	64316
	.byte	19
	.byte	'Ifx_GTM_ICM',0,12,203,71,3
	.word	195031
	.byte	10
	.word	66090
	.byte	19
	.byte	'Ifx_GTM_SPE_IRQ',0,12,224,71,3
	.word	195057
	.byte	10
	.word	66961
	.byte	19
	.byte	'Ifx_GTM_SPE',0,12,252,71,3
	.word	195087
	.byte	10
	.word	70946
	.byte	19
	.byte	'Ifx_GTM_TIM_CH_IRQ',0,12,145,72,3
	.word	195113
	.byte	10
	.word	71294
	.byte	19
	.byte	'Ifx_GTM_TIM_CH',0,12,175,72,3
	.word	195146
	.byte	10
	.word	72316
	.byte	19
	.byte	'Ifx_GTM_TIM',0,12,211,72,3
	.word	195175
	.byte	10
	.word	74395
	.byte	19
	.byte	'Ifx_GTM_TOM_CH_IRQ',0,12,232,72,3
	.word	195201
	.byte	10
	.word	74486
	.byte	19
	.byte	'Ifx_GTM_TOM_CH',0,12,129,73,3
	.word	195234
	.byte	10
	.word	77158
	.byte	19
	.byte	'Ifx_GTM_TOM',0,12,194,73,3
	.word	195263
	.byte	10
	.word	78313
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_RD_CH',0,12,212,73,3
	.word	195289
	.byte	10
	.word	78539
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A_STR_CH',0,12,230,73,3
	.word	195325
	.byte	10
	.word	79036
	.byte	19
	.byte	'Ifx_GTM_PSM_F2A',0,12,251,73,3
	.word	195362
	.byte	10
	.word	79249
	.byte	19
	.byte	'Ifx_GTM_PSM_AFD_CH',0,12,142,74,3
	.word	195392
	.byte	10
	.word	79328
	.byte	19
	.byte	'Ifx_GTM_PSM_AFD',0,12,160,74,3
	.word	195425
	.byte	10
	.word	81347
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ',0,12,181,74,3
	.word	195455
	.byte	10
	.word	81661
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO_CH',0,12,210,74,3
	.word	195493
	.byte	10
	.word	81911
	.byte	19
	.byte	'Ifx_GTM_PSM_FIFO',0,12,228,74,3
	.word	195527
	.byte	10
	.word	81966
	.byte	19
	.byte	'Ifx_GTM_PSM',0,12,251,74,3
	.word	195558
	.byte	10
	.word	88040
	.byte	19
	.byte	'Ifx_GTM_DPLL_IRQ',0,12,145,75,3
	.word	195584
	.byte	10
	.word	103670
	.byte	19
	.byte	'Ifx_GTM_DPLL',0,12,167,76,3
	.word	195615
	.byte	10
	.word	108888
	.byte	19
	.byte	'Ifx_GTM_OCDS',0,12,212,76,3
	.word	195642
	.byte	10
	.word	109896
	.byte	19
	.byte	'Ifx_GTM_DSADC',0,12,231,76,3
	.word	195669
	.byte	10
	.word	110331
	.byte	19
	.byte	'Ifx_GTM_ADCTRIG',0,12,250,76,3
	.word	195697
	.byte	10
	.word	112788
	.byte	19
	.byte	'Ifx_GTM_MSC_SET',0,12,143,77,3
	.word	195727
	.byte	10
	.word	113902
	.byte	19
	.byte	'Ifx_GTM_MSC_MSCQ',0,12,163,77,3
	.word	195757
	.byte	10
	.word	113992
	.byte	19
	.byte	'Ifx_GTM_MSC',0,12,183,77,3
	.word	195788
	.byte	10
	.word	115639
	.byte	19
	.byte	'Ifx_GTM_CCM_ARP',0,12,202,77,3
	.word	195814
	.byte	10
	.word	118378
	.byte	19
	.byte	'Ifx_GTM_CCM',0,12,231,77,3
	.word	195844
	.byte	10
	.word	121252
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM_CH',0,12,249,77,3
	.word	195870
	.byte	10
	.word	122039
	.byte	19
	.byte	'Ifx_GTM_CDTM_DTM',0,12,147,78,3
	.word	195904
	.byte	10
	.word	122244
	.byte	19
	.byte	'Ifx_GTM_CDTM',0,12,166,78,3
	.word	195935
	.byte	10
	.word	16182
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH_IRQ',0,12,187,78,3
	.word	195962
	.byte	10
	.word	16274
	.byte	19
	.byte	'Ifx_GTM_ATOM_CH',0,12,221,78,3
	.word	195996
	.byte	10
	.word	18908
	.byte	19
	.byte	'Ifx_GTM_ATOM_AGC',0,12,247,78,3
	.word	196026
	.byte	10
	.word	19165
	.byte	19
	.byte	'Ifx_GTM_ATOM',0,12,153,79,3
	.word	196057
	.byte	10
	.word	124780
	.byte	19
	.byte	'Ifx_GTM_MCS_CH_IRQ',0,12,174,79,3
	.word	196084
	.byte	10
	.word	125043
	.byte	19
	.byte	'Ifx_GTM_MCS_CH',0,12,201,79,3
	.word	196117
	.byte	10
	.word	126744
	.byte	19
	.byte	'Ifx_GTM_MCS',0,12,241,79,3
	.word	196146
	.byte	10
	.word	127199
	.byte	19
	.byte	'Ifx_GTM',0,12,220,80,3
	.word	196172
	.byte	10
	.word	74486
	.byte	11
	.byte	'IfxGtm_Tom_TGC',0,13,214,3,8,80,14
	.byte	'GLB_CTRL',0
	.word	75029
	.byte	4,2,35,0,14
	.byte	'ACT_TB',0
	.word	75184
	.byte	4,2,35,4,14
	.byte	'FUPD_CTRL',0
	.word	75615
	.byte	4,2,35,8,14
	.byte	'INT_TRIG',0
	.word	75884
	.byte	4,2,35,12,14
	.byte	'xxxCH1',0
	.word	196194
	.byte	44,2,35,16,14
	.byte	'reserved',0
	.word	9849
	.byte	4,2,35,60,14
	.byte	'ENDIS_CTRL',0
	.word	76176
	.byte	4,2,35,64,14
	.byte	'ENDIS_STAT',0
	.word	76463
	.byte	4,2,35,68,14
	.byte	'OUTEN_CTRL',0
	.word	76750
	.byte	4,2,35,72,14
	.byte	'OUTEN_STAT',0
	.word	77037
	.byte	4,2,35,76,0,10
	.word	196199
	.byte	19
	.byte	'Ifx_GTM_TOM_TGC',0,13,233,1,40
	.word	196406
	.byte	19
	.byte	'IfxGtm_Atom',0,13,251,1,3
	.word	22776
	.byte	19
	.byte	'IfxGtm_Atom_Ch',0,13,138,2,3
	.word	19503
	.byte	17,13,142,2,9,1,18
	.byte	'IfxGtm_Cdtm_none',0,127,18
	.byte	'IfxGtm_Cdtm_0',0,0,18
	.byte	'IfxGtm_Cdtm_1',0,1,18
	.byte	'IfxGtm_Cdtm_2',0,2,18
	.byte	'IfxGtm_Cdtm_3',0,3,18
	.byte	'IfxGtm_Cdtm_4',0,4,18
	.byte	'IfxGtm_Cdtm_5',0,5,18
	.byte	'IfxGtm_Cdtm_6',0,6,0,19
	.byte	'IfxGtm_Cdtm',0,13,152,2,3
	.word	196481
	.byte	17,13,176,2,9,1,18
	.byte	'IfxGtm_Dtm_none',0,127,18
	.byte	'IfxGtm_Dtm_0',0,0,18
	.byte	'IfxGtm_Dtm_1',0,1,18
	.byte	'IfxGtm_Dtm_2',0,2,18
	.byte	'IfxGtm_Dtm_3',0,3,18
	.byte	'IfxGtm_Dtm_4',0,4,18
	.byte	'IfxGtm_Dtm_5',0,5,0,19
	.byte	'IfxGtm_Dtm',0,13,185,2,3
	.word	196640
	.byte	19
	.byte	'IfxGtm_Dtm_Ch',0,13,196,2,3
	.word	129072
	.byte	17,13,254,2,9,1,18
	.byte	'IfxGtm_Tim_0',0,0,18
	.byte	'IfxGtm_Tim_1',0,1,18
	.byte	'IfxGtm_Tim_2',0,2,18
	.byte	'IfxGtm_Tim_3',0,3,18
	.byte	'IfxGtm_Tim_4',0,4,18
	.byte	'IfxGtm_Tim_5',0,5,0,19
	.byte	'IfxGtm_Tim',0,13,134,3,3
	.word	196798
	.byte	17,13,138,3,9,1,18
	.byte	'IfxGtm_Tim_Ch_0',0,0,18
	.byte	'IfxGtm_Tim_Ch_1',0,1,18
	.byte	'IfxGtm_Tim_Ch_2',0,2,18
	.byte	'IfxGtm_Tim_Ch_3',0,3,18
	.byte	'IfxGtm_Tim_Ch_4',0,4,18
	.byte	'IfxGtm_Tim_Ch_5',0,5,18
	.byte	'IfxGtm_Tim_Ch_6',0,6,18
	.byte	'IfxGtm_Tim_Ch_7',0,7,0,19
	.byte	'IfxGtm_Tim_Ch',0,13,148,3,3
	.word	196915
	.byte	17,13,152,3,9,1,18
	.byte	'IfxGtm_Tom_0',0,0,18
	.byte	'IfxGtm_Tom_1',0,1,18
	.byte	'IfxGtm_Tom_2',0,2,0,19
	.byte	'IfxGtm_Tom',0,13,157,3,3
	.word	197089
	.byte	17,13,161,3,9,1,18
	.byte	'IfxGtm_Tom_Ch_none',0,127,18
	.byte	'IfxGtm_Tom_Ch_0',0,0,18
	.byte	'IfxGtm_Tom_Ch_1',0,1,18
	.byte	'IfxGtm_Tom_Ch_2',0,2,18
	.byte	'IfxGtm_Tom_Ch_3',0,3,18
	.byte	'IfxGtm_Tom_Ch_4',0,4,18
	.byte	'IfxGtm_Tom_Ch_5',0,5,18
	.byte	'IfxGtm_Tom_Ch_6',0,6,18
	.byte	'IfxGtm_Tom_Ch_7',0,7,18
	.byte	'IfxGtm_Tom_Ch_8',0,8,18
	.byte	'IfxGtm_Tom_Ch_9',0,9,18
	.byte	'IfxGtm_Tom_Ch_10',0,10,18
	.byte	'IfxGtm_Tom_Ch_11',0,11,18
	.byte	'IfxGtm_Tom_Ch_12',0,12,18
	.byte	'IfxGtm_Tom_Ch_13',0,13,18
	.byte	'IfxGtm_Tom_Ch_14',0,14,18
	.byte	'IfxGtm_Tom_Ch_15',0,15,0,19
	.byte	'IfxGtm_Tom_Ch',0,13,180,3,3
	.word	197161
	.byte	17,30,64,9,1,18
	.byte	'IfxGtm_IrqMode_level',0,0,18
	.byte	'IfxGtm_IrqMode_pulse',0,1,18
	.byte	'IfxGtm_IrqMode_pulseNotify',0,2,18
	.byte	'IfxGtm_IrqMode_singlePulse',0,3,0,19
	.byte	'IfxGtm_IrqMode',0,30,70,3
	.word	197506
	.byte	17,30,74,9,1,18
	.byte	'IfxGtm_SuspendMode_none',0,0,18
	.byte	'IfxGtm_SuspendMode_hard',0,1,18
	.byte	'IfxGtm_SuspendMode_soft',0,2,0,19
	.byte	'IfxGtm_SuspendMode',0,30,79,3
	.word	197639
	.byte	17,31,66,9,1,18
	.byte	'IfxGtm_Tbu_Ts_0',0,0,18
	.byte	'IfxGtm_Tbu_Ts_1',0,1,18
	.byte	'IfxGtm_Tbu_Ts_2',0,2,18
	.byte	'IfxGtm_Tbu_Ts_3',0,3,0,19
	.byte	'IfxGtm_Tbu_Ts',0,31,72,3
	.word	197750
	.byte	19
	.byte	'IfxGtm_Cmu_Clk',0,20,74,3
	.word	21693
	.byte	19
	.byte	'IfxGtm_Atom_Ch_OutputTrigger',0,11,81,3
	.word	21929
	.byte	19
	.byte	'IfxGtm_Atom_Ch_ResetEvent',0,11,89,3
	.word	21851
	.byte	17,32,71,9,1,18
	.byte	'IfxGtm_Tim_CntsSel_cntReg',0,0,18
	.byte	'IfxGtm_Tim_CntsSel_tbuTs0',0,1,0,19
	.byte	'IfxGtm_Tim_CntsSel',0,32,75,3
	.word	197944
	.byte	17,32,79,9,1,18
	.byte	'IfxGtm_Tim_FilterCounter_upDown',0,0,18
	.byte	'IfxGtm_Tim_FilterCounter_hold',0,1,0,19
	.byte	'IfxGtm_Tim_FilterCounter',0,32,83,3
	.word	198033
	.byte	17,32,87,9,1,18
	.byte	'IfxGtm_Tim_FilterCounterFreqSel_cmuClk0',0,0,18
	.byte	'IfxGtm_Tim_FilterCounterFreqSel_cmuClk1',0,1,18
	.byte	'IfxGtm_Tim_FilterCounterFreqSel_cmuClk6',0,2,18
	.byte	'IfxGtm_Tim_FilterCounterFreqSel_cmuClk7',0,3,0,19
	.byte	'IfxGtm_Tim_FilterCounterFreqSel',0,32,93,3
	.word	198138
	.byte	17,32,97,9,1,18
	.byte	'IfxGtm_Tim_FilterMode_immediateEdgePropagation',0,0,18
	.byte	'IfxGtm_Tim_FilterMode_individualDeglitchTime',0,1,0,19
	.byte	'IfxGtm_Tim_FilterMode',0,32,101,3
	.word	198352
	.byte	17,32,103,9,1,18
	.byte	'IfxGtm_Tim_GprSel_tbuTs0',0,0,18
	.byte	'IfxGtm_Tim_GprSel_tbuTs1',0,1,18
	.byte	'IfxGtm_Tim_GprSel_tbuTs2',0,2,18
	.byte	'IfxGtm_Tim_GprSel_cnts',0,3,0,19
	.byte	'IfxGtm_Tim_GprSel',0,32,109,3
	.word	198484
	.byte	17,32,126,9,1,18
	.byte	'IfxGtm_Tim_IrqType_newVal',0,0,18
	.byte	'IfxGtm_Tim_IrqType_ecntOverflow',0,1,18
	.byte	'IfxGtm_Tim_IrqType_cntOverflow',0,2,18
	.byte	'IfxGtm_Tim_IrqType_gprOverflow',0,3,18
	.byte	'IfxGtm_Tim_IrqType_timeoutDetect',0,4,18
	.byte	'IfxGtm_Tim_IrqType_glitchDetect',0,5,0,19
	.byte	'IfxGtm_Tim_IrqType',0,32,134,1,3
	.word	198622
	.byte	17,32,136,1,9,1,18
	.byte	'IfxGtm_Tim_Mode_pwmMeasurement',0,0,18
	.byte	'IfxGtm_Tim_Mode_pulseIntegration',0,1,18
	.byte	'IfxGtm_Tim_Mode_inputEvent',0,2,18
	.byte	'IfxGtm_Tim_Mode_inputPrescaler',0,3,18
	.byte	'IfxGtm_Tim_Mode_bitCompression',0,4,0,19
	.byte	'IfxGtm_Tim_Mode',0,32,143,1,3
	.word	198853
	.byte	17,32,147,1,9,1,18
	.byte	'IfxGtm_Tim_Timeout_disabled',0,0,18
	.byte	'IfxGtm_Tim_Timeout_risingEdge',0,1,18
	.byte	'IfxGtm_Tim_Timeout_fallingEdge',0,2,18
	.byte	'IfxGtm_Tim_Timeout_bothEdge',0,3,0,19
	.byte	'IfxGtm_Tim_Timeout',0,32,153,1,3
	.word	199048
	.byte	31,32,205,1,9,2,14
	.byte	'mode',0
	.word	531
	.byte	1,2,35,0,14
	.byte	'value',0
	.word	531
	.byte	1,2,35,1,0,19
	.byte	'IfxGtm_Tim_InputSourceSelect',0,32,213,1,3
	.word	199208
	.byte	17,21,59,9,1,18
	.byte	'IfxGtm_ChXSel_a',0,0,18
	.byte	'IfxGtm_ChXSel_b',0,1,18
	.byte	'IfxGtm_ChXSel_c',0,2,18
	.byte	'IfxGtm_ChXSel_d',0,3,18
	.byte	'IfxGtm_ChXSel_e',0,4,18
	.byte	'IfxGtm_ChXSel_f',0,5,18
	.byte	'IfxGtm_ChXSel_g',0,6,18
	.byte	'IfxGtm_ChXSel_h',0,7,18
	.byte	'IfxGtm_ChXSel_i',0,8,18
	.byte	'IfxGtm_ChXSel_j',0,9,18
	.byte	'IfxGtm_ChXSel_k',0,10,18
	.byte	'IfxGtm_ChXSel_l',0,11,18
	.byte	'IfxGtm_ChXSel_m',0,12,18
	.byte	'IfxGtm_ChXSel_n',0,13,18
	.byte	'IfxGtm_ChXSel_o',0,14,18
	.byte	'IfxGtm_ChXSel_p',0,15,0,19
	.byte	'IfxGtm_ChXSel',0,21,80,3
	.word	199282
	.byte	19
	.byte	'IfxGtm_ToutSel',0,21,98,3
	.word	22879
	.byte	25
	.word	23369
	.byte	19
	.byte	'IfxGtm_Atom_ToutMap',0,21,118,3
	.word	199621
	.byte	31,21,124,15,20,14
	.byte	'tom',0
	.word	197089
	.byte	1,2,35,0,14
	.byte	'channel',0
	.word	197161
	.byte	1,2,35,1,14
	.byte	'toutSel',0
	.word	22879
	.byte	1,2,35,2,14
	.byte	'toutn',0
	.word	9849
	.byte	4,2,35,4,14
	.byte	'pin',0
	.word	23113
	.byte	8,2,35,8,14
	.byte	'select',0
	.word	23152
	.byte	1,2,35,16,0,25
	.word	199654
	.byte	19
	.byte	'IfxGtm_Tom_ToutMap',0,21,132,1,3
	.word	199751
	.byte	11
	.byte	'_Ifx_CPU_A_Bits',0,33,68,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_A_Bits',0,33,71,3
	.word	199784
	.byte	11
	.byte	'_Ifx_CPU_BIV_Bits',0,33,74,16,4,12
	.byte	'VSS',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'BIV',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_BIV_Bits',0,33,78,3
	.word	199845
	.byte	11
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,33,81,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'OMASK',0,4
	.word	930
	.byte	12,15,2,35,0,12
	.byte	'ONE',0,4
	.word	930
	.byte	11,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,19
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,33,87,3
	.word	199924
	.byte	11
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,33,90,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'TBASE',0,4
	.word	930
	.byte	23,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,19
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,33,95,3
	.word	200062
	.byte	11
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,33,98,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'OBASE',0,4
	.word	930
	.byte	17,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'OMEM',0,4
	.word	930
	.byte	4,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	3,1,2,35,0,12
	.byte	'OVEN',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,33,106,3
	.word	200183
	.byte	11
	.byte	'_Ifx_CPU_BTV_Bits',0,33,109,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'BTV',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_BTV_Bits',0,33,113,3
	.word	200359
	.byte	11
	.byte	'_Ifx_CPU_CCNT_Bits',0,33,116,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	930
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_CCNT_Bits',0,33,120,3
	.word	200445
	.byte	11
	.byte	'_Ifx_CPU_CCTRL_Bits',0,33,123,16,4,12
	.byte	'CM',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CE',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'M1',0,4
	.word	930
	.byte	3,27,2,35,0,12
	.byte	'M2',0,4
	.word	930
	.byte	3,24,2,35,0,12
	.byte	'M3',0,4
	.word	930
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	21,0,2,35,0,0,19
	.byte	'Ifx_CPU_CCTRL_Bits',0,33,131,1,3
	.word	200534
	.byte	11
	.byte	'_Ifx_CPU_COMPAT_Bits',0,33,134,1,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'RM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SP',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_COMPAT_Bits',0,33,140,1,3
	.word	200681
	.byte	11
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,33,143,1,16,4,12
	.byte	'CORE_ID',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,19
	.byte	'Ifx_CPU_CORE_ID_Bits',0,33,147,1,3
	.word	200810
	.byte	11
	.byte	'_Ifx_CPU_CPR_L_Bits',0,33,150,1,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'LOWBND',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_CPR_L_Bits',0,33,154,1,3
	.word	200910
	.byte	11
	.byte	'_Ifx_CPU_CPR_U_Bits',0,33,157,1,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'UPPBND',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_CPR_U_Bits',0,33,161,1,3
	.word	201005
	.byte	11
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,33,164,1,16,4,12
	.byte	'MOD_REV',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'MOD_32B',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'MOD',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_CPU_CPU_ID_Bits',0,33,169,1,3
	.word	201100
	.byte	11
	.byte	'_Ifx_CPU_CPXE_Bits',0,33,172,1,16,4,12
	.byte	'XE_N',0,4
	.word	930
	.byte	10,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,19
	.byte	'Ifx_CPU_CPXE_Bits',0,33,176,1,3
	.word	201210
	.byte	11
	.byte	'_Ifx_CPU_CREVT_Bits',0,33,179,1,16,4,12
	.byte	'EVTA',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_CPU_CREVT_Bits',0,33,187,1,3
	.word	201302
	.byte	11
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,33,190,1,16,4,12
	.byte	'CID',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,19
	.byte	'Ifx_CPU_CUS_ID_Bits',0,33,194,1,3
	.word	201456
	.byte	11
	.byte	'_Ifx_CPU_D_Bits',0,33,197,1,16,4,12
	.byte	'DATA',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_D_Bits',0,33,200,1,3
	.word	201550
	.byte	11
	.byte	'_Ifx_CPU_DATR_Bits',0,33,203,1,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'SBE',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	5,23,2,35,0,12
	.byte	'CWE',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'CFE',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	3,18,2,35,0,12
	.byte	'SOE',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_CPU_DATR_Bits',0,33,214,1,3
	.word	201613
	.byte	11
	.byte	'_Ifx_CPU_DBGSR_Bits',0,33,217,1,16,4,12
	.byte	'DE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'HALT',0,4
	.word	930
	.byte	2,29,2,35,0,12
	.byte	'SIH',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SUSP',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'PREVSUSP',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PEVT',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EVTSRC',0,4
	.word	930
	.byte	5,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	19,0,2,35,0,0,19
	.byte	'Ifx_CPU_DBGSR_Bits',0,33,228,1,3
	.word	201839
	.byte	11
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,33,231,1,16,4,12
	.byte	'DTA',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_DBGTCR_Bits',0,33,235,1,3
	.word	202054
	.byte	11
	.byte	'_Ifx_CPU_DCON0_Bits',0,33,238,1,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DCBYP',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_CPU_DCON0_Bits',0,33,243,1,3
	.word	202148
	.byte	11
	.byte	'_Ifx_CPU_DCON2_Bits',0,33,246,1,16,4,12
	.byte	'DCACHE_SZE',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'DSCRATCH_SZE',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_CPU_DCON2_Bits',0,33,250,1,3
	.word	202264
	.byte	11
	.byte	'_Ifx_CPU_DCX_Bits',0,33,253,1,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	6,26,2,35,0,12
	.byte	'DCXVALUE',0,4
	.word	930
	.byte	26,0,2,35,0,0,19
	.byte	'Ifx_CPU_DCX_Bits',0,33,129,2,3
	.word	202365
	.byte	11
	.byte	'_Ifx_CPU_DEADD_Bits',0,33,132,2,16,4,12
	.byte	'ERROR_ADDRESS',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_DEADD_Bits',0,33,135,2,3
	.word	202458
	.byte	11
	.byte	'_Ifx_CPU_DIEAR_Bits',0,33,138,2,16,4,12
	.byte	'TA',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_DIEAR_Bits',0,33,141,2,3
	.word	202538
	.byte	11
	.byte	'_Ifx_CPU_DIETR_Bits',0,33,144,2,16,4,12
	.byte	'IED',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'IE_T',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'IE_C',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'IE_S',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'IE_BI',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'E_INFO',0,4
	.word	930
	.byte	6,21,2,35,0,12
	.byte	'IE_UNC',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'IE_SP',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'IE_BS',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'IE_DLMU',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'IE_LPB',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'IE_MTMV',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	15,0,2,35,0,0,19
	.byte	'Ifx_CPU_DIETR_Bits',0,33,159,2,3
	.word	202607
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,33,162,2,16,4,12
	.byte	'EN0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,33,196,2,3
	.word	202891
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,33,199,2,16,4,12
	.byte	'EN0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,33,233,2,3
	.word	203482
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,33,236,2,16,4,12
	.byte	'EN32',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,33,142,3,3
	.word	204073
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,33,145,3,16,4,12
	.byte	'EN32',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,33,179,3,3
	.word	204674
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,33,182,3,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,33,186,3,3
	.word	205275
	.byte	11
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,33,189,3,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,33,193,3,3
	.word	205390
	.byte	11
	.byte	'_Ifx_CPU_DMS_Bits',0,33,196,3,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'DMSVALUE',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_DMS_Bits',0,33,200,3,3
	.word	205505
	.byte	11
	.byte	'_Ifx_CPU_DPRE_Bits',0,33,203,3,16,4,12
	.byte	'RE_N',0,4
	.word	930
	.byte	18,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	14,0,2,35,0,0,19
	.byte	'Ifx_CPU_DPRE_Bits',0,33,207,3,3
	.word	205598
	.byte	11
	.byte	'_Ifx_CPU_DPR_L_Bits',0,33,210,3,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'LOWBND',0,4
	.word	930
	.byte	29,0,2,35,0,0,19
	.byte	'Ifx_CPU_DPR_L_Bits',0,33,214,3,3
	.word	205690
	.byte	11
	.byte	'_Ifx_CPU_DPR_U_Bits',0,33,217,3,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'UPPBND',0,4
	.word	930
	.byte	29,0,2,35,0,0,19
	.byte	'Ifx_CPU_DPR_U_Bits',0,33,221,3,3
	.word	205785
	.byte	11
	.byte	'_Ifx_CPU_DPWE_Bits',0,33,224,3,16,4,12
	.byte	'WE_N',0,4
	.word	930
	.byte	18,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	14,0,2,35,0,0,19
	.byte	'Ifx_CPU_DPWE_Bits',0,33,228,3,3
	.word	205880
	.byte	11
	.byte	'_Ifx_CPU_DSTR_Bits',0,33,231,3,16,4,12
	.byte	'SRE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'GAE',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'LBE',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DRE',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	2,26,2,35,0,12
	.byte	'CRE',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	7,18,2,35,0,12
	.byte	'DTME',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'LOE',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'SDE',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'SCE',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'CAC',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'MPE',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'CLE',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	3,8,2,35,0,12
	.byte	'ALN',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,19
	.byte	'Ifx_CPU_DSTR_Bits',0,33,250,3,3
	.word	205972
	.byte	11
	.byte	'_Ifx_CPU_EXEVT_Bits',0,33,253,3,16,4,12
	.byte	'EVTA',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_CPU_EXEVT_Bits',0,33,133,4,3
	.word	206311
	.byte	11
	.byte	'_Ifx_CPU_FCX_Bits',0,33,136,4,16,4,12
	.byte	'FCXO',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'FCXS',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,19
	.byte	'Ifx_CPU_FCX_Bits',0,33,141,4,3
	.word	206465
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,33,144,4,16,4,12
	.byte	'TAG1',0,4
	.word	930
	.byte	6,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'TAG2',0,4
	.word	930
	.byte	6,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	2,16,2,35,0,12
	.byte	'TAG3',0,4
	.word	930
	.byte	6,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'TAG4',0,4
	.word	930
	.byte	6,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,33,154,4,3
	.word	206571
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,33,157,4,16,4,12
	.byte	'STALL',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	15,16,2,35,0,12
	.byte	'MASKUECC',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	6,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	6,0,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,33,165,4,3
	.word	206789
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,33,168,4,16,4,12
	.byte	'RECDIS',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'ECCCORDIS',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'reserved_4',0,4
	.word	930
	.byte	4,24,2,35,0,12
	.byte	'HMARGIN',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'MSEL',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'ECCSCLR',0,4
	.word	930
	.byte	2,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	6,8,2,35,0,12
	.byte	'SBABCLR',0,4
	.word	930
	.byte	2,6,2,35,0,12
	.byte	'DBABCLR',0,4
	.word	930
	.byte	2,4,2,35,0,12
	.byte	'MBABCLR',0,4
	.word	930
	.byte	2,2,2,35,0,12
	.byte	'ZBABCLR',0,4
	.word	930
	.byte	2,0,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,33,182,4,3
	.word	206980
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,33,185,4,16,4,12
	.byte	'ECCERRINJ',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EDCERRINJ',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SBABERRINJ',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'DBABERRINJ',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'MBABERRINJ',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'ZBABERRINJ',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SBERERRINJ',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'DBERERRINJ',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'NVMCERRINJ',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'FLCONERRINJ',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	22,0,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,33,198,4,3
	.word	207280
	.byte	11
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,33,201,4,16,4,12
	.byte	'DDIS',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,33,205,4,3
	.word	207585
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,33,208,4,16,4,12
	.byte	'TST',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TCL',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	6,24,2,35,0,12
	.byte	'RM',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	8,14,2,35,0,12
	.byte	'FXE',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'FUE',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'FZE',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'FVE',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'FIE',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	3,6,2,35,0,12
	.byte	'FX',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'FU',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'FZ',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'FV',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'FI',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,33,227,4,3
	.word	207686
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,33,230,4,16,4,12
	.byte	'OPC',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'FMT',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'DREG',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,33,237,4,3
	.word	208035
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,33,240,4,16,4,12
	.byte	'PC',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,33,243,4,3
	.word	208195
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,33,246,4,16,4,12
	.byte	'SRC1',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,33,249,4,3
	.word	208276
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,33,252,4,16,4,12
	.byte	'SRC2',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,33,255,4,3
	.word	208363
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,33,130,5,16,4,12
	.byte	'SRC3',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,33,133,5,3
	.word	208450
	.byte	11
	.byte	'_Ifx_CPU_ICNT_Bits',0,33,136,5,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	930
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_ICNT_Bits',0,33,140,5,3
	.word	208537
	.byte	11
	.byte	'_Ifx_CPU_ICR_Bits',0,33,143,5,16,4,12
	.byte	'CCPN',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	7,17,2,35,0,12
	.byte	'IE',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'PIPN',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_CPU_ICR_Bits',0,33,150,5,3
	.word	208628
	.byte	11
	.byte	'_Ifx_CPU_ISP_Bits',0,33,153,5,16,4,12
	.byte	'ISP',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_ISP_Bits',0,33,156,5,3
	.word	208770
	.byte	11
	.byte	'_Ifx_CPU_KRST0_Bits',0,33,159,5,16,4,12
	.byte	'RST',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'RSTSTAT',0,4
	.word	930
	.byte	2,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	29,0,2,35,0,0,19
	.byte	'Ifx_CPU_KRST0_Bits',0,33,164,5,3
	.word	208836
	.byte	11
	.byte	'_Ifx_CPU_KRST1_Bits',0,33,167,5,16,4,12
	.byte	'RST',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_KRST1_Bits',0,33,171,5,3
	.word	208947
	.byte	11
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,33,174,5,16,4,12
	.byte	'CLR',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,33,178,5,3
	.word	209039
	.byte	11
	.byte	'_Ifx_CPU_LCX_Bits',0,33,181,5,16,4,12
	.byte	'LCXO',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'LCXS',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,19
	.byte	'Ifx_CPU_LCX_Bits',0,33,186,5,3
	.word	209135
	.byte	11
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,33,189,5,16,4,12
	.byte	'EN0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,33,223,5,3
	.word	209241
	.byte	11
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,33,226,5,16,4,12
	.byte	'EN32',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,33,132,6,3
	.word	209824
	.byte	11
	.byte	'_Ifx_CPU_M1CNT_Bits',0,33,135,6,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	930
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_M1CNT_Bits',0,33,139,6,3
	.word	210417
	.byte	11
	.byte	'_Ifx_CPU_M2CNT_Bits',0,33,142,6,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	930
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_M2CNT_Bits',0,33,146,6,3
	.word	210510
	.byte	11
	.byte	'_Ifx_CPU_M3CNT_Bits',0,33,149,6,16,4,12
	.byte	'COUNTVALUE',0,4
	.word	930
	.byte	31,1,2,35,0,12
	.byte	'SOVF',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_M3CNT_Bits',0,33,153,6,3
	.word	210603
	.byte	11
	.byte	'_Ifx_CPU_OSEL_Bits',0,33,156,6,16,4,12
	.byte	'SHOVEN_X',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_OSEL_Bits',0,33,159,6,3
	.word	210696
	.byte	11
	.byte	'_Ifx_CPU_PC_Bits',0,33,162,6,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PC',0,4
	.word	930
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_CPU_PC_Bits',0,33,166,6,3
	.word	210769
	.byte	11
	.byte	'_Ifx_CPU_PCON0_Bits',0,33,169,6,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PCBYP',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_CPU_PCON0_Bits',0,33,174,6,3
	.word	210854
	.byte	11
	.byte	'_Ifx_CPU_PCON1_Bits',0,33,177,6,16,4,12
	.byte	'PCINV',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PBINV',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_CPU_PCON1_Bits',0,33,182,6,3
	.word	210970
	.byte	11
	.byte	'_Ifx_CPU_PCON2_Bits',0,33,185,6,16,4,12
	.byte	'PCACHE_SZE',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'PSCRATCH_SZE',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_CPU_PCON2_Bits',0,33,189,6,3
	.word	211081
	.byte	11
	.byte	'_Ifx_CPU_PCXI_Bits',0,33,192,6,16,4,12
	.byte	'PCXO',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'PCXS',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'UL',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'PIE',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'PCPN',0,4
	.word	930
	.byte	8,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,19
	.byte	'Ifx_CPU_PCXI_Bits',0,33,200,6,3
	.word	211182
	.byte	11
	.byte	'_Ifx_CPU_PIEAR_Bits',0,33,203,6,16,4,12
	.byte	'TA',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_PIEAR_Bits',0,33,206,6,3
	.word	211335
	.byte	11
	.byte	'_Ifx_CPU_PIETR_Bits',0,33,209,6,16,4,12
	.byte	'IED',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'IE_T',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'IE_C',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'IE_S',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'IE_BI',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'E_INFO',0,4
	.word	930
	.byte	6,21,2,35,0,12
	.byte	'IE_UNC',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'IE_SP',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'IE_BS',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'IE_ADDR',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'IE_LPB',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'IE_MTMV',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	15,0,2,35,0,0,19
	.byte	'Ifx_CPU_PIETR_Bits',0,33,224,6,3
	.word	211404
	.byte	11
	.byte	'_Ifx_CPU_PMA0_Bits',0,33,227,6,16,4,12
	.byte	'DAC',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_CPU_PMA0_Bits',0,33,231,6,3
	.word	211688
	.byte	11
	.byte	'_Ifx_CPU_PMA1_Bits',0,33,234,6,16,4,12
	.byte	'CAC',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_CPU_PMA1_Bits',0,33,238,6,3
	.word	211779
	.byte	11
	.byte	'_Ifx_CPU_PMA2_Bits',0,33,241,6,16,4,12
	.byte	'PSI',0,4
	.word	930
	.byte	16,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_CPU_PMA2_Bits',0,33,245,6,3
	.word	211870
	.byte	11
	.byte	'_Ifx_CPU_PSTR_Bits',0,33,248,6,16,4,12
	.byte	'FRE',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'reserved_1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FBE',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	9,20,2,35,0,12
	.byte	'FPE',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'FME',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	17,0,2,35,0,0,19
	.byte	'Ifx_CPU_PSTR_Bits',0,33,130,7,3
	.word	211961
	.byte	11
	.byte	'_Ifx_CPU_PSW_Bits',0,33,133,7,16,4,12
	.byte	'CDC',0,4
	.word	930
	.byte	7,25,2,35,0,12
	.byte	'CDE',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'GW',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'IS',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'IO',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'PRS',0,4
	.word	930
	.byte	2,18,2,35,0,12
	.byte	'S',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'PRS2',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'USB',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_CPU_PSW_Bits',0,33,145,7,3
	.word	212164
	.byte	11
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,33,148,7,16,4,12
	.byte	'EN0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,33,182,7,3
	.word	212369
	.byte	11
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,33,185,7,16,4,12
	.byte	'EN32',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,33,219,7,3
	.word	212936
	.byte	11
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,33,222,7,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_LA_Bits',0,33,226,7,3
	.word	213513
	.byte	11
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,33,229,7,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'ADDR',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_UA_Bits',0,33,233,7,3
	.word	213608
	.byte	11
	.byte	'_Ifx_CPU_SEGEN_Bits',0,33,236,7,16,4,12
	.byte	'ADFLIP',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'ADTYPE',0,4
	.word	930
	.byte	2,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	21,1,2,35,0,12
	.byte	'AE',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_SEGEN_Bits',0,33,242,7,3
	.word	213703
	.byte	11
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,33,245,7,16,4,12
	.byte	'EN0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,33,151,8,3
	.word	213831
	.byte	11
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,33,154,8,16,4,12
	.byte	'EN32',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,33,188,8,3
	.word	214414
	.byte	11
	.byte	'_Ifx_CPU_SMACON_Bits',0,33,191,8,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'IODT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,19
	.byte	'Ifx_CPU_SMACON_Bits',0,33,196,8,3
	.word	215007
	.byte	11
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,33,199,8,16,4,12
	.byte	'EN0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,33,233,8,3
	.word	215125
	.byte	11
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,33,236,8,16,4,12
	.byte	'EN32',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EN33',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EN34',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EN35',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EN36',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EN37',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EN38',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EN39',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EN40',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EN41',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EN42',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EN43',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'EN44',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'EN45',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'EN46',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'EN47',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'EN48',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'EN49',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'EN50',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'EN51',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'EN52',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'EN53',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'EN54',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'EN55',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'EN56',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'EN57',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'EN58',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EN59',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'EN60',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'EN61',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'EN62',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'EN63',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,33,142,9,3
	.word	215714
	.byte	11
	.byte	'_Ifx_CPU_SWEVT_Bits',0,33,145,9,16,4,12
	.byte	'EVTA',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_CPU_SWEVT_Bits',0,33,153,9,3
	.word	216313
	.byte	11
	.byte	'_Ifx_CPU_SYSCON_Bits',0,33,156,9,16,4,12
	.byte	'FCDSF',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'PROTEN',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TPROTEN',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'IS',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TS',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	3,24,2,35,0,12
	.byte	'ESDIS',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'U1_IED',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'U1_IOS',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	6,8,2,35,0,12
	.byte	'BHALT',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,19
	.byte	'Ifx_CPU_SYSCON_Bits',0,33,171,9,3
	.word	216467
	.byte	11
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,33,174,9,16,4,12
	.byte	'ASI',0,4
	.word	930
	.byte	5,27,2,35,0,12
	.byte	'reserved_5',0,4
	.word	930
	.byte	27,0,2,35,0,0,19
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,33,178,9,3
	.word	216766
	.byte	11
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,33,181,9,16,4,12
	.byte	'TEXP0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TEXP1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TEXP2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	13,16,2,35,0,12
	.byte	'TTRAP',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	15,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_CON_Bits',0,33,189,9,3
	.word	216864
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,33,192,9,16,4,12
	.byte	'EXTIM_CLASS_EN',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,33,196,9,3
	.word	217036
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,33,199,9,16,4,12
	.byte	'ENTRY_CVAL',0,4
	.word	930
	.byte	12,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	20,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,33,203,9,3
	.word	217165
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,33,206,9,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'ENTRY_LVAL',0,4
	.word	930
	.byte	8,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	20,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,33,211,9,3
	.word	217295
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,33,214,9,16,4,12
	.byte	'EXIT_CVAL',0,4
	.word	930
	.byte	24,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,33,218,9,3
	.word	217447
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,33,221,9,16,4,12
	.byte	'reserved_0',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'EXIT_LVAL',0,4
	.word	930
	.byte	20,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	8,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,33,226,9,3
	.word	217574
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,33,229,9,16,4,12
	.byte	'EXIT_FCX',0,4
	.word	930
	.byte	20,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,33,233,9,3
	.word	217723
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,33,236,9,16,4,12
	.byte	'EXIT_TIN',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'EXIT_CLASS',0,4
	.word	930
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	4,17,2,35,0,12
	.byte	'EXIT_AT',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'ENTRY_TIN',0,4
	.word	930
	.byte	8,8,2,35,0,12
	.byte	'ENTRY_CLASS',0,4
	.word	930
	.byte	3,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	4,1,2,35,0,12
	.byte	'ENTRY_AT',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,33,246,9,3
	.word	217837
	.byte	11
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,33,249,9,16,4,12
	.byte	'TIMER',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,33,252,9,3
	.word	218081
	.byte	11
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,33,255,9,16,4,12
	.byte	'T0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'T1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'T2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'T3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'T4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'T5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'T6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'T7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,33,138,10,3
	.word	218161
	.byte	11
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,33,141,10,16,4,12
	.byte	'ADDR',0,4
	.word	930
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_CPU_TR_ADR_Bits',0,33,144,10,3
	.word	218356
	.byte	11
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,33,147,10,16,4,12
	.byte	'EVTA',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'BBM',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'BOD',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SUSP',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CNT',0,4
	.word	930
	.byte	2,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	4,20,2,35,0,12
	.byte	'TYP',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'RNG',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'ASI_EN',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'ASI',0,4
	.word	930
	.byte	5,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	6,5,2,35,0,12
	.byte	'AST',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'ALD',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	3,0,2,35,0,0,19
	.byte	'Ifx_CPU_TR_EVT_Bits',0,33,164,10,3
	.word	218429
	.byte	13,33,172,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	199784
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_A',0,33,177,10,3
	.word	218747
	.byte	13,33,180,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	199845
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_BIV',0,33,185,10,3
	.word	218806
	.byte	13,33,188,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	199924
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_BLK_OMASK',0,33,193,10,3
	.word	218867
	.byte	13,33,196,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200062
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_BLK_OTAR',0,33,201,10,3
	.word	218934
	.byte	13,33,204,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200183
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_BLK_RABR',0,33,209,10,3
	.word	219000
	.byte	13,33,212,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200359
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_BTV',0,33,217,10,3
	.word	219066
	.byte	13,33,220,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200445
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CCNT',0,33,225,10,3
	.word	219127
	.byte	13,33,228,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200534
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CCTRL',0,33,233,10,3
	.word	219189
	.byte	13,33,236,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200681
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_COMPAT',0,33,241,10,3
	.word	219252
	.byte	13,33,244,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200810
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CORE_ID',0,33,249,10,3
	.word	219316
	.byte	13,33,252,10,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	200910
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CPR_L',0,33,129,11,3
	.word	219381
	.byte	13,33,132,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201005
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CPR_U',0,33,137,11,3
	.word	219444
	.byte	13,33,140,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201100
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CPU_ID',0,33,145,11,3
	.word	219507
	.byte	13,33,148,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201210
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CPXE',0,33,153,11,3
	.word	219571
	.byte	13,33,156,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201302
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CREVT',0,33,161,11,3
	.word	219633
	.byte	13,33,164,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201456
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_CUS_ID',0,33,169,11,3
	.word	219696
	.byte	13,33,172,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201550
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_D',0,33,177,11,3
	.word	219760
	.byte	13,33,180,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201613
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DATR',0,33,185,11,3
	.word	219819
	.byte	13,33,188,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	201839
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DBGSR',0,33,193,11,3
	.word	219881
	.byte	13,33,196,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202054
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DBGTCR',0,33,201,11,3
	.word	219944
	.byte	13,33,204,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202148
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DCON0',0,33,209,11,3
	.word	220008
	.byte	13,33,212,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202264
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DCON2',0,33,217,11,3
	.word	220071
	.byte	13,33,220,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202365
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DCX',0,33,225,11,3
	.word	220134
	.byte	13,33,228,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202458
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DEADD',0,33,233,11,3
	.word	220195
	.byte	13,33,236,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202538
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DIEAR',0,33,241,11,3
	.word	220258
	.byte	13,33,244,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202607
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DIETR',0,33,249,11,3
	.word	220321
	.byte	13,33,252,11,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	202891
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,33,129,12,3
	.word	220384
	.byte	13,33,132,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	203482
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,33,137,12,3
	.word	220464
	.byte	13,33,140,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	204073
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,33,145,12,3
	.word	220544
	.byte	13,33,148,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	204674
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,33,153,12,3
	.word	220624
	.byte	13,33,156,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205275
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,33,161,12,3
	.word	220704
	.byte	13,33,164,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205390
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,33,169,12,3
	.word	220778
	.byte	13,33,172,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205505
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DMS',0,33,177,12,3
	.word	220852
	.byte	13,33,180,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205598
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DPRE',0,33,185,12,3
	.word	220913
	.byte	13,33,188,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205690
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DPR_L',0,33,193,12,3
	.word	220975
	.byte	13,33,196,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205785
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DPR_U',0,33,201,12,3
	.word	221038
	.byte	13,33,204,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205880
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DPWE',0,33,209,12,3
	.word	221101
	.byte	13,33,212,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	205972
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_DSTR',0,33,217,12,3
	.word	221163
	.byte	13,33,220,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	206311
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_EXEVT',0,33,225,12,3
	.word	221225
	.byte	13,33,228,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	206465
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FCX',0,33,233,12,3
	.word	221288
	.byte	13,33,236,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	206571
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON0',0,33,241,12,3
	.word	221349
	.byte	13,33,244,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	206789
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON1',0,33,249,12,3
	.word	221416
	.byte	13,33,252,12,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	206980
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON2',0,33,129,13,3
	.word	221483
	.byte	13,33,132,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	207280
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON3',0,33,137,13,3
	.word	221550
	.byte	13,33,140,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	207585
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FLASHCON4',0,33,145,13,3
	.word	221617
	.byte	13,33,148,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	207686
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,33,153,13,3
	.word	221684
	.byte	13,33,156,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208035
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,33,161,13,3
	.word	221754
	.byte	13,33,164,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208195
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,33,169,13,3
	.word	221824
	.byte	13,33,172,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208276
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,33,177,13,3
	.word	221893
	.byte	13,33,180,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208363
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,33,185,13,3
	.word	221964
	.byte	13,33,188,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208450
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,33,193,13,3
	.word	222035
	.byte	13,33,196,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208537
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_ICNT',0,33,201,13,3
	.word	222106
	.byte	13,33,204,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208628
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_ICR',0,33,209,13,3
	.word	222168
	.byte	13,33,212,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208770
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_ISP',0,33,217,13,3
	.word	222229
	.byte	13,33,220,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208836
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_KRST0',0,33,225,13,3
	.word	222290
	.byte	13,33,228,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	208947
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_KRST1',0,33,233,13,3
	.word	222353
	.byte	13,33,236,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	209039
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_KRSTCLR',0,33,241,13,3
	.word	222416
	.byte	13,33,244,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	209135
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_LCX',0,33,249,13,3
	.word	222481
	.byte	13,33,252,13,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	209241
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,33,129,14,3
	.word	222542
	.byte	13,33,132,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	209824
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,33,137,14,3
	.word	222618
	.byte	13,33,140,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	210417
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_M1CNT',0,33,145,14,3
	.word	222694
	.byte	13,33,148,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	210510
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_M2CNT',0,33,153,14,3
	.word	222757
	.byte	13,33,156,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	210603
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_M3CNT',0,33,161,14,3
	.word	222820
	.byte	13,33,164,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	210696
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_OSEL',0,33,169,14,3
	.word	222883
	.byte	13,33,172,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	210769
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PC',0,33,177,14,3
	.word	222945
	.byte	13,33,180,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	210854
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PCON0',0,33,185,14,3
	.word	223005
	.byte	13,33,188,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	210970
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PCON1',0,33,193,14,3
	.word	223068
	.byte	13,33,196,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211081
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PCON2',0,33,201,14,3
	.word	223131
	.byte	13,33,204,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211182
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PCXI',0,33,209,14,3
	.word	223194
	.byte	13,33,212,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211335
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PIEAR',0,33,217,14,3
	.word	223256
	.byte	13,33,220,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211404
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PIETR',0,33,225,14,3
	.word	223319
	.byte	13,33,228,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211688
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PMA0',0,33,233,14,3
	.word	223382
	.byte	13,33,236,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211779
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PMA1',0,33,241,14,3
	.word	223444
	.byte	13,33,244,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211870
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PMA2',0,33,249,14,3
	.word	223506
	.byte	13,33,252,14,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	211961
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PSTR',0,33,129,15,3
	.word	223568
	.byte	13,33,132,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	212164
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_PSW',0,33,137,15,3
	.word	223630
	.byte	13,33,140,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	212369
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_ACCENA',0,33,145,15,3
	.word	223691
	.byte	13,33,148,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	212936
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_ACCENB',0,33,153,15,3
	.word	223759
	.byte	13,33,156,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	213513
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_LA',0,33,161,15,3
	.word	223827
	.byte	13,33,164,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	213608
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_RGN_UA',0,33,169,15,3
	.word	223891
	.byte	13,33,172,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	213703
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SEGEN',0,33,177,15,3
	.word	223955
	.byte	13,33,180,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	213831
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,33,185,15,3
	.word	224018
	.byte	13,33,188,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	214414
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,33,193,15,3
	.word	224094
	.byte	13,33,196,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	215007
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SMACON',0,33,201,15,3
	.word	224170
	.byte	13,33,204,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	215125
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,33,209,15,3
	.word	224234
	.byte	13,33,212,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	215714
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,33,217,15,3
	.word	224313
	.byte	13,33,220,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	216313
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SWEVT',0,33,225,15,3
	.word	224392
	.byte	13,33,228,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	216467
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_SYSCON',0,33,233,15,3
	.word	224455
	.byte	13,33,236,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	216766
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TASK_ASI',0,33,241,15,3
	.word	224519
	.byte	13,33,244,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	216864
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_CON',0,33,249,15,3
	.word	224585
	.byte	13,33,252,15,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	217036
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,33,129,16,3
	.word	224650
	.byte	13,33,132,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	217165
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,33,137,16,3
	.word	224726
	.byte	13,33,140,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	217295
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,33,145,16,3
	.word	224804
	.byte	13,33,148,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	217447
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,33,153,16,3
	.word	224882
	.byte	13,33,156,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	217574
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,33,161,16,3
	.word	224959
	.byte	13,33,164,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	217723
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,33,169,16,3
	.word	225036
	.byte	13,33,172,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	217837
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,33,177,16,3
	.word	225107
	.byte	13,33,180,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	218081
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TPS_TIMER',0,33,185,16,3
	.word	225179
	.byte	13,33,188,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	218161
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TRIG_ACC',0,33,193,16,3
	.word	225246
	.byte	13,33,196,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	218356
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TR_ADR',0,33,201,16,3
	.word	225312
	.byte	13,33,204,16,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	218429
	.byte	4,2,35,0,0,19
	.byte	'Ifx_CPU_TR_EVT',0,33,209,16,3
	.word	225376
	.byte	11
	.byte	'_Ifx_CPU_RGN',0,33,221,16,25,16,14
	.byte	'LA',0
	.word	223827
	.byte	4,2,35,0,14
	.byte	'UA',0
	.word	223891
	.byte	4,2,35,4,14
	.byte	'ACCENA',0
	.word	223691
	.byte	4,2,35,8,14
	.byte	'ACCENB',0
	.word	223759
	.byte	4,2,35,12,0,10
	.word	225440
	.byte	19
	.byte	'Ifx_CPU_RGN',0,33,227,16,3
	.word	225516
	.byte	11
	.byte	'_Ifx_CPU_BLK',0,33,242,16,25,12,14
	.byte	'RABR',0
	.word	219000
	.byte	4,2,35,0,14
	.byte	'OTAR',0
	.word	218934
	.byte	4,2,35,4,14
	.byte	'OMASK',0
	.word	218867
	.byte	4,2,35,8,0,10
	.word	225542
	.byte	19
	.byte	'Ifx_CPU_BLK',0,33,247,16,3
	.word	225605
	.byte	11
	.byte	'_Ifx_CPU_FPU_TRAP',0,33,134,17,25,28,14
	.byte	'CON',0
	.word	221684
	.byte	4,2,35,0,14
	.byte	'PC',0
	.word	221824
	.byte	4,2,35,4,14
	.byte	'OPC',0
	.word	221754
	.byte	4,2,35,8,14
	.byte	'reserved_C',0
	.word	3086
	.byte	4,2,35,12,14
	.byte	'SRC1',0
	.word	221893
	.byte	4,2,35,16,14
	.byte	'SRC2',0
	.word	221964
	.byte	4,2,35,20,14
	.byte	'SRC3',0
	.word	222035
	.byte	4,2,35,24,0,10
	.word	225631
	.byte	19
	.byte	'Ifx_CPU_FPU_TRAP',0,33,143,17,3
	.word	225756
	.byte	11
	.byte	'_Ifx_CPU_DPR',0,33,158,17,25,8,14
	.byte	'L',0
	.word	220975
	.byte	4,2,35,0,14
	.byte	'U',0
	.word	221038
	.byte	4,2,35,4,0,10
	.word	225787
	.byte	19
	.byte	'Ifx_CPU_DPR',0,33,162,17,3
	.word	225829
	.byte	11
	.byte	'_Ifx_CPU_CPR',0,33,177,17,25,8,14
	.byte	'L',0
	.word	219381
	.byte	4,2,35,0,14
	.byte	'U',0
	.word	219444
	.byte	4,2,35,4,0,10
	.word	225855
	.byte	19
	.byte	'Ifx_CPU_CPR',0,33,181,17,3
	.word	225897
	.byte	15,12
	.word	225179
	.byte	16,2,0,11
	.byte	'_Ifx_CPU_TPS',0,33,196,17,25,16,14
	.byte	'CON',0
	.word	224585
	.byte	4,2,35,0,14
	.byte	'TIMER',0
	.word	225923
	.byte	12,2,35,4,0,10
	.word	225932
	.byte	19
	.byte	'Ifx_CPU_TPS',0,33,200,17,3
	.word	225980
	.byte	11
	.byte	'_Ifx_CPU_TPS_EXTIM',0,33,215,17,25,28,14
	.byte	'ENTRY_LVAL',0
	.word	224804
	.byte	4,2,35,0,14
	.byte	'ENTRY_CVAL',0
	.word	224726
	.byte	4,2,35,4,14
	.byte	'EXIT_LVAL',0
	.word	224959
	.byte	4,2,35,8,14
	.byte	'EXIT_CVAL',0
	.word	224882
	.byte	4,2,35,12,14
	.byte	'CLASS_EN',0
	.word	224650
	.byte	4,2,35,16,14
	.byte	'STAT',0
	.word	225107
	.byte	4,2,35,20,14
	.byte	'FCX',0
	.word	225036
	.byte	4,2,35,24,0,10
	.word	226006
	.byte	19
	.byte	'Ifx_CPU_TPS_EXTIM',0,33,224,17,3
	.word	226155
	.byte	11
	.byte	'_Ifx_CPU_TR',0,33,239,17,25,8,14
	.byte	'EVT',0
	.word	225376
	.byte	4,2,35,0,14
	.byte	'ADR',0
	.word	225312
	.byte	4,2,35,4,0,10
	.word	226187
	.byte	19
	.byte	'Ifx_CPU_TR',0,33,243,17,3
	.word	226232
	.byte	15,128,34
	.word	531
	.byte	16,255,33,0,15,236,253,2
	.word	531
	.byte	16,235,253,2,0,15,244,31
	.word	531
	.byte	16,243,31,0,15,128,1
	.word	225440
	.byte	16,7,0,10
	.word	226292
	.byte	15,232,1
	.word	531
	.byte	16,231,1,0,15,128,48
	.word	531
	.byte	16,255,47,0,15,128,3
	.word	225542
	.byte	16,31,0,10
	.word	226329
	.byte	15,160,39
	.word	531
	.byte	16,159,39,0,15,208,223,1
	.word	531
	.byte	16,207,223,1,0,15,248,1
	.word	531
	.byte	16,247,1,0,15,244,29
	.word	531
	.byte	16,243,29,0,15,188,3
	.word	531
	.byte	16,187,3,0,15,232,3
	.word	531
	.byte	16,231,3,0,15,252,23
	.word	531
	.byte	16,251,23,0,10
	.word	225631
	.byte	15,228,63
	.word	531
	.byte	16,227,63,0,15,144,1
	.word	225787
	.byte	16,17,0,10
	.word	226439
	.byte	15,240,30
	.word	531
	.byte	16,239,30,0,15,80
	.word	225855
	.byte	16,9,0,10
	.word	226465
	.byte	15,176,31
	.word	531
	.byte	16,175,31,0,15,152,7
	.word	531
	.byte	16,151,7,0,10
	.word	225932
	.byte	10
	.word	226006
	.byte	15,164,23
	.word	531
	.byte	16,163,23,0,15,64
	.word	226187
	.byte	16,7,0,10
	.word	226522
	.byte	15,192,23
	.word	531
	.byte	16,191,23,0,15,180,1
	.word	531
	.byte	16,179,1,0,15,172,1
	.word	531
	.byte	16,171,1,0,15,64
	.word	219760
	.byte	16,15,0,15,64
	.word	218747
	.byte	16,15,0,11
	.byte	'_Ifx_CPU',0,33,130,18,25,128,128,8,14
	.byte	'reserved_0',0
	.word	226257
	.byte	128,34,2,35,0,14
	.byte	'FLASHCON0',0
	.word	221349
	.byte	4,3,35,128,34,14
	.byte	'FLASHCON1',0
	.word	221416
	.byte	4,3,35,132,34,14
	.byte	'FLASHCON2',0
	.word	221483
	.byte	4,3,35,136,34,14
	.byte	'FLASHCON3',0
	.word	221550
	.byte	4,3,35,140,34,14
	.byte	'FLASHCON4',0
	.word	221617
	.byte	4,3,35,144,34,14
	.byte	'reserved_1114',0
	.word	226268
	.byte	236,253,2,3,35,148,34,14
	.byte	'KRST0',0
	.word	222290
	.byte	4,4,35,128,160,3,14
	.byte	'KRST1',0
	.word	222353
	.byte	4,4,35,132,160,3,14
	.byte	'KRSTCLR',0
	.word	222416
	.byte	4,4,35,136,160,3,14
	.byte	'reserved_D00C',0
	.word	226281
	.byte	244,31,4,35,140,160,3,14
	.byte	'RGN',0
	.word	226302
	.byte	128,1,4,35,128,192,3,14
	.byte	'reserved_E080',0
	.word	4906
	.byte	8,4,35,128,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	224234
	.byte	4,4,35,136,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	224313
	.byte	4,4,35,140,193,3,14
	.byte	'reserved_E090',0
	.word	4906
	.byte	8,4,35,144,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	224234
	.byte	4,4,35,152,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	224313
	.byte	4,4,35,156,193,3,14
	.byte	'reserved_E0A0',0
	.word	4906
	.byte	8,4,35,160,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	224234
	.byte	4,4,35,168,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	224313
	.byte	4,4,35,172,193,3,14
	.byte	'reserved_E0B0',0
	.word	4906
	.byte	8,4,35,176,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	224234
	.byte	4,4,35,184,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	224313
	.byte	4,4,35,188,193,3,14
	.byte	'reserved_E0C0',0
	.word	4906
	.byte	8,4,35,192,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	224234
	.byte	4,4,35,200,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	224313
	.byte	4,4,35,204,193,3,14
	.byte	'reserved_E0D0',0
	.word	4906
	.byte	8,4,35,208,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	224234
	.byte	4,4,35,216,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	224313
	.byte	4,4,35,220,193,3,14
	.byte	'reserved_E0E0',0
	.word	4906
	.byte	8,4,35,224,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	224234
	.byte	4,4,35,232,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	224313
	.byte	4,4,35,236,193,3,14
	.byte	'reserved_E0F0',0
	.word	4906
	.byte	8,4,35,240,193,3,14
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	224234
	.byte	4,4,35,248,193,3,14
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	224313
	.byte	4,4,35,252,193,3,14
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	224018
	.byte	4,4,35,128,194,3,14
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	224094
	.byte	4,4,35,132,194,3,14
	.byte	'reserved_E108',0
	.word	4906
	.byte	8,4,35,136,194,3,14
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	222542
	.byte	4,4,35,144,194,3,14
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	222618
	.byte	4,4,35,148,194,3,14
	.byte	'reserved_E118',0
	.word	226307
	.byte	232,1,4,35,152,194,3,14
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	220704
	.byte	4,4,35,128,196,3,14
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	220778
	.byte	4,4,35,132,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	220464
	.byte	4,4,35,136,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	220624
	.byte	4,4,35,140,196,3,14
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	220704
	.byte	4,4,35,144,196,3,14
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	220778
	.byte	4,4,35,148,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	220464
	.byte	4,4,35,152,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	220624
	.byte	4,4,35,156,196,3,14
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	220704
	.byte	4,4,35,160,196,3,14
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	220778
	.byte	4,4,35,164,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	220464
	.byte	4,4,35,168,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	220624
	.byte	4,4,35,172,196,3,14
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	220704
	.byte	4,4,35,176,196,3,14
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	220778
	.byte	4,4,35,180,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	220464
	.byte	4,4,35,184,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	220624
	.byte	4,4,35,188,196,3,14
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	220704
	.byte	4,4,35,192,196,3,14
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	220778
	.byte	4,4,35,196,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	220464
	.byte	4,4,35,200,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	220624
	.byte	4,4,35,204,196,3,14
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	220704
	.byte	4,4,35,208,196,3,14
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	220778
	.byte	4,4,35,212,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	220464
	.byte	4,4,35,216,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	220624
	.byte	4,4,35,220,196,3,14
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	220704
	.byte	4,4,35,224,196,3,14
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	220778
	.byte	4,4,35,228,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	220464
	.byte	4,4,35,232,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	220624
	.byte	4,4,35,236,196,3,14
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	220704
	.byte	4,4,35,240,196,3,14
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	220778
	.byte	4,4,35,244,196,3,14
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	220464
	.byte	4,4,35,248,196,3,14
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	220624
	.byte	4,4,35,252,196,3,14
	.byte	'reserved_E280',0
	.word	4906
	.byte	8,4,35,128,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	220384
	.byte	4,4,35,136,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	220544
	.byte	4,4,35,140,197,3,14
	.byte	'reserved_E290',0
	.word	4906
	.byte	8,4,35,144,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	220384
	.byte	4,4,35,152,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	220544
	.byte	4,4,35,156,197,3,14
	.byte	'reserved_E2A0',0
	.word	4906
	.byte	8,4,35,160,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	220384
	.byte	4,4,35,168,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	220544
	.byte	4,4,35,172,197,3,14
	.byte	'reserved_E2B0',0
	.word	4906
	.byte	8,4,35,176,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	220384
	.byte	4,4,35,184,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	220544
	.byte	4,4,35,188,197,3,14
	.byte	'reserved_E2C0',0
	.word	4906
	.byte	8,4,35,192,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	220384
	.byte	4,4,35,200,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	220544
	.byte	4,4,35,204,197,3,14
	.byte	'reserved_E2D0',0
	.word	4906
	.byte	8,4,35,208,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	220384
	.byte	4,4,35,216,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	220544
	.byte	4,4,35,220,197,3,14
	.byte	'reserved_E2E0',0
	.word	4906
	.byte	8,4,35,224,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	220384
	.byte	4,4,35,232,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	220544
	.byte	4,4,35,236,197,3,14
	.byte	'reserved_E2F0',0
	.word	4906
	.byte	8,4,35,240,197,3,14
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	220384
	.byte	4,4,35,248,197,3,14
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	220544
	.byte	4,4,35,252,197,3,14
	.byte	'reserved_E300',0
	.word	226318
	.byte	128,48,4,35,128,198,3,14
	.byte	'OSEL',0
	.word	222883
	.byte	4,4,35,128,246,3,14
	.byte	'reserved_FB04',0
	.word	5246
	.byte	12,4,35,132,246,3,14
	.byte	'BLK',0
	.word	226339
	.byte	128,3,4,35,144,246,3,14
	.byte	'reserved_FC90',0
	.word	226344
	.byte	160,39,4,35,144,249,3,14
	.byte	'SEGEN',0
	.word	223955
	.byte	4,4,35,176,160,4,14
	.byte	'reserved_11034',0
	.word	226355
	.byte	208,223,1,4,35,180,160,4,14
	.byte	'TASK_ASI',0
	.word	224519
	.byte	4,4,35,132,128,6,14
	.byte	'reserved_18008',0
	.word	226368
	.byte	248,1,4,35,136,128,6,14
	.byte	'PMA0',0
	.word	223382
	.byte	4,4,35,128,130,6,14
	.byte	'PMA1',0
	.word	223444
	.byte	4,4,35,132,130,6,14
	.byte	'PMA2',0
	.word	223506
	.byte	4,4,35,136,130,6,14
	.byte	'reserved_1810C',0
	.word	226379
	.byte	244,29,4,35,140,130,6,14
	.byte	'DCON2',0
	.word	220071
	.byte	4,4,35,128,160,6,14
	.byte	'reserved_19004',0
	.word	4906
	.byte	8,4,35,132,160,6,14
	.byte	'SMACON',0
	.word	224170
	.byte	4,4,35,140,160,6,14
	.byte	'DSTR',0
	.word	221163
	.byte	4,4,35,144,160,6,14
	.byte	'reserved_19014',0
	.word	3086
	.byte	4,4,35,148,160,6,14
	.byte	'DATR',0
	.word	219819
	.byte	4,4,35,152,160,6,14
	.byte	'DEADD',0
	.word	220195
	.byte	4,4,35,156,160,6,14
	.byte	'DIEAR',0
	.word	220258
	.byte	4,4,35,160,160,6,14
	.byte	'DIETR',0
	.word	220321
	.byte	4,4,35,164,160,6,14
	.byte	'reserved_19028',0
	.word	4277
	.byte	24,4,35,168,160,6,14
	.byte	'DCON0',0
	.word	220008
	.byte	4,4,35,192,160,6,14
	.byte	'reserved_19044',0
	.word	226390
	.byte	188,3,4,35,196,160,6,14
	.byte	'PSTR',0
	.word	223568
	.byte	4,4,35,128,164,6,14
	.byte	'PCON1',0
	.word	223068
	.byte	4,4,35,132,164,6,14
	.byte	'PCON2',0
	.word	223131
	.byte	4,4,35,136,164,6,14
	.byte	'PCON0',0
	.word	223005
	.byte	4,4,35,140,164,6,14
	.byte	'PIEAR',0
	.word	223256
	.byte	4,4,35,144,164,6,14
	.byte	'PIETR',0
	.word	223319
	.byte	4,4,35,148,164,6,14
	.byte	'reserved_19218',0
	.word	226401
	.byte	232,3,4,35,152,164,6,14
	.byte	'COMPAT',0
	.word	219252
	.byte	4,4,35,128,168,6,14
	.byte	'reserved_19404',0
	.word	226412
	.byte	252,23,4,35,132,168,6,14
	.byte	'FPU_TRAP',0
	.word	226423
	.byte	28,4,35,128,192,6,14
	.byte	'reserved_1A01C',0
	.word	226428
	.byte	228,63,4,35,156,192,6,14
	.byte	'DPR',0
	.word	226449
	.byte	144,1,4,35,128,128,7,14
	.byte	'reserved_1C090',0
	.word	226454
	.byte	240,30,4,35,144,129,7,14
	.byte	'CPR',0
	.word	226474
	.byte	80,4,35,128,160,7,14
	.byte	'reserved_1D050',0
	.word	226479
	.byte	176,31,4,35,208,160,7,14
	.byte	'CPXE_0',0
	.word	219571
	.byte	4,4,35,128,192,7,14
	.byte	'CPXE_1',0
	.word	219571
	.byte	4,4,35,132,192,7,14
	.byte	'CPXE_2',0
	.word	219571
	.byte	4,4,35,136,192,7,14
	.byte	'CPXE_3',0
	.word	219571
	.byte	4,4,35,140,192,7,14
	.byte	'DPRE_0',0
	.word	220913
	.byte	4,4,35,144,192,7,14
	.byte	'DPRE_1',0
	.word	220913
	.byte	4,4,35,148,192,7,14
	.byte	'DPRE_2',0
	.word	220913
	.byte	4,4,35,152,192,7,14
	.byte	'DPRE_3',0
	.word	220913
	.byte	4,4,35,156,192,7,14
	.byte	'DPWE_0',0
	.word	221101
	.byte	4,4,35,160,192,7,14
	.byte	'DPWE_1',0
	.word	221101
	.byte	4,4,35,164,192,7,14
	.byte	'DPWE_2',0
	.word	221101
	.byte	4,4,35,168,192,7,14
	.byte	'DPWE_3',0
	.word	221101
	.byte	4,4,35,172,192,7,14
	.byte	'reserved_1E030',0
	.word	16430
	.byte	16,4,35,176,192,7,14
	.byte	'CPXE_4',0
	.word	219571
	.byte	4,4,35,192,192,7,14
	.byte	'CPXE_5',0
	.word	219571
	.byte	4,4,35,196,192,7,14
	.byte	'reserved_1E048',0
	.word	4906
	.byte	8,4,35,200,192,7,14
	.byte	'DPRE_4',0
	.word	220913
	.byte	4,4,35,208,192,7,14
	.byte	'DPRE_5',0
	.word	220913
	.byte	4,4,35,212,192,7,14
	.byte	'reserved_1E058',0
	.word	4906
	.byte	8,4,35,216,192,7,14
	.byte	'DPWE_4',0
	.word	221101
	.byte	4,4,35,224,192,7,14
	.byte	'DPWE_5',0
	.word	221101
	.byte	4,4,35,228,192,7,14
	.byte	'reserved_1E068',0
	.word	226490
	.byte	152,7,4,35,232,192,7,14
	.byte	'TPS',0
	.word	226501
	.byte	16,4,35,128,200,7,14
	.byte	'reserved_1E410',0
	.word	66952
	.byte	48,4,35,144,200,7,14
	.byte	'TPS_EXTIM',0
	.word	226506
	.byte	28,4,35,192,200,7,14
	.byte	'reserved_1E45C',0
	.word	226511
	.byte	164,23,4,35,220,200,7,14
	.byte	'TR',0
	.word	226531
	.byte	64,4,35,128,224,7,14
	.byte	'reserved_1F040',0
	.word	226536
	.byte	192,23,4,35,192,224,7,14
	.byte	'CCTRL',0
	.word	219189
	.byte	4,4,35,128,248,7,14
	.byte	'CCNT',0
	.word	219127
	.byte	4,4,35,132,248,7,14
	.byte	'ICNT',0
	.word	222106
	.byte	4,4,35,136,248,7,14
	.byte	'M1CNT',0
	.word	222694
	.byte	4,4,35,140,248,7,14
	.byte	'M2CNT',0
	.word	222757
	.byte	4,4,35,144,248,7,14
	.byte	'M3CNT',0
	.word	222820
	.byte	4,4,35,148,248,7,14
	.byte	'reserved_1FC18',0
	.word	226307
	.byte	232,1,4,35,152,248,7,14
	.byte	'DBGSR',0
	.word	219881
	.byte	4,4,35,128,250,7,14
	.byte	'reserved_1FD04',0
	.word	3086
	.byte	4,4,35,132,250,7,14
	.byte	'EXEVT',0
	.word	221225
	.byte	4,4,35,136,250,7,14
	.byte	'CREVT',0
	.word	219633
	.byte	4,4,35,140,250,7,14
	.byte	'SWEVT',0
	.word	224392
	.byte	4,4,35,144,250,7,14
	.byte	'reserved_1FD14',0
	.word	58674
	.byte	28,4,35,148,250,7,14
	.byte	'TRIG_ACC',0
	.word	225246
	.byte	4,4,35,176,250,7,14
	.byte	'reserved_1FD34',0
	.word	5246
	.byte	12,4,35,180,250,7,14
	.byte	'DMS',0
	.word	220852
	.byte	4,4,35,192,250,7,14
	.byte	'DCX',0
	.word	220134
	.byte	4,4,35,196,250,7,14
	.byte	'DBGTCR',0
	.word	219944
	.byte	4,4,35,200,250,7,14
	.byte	'reserved_1FD4C',0
	.word	226547
	.byte	180,1,4,35,204,250,7,14
	.byte	'PCXI',0
	.word	223194
	.byte	4,4,35,128,252,7,14
	.byte	'PSW',0
	.word	223630
	.byte	4,4,35,132,252,7,14
	.byte	'PC',0
	.word	222945
	.byte	4,4,35,136,252,7,14
	.byte	'reserved_1FE0C',0
	.word	4906
	.byte	8,4,35,140,252,7,14
	.byte	'SYSCON',0
	.word	224455
	.byte	4,4,35,148,252,7,14
	.byte	'CPU_ID',0
	.word	219507
	.byte	4,4,35,152,252,7,14
	.byte	'CORE_ID',0
	.word	219316
	.byte	4,4,35,156,252,7,14
	.byte	'BIV',0
	.word	218806
	.byte	4,4,35,160,252,7,14
	.byte	'BTV',0
	.word	219066
	.byte	4,4,35,164,252,7,14
	.byte	'ISP',0
	.word	222229
	.byte	4,4,35,168,252,7,14
	.byte	'ICR',0
	.word	222168
	.byte	4,4,35,172,252,7,14
	.byte	'reserved_1FE30',0
	.word	4906
	.byte	8,4,35,176,252,7,14
	.byte	'FCX',0
	.word	221288
	.byte	4,4,35,184,252,7,14
	.byte	'LCX',0
	.word	222481
	.byte	4,4,35,188,252,7,14
	.byte	'reserved_1FE40',0
	.word	16430
	.byte	16,4,35,192,252,7,14
	.byte	'CUS_ID',0
	.word	219696
	.byte	4,4,35,208,252,7,14
	.byte	'reserved_1FE54',0
	.word	226558
	.byte	172,1,4,35,212,252,7,14
	.byte	'D',0
	.word	226569
	.byte	64,4,35,128,254,7,14
	.byte	'reserved_1FF40',0
	.word	72266
	.byte	64,4,35,192,254,7,14
	.byte	'A',0
	.word	226578
	.byte	64,4,35,128,255,7,14
	.byte	'reserved_1FFC0',0
	.word	72266
	.byte	64,4,35,192,255,7,0,10
	.word	226587
	.byte	19
	.byte	'Ifx_CPU',0,33,210,19,3
	.word	231685
	.byte	17,15,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_none',0,3,0,19
	.byte	'IfxCpu_Id',0,15,130,1,3
	.word	231707
	.byte	19
	.byte	'IfxCpu_ResourceCpu',0,15,161,1,3
	.word	19876
	.byte	11
	.byte	'_Ifx_STM_ACCEN0_Bits',0,34,68,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_STM_ACCEN0_Bits',0,34,102,3
	.word	231819
	.byte	11
	.byte	'_Ifx_STM_ACCEN1_Bits',0,34,105,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_ACCEN1_Bits',0,34,108,3
	.word	232376
	.byte	11
	.byte	'_Ifx_STM_CAP_Bits',0,34,111,16,4,12
	.byte	'STMCAP_63_32',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_CAP_Bits',0,34,114,3
	.word	232453
	.byte	11
	.byte	'_Ifx_STM_CAPSV_Bits',0,34,117,16,4,12
	.byte	'STMCAP_63_32',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_CAPSV_Bits',0,34,120,3
	.word	232526
	.byte	11
	.byte	'_Ifx_STM_CLC_Bits',0,34,123,16,4,12
	.byte	'DISR',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'DISS',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EDIS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,19
	.byte	'Ifx_STM_CLC_Bits',0,34,130,1,3
	.word	232603
	.byte	11
	.byte	'_Ifx_STM_CMCON_Bits',0,34,133,1,16,4,12
	.byte	'MSIZE0',0,1
	.word	531
	.byte	5,3,2,35,0,12
	.byte	'reserved_5',0,1
	.word	531
	.byte	3,0,2,35,0,12
	.byte	'MSTART0',0,1
	.word	531
	.byte	5,3,2,35,1,12
	.byte	'reserved_13',0,1
	.word	531
	.byte	3,0,2,35,1,12
	.byte	'MSIZE1',0,1
	.word	531
	.byte	5,3,2,35,2,12
	.byte	'reserved_21',0,1
	.word	531
	.byte	3,0,2,35,2,12
	.byte	'MSTART1',0,1
	.word	531
	.byte	5,3,2,35,3,12
	.byte	'reserved_29',0,1
	.word	531
	.byte	3,0,2,35,3,0,19
	.byte	'Ifx_STM_CMCON_Bits',0,34,143,1,3
	.word	232745
	.byte	11
	.byte	'_Ifx_STM_CMP_Bits',0,34,146,1,16,4,12
	.byte	'CMPVAL',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_CMP_Bits',0,34,149,1,3
	.word	232965
	.byte	11
	.byte	'_Ifx_STM_ICR_Bits',0,34,152,1,16,4,12
	.byte	'CMP0EN',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'CMP0IR',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'CMP0OS',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'reserved_3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'CMP1EN',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'CMP1IR',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'CMP1OS',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'reserved_7',0,4
	.word	334
	.byte	25,0,2,35,0,0,19
	.byte	'Ifx_STM_ICR_Bits',0,34,162,1,3
	.word	233034
	.byte	11
	.byte	'_Ifx_STM_ID_Bits',0,34,165,1,16,4,12
	.byte	'MODREV',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'MODTYPE',0,1
	.word	531
	.byte	8,0,2,35,1,12
	.byte	'MODNUM',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_STM_ID_Bits',0,34,170,1,3
	.word	233237
	.byte	11
	.byte	'_Ifx_STM_ISCR_Bits',0,34,173,1,16,4,12
	.byte	'CMP0IRR',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'CMP0IRS',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'CMP1IRR',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'CMP1IRS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,19
	.byte	'Ifx_STM_ISCR_Bits',0,34,180,1,3
	.word	233341
	.byte	11
	.byte	'_Ifx_STM_KRST0_Bits',0,34,183,1,16,4,12
	.byte	'RST',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'RSTSTAT',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_STM_KRST0_Bits',0,34,188,1,3
	.word	233492
	.byte	11
	.byte	'_Ifx_STM_KRST1_Bits',0,34,191,1,16,4,12
	.byte	'RST',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	334
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_STM_KRST1_Bits',0,34,195,1,3
	.word	233603
	.byte	11
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,34,198,1,16,4,12
	.byte	'CLR',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'reserved_1',0,4
	.word	334
	.byte	31,0,2,35,0,0,19
	.byte	'Ifx_STM_KRSTCLR_Bits',0,34,202,1,3
	.word	233695
	.byte	11
	.byte	'_Ifx_STM_OCS_Bits',0,34,205,1,16,4,12
	.byte	'reserved_0',0,1
	.word	531
	.byte	3,5,2,35,0,12
	.byte	'reserved_3',0,4
	.word	334
	.byte	21,8,2,35,0,12
	.byte	'SUS',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'SUS_P',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'SUSSTA',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	531
	.byte	2,0,2,35,3,0,19
	.byte	'Ifx_STM_OCS_Bits',0,34,213,1,3
	.word	233791
	.byte	11
	.byte	'_Ifx_STM_TIM0_Bits',0,34,216,1,16,4,12
	.byte	'STM_31_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM0_Bits',0,34,219,1,3
	.word	233959
	.byte	11
	.byte	'_Ifx_STM_TIM0SV_Bits',0,34,222,1,16,4,12
	.byte	'STM_31_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM0SV_Bits',0,34,225,1,3
	.word	234032
	.byte	11
	.byte	'_Ifx_STM_TIM1_Bits',0,34,228,1,16,4,12
	.byte	'STM_35_4',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM1_Bits',0,34,231,1,3
	.word	234109
	.byte	11
	.byte	'_Ifx_STM_TIM2_Bits',0,34,234,1,16,4,12
	.byte	'STM_39_8',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM2_Bits',0,34,237,1,3
	.word	234182
	.byte	11
	.byte	'_Ifx_STM_TIM3_Bits',0,34,240,1,16,4,12
	.byte	'STM_43_12',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM3_Bits',0,34,243,1,3
	.word	234255
	.byte	11
	.byte	'_Ifx_STM_TIM4_Bits',0,34,246,1,16,4,12
	.byte	'STM_47_16',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM4_Bits',0,34,249,1,3
	.word	234329
	.byte	11
	.byte	'_Ifx_STM_TIM5_Bits',0,34,252,1,16,4,12
	.byte	'STM_51_20',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM5_Bits',0,34,255,1,3
	.word	234403
	.byte	11
	.byte	'_Ifx_STM_TIM6_Bits',0,34,130,2,16,4,12
	.byte	'STM_63_32',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_STM_TIM6_Bits',0,34,133,2,3
	.word	234477
	.byte	13,34,141,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	231819
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_ACCEN0',0,34,146,2,3
	.word	234551
	.byte	13,34,149,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	232376
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_ACCEN1',0,34,154,2,3
	.word	234615
	.byte	13,34,157,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	232453
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_CAP',0,34,162,2,3
	.word	234679
	.byte	13,34,165,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	232526
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_CAPSV',0,34,170,2,3
	.word	234740
	.byte	13,34,173,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	232603
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_CLC',0,34,178,2,3
	.word	234803
	.byte	13,34,181,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	232745
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_CMCON',0,34,186,2,3
	.word	234864
	.byte	13,34,189,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	232965
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_CMP',0,34,194,2,3
	.word	234927
	.byte	13,34,197,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233034
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_ICR',0,34,202,2,3
	.word	234988
	.byte	13,34,205,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233237
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_ID',0,34,210,2,3
	.word	235049
	.byte	13,34,213,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233341
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_ISCR',0,34,218,2,3
	.word	235109
	.byte	13,34,221,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233492
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_KRST0',0,34,226,2,3
	.word	235171
	.byte	13,34,229,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233603
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_KRST1',0,34,234,2,3
	.word	235234
	.byte	13,34,237,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233695
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_KRSTCLR',0,34,242,2,3
	.word	235297
	.byte	13,34,245,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233791
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_OCS',0,34,250,2,3
	.word	235362
	.byte	13,34,253,2,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	233959
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM0',0,34,130,3,3
	.word	235423
	.byte	13,34,133,3,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	234032
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM0SV',0,34,138,3,3
	.word	235485
	.byte	13,34,141,3,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	234109
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM1',0,34,146,3,3
	.word	235549
	.byte	13,34,149,3,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	234182
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM2',0,34,154,3,3
	.word	235611
	.byte	13,34,157,3,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	234255
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM3',0,34,162,3,3
	.word	235673
	.byte	13,34,165,3,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	234329
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM4',0,34,170,3,3
	.word	235735
	.byte	13,34,173,3,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	234403
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM5',0,34,178,3,3
	.word	235797
	.byte	13,34,181,3,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	234477
	.byte	4,2,35,0,0,19
	.byte	'Ifx_STM_TIM6',0,34,186,3,3
	.word	235859
	.byte	17,14,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,19
	.byte	'IfxCpu_CounterMode',0,14,145,1,3
	.word	235921
	.byte	31,14,192,1,9,6,14
	.byte	'counter',0
	.word	9849
	.byte	4,2,35,0,14
	.byte	'overlfow',0
	.word	531
	.byte	1,2,35,4,0,19
	.byte	'IfxCpu_Counter',0,14,196,1,3
	.word	236010
	.byte	31,14,204,1,9,32,14
	.byte	'instruction',0
	.word	236010
	.byte	6,2,35,0,14
	.byte	'clock',0
	.word	236010
	.byte	6,2,35,6,14
	.byte	'counter1',0
	.word	236010
	.byte	6,2,35,12,14
	.byte	'counter2',0
	.word	236010
	.byte	6,2,35,18,14
	.byte	'counter3',0
	.word	236010
	.byte	6,2,35,24,0,19
	.byte	'IfxCpu_Perf',0,14,211,1,3
	.word	236076
	.byte	11
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,35,68,16,4,12
	.byte	'EN0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'EN1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'EN2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EN3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'EN4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'EN5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'EN6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'EN7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'EN8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'EN9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'EN10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EN11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'EN12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'EN13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'EN14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'EN15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'EN16',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'EN17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'EN18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'EN19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'EN20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'EN21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'EN22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'EN23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'EN24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'EN25',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'EN26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EN27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'EN28',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'EN29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'EN30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'EN31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SMU_ACCEN0_Bits',0,35,102,3
	.word	236194
	.byte	11
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,35,105,16,4,12
	.byte	'reserved_0',0,4
	.word	334
	.byte	32,0,2,35,0,0,19
	.byte	'Ifx_SMU_ACCEN1_Bits',0,35,108,3
	.word	236751
	.byte	11
	.byte	'_Ifx_SMU_AD_Bits',0,35,111,16,4,12
	.byte	'DF0',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'DF1',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'DF2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'DF3',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'DF4',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'DF5',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'DF6',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'DF7',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'DF8',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'DF9',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'DF10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'DF11',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'DF12',0,1
	.word	531
	.byte	1,3,2,35,1,12
	.byte	'DF13',0,1
	.word	531
	.byte	1,2,2,35,1,12
	.byte	'DF14',0,1
	.word	531
	.byte	1,1,2,35,1,12
	.byte	'DF15',0,1
	.word	531
	.byte	1,0,2,35,1,12
	.byte	'DF16',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'DF17',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'DF18',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'DF19',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'DF20',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'DF21',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'DF22',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'DF23',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'DF24',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'DF25',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'DF26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'DF27',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'DF28',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'DF29',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'DF30',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'DF31',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SMU_AD_Bits',0,35,145,1,3
	.word	236828
	.byte	11
	.byte	'_Ifx_SMU_AEX_Bits',0,35,148,1,16,4,12
	.byte	'IRQ0STS',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'IRQ1STS',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'IRQ2STS',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'RST0STS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'RST1STS',0,1
	.word	531
	.byte	1,3,2,35,0,12
	.byte	'RST2STS',0,1
	.word	531
	.byte	1,2,2,35,0,12
	.byte	'RST3STS',0,1
	.word	531
	.byte	1,1,2,35,0,12
	.byte	'RST4STS',0,1
	.word	531
	.byte	1,0,2,35,0,12
	.byte	'RST5STS',0,1
	.word	531
	.byte	1,7,2,35,1,12
	.byte	'NMISTS',0,1
	.word	531
	.byte	1,6,2,35,1,12
	.byte	'reserved_10',0,1
	.word	531
	.byte	1,5,2,35,1,12
	.byte	'EMSSTS',0,1
	.word	531
	.byte	1,4,2,35,1,12
	.byte	'reserved_12',0,1
	.word	531
	.byte	4,0,2,35,1,12
	.byte	'IRQ0AEM',0,1
	.word	531
	.byte	1,7,2,35,2,12
	.byte	'IRQ1AEM',0,1
	.word	531
	.byte	1,6,2,35,2,12
	.byte	'IRQ2AEM',0,1
	.word	531
	.byte	1,5,2,35,2,12
	.byte	'RST0AEM',0,1
	.word	531
	.byte	1,4,2,35,2,12
	.byte	'RST1AEM',0,1
	.word	531
	.byte	1,3,2,35,2,12
	.byte	'RST2AEM',0,1
	.word	531
	.byte	1,2,2,35,2,12
	.byte	'RST3AEM',0,1
	.word	531
	.byte	1,1,2,35,2,12
	.byte	'RST4AEM',0,1
	.word	531
	.byte	1,0,2,35,2,12
	.byte	'RST5AEM',0,1
	.word	531
	.byte	1,7,2,35,3,12
	.byte	'NMIAEM',0,1
	.word	531
	.byte	1,6,2,35,3,12
	.byte	'reserved_26',0,1
	.word	531
	.byte	1,5,2,35,3,12
	.byte	'EMSAEM',0,1
	.word	531
	.byte	1,4,2,35,3,12
	.byte	'reserved_28',0,1
	.word	531
	.byte	4,0,2,35,3,0,19
	.byte	'Ifx_SMU_AEX_Bits',0,35,176,1,3
	.word	237378
	.byte	11
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,35,179,1,16,4,12
	.byte	'IRQ0CLR',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'IRQ1CLR',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'IRQ2CLR',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'RST0CLR',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'RST1CLR',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'RST2CLR',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'RST3CLR',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'RST4CLR',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'RST5CLR',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'NMICLR',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'reserved_10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'EMSCLR',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	4,16,2,35,0,12
	.byte	'IRQ0AEMCLR',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'IRQ1AEMCLR',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'IRQ2AEMCLR',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'RST0AEMCLR',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'RST1AEMCLR',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'RST2AEMCLR',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'RST3AEMCLR',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'RST4AEMCLR',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'RST5AEMCLR',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'NMIAEMCLR',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'EMSAEMCLR',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	4,0,2,35,0,0,19
	.byte	'Ifx_SMU_AEXCLR_Bits',0,35,207,1,3
	.word	237935
	.byte	11
	.byte	'_Ifx_SMU_AFCNT_Bits',0,35,210,1,16,4,12
	.byte	'FCNT',0,1
	.word	531
	.byte	4,4,2,35,0,12
	.byte	'ACNT',0,2
	.word	1082
	.byte	12,0,2,35,0,12
	.byte	'reserved_16',0,2
	.word	1082
	.byte	14,2,2,35,2,12
	.byte	'FCO',0,1
	.word	531
	.byte	1,1,2,35,3,12
	.byte	'ACO',0,1
	.word	531
	.byte	1,0,2,35,3,0,19
	.byte	'Ifx_SMU_AFCNT_Bits',0,35,217,1,3
	.word	238531
	.byte	11
	.byte	'_Ifx_SMU_AG_Bits',0,35,220,1,16,4,12
	.byte	'SF0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'SF1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'SF2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'SF3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'SF4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'SF5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'SF6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'SF7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'SF8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'SF9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'SF10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'SF11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'SF12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'SF13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'SF14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'SF15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'SF16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'SF17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'SF18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'SF19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'SF20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'SF21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'SF22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'SF23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'SF24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'SF25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'SF26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'SF27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'SF28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'SF29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'SF30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'SF31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_SMU_AG_Bits',0,35,254,1,3
	.word	238671
	.byte	11
	.byte	'_Ifx_SMU_AGC_Bits',0,35,129,2,16,4,12
	.byte	'IGCS0',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'reserved_3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'IGCS1',0,4
	.word	930
	.byte	3,25,2,35,0,12
	.byte	'reserved_7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'IGCS2',0,4
	.word	930
	.byte	3,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	5,16,2,35,0,12
	.byte	'RCS',0,4
	.word	930
	.byte	6,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	2,8,2,35,0,12
	.byte	'PES',0,4
	.word	930
	.byte	5,3,2,35,0,12
	.byte	'EFRST',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	2,0,2,35,0,0,19
	.byte	'Ifx_SMU_AGC_Bits',0,35,142,2,3
	.word	239222
	.byte	11
	.byte	'_Ifx_SMU_AGCF_Bits',0,35,145,2,16,4,12
	.byte	'CF0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'CF1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'CF2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'CF3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'CF4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'CF5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'CF6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'CF7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'CF8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'CF9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'CF10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'CF11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'CF12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'CF13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'CF14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'CF15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'CF16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'CF17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'CF18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'CF19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'CF20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'CF21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'CF22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'CF23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'CF24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'CF25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'CF26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'CF27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'CF28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'CF29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'CF30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'CF31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_SMU_AGCF_Bits',0,35,179,2,3
	.word	239484
	.byte	11
	.byte	'_Ifx_SMU_AGFSP_Bits',0,35,182,2,16,4,12
	.byte	'FE0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'FE1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'FE2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'FE3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'FE4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'FE5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'FE6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'FE7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'FE8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'FE9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'FE10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'FE11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'FE12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'FE13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'FE14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'FE15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'FE16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'FE17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'FE18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'FE19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'FE20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'FE21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'FE22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'FE23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'FE24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'FE25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'FE26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'FE27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'FE28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'FE29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'FE30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'FE31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_SMU_AGFSP_Bits',0,35,216,2,3
	.word	240039
	.byte	11
	.byte	'_Ifx_SMU_CLC_Bits',0,35,219,2,16,4,12
	.byte	'DISR',0,1
	.word	531
	.byte	1,7,2,35,0,12
	.byte	'DISS',0,1
	.word	531
	.byte	1,6,2,35,0,12
	.byte	'reserved_2',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'EDIS',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	28,0,2,35,0,0,19
	.byte	'Ifx_SMU_CLC_Bits',0,35,226,2,3
	.word	240596
	.byte	11
	.byte	'_Ifx_SMU_CMD_Bits',0,35,229,2,16,4,12
	.byte	'CMD',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'ARG',0,4
	.word	930
	.byte	4,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_SMU_CMD_Bits',0,35,234,2,3
	.word	240739
	.byte	11
	.byte	'_Ifx_SMU_DBG_Bits',0,35,237,2,16,4,12
	.byte	'SSM',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'reserved_2',0,4
	.word	334
	.byte	30,0,2,35,0,0,19
	.byte	'Ifx_SMU_DBG_Bits',0,35,241,2,3
	.word	240842
	.byte	11
	.byte	'_Ifx_SMU_FSP_Bits',0,35,244,2,16,4,12
	.byte	'PRE1',0,4
	.word	930
	.byte	3,29,2,35,0,12
	.byte	'PRE2',0,4
	.word	930
	.byte	2,27,2,35,0,12
	.byte	'MODE',0,4
	.word	930
	.byte	2,25,2,35,0,12
	.byte	'PES',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TFSP_LOW',0,4
	.word	930
	.byte	14,10,2,35,0,12
	.byte	'TFSP_HIGH',0,4
	.word	930
	.byte	10,0,2,35,0,0,19
	.byte	'Ifx_SMU_FSP_Bits',0,35,252,2,3
	.word	240930
	.byte	11
	.byte	'_Ifx_SMU_ID_Bits',0,35,255,2,16,4,12
	.byte	'MOD_REV',0,1
	.word	531
	.byte	8,0,2,35,0,12
	.byte	'MOD_TYPE',0,1
	.word	531
	.byte	8,0,2,35,1,12
	.byte	'MOD_NUMBER',0,2
	.word	1082
	.byte	16,0,2,35,2,0,19
	.byte	'Ifx_SMU_ID_Bits',0,35,132,3,3
	.word	241085
	.byte	11
	.byte	'_Ifx_SMU_KEYS_Bits',0,35,135,3,16,4,12
	.byte	'CFGLCK',0,4
	.word	930
	.byte	8,24,2,35,0,12
	.byte	'PERLCK',0,4
	.word	930
	.byte	8,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	16,0,2,35,0,0,19
	.byte	'Ifx_SMU_KEYS_Bits',0,35,140,3,3
	.word	241195
	.byte	11
	.byte	'_Ifx_SMU_OCS_Bits',0,35,143,3,16,4,12
	.byte	'TGS',0,1
	.word	531
	.byte	2,6,2,35,0,12
	.byte	'TGB',0,1
	.word	531
	.byte	1,5,2,35,0,12
	.byte	'TG_P',0,1
	.word	531
	.byte	1,4,2,35,0,12
	.byte	'reserved_4',0,4
	.word	334
	.byte	20,8,2,35,0,12
	.byte	'SUS',0,1
	.word	531
	.byte	4,4,2,35,3,12
	.byte	'SUS_P',0,1
	.word	531
	.byte	1,3,2,35,3,12
	.byte	'SUSSTA',0,1
	.word	531
	.byte	1,2,2,35,3,12
	.byte	'reserved_30',0,1
	.word	531
	.byte	2,0,2,35,3,0,19
	.byte	'Ifx_SMU_OCS_Bits',0,35,153,3,3
	.word	241307
	.byte	11
	.byte	'_Ifx_SMU_PCTL_Bits',0,35,156,3,16,4,12
	.byte	'HWDIR',0,4
	.word	930
	.byte	2,30,2,35,0,12
	.byte	'HWEN',0,4
	.word	930
	.byte	2,28,2,35,0,12
	.byte	'GFSCU_EN',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'GFSTS_EN',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'reserved_6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'PCS',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'reserved_8',0,4
	.word	930
	.byte	6,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	9,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	9,0,2,35,0,0,19
	.byte	'Ifx_SMU_PCTL_Bits',0,35,167,3,3
	.word	241499
	.byte	11
	.byte	'_Ifx_SMU_RMCTL_Bits',0,35,170,3,16,4,12
	.byte	'TE0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'TE1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'TE2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'TE3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'TE4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'TE5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'TE6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'TE7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'TE8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'TE9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'TE10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_SMU_RMCTL_Bits',0,35,204,3,3
	.word	241730
	.byte	11
	.byte	'_Ifx_SMU_RMEF_Bits',0,35,207,3,16,4,12
	.byte	'EF0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'EF1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'EF2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'EF3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'EF4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'EF5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'EF6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'EF7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'EF8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'EF9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'EF10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_SMU_RMEF_Bits',0,35,241,3,3
	.word	242434
	.byte	11
	.byte	'_Ifx_SMU_RMSTS_Bits',0,35,244,3,16,4,12
	.byte	'STS0',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'STS1',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'STS2',0,4
	.word	930
	.byte	1,29,2,35,0,12
	.byte	'STS3',0,4
	.word	930
	.byte	1,28,2,35,0,12
	.byte	'STS4',0,4
	.word	930
	.byte	1,27,2,35,0,12
	.byte	'STS5',0,4
	.word	930
	.byte	1,26,2,35,0,12
	.byte	'STS6',0,4
	.word	930
	.byte	1,25,2,35,0,12
	.byte	'STS7',0,4
	.word	930
	.byte	1,24,2,35,0,12
	.byte	'STS8',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'STS9',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'STS10',0,4
	.word	930
	.byte	1,21,2,35,0,12
	.byte	'reserved_11',0,4
	.word	930
	.byte	1,20,2,35,0,12
	.byte	'reserved_12',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	1,18,2,35,0,12
	.byte	'reserved_14',0,4
	.word	930
	.byte	1,17,2,35,0,12
	.byte	'reserved_15',0,4
	.word	930
	.byte	1,16,2,35,0,12
	.byte	'reserved_16',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'reserved_17',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'reserved_18',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'reserved_19',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	1,11,2,35,0,12
	.byte	'reserved_21',0,4
	.word	930
	.byte	1,10,2,35,0,12
	.byte	'reserved_22',0,4
	.word	930
	.byte	1,9,2,35,0,12
	.byte	'reserved_23',0,4
	.word	930
	.byte	1,8,2,35,0,12
	.byte	'reserved_24',0,4
	.word	930
	.byte	1,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	1,6,2,35,0,12
	.byte	'reserved_26',0,4
	.word	930
	.byte	1,5,2,35,0,12
	.byte	'reserved_27',0,4
	.word	930
	.byte	1,4,2,35,0,12
	.byte	'reserved_28',0,4
	.word	930
	.byte	1,3,2,35,0,12
	.byte	'reserved_29',0,4
	.word	930
	.byte	1,2,2,35,0,12
	.byte	'reserved_30',0,4
	.word	930
	.byte	1,1,2,35,0,12
	.byte	'reserved_31',0,4
	.word	930
	.byte	1,0,2,35,0,0,19
	.byte	'Ifx_SMU_RMSTS_Bits',0,35,150,4,3
	.word	243136
	.byte	11
	.byte	'_Ifx_SMU_RTAC00_Bits',0,35,153,4,16,4,12
	.byte	'GID0',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'ALID0',0,4
	.word	930
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'GID1',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'ALID1',0,4
	.word	930
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC00_Bits',0,35,161,4,3
	.word	243851
	.byte	11
	.byte	'_Ifx_SMU_RTAC01_Bits',0,35,164,4,16,4,12
	.byte	'GID2',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'ALID2',0,4
	.word	930
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'GID3',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'ALID3',0,4
	.word	930
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC01_Bits',0,35,172,4,3
	.word	244019
	.byte	11
	.byte	'_Ifx_SMU_RTAC10_Bits',0,35,175,4,16,4,12
	.byte	'GID0',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'ALID0',0,4
	.word	930
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'GID1',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'ALID1',0,4
	.word	930
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC10_Bits',0,35,183,4,3
	.word	244187
	.byte	11
	.byte	'_Ifx_SMU_RTAC11_Bits',0,35,186,4,16,4,12
	.byte	'GID2',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'ALID2',0,4
	.word	930
	.byte	5,23,2,35,0,12
	.byte	'reserved_9',0,4
	.word	930
	.byte	7,16,2,35,0,12
	.byte	'GID3',0,4
	.word	930
	.byte	4,12,2,35,0,12
	.byte	'ALID3',0,4
	.word	930
	.byte	5,7,2,35,0,12
	.byte	'reserved_25',0,4
	.word	930
	.byte	7,0,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC11_Bits',0,35,194,4,3
	.word	244355
	.byte	11
	.byte	'_Ifx_SMU_RTC_Bits',0,35,197,4,16,4,12
	.byte	'RT0E',0,4
	.word	930
	.byte	1,31,2,35,0,12
	.byte	'RT1E',0,4
	.word	930
	.byte	1,30,2,35,0,12
	.byte	'reserved_2',0,4
	.word	930
	.byte	6,24,2,35,0,12
	.byte	'RTD',0,4
	.word	930
	.byte	24,0,2,35,0,0,19
	.byte	'Ifx_SMU_RTC_Bits',0,35,203,4,3
	.word	244523
	.byte	11
	.byte	'_Ifx_SMU_STS_Bits',0,35,206,4,16,4,12
	.byte	'CMD',0,4
	.word	930
	.byte	4,28,2,35,0,12
	.byte	'ARG',0,4
	.word	930
	.byte	4,24,2,35,0,12
	.byte	'RES',0,4
	.word	930
	.byte	1,23,2,35,0,12
	.byte	'ASCE',0,4
	.word	930
	.byte	1,22,2,35,0,12
	.byte	'FSP',0,4
	.word	930
	.byte	2,20,2,35,0,12
	.byte	'FSTS',0,4
	.word	930
	.byte	1,19,2,35,0,12
	.byte	'reserved_13',0,4
	.word	930
	.byte	3,16,2,35,0,12
	.byte	'RTS0',0,4
	.word	930
	.byte	1,15,2,35,0,12
	.byte	'RTME0',0,4
	.word	930
	.byte	1,14,2,35,0,12
	.byte	'RTS1',0,4
	.word	930
	.byte	1,13,2,35,0,12
	.byte	'RTME1',0,4
	.word	930
	.byte	1,12,2,35,0,12
	.byte	'reserved_20',0,4
	.word	930
	.byte	12,0,2,35,0,0,19
	.byte	'Ifx_SMU_STS_Bits',0,35,220,4,3
	.word	244643
	.byte	13,35,228,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	236194
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_ACCEN0',0,35,233,4,3
	.word	244898
	.byte	13,35,236,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	236751
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_ACCEN1',0,35,241,4,3
	.word	244962
	.byte	13,35,244,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	236828
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AD',0,35,249,4,3
	.word	245026
	.byte	13,35,252,4,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	237378
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AEX',0,35,129,5,3
	.word	245086
	.byte	13,35,132,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	237935
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AEXCLR',0,35,137,5,3
	.word	245147
	.byte	13,35,140,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	238531
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AFCNT',0,35,145,5,3
	.word	245211
	.byte	13,35,148,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	238671
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AG',0,35,153,5,3
	.word	245274
	.byte	13,35,156,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	239222
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AGC',0,35,161,5,3
	.word	245334
	.byte	13,35,164,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	239484
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AGCF',0,35,169,5,3
	.word	245395
	.byte	13,35,172,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	240039
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_AGFSP',0,35,177,5,3
	.word	245457
	.byte	13,35,180,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	240596
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_CLC',0,35,185,5,3
	.word	245520
	.byte	13,35,188,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	240739
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_CMD',0,35,193,5,3
	.word	245581
	.byte	13,35,196,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	240842
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_DBG',0,35,201,5,3
	.word	245642
	.byte	13,35,204,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	240930
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_FSP',0,35,209,5,3
	.word	245703
	.byte	13,35,212,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	241085
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_ID',0,35,217,5,3
	.word	245764
	.byte	13,35,220,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	241195
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_KEYS',0,35,225,5,3
	.word	245824
	.byte	13,35,228,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	241307
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_OCS',0,35,233,5,3
	.word	245886
	.byte	13,35,236,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	241499
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_PCTL',0,35,241,5,3
	.word	245947
	.byte	13,35,244,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	241730
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RMCTL',0,35,249,5,3
	.word	246009
	.byte	13,35,252,5,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	242434
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RMEF',0,35,129,6,3
	.word	246072
	.byte	13,35,132,6,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	243136
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RMSTS',0,35,137,6,3
	.word	246134
	.byte	13,35,140,6,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	243851
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC00',0,35,145,6,3
	.word	246197
	.byte	13,35,148,6,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	244019
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC01',0,35,153,6,3
	.word	246261
	.byte	13,35,156,6,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	244187
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC10',0,35,161,6,3
	.word	246325
	.byte	13,35,164,6,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	244355
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RTAC11',0,35,169,6,3
	.word	246389
	.byte	13,35,172,6,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	244523
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_RTC',0,35,177,6,3
	.word	246453
	.byte	13,35,180,6,9,4,14
	.byte	'U',0
	.word	334
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	524
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	244643
	.byte	4,2,35,0,0,19
	.byte	'Ifx_SMU_STS',0,35,185,6,3
	.word	246514
	.byte	17,16,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,19
	.byte	'IfxScuCcu_LowPowerDivRatio',0,16,216,2,3
	.word	246575
	.byte	17,16,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,19
	.byte	'IfxScuCcu_ModulationAmplitude',0,16,229,2,3
	.word	246768
	.byte	17,16,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,19
	.byte	'IfxScuCcu_PllInputClockSelection',0,16,131,4,3
	.word	247069
	.byte	17,16,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,19
	.byte	'IfxScuCcu_Traprequest',0,16,141,4,3
	.word	247243
	.byte	17,16,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,19
	.byte	'IfxScuCcu_ModEn',0,16,151,4,3
	.word	247397
	.byte	31,16,162,4,9,6,14
	.byte	'pDivider',0
	.word	531
	.byte	1,2,35,0,14
	.byte	'nDivider',0
	.word	531
	.byte	1,2,35,1,14
	.byte	'k2Divider',0
	.word	531
	.byte	1,2,35,2,14
	.byte	'k3Divider',0
	.word	531
	.byte	1,2,35,3,14
	.byte	'k3DividerBypass',0
	.word	531
	.byte	1,2,35,4,0,19
	.byte	'IfxScuCcu_PerPllConfig',0,16,171,4,3
	.word	247482
	.byte	31,16,176,4,9,4,14
	.byte	'pDivider',0
	.word	531
	.byte	1,2,35,0,14
	.byte	'nDivider',0
	.word	531
	.byte	1,2,35,1,14
	.byte	'k2Divider',0
	.word	531
	.byte	1,2,35,2,0,19
	.byte	'IfxScuCcu_SysPllConfig',0,16,181,4,3
	.word	247620
	.byte	31,16,189,4,9,8,14
	.byte	'value',0
	.word	9849
	.byte	4,2,35,0,14
	.byte	'mask',0
	.word	9849
	.byte	4,2,35,4,0,19
	.byte	'IfxScuCcu_CcuconRegConfig',0,16,193,4,3
	.word	247714
	.byte	31,16,197,4,9,6,14
	.byte	'k2Step',0
	.word	531
	.byte	1,2,35,0,14
	.byte	'waitTime',0
	.word	232
	.byte	4,2,35,2,0,19
	.byte	'IfxScuCcu_PllStepConfig',0,16,201,4,3
	.word	247785
	.byte	31,16,205,4,9,16,14
	.byte	'xtalFrequency',0
	.word	9849
	.byte	4,2,35,0,14
	.byte	'pllInputClockSelection',0
	.word	247069
	.byte	1,2,35,4,14
	.byte	'sysPllConfig',0
	.word	247620
	.byte	4,2,35,6,14
	.byte	'perPllConfig',0
	.word	247482
	.byte	6,2,35,10,0,19
	.byte	'IfxScuCcu_pllsParameterConfig',0,16,211,4,3
	.word	247859
	.byte	31,16,219,4,9,8,14
	.byte	'value',0
	.word	9849
	.byte	4,2,35,0,14
	.byte	'mask',0
	.word	9849
	.byte	4,2,35,4,0,19
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,16,223,4,3
	.word	248004
	.byte	31,16,231,4,9,56,14
	.byte	'ccucon0',0
	.word	247714
	.byte	8,2,35,0,14
	.byte	'ccucon1',0
	.word	247714
	.byte	8,2,35,8,14
	.byte	'ccucon2',0
	.word	247714
	.byte	8,2,35,16,14
	.byte	'ccucon5',0
	.word	247714
	.byte	8,2,35,24,14
	.byte	'ccucon6',0
	.word	247714
	.byte	8,2,35,32,14
	.byte	'ccucon7',0
	.word	247714
	.byte	8,2,35,40,14
	.byte	'ccucon8',0
	.word	247714
	.byte	8,2,35,48,0,19
	.byte	'IfxScuCcu_ClockDistributionConfig',0,16,240,4,3
	.word	248080
	.byte	31,16,244,4,9,20,14
	.byte	'pllsParameters',0
	.word	247859
	.byte	16,2,35,0,14
	.byte	'waitTime',0
	.word	232
	.byte	4,2,35,16,0,19
	.byte	'IfxScuCcu_InitialStepConfig',0,16,248,4,3
	.word	248249
	.byte	25
	.word	247785
	.byte	3
	.word	248335
	.byte	31,16,252,4,9,8,14
	.byte	'numOfSteps',0
	.word	531
	.byte	1,2,35,0,14
	.byte	'pllSteps',0
	.word	248340
	.byte	4,2,35,4,0,19
	.byte	'IfxScuCcu_PllThrottleConfig',0,16,128,5,3
	.word	248345
	.byte	31,16,134,5,9,2,14
	.byte	'Mod_Enable',0
	.word	247397
	.byte	1,2,35,0,14
	.byte	'Mod_Amp',0
	.word	246768
	.byte	1,2,35,1,0,19
	.byte	'IfxScuCcu_Mod_Config',0,16,138,5,3
	.word	248427
	.byte	17,36,70,9,1,18
	.byte	'IfxGtm_Dtm_ClockSource_systemClock',0,0,18
	.byte	'IfxGtm_Dtm_ClockSource_cmuClock0',0,1,18
	.byte	'IfxGtm_Dtm_ClockSource_cmuClock1',0,2,18
	.byte	'IfxGtm_Dtm_ClockSource_cmuClock2',0,3,0,19
	.byte	'IfxGtm_Dtm_ClockSource',0,36,76,3
	.word	248501
	.byte	17,36,81,9,1,18
	.byte	'IfxGtm_Dtm_Output1Function_signalEdgeTrigger',0,0,18
	.byte	'IfxGtm_Dtm_Output1Function_xorOfDtmInputandShiftSignal',0,1,18
	.byte	'IfxGtm_Dtm_Output1Function_andOfDtmInputandShiftSignal',0,2,18
	.byte	'IfxGtm_Dtm_Output1Function_dtmInputSignal',0,3,0,19
	.byte	'IfxGtm_Dtm_Output1Function',0,36,87,3
	.word	248680
	.byte	17,36,92,9,1,18
	.byte	'IfxGtm_Dtm_Output1Select_inverseDeadTime',0,0,18
	.byte	'IfxGtm_Dtm_Output1Select_specialFunction',0,1,0,19
	.byte	'IfxGtm_Dtm_Output1Select',0,36,96,3
	.word	248926
	.byte	17,36,103,9,1,18
	.byte	'IfxGtm_Dtm_DeadTimePath_feedThrough',0,0,18
	.byte	'IfxGtm_Dtm_DeadTimePath_enable',0,1,0,19
	.byte	'IfxGtm_Dtm_DeadTimePath',0,36,107,3
	.word	249051
	.byte	19
	.byte	'IfxGtm_Atom_Timer_Base',0,22,110,3
	.word	23759
	.byte	19
	.byte	'IfxGtm_Atom_Timer',0,22,133,1,3
	.word	129172
	.byte	19
	.byte	'IfxGtm_Atom_PwmHl',0,23,112,36
	.word	130162
	.byte	19
	.byte	'IfxGtm_Atom_PwmHl_Base',0,23,139,1,3
	.word	129775
	.byte	19
	.byte	'IfxGtm_Atom_PwmHl_Config',0,23,156,1,3
	.word	130429
	.byte	31,23,160,1,9,16,14
	.byte	'mode',0
	.word	129579
	.byte	1,2,35,0,14
	.byte	'inverted',0
	.word	531
	.byte	1,2,35,1,14
	.byte	'update',0
	.word	129986
	.byte	4,2,35,4,14
	.byte	'updateAndShift',0
	.word	130043
	.byte	4,2,35,8,14
	.byte	'updatePulse',0
	.word	130110
	.byte	4,2,35,12,0,19
	.byte	'IfxGtm_Atom_PwmHl_Mode',0,23,167,1,3
	.word	249310
	.byte	15,80
	.word	249310
	.byte	16,4,0
.L553:
	.byte	25
	.word	249442
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,53,0,73,19,0,0,11,19
	.byte	1,3,8,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,13,23,1,58,15,59,15,57
	.byte	15,11,15,0,0,14,13,0,3,8,73,19,11,15,56,9,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,22,0,3,8,58,15,59,15,57,15,73,19,0,0,20,21,1,73,19,54,15,39
	.byte	12,0,0,21,5,0,73,19,0,0,22,21,1,54,15,39,12,0,0,23,13,0,73,19,11,15,56,9,0,0,24,11,1,0,0,25,38,0,73,19
	.byte	0,0,26,46,1,3,8,54,15,39,12,63,12,60,12,0,0,27,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,28,5,0,3,8,73
	.byte	19,0,0,29,46,1,49,19,0,0,30,5,0,49,19,0,0,31,19,1,58,15,59,15,57,15,11,15,0,0,32,46,1,3,8,58,15,59,15
	.byte	57,15,54,15,39,12,63,12,60,12,0,0,33,29,1,49,19,0,0,34,11,0,49,19,0,0,35,46,1,3,8,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,63,12,60,12,0,0,36,5,0,58,15,59,15,57,15,73,19,0,0,37,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	63,12,60,12,0,0,38,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L163:
	.word	.L651-.L650
.L650:
	.half	3
	.word	.L653-.L652
.L652:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxScuWdt.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxStdIf_Timer.h',0,6,0,0
	.byte	'IfxStdIf.h',0,6,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0
	.byte	'IfxGtm_regdef.h',0,3,0,0
	.byte	'IfxGtm_cfg.h',0,7,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,7,0,0
	.byte	'IfxScuCcu.h',0,4,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxStdIf_PwmHl.h',0,6,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Cmu.h',0,0
	.byte	0,0
	.byte	'IfxGtm_PinMap.h',0,8,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer\\IfxGtm_Atom_Timer.h',0
	.byte	0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.h',0,0,0,0
	.byte	'string.h',0,9,0,0
	.byte	'stddef.h',0,9,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'IfxSrc_cfg.h',0,7,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,7,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm.h',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Tbu.h',0,0
	.byte	0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Tim.h',0,0
	.byte	0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Dtm.h',0,0
	.byte	0,0,0
.L653:
.L651:
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_init')
	.sect	'.debug_info'
.L164:
	.word	459
	.half	3
	.word	.L165
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L167,.L166
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_init',0,1,166,1,9
	.word	.L336
	.byte	1,1,1
	.word	.L101,.L337,.L100
	.byte	4
	.byte	'driver',0,1,166,1,51
	.word	.L338,.L339
	.byte	4
	.byte	'config',0,1,166,1,91
	.word	.L340,.L341
	.byte	5
	.word	.L101,.L337
	.byte	6
	.byte	'channelMask',0,1,169,1,24
	.word	.L342,.L343
	.byte	6
	.byte	'channelsMask',0,1,170,1,24
	.word	.L342,.L344
	.byte	6
	.byte	'channelIndex',0,1,171,1,24
	.word	.L345,.L346
	.byte	6
	.byte	'timer',0,1,173,1,24
	.word	.L347,.L348
	.byte	5
	.word	.L349,.L337
	.byte	6
	.byte	'clock',0,1,192,1,20
	.word	.L350,.L351
	.byte	5
	.word	.L6,.L12
	.byte	6
	.byte	'channel',0,1,196,1,24
	.word	.L352,.L353
	.byte	0,5
	.word	.L354,.L337
	.byte	6
	.byte	'tOn',0,1,242,1,20
	.word	.L355,.L356
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_init')
	.sect	'.debug_abbrev'
.L165:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_init')
	.sect	'.debug_line'
.L166:
	.word	.L655-.L654
.L654:
	.half	3
	.word	.L657-.L656
.L656:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L657:
	.byte	5,37,7,0,5,2
	.word	.L101
	.byte	3,174,1,1,5,9,3,119,1,5,37,9
	.half	.L558-.L101
	.byte	3,4,1,5,38,3,3,1,5,35,9
	.half	.L560-.L558
	.byte	3,2,1,5,37,9
	.half	.L658-.L560
	.byte	3,2,1,5,35,3,127,1,9
	.half	.L561-.L658
	.byte	3,1,1,9
	.half	.L659-.L561
	.byte	3,1,1,5,9,9
	.half	.L660-.L659
	.byte	3,116,1,5,49,9
	.half	.L555-.L660
	.byte	3,13,1,5,35,9
	.half	.L562-.L555
	.byte	1,5,49,9
	.half	.L661-.L562
	.byte	3,1,1,5,35,9
	.half	.L662-.L661
	.byte	1,5,49,9
	.half	.L663-.L662
	.byte	3,1,1,5,35,9
	.half	.L664-.L663
	.byte	1,5,55,9
	.half	.L665-.L664
	.byte	3,2,1,9
	.half	.L556-.L665
	.byte	3,1,1,5,27,9
	.half	.L564-.L556
	.byte	3,2,1,5,45,9
	.half	.L666-.L564
	.byte	1,5,38,9
	.half	.L667-.L666
	.byte	1,5,18,9
	.half	.L668-.L667
	.byte	1,5,53,9
	.half	.L669-.L668
	.byte	3,2,1,5,18,9
	.half	.L670-.L669
	.byte	1,5,63,9
	.half	.L349-.L670
	.byte	3,4,1,5,76,9
	.half	.L671-.L349
	.byte	1,5,26,9
	.half	.L565-.L671
	.byte	1,5,84,3,2,1,5,23,9
	.half	.L566-.L565
	.byte	1,5,68,1,5,43,9
	.half	.L6-.L566
	.byte	3,4,1,5,37,9
	.half	.L672-.L6
	.byte	3,2,1,5,48,9
	.half	.L673-.L672
	.byte	3,126,1,5,62,9
	.half	.L674-.L673
	.byte	1,5,35,9
	.half	.L568-.L674
	.byte	3,1,1,5,39,9
	.half	.L675-.L568
	.byte	3,1,1,5,25,9
	.half	.L676-.L675
	.byte	3,5,1,5,39,9
	.half	.L677-.L676
	.byte	3,123,1,5,49,3,5,1,5,34,9
	.half	.L570-.L677
	.byte	3,124,1,5,13,9
	.half	.L678-.L570
	.byte	3,4,1,5,24,7,9
	.half	.L679-.L678
	.byte	3,191,127,1,5,13,9
	.half	.L8-.L679
	.byte	3,195,0,1,5,47,3,125,1,5,50,9
	.half	.L572-.L8
	.byte	3,3,1,5,13,9
	.half	.L571-.L572
	.byte	1,5,19,9
	.half	.L569-.L571
	.byte	3,3,1,5,9,9
	.half	.L680-.L569
	.byte	1,5,45,7,9
	.half	.L681-.L680
	.byte	3,2,1,5,29,9
	.half	.L682-.L681
	.byte	3,1,1,5,54,9
	.half	.L683-.L682
	.byte	1,5,50,9
	.half	.L684-.L683
	.byte	3,127,1,5,54,9
	.half	.L685-.L684
	.byte	3,1,1,5,45,9
	.half	.L9-.L685
	.byte	3,4,1,5,39,9
	.half	.L686-.L9
	.byte	3,2,1,5,52,9
	.half	.L687-.L686
	.byte	3,126,1,5,66,9
	.half	.L688-.L687
	.byte	1,5,37,9
	.half	.L573-.L688
	.byte	3,1,1,5,41,9
	.half	.L689-.L573
	.byte	3,1,1,5,82,3,103,1,5,41,9
	.half	.L690-.L689
	.byte	3,25,1,5,61,3,6,1,5,36,9
	.half	.L575-.L690
	.byte	3,123,1,5,25,3,4,1,5,13,9
	.half	.L576-.L575
	.byte	1,5,24,7,9
	.half	.L691-.L576
	.byte	3,172,127,1,5,13,9
	.half	.L10-.L691
	.byte	3,215,0,1,5,47,3,124,1,5,50,9
	.half	.L577-.L10
	.byte	3,4,1,5,13,9
	.half	.L692-.L577
	.byte	1,5,19,9
	.half	.L574-.L692
	.byte	3,3,1,5,9,9
	.half	.L693-.L574
	.byte	1,5,45,7,9
	.half	.L694-.L693
	.byte	3,2,1,5,29,9
	.half	.L695-.L694
	.byte	3,1,1,5,54,9
	.half	.L696-.L695
	.byte	1,5,52,9
	.half	.L697-.L696
	.byte	3,127,1,5,54,9
	.half	.L698-.L697
	.byte	3,1,1,5,82,9
	.half	.L12-.L698
	.byte	3,89,1,5,55,9
	.half	.L5-.L12
	.byte	1,5,68,9
	.half	.L699-.L5
	.byte	1,5,72,7,9
	.half	.L700-.L699
	.byte	3,43,1,5,48,1,5,69,9
	.half	.L578-.L700
	.byte	1,5,72,9
	.half	.L701-.L578
	.byte	1,5,66,9
	.half	.L579-.L701
	.byte	3,1,1,5,42,1,5,63,9
	.half	.L580-.L579
	.byte	1,5,66,9
	.half	.L702-.L580
	.byte	1,5,39,9
	.half	.L581-.L702
	.byte	3,2,1,5,62,9
	.half	.L354-.L581
	.byte	3,2,1,5,60,9
	.half	.L703-.L354
	.byte	1,5,41,9
	.half	.L704-.L703
	.byte	3,1,1,5,71,9
	.half	.L584-.L704
	.byte	3,3,1,5,50,1,5,77,9
	.half	.L705-.L584
	.byte	1,5,74,9
	.half	.L585-.L705
	.byte	1,5,77,1,5,35,9
	.half	.L586-.L585
	.byte	3,1,1,5,57,9
	.half	.L706-.L586
	.byte	3,1,1,5,50,1,5,77,9
	.half	.L707-.L706
	.byte	1,5,74,9
	.half	.L587-.L707
	.byte	1,5,77,1,5,23,9
	.half	.L588-.L587
	.byte	3,4,1,5,84,1,5,68,9
	.half	.L567-.L588
	.byte	1,5,62,9
	.half	.L15-.L567
	.byte	3,2,1,5,64,9
	.half	.L590-.L15
	.byte	3,1,1,5,82,9
	.half	.L592-.L590
	.byte	3,125,1,5,55,9
	.half	.L14-.L592
	.byte	1,5,68,9
	.half	.L708-.L14
	.byte	1,5,12,7,9
	.half	.L709-.L708
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L168-.L709
	.byte	0,1,1
.L655:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_init')
	.sect	'.debug_ranges'
.L167:
	.word	-1,.L101,0,.L168-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_initConfig')
	.sect	'.debug_info'
.L169:
	.word	257
	.half	3
	.word	.L170
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L172,.L171
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_initConfig',0,1,134,2,6,1,1,1
	.word	.L103,.L357,.L102
	.byte	4
	.byte	'config',0,1,134,2,61
	.word	.L358,.L359
	.byte	5
	.word	.L103,.L357
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_initConfig')
	.sect	'.debug_abbrev'
.L170:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_initConfig')
	.sect	'.debug_line'
.L171:
	.word	.L711-.L710
.L710:
	.half	3
	.word	.L713-.L712
.L712:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L713:
	.byte	5,6,7,0,5,2
	.word	.L103
	.byte	3,133,2,1,5,38,9
	.half	.L594-.L103
	.byte	3,2,1,5,24,9
	.half	.L593-.L594
	.byte	3,1,1,5,22,9
	.half	.L714-.L593
	.byte	1,5,24,9
	.half	.L715-.L714
	.byte	3,1,1,5,22,1,9
	.half	.L716-.L715
	.byte	3,1,1,9
	.half	.L717-.L716
	.byte	3,1,1,5,24,9
	.half	.L718-.L717
	.byte	3,1,1,5,22,1,5,1,9
	.half	.L719-.L718
	.byte	3,1,1,7,9
	.half	.L173-.L719
	.byte	0,1,1
.L711:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_initConfig')
	.sect	'.debug_ranges'
.L172:
	.word	-1,.L103,0,.L173-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_getDeadtime')
	.sect	'.debug_info'
.L174:
	.word	258
	.half	3
	.word	.L175
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L177,.L176
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_getDeadtime',0,1,148,1,9
	.word	.L360
	.byte	1,1,1
	.word	.L93,.L361,.L92
	.byte	4
	.byte	'driver',0,1,148,1,58
	.word	.L338,.L362
	.byte	5
	.word	.L363
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_getDeadtime')
	.sect	'.debug_abbrev'
.L175:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_getDeadtime')
	.sect	'.debug_line'
.L176:
	.word	.L721-.L720
.L720:
	.half	3
	.word	.L723-.L722
.L722:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'IfxStdIf_Timer.h',0,1,0,0,0
.L723:
	.byte	5,78,7,0,5,2
	.word	.L93
	.byte	3,149,1,1,4,2,5,12,9
	.half	.L724-.L93
	.byte	3,159,2,1,4,1,5,1,9
	.half	.L554-.L724
	.byte	3,226,125,1,7,9
	.half	.L178-.L554
	.byte	0,1,1
.L721:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_getDeadtime')
	.sect	'.debug_ranges'
.L177:
	.word	-1,.L93,0,.L178-.L93,0,0
.L363:
	.word	-1,.L93,0,.L361-.L93,-1,.L95,0,.L288-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_getMinPulse')
	.sect	'.debug_info'
.L179:
	.word	262
	.half	3
	.word	.L180
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L182,.L181
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_getMinPulse',0,1,154,1,9
	.word	.L360
	.byte	1,1,1
	.word	.L97,.L364,.L96
	.byte	4
	.byte	'driver',0,1,154,1,58
	.word	.L338,.L365
	.byte	5
	.word	.L97,.L364
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_getMinPulse')
	.sect	'.debug_abbrev'
.L180:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_getMinPulse')
	.sect	'.debug_line'
.L181:
	.word	.L726-.L725
.L725:
	.half	3
	.word	.L728-.L727
.L727:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'IfxStdIf_Timer.h',0,1,0,0,0
.L728:
	.byte	5,78,7,0,5,2
	.word	.L97
	.byte	3,155,1,1,5,102,9
	.half	.L729-.L97
	.byte	1,5,88,9
	.half	.L730-.L729
	.byte	1,4,2,5,12,9
	.half	.L731-.L730
	.byte	3,153,2,1,4,1,5,1,9
	.half	.L732-.L731
	.byte	3,232,125,1,7,9
	.half	.L183-.L732
	.byte	0,1,1
.L726:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_getMinPulse')
	.sect	'.debug_ranges'
.L182:
	.word	-1,.L97,0,.L183-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_getMode')
	.sect	'.debug_info'
.L184:
	.word	258
	.half	3
	.word	.L185
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L187,.L186
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_getMode',0,1,160,1,14
	.word	.L366
	.byte	1,1,1
	.word	.L99,.L367,.L98
	.byte	4
	.byte	'driver',0,1,160,1,59
	.word	.L338,.L368
	.byte	5
	.word	.L99,.L367
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_getMode')
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_getMode')
	.sect	'.debug_line'
.L186:
	.word	.L734-.L733
.L733:
	.half	3
	.word	.L736-.L735
.L735:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L736:
	.byte	5,24,7,0,5,2
	.word	.L99
	.byte	3,161,1,1,5,1,9
	.half	.L737-.L99
	.byte	3,1,1,7,9
	.half	.L188-.L737
	.byte	0,1,1
.L734:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_getMode')
	.sect	'.debug_ranges'
.L187:
	.word	-1,.L99,0,.L188-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_setDeadtime')
	.sect	'.debug_info'
.L189:
	.word	280
	.half	3
	.word	.L190
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L192,.L191
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_setDeadtime',0,1,145,2,9
	.word	.L336
	.byte	1,1,1
	.word	.L105,.L369,.L104
	.byte	4
	.byte	'driver',0,1,145,2,58
	.word	.L338,.L370
	.byte	4
	.byte	'deadtime',0,1,145,2,74
	.word	.L360,.L371
	.byte	5
	.word	.L372
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_setDeadtime')
	.sect	'.debug_abbrev'
.L190:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_setDeadtime')
	.sect	'.debug_line'
.L191:
	.word	.L739-.L738
.L738:
	.half	3
	.word	.L741-.L740
.L740:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L741:
	.byte	5,57,7,0,5,2
	.word	.L105
	.byte	3,146,2,1,5,27,9
	.half	.L742-.L105
	.byte	3,1,1,5,12,9
	.half	.L595-.L742
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L193-.L595
	.byte	0,1,1
.L739:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_setDeadtime')
	.sect	'.debug_ranges'
.L192:
	.word	-1,.L105,0,.L193-.L105,0,0
.L372:
	.word	-1,.L105,0,.L369-.L105,-1,.L107,0,.L293-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_setMinPulse')
	.sect	'.debug_info'
.L194:
	.word	284
	.half	3
	.word	.L195
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L197,.L196
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_setMinPulse',0,1,154,2,9
	.word	.L336
	.byte	1,1,1
	.word	.L109,.L373,.L108
	.byte	4
	.byte	'driver',0,1,154,2,58
	.word	.L338,.L374
	.byte	4
	.byte	'minPulse',0,1,154,2,74
	.word	.L360,.L375
	.byte	5
	.word	.L109,.L373
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_setMinPulse')
	.sect	'.debug_abbrev'
.L195:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_setMinPulse')
	.sect	'.debug_line'
.L196:
	.word	.L744-.L743
.L743:
	.half	3
	.word	.L746-.L745
.L745:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L746:
	.byte	5,57,7,0,5,2
	.word	.L109
	.byte	3,155,2,1,5,49,9
	.half	.L596-.L109
	.byte	3,2,1,5,12,9
	.half	.L747-.L596
	.byte	3,3,1,5,35,9
	.half	.L748-.L747
	.byte	3,125,1,5,27,1,5,48,9
	.half	.L749-.L748
	.byte	3,1,1,5,56,9
	.half	.L750-.L749
	.byte	1,5,27,1,5,1,9
	.half	.L751-.L750
	.byte	3,3,1,7,9
	.half	.L198-.L751
	.byte	0,1,1
.L744:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_setMinPulse')
	.sect	'.debug_ranges'
.L197:
	.word	-1,.L109,0,.L198-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_setMode')
	.sect	'.debug_info'
.L199:
	.word	378
	.half	3
	.word	.L200
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L202,.L201
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_setMode',0,1,165,2,9
	.word	.L336
	.byte	1,1,1
	.word	.L111,.L376,.L110
	.byte	4
	.byte	'driver',0,1,165,2,54
	.word	.L338,.L377
	.byte	4
	.byte	'mode',0,1,165,2,75
	.word	.L366,.L378
	.byte	5
	.word	.L379
	.byte	6
	.byte	'result',0,1,167,2,29
	.word	.L336,.L380
	.byte	6
	.byte	'base',0,1,168,2,29
	.word	.L381,.L382
	.byte	7
	.word	.L383,.L19
	.byte	6
	.byte	'channelIndex',0,1,211,2,20
	.word	.L345,.L384
	.byte	7
	.word	.L26,.L385
	.byte	6
	.byte	'channel',0,1,215,2,32
	.word	.L352,.L386
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_setMode')
	.sect	'.debug_abbrev'
.L200:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_setMode')
	.sect	'.debug_line'
.L201:
	.word	.L753-.L752
.L752:
	.half	3
	.word	.L755-.L754
.L754:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L755:
	.byte	5,9,7,0,5,2
	.word	.L111
	.byte	3,164,2,1,5,13,9
	.half	.L598-.L111
	.byte	3,5,1,5,36,9
	.half	.L756-.L598
	.byte	3,125,1,5,5,9
	.half	.L599-.L756
	.byte	3,3,1,5,13,7,9
	.half	.L757-.L599
	.byte	3,2,1,5,67,7,9
	.half	.L758-.L757
	.byte	1,5,72,9
	.half	.L759-.L758
	.byte	1,5,80,9
	.half	.L760-.L759
	.byte	1,5,20,7,9
	.half	.L20-.L760
	.byte	3,2,1,9
	.half	.L761-.L20
	.byte	3,1,1,5,32,9
	.half	.L21-.L761
	.byte	3,5,1,5,58,9
	.half	.L762-.L21
	.byte	3,1,1,5,63,9
	.half	.L763-.L762
	.byte	1,5,32,9
	.half	.L597-.L763
	.byte	1,5,63,9
	.half	.L764-.L597
	.byte	3,1,1,5,32,9
	.half	.L765-.L764
	.byte	1,5,63,9
	.half	.L766-.L765
	.byte	3,1,1,5,32,9
	.half	.L767-.L766
	.byte	1,5,9,9
	.half	.L768-.L767
	.byte	3,2,1,5,59,7,9
	.half	.L769-.L768
	.byte	3,2,1,5,28,9
	.half	.L770-.L769
	.byte	1,5,17,9
	.half	.L22-.L770
	.byte	3,6,1,5,9,9
	.half	.L771-.L22
	.byte	1,5,39,7,9
	.half	.L772-.L771
	.byte	3,2,1,5,31,9
	.half	.L773-.L772
	.byte	1,5,39,9
	.half	.L774-.L773
	.byte	3,1,1,5,46,9
	.half	.L775-.L774
	.byte	3,127,1,5,39,9
	.half	.L23-.L775
	.byte	3,5,1,5,31,9
	.half	.L776-.L23
	.byte	1,5,39,9
	.half	.L777-.L776
	.byte	3,1,1,5,31,9
	.half	.L24-.L777
	.byte	1,9
	.half	.L383-.L24
	.byte	3,12,1,5,92,1,5,76,9
	.half	.L600-.L383
	.byte	1,5,74,9
	.half	.L26-.L600
	.byte	3,5,1,5,38,9
	.half	.L778-.L26
	.byte	3,127,1,5,70,9
	.half	.L601-.L778
	.byte	3,1,1,5,27,7,9
	.half	.L779-.L601
	.byte	3,1,1,5,21,9
	.half	.L780-.L779
	.byte	3,1,1,5,71,9
	.half	.L27-.L780
	.byte	1,5,24,9
	.half	.L781-.L27
	.byte	3,176,126,1,5,53,9
	.half	.L28-.L781
	.byte	3,206,1,1,5,21,9
	.half	.L782-.L28
	.byte	3,1,1,5,74,9
	.half	.L602-.L782
	.byte	3,4,1,5,40,9
	.half	.L783-.L602
	.byte	3,127,1,5,90,9
	.half	.L603-.L783
	.byte	3,119,1,5,70,9
	.half	.L784-.L603
	.byte	3,10,1,5,71,7,9
	.half	.L785-.L784
	.byte	3,1,1,5,24,9
	.half	.L786-.L785
	.byte	3,172,126,1,5,21,3,213,1,1,5,27,9
	.half	.L29-.L786
	.byte	1,5,53,9
	.half	.L30-.L29
	.byte	3,126,1,5,21,9
	.half	.L787-.L30
	.byte	3,1,1,5,90,9
	.half	.L385-.L787
	.byte	3,117,1,5,63,9
	.half	.L25-.L385
	.byte	1,5,76,9
	.half	.L788-.L25
	.byte	1,5,5,7,9
	.half	.L19-.L788
	.byte	3,17,1,5,1,3,1,1,7,9
	.half	.L203-.L19
	.byte	0,1,1
.L753:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_setMode')
	.sect	'.debug_ranges'
.L202:
	.word	-1,.L111,0,.L203-.L111,0,0
.L379:
	.word	-1,.L111,0,.L376-.L111,-1,.L113,0,.L298-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_setOnTime')
	.sect	'.debug_info'
.L204:
	.word	273
	.half	3
	.word	.L205
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L207,.L206
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_setOnTime',0,1,234,2,6,1,1,1
	.word	.L115,.L387,.L114
	.byte	4
	.byte	'driver',0,1,234,2,53
	.word	.L338,.L388
	.byte	4
	.byte	'tOn',0,1,234,2,77
	.word	.L389,.L390
	.byte	5
	.word	.L115,.L387
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_setOnTime')
	.sect	'.debug_abbrev'
.L205:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_setOnTime')
	.sect	'.debug_line'
.L206:
	.word	.L790-.L789
.L789:
	.half	3
	.word	.L792-.L791
.L791:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L792:
	.byte	5,11,7,0,5,2
	.word	.L115
	.byte	3,235,2,1,5,28,9
	.half	.L793-.L115
	.byte	1,5,1,7,9
	.half	.L208-.L793
	.byte	3,1,0,1,1
.L790:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_setOnTime')
	.sect	'.debug_ranges'
.L207:
	.word	-1,.L115,0,.L208-.L115,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_setOnTimeAndShift')
	.sect	'.debug_info'
.L209:
	.word	300
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_setOnTimeAndShift',0,1,240,2,6,1,1,1
	.word	.L117,.L391,.L116
	.byte	4
	.byte	'driver',0,1,240,2,61
	.word	.L338,.L392
	.byte	4
	.byte	'tOn',0,1,240,2,85
	.word	.L389,.L393
	.byte	4
	.byte	'shift',0,1,240,2,106
	.word	.L389,.L394
	.byte	5
	.word	.L117,.L391
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_setOnTimeAndShift')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_setOnTimeAndShift')
	.sect	'.debug_line'
.L211:
	.word	.L795-.L794
.L794:
	.half	3
	.word	.L797-.L796
.L796:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L797:
	.byte	5,11,7,0,5,2
	.word	.L117
	.byte	3,241,2,1,5,41,9
	.half	.L798-.L117
	.byte	1,5,1,7,9
	.half	.L213-.L798
	.byte	3,1,0,1,1
.L795:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_setOnTimeAndShift')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L117,0,.L213-.L117,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_setPulse')
	.sect	'.debug_info'
.L214:
	.word	292
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_setPulse',0,1,246,2,6,1,1,1
	.word	.L119,.L395,.L118
	.byte	4
	.byte	'driver',0,1,246,2,52
	.word	.L338,.L396
	.byte	4
	.byte	'tOn',0,1,246,2,69
	.word	.L397,.L398
	.byte	4
	.byte	'offset',0,1,246,2,83
	.word	.L397,.L399
	.byte	5
	.word	.L119,.L395
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_setPulse')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_setPulse')
	.sect	'.debug_line'
.L216:
	.word	.L800-.L799
.L799:
	.half	3
	.word	.L802-.L801
.L801:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L802:
	.byte	5,11,7,0,5,2
	.word	.L119
	.byte	3,247,2,1,5,38,9
	.half	.L803-.L119
	.byte	1,5,1,7,9
	.half	.L218-.L803
	.byte	3,1,0,1,1
.L800:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_setPulse')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L119,0,.L218-.L119,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_setupChannels')
	.sect	'.debug_info'
.L219:
	.word	303
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L222,.L221
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_setupChannels',0,1,252,2,6,1,1,1
	.word	.L121,.L400,.L120
	.byte	4
	.byte	'driver',0,1,252,2,57
	.word	.L338,.L401
	.byte	4
	.byte	'activeCh',0,1,252,2,74
	.word	.L402,.L403
	.byte	4
	.byte	'stuckSt',0,1,252,2,93
	.word	.L402,.L404
	.byte	5
	.word	.L121,.L400
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_setupChannels')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_setupChannels')
	.sect	'.debug_line'
.L221:
	.word	.L805-.L804
.L804:
	.half	3
	.word	.L807-.L806
.L806:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L807:
	.byte	5,1,7,0,5,2
	.word	.L121
	.byte	3,129,3,1,7,9
	.half	.L223-.L121
	.byte	0,1,1
.L805:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_setupChannels')
	.sect	'.debug_ranges'
.L222:
	.word	-1,.L121,0,.L223-.L121,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_stdIfPwmHlInit')
	.sect	'.debug_info'
.L224:
	.word	284
	.half	3
	.word	.L225
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L227,.L226
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_stdIfPwmHlInit',0,1,133,3,9
	.word	.L336
	.byte	1,1,1
	.word	.L123,.L405,.L122
	.byte	4
	.byte	'stdif',0,1,133,3,58
	.word	.L406,.L407
	.byte	4
	.byte	'driver',0,1,133,3,84
	.word	.L338,.L408
	.byte	5
	.word	.L123,.L405
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_stdIfPwmHlInit')
	.sect	'.debug_abbrev'
.L225:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_stdIfPwmHlInit')
	.sect	'.debug_line'
.L226:
	.word	.L809-.L808
.L808:
	.half	3
	.word	.L811-.L810
.L810:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L811:
	.byte	5,19,7,0,5,2
	.word	.L123
	.byte	3,135,3,1,5,9,3,125,1,5,22,9
	.half	.L605-.L123
	.byte	3,3,1,5,9,3,125,1,5,22,9
	.half	.L606-.L605
	.byte	3,3,1,5,33,9
	.half	.L604-.L606
	.byte	3,4,1,5,35,9
	.half	.L812-.L604
	.byte	3,1,1,5,33,9
	.half	.L813-.L812
	.byte	1,5,35,9
	.half	.L814-.L813
	.byte	3,1,1,5,33,9
	.half	.L815-.L814
	.byte	1,5,35,9
	.half	.L816-.L815
	.byte	3,1,1,5,33,9
	.half	.L817-.L816
	.byte	1,5,35,9
	.half	.L818-.L817
	.byte	3,1,1,5,33,9
	.half	.L819-.L818
	.byte	1,5,35,9
	.half	.L820-.L819
	.byte	3,1,1,5,33,9
	.half	.L821-.L820
	.byte	1,5,35,9
	.half	.L822-.L821
	.byte	3,1,1,5,33,9
	.half	.L823-.L822
	.byte	1,5,35,9
	.half	.L824-.L823
	.byte	3,1,1,5,33,9
	.half	.L825-.L824
	.byte	1,5,35,9
	.half	.L826-.L825
	.byte	3,1,1,5,33,9
	.half	.L827-.L826
	.byte	1,5,35,9
	.half	.L828-.L827
	.byte	3,1,1,5,33,9
	.half	.L829-.L828
	.byte	1,5,35,9
	.half	.L830-.L829
	.byte	3,1,1,5,33,9
	.half	.L831-.L830
	.byte	1,5,44,9
	.half	.L832-.L831
	.byte	3,1,1,5,59,9
	.half	.L833-.L832
	.byte	1,5,12,9
	.half	.L834-.L833
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L228-.L834
	.byte	0,1,1
.L809:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_stdIfPwmHlInit')
	.sect	'.debug_ranges'
.L227:
	.word	-1,.L123,0,.L228-.L123,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_updateAndShiftOff')
	.sect	'.debug_info'
.L229:
	.word	299
	.half	3
	.word	.L230
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L232,.L231
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_updateAndShiftOff',0,1,158,3,17,1,1
	.word	.L125,.L409,.L124
	.byte	4
	.byte	'driver',0,1,158,3,72
	.word	.L338,.L410
	.byte	4
	.byte	'tOn',0,1,158,3,96
	.word	.L389,.L411
	.byte	4
	.byte	'shift',0,1,158,3,117
	.word	.L389,.L412
	.byte	5
	.word	.L125,.L409
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_updateAndShiftOff')
	.sect	'.debug_abbrev'
.L230:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_updateAndShiftOff')
	.sect	'.debug_line'
.L231:
	.word	.L836-.L835
.L835:
	.half	3
	.word	.L838-.L837
.L837:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L838:
	.byte	5,41,7,0,5,2
	.word	.L125
	.byte	3,159,3,1,5,1,9
	.half	.L233-.L125
	.byte	3,3,0,1,1
.L836:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_updateAndShiftOff')
	.sect	'.debug_ranges'
.L232:
	.word	-1,.L125,0,.L233-.L125,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_updateCenterAligned')
	.sect	'.debug_info'
.L234:
	.word	570
	.half	3
	.word	.L235
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L237,.L236
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_updateCenterAligned',0,1,166,3,17,1,1
	.word	.L127,.L413,.L126
	.byte	4
	.byte	'driver',0,1,166,3,74
	.word	.L338,.L414
	.byte	4
	.byte	'tOn',0,1,166,3,98
	.word	.L389,.L415
	.byte	5
	.word	.L416
	.byte	6
	.byte	'channelIndex',0,1,168,3,20
	.word	.L336,.L417
	.byte	6
	.byte	'period',0,1,169,3,20
	.word	.L345,.L418
	.byte	6
	.byte	'deadtime',0,1,170,3,20
	.word	.L345,.L419
	.byte	5
	.word	.L420
	.byte	6
	.byte	'x',0,1,176,3,24
	.word	.L345,.L421
	.byte	6
	.byte	'cm0',0,1,177,3,24
	.word	.L345,.L422
	.byte	6
	.byte	'cm1',0,1,177,3,29
	.word	.L345,.L423
	.byte	7
	.word	.L424,.L425,.L426
	.byte	8
	.word	.L427,.L428
	.byte	8
	.word	.L429,.L430
	.byte	8
	.word	.L431,.L432
	.byte	8
	.word	.L433,.L434
	.byte	9
	.word	.L435,.L425,.L426
	.byte	7
	.word	.L436,.L425,.L426
	.byte	8
	.word	.L437,.L438
	.byte	8
	.word	.L439,.L440
	.byte	10
	.word	.L441,.L442
	.byte	0,0,0,7
	.word	.L424,.L443,.L444
	.byte	8
	.word	.L427,.L428
	.byte	8
	.word	.L429,.L430
	.byte	8
	.word	.L431,.L432
	.byte	8
	.word	.L433,.L434
	.byte	11
	.word	.L435,.L443,.L444
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_updateCenterAligned')
	.sect	'.debug_abbrev'
.L235:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0,10,11
	.byte	0,49,16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_updateCenterAligned')
	.sect	'.debug_line'
.L236:
	.word	.L840-.L839
.L839:
	.half	3
	.word	.L842-.L841
.L841:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L842:
	.byte	5,43,7,0,5,2
	.word	.L127
	.byte	3,169,3,1,5,68,9
	.half	.L619-.L127
	.byte	3,4,1,5,16,9
	.half	.L34-.L619
	.byte	3,4,1,5,25,9
	.half	.L610-.L34
	.byte	3,2,1,5,13,9
	.half	.L843-.L610
	.byte	3,7,1,5,47,7,9
	.half	.L844-.L843
	.byte	1,5,15,7,9
	.half	.L36-.L844
	.byte	3,2,1,5,18,1,5,34,9
	.half	.L37-.L36
	.byte	3,2,1,5,14,9
	.half	.L845-.L37
	.byte	1,5,15,9
	.half	.L846-.L845
	.byte	3,2,1,5,51,9
	.half	.L38-.L846
	.byte	3,8,1,5,9,9
	.half	.L847-.L38
	.byte	3,126,1,5,51,7,9
	.half	.L425-.L847
	.byte	3,2,1,5,79,9
	.half	.L426-.L425
	.byte	3,2,1,5,14,9
	.half	.L40-.L426
	.byte	3,5,1,5,17,7,9
	.half	.L848-.L40
	.byte	3,2,1,4,2,5,19,9
	.half	.L443-.L848
	.byte	3,175,1,1,9
	.half	.L849-.L443
	.byte	3,1,1,4,1,5,20,9
	.half	.L444-.L849
	.byte	3,208,126,1,5,27,9
	.half	.L42-.L444
	.byte	3,7,1,9
	.half	.L621-.L42
	.byte	3,1,1,5,51,9
	.half	.L620-.L621
	.byte	3,1,1,9
	.half	.L43-.L620
	.byte	3,1,1,5,82,9
	.half	.L41-.L43
	.byte	3,82,1,5,55,9
	.half	.L33-.L41
	.byte	1,5,68,9
	.half	.L850-.L33
	.byte	1,5,1,7,9
	.half	.L851-.L850
	.byte	3,49,1,7,9
	.half	.L238-.L851
	.byte	0,1,1
.L840:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_updateCenterAligned')
	.sect	'.debug_ranges'
.L237:
	.word	-1,.L127,0,.L238-.L127,0,0
.L416:
	.word	-1,.L127,0,.L413-.L127,-1,.L129,0,.L323-.L129,-1,.L131,0,.L318-.L131,0,0
.L420:
	.word	-1,.L127,.L34-.L127,.L41-.L127,-1,.L135,0,.L308-.L135,-1,.L137,0,.L303-.L137,-1,.L139,0,.L278-.L139,-1
	.word	.L141,0,.L273-.L141,0,0
.L442:
	.word	-1,.L127,.L425-.L127,.L426-.L127,-1,.L143,0,.L268-.L143,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_updateEdgeAligned')
	.sect	'.debug_info'
.L239:
	.word	702
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L242,.L241
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_updateEdgeAligned',0,1,226,3,17,1,1
	.word	.L145,.L445,.L144
	.byte	4
	.byte	'driver',0,1,226,3,72
	.word	.L338,.L446
	.byte	4
	.byte	'tOn',0,1,226,3,96
	.word	.L389,.L447
	.byte	5
	.word	.L145,.L445
	.byte	6
	.byte	'channelIndex',0,1,228,3,20
	.word	.L336,.L448
	.byte	6
	.byte	'period',0,1,229,3,20
	.word	.L345,.L449
	.byte	6
	.byte	'deadtime',0,1,230,3,20
	.word	.L345,.L450
	.byte	7
	.word	.L451
	.byte	6
	.byte	'x',0,1,236,3,24
	.word	.L345,.L452
	.byte	6
	.byte	'cm0',0,1,237,3,24
	.word	.L345,.L453
	.byte	6
	.byte	'cm1',0,1,237,3,29
	.word	.L345,.L454
	.byte	8
	.word	.L424,.L455,.L456
	.byte	9
	.word	.L427,.L457
	.byte	9
	.word	.L429,.L458
	.byte	9
	.word	.L431,.L459
	.byte	9
	.word	.L433,.L460
	.byte	10
	.word	.L435,.L455,.L456
	.byte	8
	.word	.L436,.L455,.L456
	.byte	9
	.word	.L437,.L461
	.byte	9
	.word	.L439,.L462
	.byte	11
	.word	.L441,.L455,.L456
	.byte	0,0,0,8
	.word	.L424,.L463,.L464
	.byte	9
	.word	.L427,.L457
	.byte	9
	.word	.L429,.L458
	.byte	9
	.word	.L431,.L459
	.byte	9
	.word	.L433,.L460
	.byte	11
	.word	.L435,.L463,.L464
	.byte	0,8
	.word	.L424,.L465,.L54
	.byte	9
	.word	.L427,.L457
	.byte	9
	.word	.L429,.L458
	.byte	9
	.word	.L431,.L459
	.byte	9
	.word	.L433,.L460
	.byte	11
	.word	.L435,.L465,.L54
	.byte	0,8
	.word	.L424,.L466,.L52
	.byte	9
	.word	.L427,.L457
	.byte	9
	.word	.L429,.L458
	.byte	9
	.word	.L431,.L459
	.byte	9
	.word	.L433,.L460
	.byte	11
	.word	.L435,.L466,.L52
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_updateEdgeAligned')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0,0,10,11,1,49
	.byte	16,17,1,18,1,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_updateEdgeAligned')
	.sect	'.debug_line'
.L241:
	.word	.L853-.L852
.L852:
	.half	3
	.word	.L855-.L854
.L854:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L855:
	.byte	5,43,7,0,5,2
	.word	.L145
	.byte	3,229,3,1,5,68,9
	.half	.L629-.L145
	.byte	3,4,1,5,16,9
	.half	.L45-.L629
	.byte	3,4,1,5,25,9
	.half	.L856-.L45
	.byte	3,2,1,5,16,9
	.half	.L857-.L856
	.byte	3,126,1,5,9,9
	.half	.L630-.L857
	.byte	3,2,1,5,24,7,9
	.half	.L858-.L630
	.byte	3,2,1,5,30,9
	.half	.L46-.L858
	.byte	3,5,1,5,13,9
	.half	.L859-.L46
	.byte	1,5,47,7,9
	.half	.L860-.L859
	.byte	1,5,15,7,9
	.half	.L47-.L860
	.byte	3,2,1,5,18,1,5,34,9
	.half	.L48-.L47
	.byte	3,2,1,5,14,9
	.half	.L861-.L48
	.byte	1,5,15,9
	.half	.L862-.L861
	.byte	3,2,1,5,51,9
	.half	.L49-.L862
	.byte	3,8,1,5,9,9
	.half	.L863-.L49
	.byte	3,126,1,5,51,7,9
	.half	.L455-.L863
	.byte	3,2,1,5,79,9
	.half	.L456-.L455
	.byte	3,2,1,5,14,9
	.half	.L51-.L456
	.byte	3,5,1,5,17,7,9
	.half	.L864-.L51
	.byte	3,2,1,5,26,9
	.half	.L628-.L864
	.byte	3,1,1,5,51,3,1,1,4,2,5,19,9
	.half	.L463-.L628
	.byte	3,241,0,1,9
	.half	.L865-.L463
	.byte	3,1,1,4,1,5,20,9
	.half	.L464-.L865
	.byte	3,140,127,1,5,17,9
	.half	.L53-.L464
	.byte	3,7,1,5,51,3,2,1,4,2,5,19,9
	.half	.L465-.L53
	.byte	3,234,0,1,4,1,5,99,9
	.half	.L866-.L465
	.byte	3,150,127,1,4,2,5,19,3,235,0,1,4,1,5,51,9
	.half	.L54-.L866
	.byte	3,150,127,1,5,96,9
	.half	.L466-.L54
	.byte	1,4,2,5,19,3,233,0,1,9
	.half	.L631-.L466
	.byte	3,1,1,4,1,5,82,9
	.half	.L52-.L631
	.byte	3,232,126,1,5,55,9
	.half	.L44-.L52
	.byte	1,5,68,9
	.half	.L867-.L44
	.byte	1,5,1,7,9
	.half	.L868-.L867
	.byte	3,49,1,7,9
	.half	.L243-.L868
	.byte	0,1,1
.L853:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_updateEdgeAligned')
	.sect	'.debug_ranges'
.L242:
	.word	-1,.L145,0,.L243-.L145,0,0
.L451:
	.word	-1,.L145,.L45-.L145,.L52-.L145,-1,.L149,0,.L328-.L149,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_updateOff')
	.sect	'.debug_info'
.L244:
	.word	497
	.half	3
	.word	.L245
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L247,.L246
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_updateOff',0,1,158,4,17,1,1
	.word	.L151,.L467,.L150
	.byte	4
	.byte	'driver',0,1,158,4,64
	.word	.L338,.L468
	.byte	4
	.byte	'tOn',0,1,158,4,88
	.word	.L389,.L469
	.byte	5
	.word	.L151,.L467
	.byte	6
	.word	.L470
	.byte	7
	.byte	'channelIndex',0,1,161,4,11
	.word	.L336,.L471
	.byte	7
	.byte	'period',0,1,162,4,20
	.word	.L345,.L472
	.byte	8
	.word	.L424,.L473,.L474
	.byte	9
	.word	.L427,.L475
	.byte	9
	.word	.L429,.L476
	.byte	9
	.word	.L431,.L477
	.byte	9
	.word	.L433,.L478
	.byte	10
	.word	.L435,.L479
	.byte	0,8
	.word	.L424,.L480,.L481
	.byte	9
	.word	.L427,.L475
	.byte	9
	.word	.L429,.L476
	.byte	9
	.word	.L431,.L477
	.byte	9
	.word	.L433,.L478
	.byte	0,8
	.word	.L424,.L482,.L483
	.byte	9
	.word	.L427,.L475
	.byte	9
	.word	.L429,.L476
	.byte	9
	.word	.L431,.L477
	.byte	9
	.word	.L433,.L478
	.byte	11
	.word	.L435,.L482,.L483
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_updateOff')
	.sect	'.debug_abbrev'
.L245:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,1,85,6,0
	.byte	0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0,0,10,11,0,49
	.byte	16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_updateOff')
	.sect	'.debug_line'
.L246:
	.word	.L870-.L869
.L869:
	.half	3
	.word	.L872-.L871
.L871:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L872:
	.byte	5,20,7,0,5,2
	.word	.L151
	.byte	3,162,4,1,5,23,9
	.half	.L873-.L151
	.byte	3,2,1,5,40,9
	.half	.L473-.L873
	.byte	3,126,1,5,33,9
	.half	.L474-.L473
	.byte	1,5,68,9
	.half	.L633-.L474
	.byte	3,2,1,5,47,9
	.half	.L56-.L633
	.byte	3,2,1,5,61,9
	.half	.L874-.L56
	.byte	1,5,70,9
	.half	.L875-.L874
	.byte	1,4,2,5,19,9
	.half	.L480-.L875
	.byte	3,218,0,1,4,1,5,59,9
	.half	.L876-.L480
	.byte	3,167,127,1,4,2,5,19,3,218,0,1,4,1,5,47,9
	.half	.L481-.L876
	.byte	3,167,127,1,5,61,9
	.half	.L877-.L481
	.byte	1,5,72,9
	.half	.L878-.L877
	.byte	1,5,95,9
	.half	.L482-.L878
	.byte	1,4,2,5,19,3,216,0,1,4,1,5,82,9
	.half	.L483-.L482
	.byte	3,164,127,1,4,2,5,19,3,221,0,1,4,1,5,82,9
	.half	.L632-.L483
	.byte	3,163,127,1,5,55,9
	.half	.L55-.L632
	.byte	1,5,68,9
	.half	.L879-.L55
	.byte	1,5,1,7,9
	.half	.L880-.L879
	.byte	3,6,1,7,9
	.half	.L248-.L880
	.byte	0,1,1
.L870:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_updateOff')
	.sect	'.debug_ranges'
.L247:
	.word	-1,.L151,0,.L248-.L151,0,0
.L470:
	.word	-1,.L151,0,.L467-.L151,-1,.L153,0,.L283-.L153,0,0
.L479:
	.word	-1,.L151,.L473-.L151,.L474-.L151,.L480-.L151,.L481-.L151,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_updatePulse')
	.sect	'.debug_info'
.L249:
	.word	1131
	.half	3
	.word	.L250
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L252,.L251
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_updatePulse',0,1,174,4,17,1,1
	.word	.L155,.L484,.L154
	.byte	4
	.byte	'driver',0,1,174,4,66
	.word	.L338,.L485
	.byte	4
	.byte	'tOn',0,1,174,4,83
	.word	.L397,.L486
	.byte	4
	.byte	'offset',0,1,174,4,97
	.word	.L397,.L487
	.byte	5
	.word	.L155,.L484
	.byte	6
	.byte	'channelIndex',0,1,176,4,20
	.word	.L336,.L488
	.byte	6
	.byte	'period',0,1,177,4,20
	.word	.L345,.L489
	.byte	5
	.word	.L58,.L490
	.byte	6
	.byte	'x',0,1,184,4,24
	.word	.L345,.L491
	.byte	6
	.byte	'cm0',0,1,186,4,24
	.word	.L345,.L492
	.byte	6
	.byte	'cm1',0,1,186,4,29
	.word	.L345,.L493
	.byte	7
	.word	.L494,.L495,.L496
	.byte	8
	.word	.L497,.L498
	.byte	8
	.word	.L499,.L500
	.byte	9
	.word	.L501,.L502
	.byte	0,7
	.word	.L494,.L503,.L504
	.byte	8
	.word	.L497,.L498
	.byte	8
	.word	.L499,.L500
	.byte	0,7
	.word	.L494,.L504,.L505
	.byte	8
	.word	.L497,.L498
	.byte	8
	.word	.L499,.L500
	.byte	10
	.word	.L501,.L504,.L505
	.byte	0,7
	.word	.L424,.L506,.L65
	.byte	8
	.word	.L427,.L507
	.byte	8
	.word	.L429,.L508
	.byte	8
	.word	.L431,.L509
	.byte	8
	.word	.L433,.L510
	.byte	11
	.word	.L435,.L506,.L65
	.byte	7
	.word	.L436,.L506,.L511
	.byte	8
	.word	.L437,.L512
	.byte	8
	.word	.L439,.L513
	.byte	10
	.word	.L441,.L506,.L511
	.byte	0,0,0,7
	.word	.L424,.L68,.L490
	.byte	8
	.word	.L427,.L507
	.byte	8
	.word	.L429,.L508
	.byte	8
	.word	.L431,.L509
	.byte	8
	.word	.L433,.L510
	.byte	11
	.word	.L435,.L68,.L490
	.byte	7
	.word	.L436,.L68,.L514
	.byte	8
	.word	.L437,.L512
	.byte	8
	.word	.L439,.L513
	.byte	10
	.word	.L441,.L68,.L514
	.byte	0,0,0,0,5
	.word	.L70,.L515
	.byte	6
	.byte	'x',0,1,233,4,24
	.word	.L345,.L516
	.byte	6
	.byte	'cm0',0,1,235,4,24
	.word	.L345,.L517
	.byte	6
	.byte	'cm1',0,1,235,4,29
	.word	.L345,.L518
	.byte	7
	.word	.L494,.L519,.L520
	.byte	8
	.word	.L497,.L498
	.byte	8
	.word	.L499,.L500
	.byte	9
	.word	.L501,.L521
	.byte	0,7
	.word	.L494,.L522,.L523
	.byte	8
	.word	.L497,.L498
	.byte	8
	.word	.L499,.L500
	.byte	0,7
	.word	.L494,.L523,.L524
	.byte	8
	.word	.L497,.L498
	.byte	8
	.word	.L499,.L500
	.byte	10
	.word	.L501,.L523,.L524
	.byte	0,7
	.word	.L424,.L525,.L75
	.byte	8
	.word	.L427,.L507
	.byte	8
	.word	.L429,.L508
	.byte	8
	.word	.L431,.L509
	.byte	8
	.word	.L433,.L510
	.byte	11
	.word	.L435,.L525,.L75
	.byte	7
	.word	.L436,.L525,.L526
	.byte	8
	.word	.L437,.L512
	.byte	8
	.word	.L439,.L513
	.byte	10
	.word	.L441,.L525,.L526
	.byte	0,0,0,7
	.word	.L424,.L78,.L515
	.byte	8
	.word	.L427,.L507
	.byte	8
	.word	.L429,.L508
	.byte	8
	.word	.L431,.L509
	.byte	8
	.word	.L433,.L510
	.byte	11
	.word	.L435,.L78,.L515
	.byte	7
	.word	.L436,.L78,.L527
	.byte	8
	.word	.L437,.L512
	.byte	8
	.word	.L439,.L513
	.byte	10
	.word	.L441,.L78,.L527
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_updatePulse')
	.sect	'.debug_abbrev'
.L250:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0,10,11
	.byte	0,49,16,17,1,18,1,0,0,11,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_updatePulse')
	.sect	'.debug_line'
.L251:
	.word	.L882-.L881
.L881:
	.half	3
	.word	.L884-.L883
.L883:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'IfxStdIf_Timer.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L884:
	.byte	5,20,7,0,5,2
	.word	.L155
	.byte	3,178,4,1,5,23,9
	.half	.L885-.L155
	.byte	3,3,1,5,33,9
	.half	.L639-.L885
	.byte	3,125,1,5,68,9
	.half	.L640-.L639
	.byte	3,3,1,5,42,9
	.half	.L58-.L640
	.byte	3,6,1,5,25,9
	.half	.L886-.L58
	.byte	3,3,1,5,55,9
	.half	.L887-.L886
	.byte	3,125,1,5,70,9
	.half	.L888-.L887
	.byte	1,5,73,9
	.half	.L889-.L888
	.byte	3,1,1,4,2,5,20,9
	.half	.L495-.L889
	.byte	3,131,127,1,4,1,5,73,9
	.half	.L496-.L495
	.byte	3,253,0,1,4,2,5,20,9
	.half	.L503-.L496
	.byte	3,131,127,1,4,1,5,9,9
	.half	.L505-.L503
	.byte	3,255,0,1,5,24,7,9
	.half	.L890-.L505
	.byte	3,2,1,5,30,9
	.half	.L59-.L890
	.byte	3,5,1,5,13,9
	.half	.L891-.L59
	.byte	1,5,47,7,9
	.half	.L892-.L891
	.byte	1,5,15,7,9
	.half	.L60-.L892
	.byte	3,2,1,5,18,1,5,35,9
	.half	.L61-.L60
	.byte	3,2,1,5,18,9
	.half	.L893-.L61
	.byte	1,5,52,7,9
	.half	.L894-.L893
	.byte	1,5,56,9
	.half	.L895-.L894
	.byte	1,5,15,7,9
	.half	.L63-.L895
	.byte	3,2,1,5,65,9
	.half	.L62-.L63
	.byte	3,8,1,5,51,9
	.half	.L896-.L62
	.byte	1,5,74,9
	.half	.L897-.L896
	.byte	1,5,9,9
	.half	.L898-.L897
	.byte	3,126,1,5,51,7,9
	.half	.L506-.L898
	.byte	3,2,1,4,3,5,69,9
	.half	.L899-.L506
	.byte	3,37,1,5,60,9
	.half	.L900-.L899
	.byte	1,5,5,9
	.half	.L901-.L900
	.byte	1,4,1,5,24,9
	.half	.L511-.L901
	.byte	3,92,1,4,3,5,19,9
	.half	.L902-.L511
	.byte	3,44,1,5,21,9
	.half	.L903-.L902
	.byte	3,1,1,4,1,5,68,3,84,1,5,14,9
	.half	.L65-.L903
	.byte	3,2,1,5,17,7,9
	.half	.L904-.L65
	.byte	3,2,1,5,26,9
	.half	.L634-.L904
	.byte	3,1,1,5,20,3,127,1,5,21,9
	.half	.L67-.L634
	.byte	3,6,1,9
	.half	.L635-.L67
	.byte	3,1,1,5,51,9
	.half	.L68-.L635
	.byte	3,1,1,4,3,5,69,9
	.half	.L905-.L68
	.byte	3,23,1,5,60,9
	.half	.L906-.L905
	.byte	1,5,5,9
	.half	.L907-.L906
	.byte	1,5,19,9
	.half	.L514-.L907
	.byte	3,8,1,9
	.half	.L66-.L514
	.byte	3,1,1,4,1,5,82,9
	.half	.L490-.L66
	.byte	3,180,127,1,5,55,9
	.half	.L57-.L490
	.byte	1,5,68,9
	.half	.L908-.L57
	.byte	1,5,23,7,9
	.half	.L909-.L908
	.byte	3,49,1,5,68,1,5,42,9
	.half	.L70-.L909
	.byte	3,6,1,5,98,9
	.half	.L910-.L70
	.byte	1,5,84,9
	.half	.L911-.L910
	.byte	1,5,55,1,5,70,9
	.half	.L912-.L911
	.byte	1,5,73,9
	.half	.L913-.L912
	.byte	3,1,1,4,2,5,20,9
	.half	.L519-.L913
	.byte	3,210,126,1,4,1,5,73,9
	.half	.L520-.L519
	.byte	3,174,1,1,4,2,5,20,9
	.half	.L522-.L520
	.byte	3,210,126,1,4,1,5,25,9
	.half	.L914-.L522
	.byte	3,176,1,1,5,9,9
	.half	.L524-.L914
	.byte	3,7,1,5,15,7,9
	.half	.L915-.L524
	.byte	3,2,1,5,18,1,5,34,9
	.half	.L72-.L915
	.byte	3,2,1,5,14,9
	.half	.L916-.L72
	.byte	1,5,15,9
	.half	.L917-.L916
	.byte	3,2,1,5,65,9
	.half	.L73-.L917
	.byte	3,8,1,5,51,9
	.half	.L918-.L73
	.byte	1,5,76,9
	.half	.L919-.L918
	.byte	1,5,9,9
	.half	.L920-.L919
	.byte	3,126,1,5,51,7,9
	.half	.L525-.L920
	.byte	3,2,1,4,3,5,69,9
	.half	.L921-.L525
	.byte	3,116,1,5,60,9
	.half	.L922-.L921
	.byte	1,5,5,9
	.half	.L923-.L922
	.byte	1,4,1,5,24,9
	.half	.L526-.L923
	.byte	3,13,1,4,3,5,19,9
	.half	.L924-.L526
	.byte	3,123,1,5,21,9
	.half	.L925-.L924
	.byte	3,1,1,4,1,5,68,3,5,1,5,14,9
	.half	.L75-.L925
	.byte	3,2,1,5,17,7,9
	.half	.L926-.L75
	.byte	3,2,1,5,26,9
	.half	.L637-.L926
	.byte	3,1,1,5,20,3,127,1,5,21,9
	.half	.L77-.L637
	.byte	3,6,1,9
	.half	.L638-.L77
	.byte	3,1,1,5,51,9
	.half	.L78-.L638
	.byte	3,1,1,4,3,5,69,9
	.half	.L927-.L78
	.byte	3,102,1,5,60,9
	.half	.L928-.L927
	.byte	1,5,5,9
	.half	.L929-.L928
	.byte	1,5,19,9
	.half	.L527-.L929
	.byte	3,8,1,9
	.half	.L76-.L527
	.byte	3,1,1,4,1,5,82,9
	.half	.L515-.L76
	.byte	3,101,1,5,55,9
	.half	.L69-.L515
	.byte	1,5,68,9
	.half	.L930-.L69
	.byte	1,5,1,7,9
	.half	.L931-.L930
	.byte	3,47,1,7,9
	.half	.L253-.L931
	.byte	0,1,1
.L882:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_updatePulse')
	.sect	'.debug_ranges'
.L252:
	.word	-1,.L155,0,.L253-.L155,0,0
.L502:
	.word	-1,.L155,.L495-.L155,.L496-.L155,.L503-.L155,.L504-.L155,0,0
.L521:
	.word	-1,.L155,.L519-.L155,.L520-.L155,.L522-.L155,.L523-.L155,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_updatePulseOff')
	.sect	'.debug_info'
.L254:
	.word	297
	.half	3
	.word	.L255
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L257,.L256
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_updatePulseOff',0,1,153,5,17,1,1
	.word	.L157,.L528,.L156
	.byte	4
	.byte	'driver',0,1,153,5,69
	.word	.L338,.L529
	.byte	4
	.byte	'tOn',0,1,153,5,86
	.word	.L397,.L530
	.byte	4
	.byte	'offset',0,1,153,5,100
	.word	.L397,.L531
	.byte	5
	.word	.L157,.L528
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_updatePulseOff')
	.sect	'.debug_abbrev'
.L255:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_updatePulseOff')
	.sect	'.debug_line'
.L256:
	.word	.L933-.L932
.L932:
	.half	3
	.word	.L935-.L934
.L934:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L935:
	.byte	5,41,7,0,5,2
	.word	.L157
	.byte	3,157,5,1,5,1,9
	.half	.L258-.L157
	.byte	3,1,0,1,1
.L933:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_updatePulseOff')
	.sect	'.debug_ranges'
.L257:
	.word	-1,.L157,0,.L258-.L157,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_updateShiftCenterAligned')
	.sect	'.debug_info'
.L259:
	.word	621
	.half	3
	.word	.L260
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L262,.L261
	.byte	2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_updateShiftCenterAligned',0,1,162,5,17,1,1
	.word	.L159,.L532,.L158
	.byte	4
	.byte	'driver',0,1,162,5,79
	.word	.L338,.L533
	.byte	4
	.byte	'tOn',0,1,162,5,103
	.word	.L389,.L534
	.byte	4
	.byte	'shift',0,1,162,5,124
	.word	.L389,.L535
	.byte	5
	.word	.L159,.L532
	.byte	6
	.byte	'channelIndex',0,1,164,5,20
	.word	.L336,.L536
	.byte	6
	.byte	'period',0,1,165,5,20
	.word	.L345,.L537
	.byte	6
	.byte	'deadtime',0,1,166,5,20
	.word	.L345,.L538
	.byte	5
	.word	.L80,.L87
	.byte	6
	.byte	'x',0,1,172,5,24
	.word	.L345,.L539
	.byte	6
	.byte	's',0,1,173,5,24
	.word	.L345,.L540
	.byte	6
	.byte	'cm0',0,1,174,5,24
	.word	.L345,.L541
	.byte	6
	.byte	'cm1',0,1,174,5,29
	.word	.L345,.L542
	.byte	7
	.word	.L424,.L543,.L544
	.byte	8
	.word	.L427,.L545
	.byte	8
	.word	.L429,.L546
	.byte	8
	.word	.L431,.L547
	.byte	8
	.word	.L433,.L548
	.byte	9
	.word	.L435,.L543,.L544
	.byte	7
	.word	.L436,.L543,.L544
	.byte	8
	.word	.L437,.L549
	.byte	8
	.word	.L439,.L550
	.byte	10
	.word	.L441,.L543,.L544
	.byte	0,0,0,7
	.word	.L424,.L551,.L552
	.byte	8
	.word	.L427,.L545
	.byte	8
	.word	.L429,.L546
	.byte	8
	.word	.L431,.L547
	.byte	8
	.word	.L433,.L548
	.byte	10
	.word	.L435,.L551,.L552
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_updateShiftCenterAligned')
	.sect	'.debug_abbrev'
.L260:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxGtm_Atom_PwmHl_updateShiftCenterAligned')
	.sect	'.debug_line'
.L261:
	.word	.L937-.L936
.L936:
	.half	3
	.word	.L939-.L938
.L938:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L939:
	.byte	5,43,7,0,5,2
	.word	.L159
	.byte	3,165,5,1,5,68,9
	.half	.L643-.L159
	.byte	3,4,1,5,16,9
	.half	.L80-.L643
	.byte	3,5,1,5,25,9
	.half	.L940-.L80
	.byte	3,2,1,5,16,9
	.half	.L941-.L940
	.byte	3,126,1,5,9,9
	.half	.L642-.L941
	.byte	3,2,1,5,24,7,9
	.half	.L942-.L642
	.byte	3,2,1,5,30,9
	.half	.L81-.L942
	.byte	3,5,1,5,13,9
	.half	.L943-.L81
	.byte	1,5,47,7,9
	.half	.L944-.L943
	.byte	1,5,15,7,9
	.half	.L82-.L944
	.byte	3,2,1,5,18,1,5,34,9
	.half	.L83-.L82
	.byte	3,2,1,5,14,9
	.half	.L945-.L83
	.byte	1,5,15,9
	.half	.L946-.L945
	.byte	3,2,1,5,51,9
	.half	.L84-.L946
	.byte	3,8,1,5,9,9
	.half	.L947-.L84
	.byte	3,126,1,5,51,7,9
	.half	.L543-.L947
	.byte	3,2,1,5,79,9
	.half	.L544-.L543
	.byte	3,2,1,5,14,9
	.half	.L86-.L544
	.byte	3,5,1,5,17,7,9
	.half	.L948-.L86
	.byte	3,2,1,4,2,5,21,9
	.half	.L551-.L948
	.byte	3,178,127,1,5,19,1,9
	.half	.L644-.L551
	.byte	3,1,1,4,1,5,20,9
	.half	.L552-.L644
	.byte	3,205,0,1,5,22,9
	.half	.L88-.L552
	.byte	3,7,1,5,21,9
	.half	.L949-.L88
	.byte	3,4,1,5,22,9
	.half	.L950-.L949
	.byte	3,124,1,5,21,9
	.half	.L645-.L950
	.byte	3,4,1,5,13,9
	.half	.L951-.L645
	.byte	3,126,1,5,21,7,9
	.half	.L952-.L951
	.byte	3,2,1,5,52,9
	.half	.L953-.L952
	.byte	1,5,21,9
	.half	.L90-.L953
	.byte	3,4,1,9
	.half	.L91-.L90
	.byte	3,3,1,5,31,9
	.half	.L954-.L91
	.byte	3,1,1,5,21,9
	.half	.L647-.L954
	.byte	1,5,51,3,1,1,9
	.half	.L89-.L647
	.byte	3,1,1,5,82,9
	.half	.L87-.L89
	.byte	3,70,1,5,55,9
	.half	.L79-.L87
	.byte	1,5,68,9
	.half	.L955-.L79
	.byte	1,5,1,7,9
	.half	.L956-.L955
	.byte	3,61,1,7,9
	.half	.L263-.L956
	.byte	0,1,1
.L937:
	.sdecl	'.debug_ranges',debug,cluster('IfxGtm_Atom_PwmHl_updateShiftCenterAligned')
	.sect	'.debug_ranges'
.L262:
	.word	-1,.L159,0,.L263-.L159,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L264:
	.word	207
	.half	3
	.word	.L265
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L267,.L266
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_3',0,1,166,3,17,1
	.word	.L143,.L268,.L142
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L265:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L266:
	.word	.L958-.L957
.L957:
	.half	3
	.word	.L960-.L959
.L959:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L960:
	.byte	5,51,7,0,5,2
	.word	.L143
	.byte	3,200,3,1,5,24,9
	.half	.L612-.L143
	.byte	3,1,1,4,2,5,19,3,183,1,1,4,1,5,68,9
	.half	.L961-.L612
	.byte	3,202,126,1,4,2,5,19,3,183,1,1,4,1,5,51,9
	.half	.L613-.L961
	.byte	3,202,126,1,5,24,9
	.half	.L615-.L613
	.byte	3,1,1,4,2,5,19,3,180,1,1,5,21,9
	.half	.L962-.L615
	.byte	3,1,1,5,19,1,9
	.half	.L268-.L962
	.byte	0,1,1,5,51,0,5,2
	.word	.L143
	.byte	3,200,3,1,5,24,9
	.half	.L612-.L143
	.byte	3,61,1,4,2,5,19,3,251,0,1,4,1,5,68,9
	.half	.L961-.L612
	.byte	3,134,127,1,4,2,5,19,3,251,0,1,4,1,5,51,9
	.half	.L613-.L961
	.byte	3,202,126,1,5,24,9
	.half	.L615-.L613
	.byte	3,61,1,4,2,5,19,3,248,0,1,5,21,9
	.half	.L962-.L615
	.byte	3,1,1,5,19,1,9
	.half	.L268-.L962
	.byte	0,1,1,5,51,0,5,2
	.word	.L143
	.byte	3,200,3,1,5,24,9
	.half	.L612-.L143
	.byte	3,254,1,1,4,2,5,19,3,186,127,1,4,1,5,68,9
	.half	.L961-.L612
	.byte	3,199,0,1,4,2,5,19,3,186,127,1,4,1,5,51,9
	.half	.L613-.L961
	.byte	3,202,126,1,5,24,9
	.half	.L615-.L613
	.byte	3,254,1,1,4,2,5,19,3,183,127,1,5,21,9
	.half	.L962-.L615
	.byte	3,1,1,5,19,1,9
	.half	.L268-.L962
	.byte	0,1,1
.L958:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L267:
	.word	-1,.L143,0,.L268-.L143,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L269:
	.word	207
	.half	3
	.word	.L270
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L272,.L271
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_4',0,1,166,3,17,1
	.word	.L141,.L273,.L140
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L270:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L271:
	.word	.L964-.L963
.L963:
	.half	3
	.word	.L966-.L965
.L965:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L966:
	.byte	5,51,7,0,5,2
	.word	.L141
	.byte	3,219,3,1,5,96,9
	.half	.L624-.L141
	.byte	1,4,2,5,19,3,165,1,1,9
	.half	.L625-.L624
	.byte	3,1,1,9
	.half	.L273-.L625
	.byte	0,1,1,5,51,0,5,2
	.word	.L141
	.byte	3,219,3,1,5,96,9
	.half	.L624-.L141
	.byte	3,136,2,1,4,2,5,19,3,157,127,1,9
	.half	.L625-.L624
	.byte	3,1,1,9
	.half	.L273-.L625
	.byte	0,1,1
.L964:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L272:
	.word	-1,.L141,0,.L273-.L141,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L274:
	.word	207
	.half	3
	.word	.L275
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L277,.L276
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_5',0,1,166,3,17,1
	.word	.L139,.L278,.L138
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L275:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L276:
	.word	.L968-.L967
.L967:
	.half	3
	.word	.L970-.L969
.L969:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L970:
	.byte	5,65,7,0,5,2
	.word	.L139
	.byte	3,200,3,1,5,51,9
	.half	.L971-.L139
	.byte	1,5,74,9
	.half	.L972-.L971
	.byte	1,9
	.half	.L278-.L972
	.byte	0,1,1,5,65,0,5,2
	.word	.L139
	.byte	3,132,4,1,5,51,9
	.half	.L971-.L139
	.byte	1,5,74,9
	.half	.L972-.L971
	.byte	1,9
	.half	.L973-.L972
	.byte	3,68,1,7,9
	.half	.L278-.L973
	.byte	0,1,1,5,65,0,5,2
	.word	.L139
	.byte	3,197,5,1,5,51,9
	.half	.L971-.L139
	.byte	1,5,74,9
	.half	.L972-.L971
	.byte	1,9
	.half	.L973-.L972
	.byte	3,131,126,1,7,9
	.half	.L278-.L973
	.byte	0,1,1
.L968:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L277:
	.word	-1,.L139,0,.L278-.L139,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L279:
	.word	207
	.half	3
	.word	.L280
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L282,.L281
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_6',0,1,158,4,17,1
	.word	.L153,.L283,.L152
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L280:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L281:
	.word	.L975-.L974
.L974:
	.half	3
	.word	.L977-.L976
.L976:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L977:
	.byte	5,70,7,0,5,2
	.word	.L153
	.byte	3,166,4,1,4,2,5,64,9
	.half	.L978-.L153
	.byte	3,216,0,1,5,69,9
	.half	.L979-.L978
	.byte	3,122,1,5,60,9
	.half	.L980-.L979
	.byte	1,5,5,9
	.half	.L981-.L980
	.byte	1,9
	.half	.L283-.L981
	.byte	0,1,1,5,72,0,5,2
	.word	.L153
	.byte	3,168,4,1,4,2,5,64,9
	.half	.L978-.L153
	.byte	3,214,0,1,5,69,9
	.half	.L979-.L978
	.byte	3,122,1,5,60,9
	.half	.L980-.L979
	.byte	1,5,5,9
	.half	.L981-.L980
	.byte	1,9
	.half	.L283-.L981
	.byte	0,1,1
.L975:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L282:
	.word	-1,.L153,0,.L283-.L153,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L284:
	.word	207
	.half	3
	.word	.L285
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L287,.L286
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_7',0,1,148,1,9,1
	.word	.L95,.L288,.L94
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L285:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L286:
	.word	.L983-.L982
.L982:
	.half	3
	.word	.L985-.L984
.L984:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'IfxStdIf_Timer.h',0,1,0,0,0
.L985:
	.byte	5,41,7,0,5,2
	.word	.L95
	.byte	3,149,1,1,4,2,5,12,9
	.half	.L986-.L95
	.byte	3,159,2,1,4,1,5,54,9
	.half	.L987-.L986
	.byte	3,225,125,1,4,2,5,18,9
	.half	.L988-.L987
	.byte	3,159,2,1,9
	.half	.L288-.L988
	.byte	0,1,1,5,41,0,5,2
	.word	.L95
	.byte	3,155,1,1,4,2,5,12,9
	.half	.L986-.L95
	.byte	3,153,2,1,4,1,5,54,9
	.half	.L987-.L986
	.byte	3,231,125,1,4,2,5,18,9
	.half	.L988-.L987
	.byte	3,153,2,1,9
	.half	.L288-.L988
	.byte	0,1,1
.L983:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L287:
	.word	-1,.L95,0,.L288-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L289:
	.word	207
	.half	3
	.word	.L290
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L292,.L291
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_8',0,1,145,2,9,1
	.word	.L107,.L293,.L106
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L290:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L291:
	.word	.L990-.L989
.L989:
	.half	3
	.word	.L992-.L991
.L991:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'IfxStdIf_Timer.h',0,1,0,0,0
.L992:
	.byte	5,57,7,0,5,2
	.word	.L107
	.byte	3,146,2,1,5,70,9
	.half	.L993-.L107
	.byte	1,4,2,5,20,9
	.half	.L994-.L993
	.byte	3,173,1,1,9
	.half	.L293-.L994
	.byte	0,1,1,5,57,0,5,2
	.word	.L107
	.byte	3,155,2,1,5,70,9
	.half	.L993-.L107
	.byte	1,4,2,5,20,9
	.half	.L994-.L993
	.byte	3,164,1,1,9
	.half	.L293-.L994
	.byte	0,1,1
.L990:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L292:
	.word	-1,.L107,0,.L293-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L294:
	.word	207
	.half	3
	.word	.L295
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L297,.L296
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_9',0,1,165,2,9,1
	.word	.L113,.L298,.L112
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L295:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L296:
	.word	.L996-.L995
.L995:
	.half	3
	.word	.L998-.L997
.L997:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L998:
	.byte	5,67,7,0,5,2
	.word	.L113
	.byte	3,171,2,1,5,43,1,5,66,9
	.half	.L999-.L113
	.byte	1,9
	.half	.L298-.L999
	.byte	0,1,1,5,58,0,5,2
	.word	.L113
	.byte	3,180,2,1,5,34,1,5,57,9
	.half	.L999-.L113
	.byte	1,5,66,9
	.half	.L1000-.L999
	.byte	3,119,1,7,9
	.half	.L298-.L1000
	.byte	0,1,1
.L996:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L297:
	.word	-1,.L113,0,.L298-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L299:
	.word	208
	.half	3
	.word	.L300
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L302,.L301
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_10',0,1,166,3,17,1
	.word	.L137,.L303,.L136
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L300:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L301:
	.word	.L1002-.L1001
.L1001:
	.half	3
	.word	.L1004-.L1003
.L1003:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L1004:
	.byte	5,25,7,0,5,2
	.word	.L137
	.byte	3,179,3,1,5,9,9
	.half	.L636-.L137
	.byte	1,5,24,7,9
	.half	.L1005-.L636
	.byte	3,2,1,5,30,9
	.half	.L35-.L1005
	.byte	3,5,1,9
	.half	.L303-.L35
	.byte	0,1,1,5,25,0,5,2
	.word	.L137
	.byte	3,239,4,1,5,9,9
	.half	.L636-.L137
	.byte	1,5,24,7,9
	.half	.L1005-.L636
	.byte	3,2,1,5,29,9
	.half	.L35-.L1005
	.byte	3,5,1,5,30,9
	.half	.L1006-.L35
	.byte	3,196,126,1,7,9
	.half	.L303-.L1006
	.byte	0,1,1
.L1002:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L302:
	.word	-1,.L137,0,.L303-.L137,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_11')
	.sect	'.debug_info'
.L304:
	.word	208
	.half	3
	.word	.L305
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L307,.L306
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_11',0,1,166,3,17,1
	.word	.L135,.L308,.L134
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_11')
	.sect	'.debug_abbrev'
.L305:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_11')
	.sect	'.debug_line'
.L306:
	.word	.L1008-.L1007
.L1007:
	.half	3
	.word	.L1010-.L1009
.L1009:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L1010:
	.byte	5,17,7,0,5,2
	.word	.L135
	.byte	3,209,3,1,5,26,9
	.half	.L618-.L135
	.byte	3,1,1,5,51,3,1,1,4,2,5,5,9
	.half	.L617-.L618
	.byte	3,165,1,1,7,9
	.half	.L308-.L617
	.byte	0,1,1,5,17,0,5,2
	.word	.L135
	.byte	3,206,5,1,5,26,9
	.half	.L618-.L135
	.byte	3,1,1,5,51,3,132,126,1,4,2,5,5,9
	.half	.L617-.L618
	.byte	3,165,1,1,7,9
	.half	.L308-.L617
	.byte	0,1,1
.L1008:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_11')
	.sect	'.debug_ranges'
.L307:
	.word	-1,.L135,0,.L308-.L135,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L309:
	.word	218
	.half	3
	.word	.L310
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L312,.L311
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_12',0,1,166,3,17,1
	.word	.L133,.L313,.L132
	.byte	4
	.word	.L133,.L313
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L310:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L311:
	.word	.L1012-.L1011
.L1011:
	.half	3
	.word	.L1014-.L1013
.L1013:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L1014:
	.byte	5,51,7,0,5,2
	.word	.L133
	.byte	3,218,3,1,4,2,5,19,9
	.half	.L622-.L133
	.byte	3,166,1,1,4,1,5,99,9
	.half	.L648-.L622
	.byte	3,218,126,1,4,2,5,19,3,167,1,1,9
	.half	.L313-.L648
	.byte	0,1,1,5,51,0,5,2
	.word	.L133
	.byte	3,218,3,1,4,2,5,19,9
	.half	.L622-.L133
	.byte	3,166,1,1,4,1,5,99,9
	.half	.L648-.L622
	.byte	3,226,0,1,4,2,5,19,3,159,127,1,9
	.half	.L313-.L648
	.byte	0,1,1
.L1012:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L312:
	.word	-1,.L133,0,.L313-.L133,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L314:
	.word	208
	.half	3
	.word	.L315
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L317,.L316
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_13',0,1,166,3,17,1
	.word	.L131,.L318,.L130
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L315:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L316:
	.word	.L1016-.L1015
.L1015:
	.half	3
	.word	.L1018-.L1017
.L1017:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L1018:
	.byte	5,20,7,0,5,2
	.word	.L131
	.byte	3,171,3,1,5,23,9
	.half	.L627-.L131
	.byte	3,2,1,5,43,3,124,1,5,33,9
	.half	.L608-.L627
	.byte	3,2,1,5,23,9
	.half	.L609-.L608
	.byte	3,2,1,7,9
	.half	.L318-.L609
	.byte	0,1,1,5,20,0,5,2
	.word	.L131
	.byte	3,231,3,1,5,23,9
	.half	.L627-.L131
	.byte	3,2,1,5,43,3,124,1,5,33,9
	.half	.L608-.L627
	.byte	3,2,1,5,23,9
	.half	.L609-.L608
	.byte	3,70,1,7,9
	.half	.L318-.L609
	.byte	0,1,1,5,20,0,5,2
	.word	.L131
	.byte	3,167,5,1,5,23,9
	.half	.L627-.L131
	.byte	3,2,1,5,43,3,124,1,5,33,9
	.half	.L608-.L627
	.byte	3,2,1,5,23,9
	.half	.L609-.L608
	.byte	3,134,126,1,7,9
	.half	.L318-.L609
	.byte	0,1,1
.L1016:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L317:
	.word	-1,.L131,0,.L318-.L131,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L319:
	.word	208
	.half	3
	.word	.L320
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L322,.L321
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_14',0,1,166,3,17,1
	.word	.L129,.L323,.L128
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L320:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L321:
	.word	.L1020-.L1019
.L1019:
	.half	3
	.word	.L1022-.L1021
.L1021:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0,0
.L1022:
	.byte	5,82,7,0,5,2
	.word	.L129
	.byte	3,173,3,1,9
	.half	.L323-.L129
	.byte	0,1,1,5,82,0,5,2
	.word	.L129
	.byte	3,233,3,1,9
	.half	.L626-.L129
	.byte	3,68,1,7,9
	.half	.L323-.L626
	.byte	0,1,1,5,82,0,5,2
	.word	.L129
	.byte	3,181,4,1,9
	.half	.L626-.L129
	.byte	3,248,126,1,7,9
	.half	.L323-.L626
	.byte	0,1,1,5,82,0,5,2
	.word	.L129
	.byte	3,230,4,1,9
	.half	.L626-.L129
	.byte	3,199,126,1,7,9
	.half	.L323-.L626
	.byte	0,1,1,5,82,0,5,2
	.word	.L129
	.byte	3,169,5,1,9
	.half	.L626-.L129
	.byte	3,132,126,1,7,9
	.half	.L323-.L626
	.byte	0,1,1
.L1020:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L322:
	.word	-1,.L129,0,.L323-.L129,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_15')
	.sect	'.debug_info'
.L324:
	.word	208
	.half	3
	.word	.L325
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L327,.L326
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_15',0,1,226,3,17,1
	.word	.L149,.L328,.L148
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_15')
	.sect	'.debug_abbrev'
.L325:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_15')
	.sect	'.debug_line'
.L326:
	.word	.L1024-.L1023
.L1023:
	.half	3
	.word	.L1026-.L1025
.L1025:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L1026:
	.byte	5,65,7,0,5,2
	.word	.L149
	.byte	3,151,4,1,5,51,9
	.half	.L1027-.L149
	.byte	1,5,76,9
	.half	.L1028-.L1027
	.byte	1,4,2,5,64,9
	.half	.L1029-.L1028
	.byte	3,231,0,1,5,5,9
	.half	.L614-.L1029
	.byte	3,122,1,7,9
	.half	.L328-.L614
	.byte	0,1,1,5,65,0,5,2
	.word	.L149
	.byte	3,219,3,1,5,51,9
	.half	.L1027-.L149
	.byte	1,5,76,9
	.half	.L1028-.L1027
	.byte	1,4,2,5,64,9
	.half	.L1029-.L1028
	.byte	3,163,1,1,5,5,9
	.half	.L614-.L1029
	.byte	3,122,1,7,9
	.half	.L328-.L614
	.byte	0,1,1,5,65,0,5,2
	.word	.L149
	.byte	3,227,5,1,5,51,9
	.half	.L1027-.L149
	.byte	1,5,76,9
	.half	.L1028-.L1027
	.byte	1,4,2,5,64,9
	.half	.L1029-.L1028
	.byte	3,155,127,1,5,5,9
	.half	.L614-.L1029
	.byte	3,122,1,7,9
	.half	.L328-.L614
	.byte	0,1,1,5,65,0,5,2
	.word	.L149
	.byte	3,203,3,1,5,51,9
	.half	.L1027-.L149
	.byte	1,5,76,9
	.half	.L1028-.L1027
	.byte	1,4,2,5,64,9
	.half	.L1029-.L1028
	.byte	3,179,1,1,5,5,9
	.half	.L614-.L1029
	.byte	3,122,1,7,9
	.half	.L328-.L614
	.byte	0,1,1,5,65,0,5,2
	.word	.L149
	.byte	3,135,4,1,5,51,9
	.half	.L1027-.L149
	.byte	1,5,76,9
	.half	.L1028-.L1027
	.byte	1,4,2,5,64,9
	.half	.L1029-.L1028
	.byte	3,247,0,1,5,5,9
	.half	.L614-.L1029
	.byte	3,122,1,7,9
	.half	.L328-.L614
	.byte	0,1,1,5,65,0,5,2
	.word	.L149
	.byte	3,200,5,1,5,51,9
	.half	.L1027-.L149
	.byte	1,5,76,9
	.half	.L1028-.L1027
	.byte	1,4,2,5,64,9
	.half	.L1029-.L1028
	.byte	3,182,127,1,5,5,9
	.half	.L614-.L1029
	.byte	3,122,1,7,9
	.half	.L328-.L614
	.byte	0,1,1
.L1024:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_15')
	.sect	'.debug_ranges'
.L327:
	.word	-1,.L149,0,.L328-.L149,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_16')
	.sect	'.debug_info'
.L329:
	.word	218
	.half	3
	.word	.L330
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L332,.L331
	.byte	2
	.word	.L160
	.byte	3
	.byte	'.cocofun_16',0,1,226,3,17,1
	.word	.L147,.L333,.L146
	.byte	4
	.word	.L147,.L333
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_16')
	.sect	'.debug_abbrev'
.L330:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_16')
	.sect	'.debug_line'
.L331:
	.word	.L1031-.L1030
.L1030:
	.half	3
	.word	.L1033-.L1032
.L1032:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std\\IfxGtm_Atom.h',0,0
	.byte	0,0,0
.L1033:
	.byte	5,51,7,0,5,2
	.word	.L147
	.byte	3,143,4,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,233,0,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,218,3,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,158,1,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,226,5,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,150,127,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,211,3,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,165,1,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,208,5,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,168,127,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,200,3,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,176,1,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,132,4,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,244,0,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,197,5,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,179,127,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,5,51,0,5,2
	.word	.L147
	.byte	3,150,4,1,4,2,5,69,9
	.half	.L611-.L147
	.byte	3,226,0,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,4,2,5,64,0,5,2
	.word	.L147
	.byte	3,254,4,1,5,69,9
	.half	.L611-.L147
	.byte	3,122,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,4,2,5,64,0,5,2
	.word	.L147
	.byte	3,254,4,1,5,69,9
	.half	.L611-.L147
	.byte	3,122,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,4,2,5,64,0,5,2
	.word	.L147
	.byte	3,254,4,1,5,69,9
	.half	.L611-.L147
	.byte	3,122,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,4,2,5,64,0,5,2
	.word	.L147
	.byte	3,254,4,1,5,69,9
	.half	.L611-.L147
	.byte	3,122,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,4,2,5,64,0,5,2
	.word	.L147
	.byte	3,254,4,1,5,69,9
	.half	.L611-.L147
	.byte	3,122,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1,4,2,5,64,0,5,2
	.word	.L147
	.byte	3,254,4,1,5,69,9
	.half	.L611-.L147
	.byte	3,122,1,5,60,9
	.half	.L1034-.L611
	.byte	1,5,5,9
	.half	.L1035-.L1034
	.byte	1,9
	.half	.L333-.L1035
	.byte	0,1,1
.L1031:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_16')
	.sect	'.debug_ranges'
.L332:
	.word	-1,.L147,0,.L333-.L147,0,0
	.sdecl	'.debug_info',debug,cluster('IfxGtm_Atom_PwmHl_modes')
	.sect	'.debug_info'
.L334:
	.word	208
	.half	3
	.word	.L335
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl\\IfxGtm_Atom_PwmHl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L160
	.byte	3
	.byte	'IfxGtm_Atom_PwmHl_modes',0,17,126,45
	.word	.L553
	.byte	5,3
	.word	IfxGtm_Atom_PwmHl_modes
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('IfxGtm_Atom_PwmHl_modes')
	.sect	'.debug_abbrev'
.L335:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L136:
	.word	-1,.L137,0,.L303-.L137
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_11')
	.sect	'.debug_loc'
.L134:
	.word	-1,.L135,0,.L308-.L135
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L132:
	.word	-1,.L133,0,.L313-.L133
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L130:
	.word	-1,.L131,0,.L318-.L131
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L128:
	.word	-1,.L129,0,.L323-.L129
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_15')
	.sect	'.debug_loc'
.L148:
	.word	-1,.L149,0,.L328-.L149
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_16')
	.sect	'.debug_loc'
.L146:
	.word	-1,.L147,0,.L333-.L147
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L142:
	.word	-1,.L143,0,.L268-.L143
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L140:
	.word	-1,.L141,0,.L273-.L141
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L138:
	.word	-1,.L139,0,.L278-.L139
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L152:
	.word	-1,.L153,0,.L283-.L153
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L288-.L95
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L293-.L107
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L112:
	.word	-1,.L113,0,.L298-.L113
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_getDeadtime')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L361-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L362:
	.word	-1,.L93,0,.L554-.L93
	.half	1
	.byte	100
	.word	.L95-.L93,.L288-.L93
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_getMinPulse')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L364-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L365:
	.word	-1,.L97,.L95-.L97,.L288-.L97
	.half	1
	.byte	100
	.word	0,.L364-.L97
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_getMode')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L367-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L368:
	.word	-1,.L99,0,.L367-.L99
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_init')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L555-.L101
	.half	2
	.byte	138,0
	.word	.L555-.L101,.L337-.L101
	.half	2
	.byte	138,40
	.word	.L337-.L101,.L337-.L101
	.half	2
	.byte	138,0
	.word	0,0
.L353:
	.word	-1,.L101,.L568-.L101,.L569-.L101
	.half	1
	.byte	84
	.word	.L573-.L101,.L574-.L101
	.half	1
	.byte	84
	.word	0,0
.L346:
	.word	-1,.L101,.L6-.L101,.L567-.L101
	.half	1
	.byte	90
	.word	.L567-.L101,.L337-.L101
	.half	1
	.byte	95
	.word	0,0
.L343:
	.word	-1,.L101,.L570-.L101,.L571-.L101
	.half	5
	.byte	144,32,157,32,0
	.word	.L575-.L101,.L576-.L101
	.half	1
	.byte	95
	.word	0,0
.L344:
	.word	-1,.L101,.L560-.L101,.L337-.L101
	.half	1
	.byte	88
	.word	.L561-.L101,.L562-.L101
	.half	1
	.byte	95
	.word	.L578-.L101,.L579-.L101
	.half	1
	.byte	84
	.word	.L580-.L101,.L581-.L101
	.half	1
	.byte	84
	.word	.L585-.L101,.L586-.L101
	.half	1
	.byte	84
	.word	.L587-.L101,.L588-.L101
	.half	1
	.byte	85
	.word	0,0
.L351:
	.word	-1,.L101,.L565-.L101,.L6-.L101
	.half	1
	.byte	82
	.word	.L566-.L101,.L337-.L101
	.half	1
	.byte	89
	.word	.L572-.L101,.L569-.L101
	.half	1
	.byte	85
	.word	.L577-.L101,.L574-.L101
	.half	1
	.byte	85
	.word	0,0
.L341:
	.word	-1,.L101,0,.L556-.L101
	.half	1
	.byte	101
	.word	.L558-.L101,.L559-.L101
	.half	1
	.byte	111
	.word	0,0
.L339:
	.word	-1,.L101,0,.L556-.L101
	.half	1
	.byte	100
	.word	.L557-.L101,.L337-.L101
	.half	1
	.byte	108
	.word	.L563-.L101,.L564-.L101
	.half	1
	.byte	100
	.word	.L582-.L101,.L354-.L101
	.half	1
	.byte	100
	.word	.L583-.L101,.L584-.L101
	.half	1
	.byte	100
	.word	0,0
.L356:
	.word	-1,.L101,0,.L337-.L101
	.half	2
	.byte	145,92
	.word	0,0
.L348:
	.word	-1,.L101,.L560-.L101,.L337-.L101
	.half	1
	.byte	109
	.word	.L589-.L101,.L590-.L101
	.half	1
	.byte	100
	.word	.L591-.L101,.L592-.L101
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_initConfig')
	.sect	'.debug_loc'
.L102:
	.word	-1,.L103,0,.L357-.L103
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	-1,.L103,0,.L593-.L103
	.half	1
	.byte	100
	.word	.L594-.L103,.L357-.L103
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_setDeadtime')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L369-.L105
	.half	2
	.byte	138,0
	.word	0,0
.L371:
	.word	-1,.L105,.L107-.L105,.L293-.L105
	.half	1
	.byte	84
	.word	.L595-.L105,.L369-.L105
	.half	1
	.byte	84
	.word	0,0
.L370:
	.word	-1,.L105,.L107-.L105,.L293-.L105
	.half	1
	.byte	100
	.word	.L595-.L105,.L369-.L105
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_setMinPulse')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L373-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L374:
	.word	-1,.L109,.L107-.L109,.L293-.L109
	.half	1
	.byte	100
	.word	.L596-.L109,.L373-.L109
	.half	1
	.byte	100
	.word	0,0
.L375:
	.word	-1,.L109,.L107-.L109,.L293-.L109
	.half	1
	.byte	84
	.word	.L596-.L109,.L373-.L109
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_setMode')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L376-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L382:
	.word	0,0
.L386:
	.word	-1,.L111,.L601-.L111,.L602-.L111
	.half	1
	.byte	84
	.word	.L603-.L111,.L385-.L111
	.half	1
	.byte	84
	.word	0,0
.L384:
	.word	-1,.L111,.L600-.L111,.L19-.L111
	.half	1
	.byte	88
	.word	0,0
.L377:
	.word	-1,.L111,.L113-.L111,.L298-.L111
	.half	1
	.byte	100
	.word	.L113-.L111,.L298-.L111
	.half	1
	.byte	111
	.word	0,.L597-.L111
	.half	1
	.byte	100
	.word	.L598-.L111,.L376-.L111
	.half	1
	.byte	111
	.word	0,0
.L378:
	.word	-1,.L111,.L113-.L111,.L298-.L111
	.half	1
	.byte	84
	.word	0,.L26-.L111
	.half	1
	.byte	84
	.word	0,0
.L380:
	.word	-1,.L111,.L113-.L111,.L298-.L111
	.half	1
	.byte	89
	.word	.L599-.L111,.L376-.L111
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_setOnTime')
	.sect	'.debug_loc'
.L114:
	.word	-1,.L115,0,.L387-.L115
	.half	2
	.byte	138,0
	.word	0,0
.L388:
	.word	-1,.L115,0,.L387-.L115
	.half	1
	.byte	100
	.word	0,0
.L390:
	.word	-1,.L115,0,.L387-.L115
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_setOnTimeAndShift')
	.sect	'.debug_loc'
.L116:
	.word	-1,.L117,0,.L391-.L117
	.half	2
	.byte	138,0
	.word	0,0
.L392:
	.word	-1,.L117,0,.L391-.L117
	.half	1
	.byte	100
	.word	0,0
.L394:
	.word	-1,.L117,0,.L391-.L117
	.half	1
	.byte	102
	.word	0,0
.L393:
	.word	-1,.L117,0,.L391-.L117
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_setPulse')
	.sect	'.debug_loc'
.L118:
	.word	-1,.L119,0,.L395-.L119
	.half	2
	.byte	138,0
	.word	0,0
.L396:
	.word	-1,.L119,0,.L395-.L119
	.half	1
	.byte	100
	.word	0,0
.L399:
	.word	-1,.L119,0,.L395-.L119
	.half	1
	.byte	102
	.word	0,0
.L398:
	.word	-1,.L119,0,.L395-.L119
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_setupChannels')
	.sect	'.debug_loc'
.L120:
	.word	-1,.L121,0,.L400-.L121
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	-1,.L121,0,.L400-.L121
	.half	1
	.byte	101
	.word	0,0
.L401:
	.word	-1,.L121,0,.L400-.L121
	.half	1
	.byte	100
	.word	0,0
.L404:
	.word	-1,.L121,0,.L400-.L121
	.half	1
	.byte	102
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_stdIfPwmHlInit')
	.sect	'.debug_loc'
.L122:
	.word	-1,.L123,0,.L405-.L123
	.half	2
	.byte	138,0
	.word	0,0
.L408:
	.word	-1,.L123,0,.L604-.L123
	.half	1
	.byte	101
	.word	.L606-.L123,.L405-.L123
	.half	1
	.byte	108
	.word	0,0
.L407:
	.word	-1,.L123,0,.L604-.L123
	.half	1
	.byte	100
	.word	.L605-.L123,.L405-.L123
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_updateAndShiftOff')
	.sect	'.debug_loc'
.L124:
	.word	-1,.L125,0,.L409-.L125
	.half	2
	.byte	138,0
	.word	0,0
.L410:
	.word	-1,.L125,0,.L409-.L125
	.half	1
	.byte	100
	.word	0,0
.L412:
	.word	-1,.L125,0,.L409-.L125
	.half	1
	.byte	102
	.word	0,0
.L411:
	.word	-1,.L125,0,.L607-.L125
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_updateCenterAligned')
	.sect	'.debug_loc'
.L126:
	.word	-1,.L127,0,.L413-.L127
	.half	2
	.byte	138,0
	.word	0,0
.L438:
	.word	0,0
.L428:
	.word	0,0
.L440:
	.word	0,0
.L430:
	.word	0,0
.L417:
	.word	-1,.L127,.L608-.L127,.L318-.L127
	.half	1
	.byte	84
	.word	.L137-.L127,.L303-.L127
	.half	1
	.byte	84
	.word	.L139-.L127,.L278-.L127
	.half	1
	.byte	84
	.word	.L147-.L127,.L333-.L127
	.half	1
	.byte	84
	.word	.L612-.L127,.L613-.L127
	.half	1
	.byte	84
	.word	.L149-.L127,.L614-.L127
	.half	1
	.byte	84
	.word	.L615-.L127,.L616-.L127
	.half	1
	.byte	84
	.word	.L135-.L127,.L617-.L127
	.half	1
	.byte	84
	.word	.L619-.L127,.L43-.L127
	.half	1
	.byte	84
	.word	.L622-.L127,.L623-.L127
	.half	1
	.byte	84
	.word	.L624-.L127,.L273-.L127
	.half	1
	.byte	84
	.word	.L129-.L127,.L626-.L127
	.half	1
	.byte	84
	.word	.L626-.L127,.L323-.L127
	.half	1
	.byte	84
	.word	.L33-.L127,.L413-.L127
	.half	1
	.byte	84
	.word	0,0
.L422:
	.word	-1,.L127,.L618-.L127,.L617-.L127
	.half	1
	.byte	86
	.word	.L611-.L127,.L333-.L127
	.half	1
	.byte	86
	.word	.L443-.L127,.L42-.L127
	.half	1
	.byte	86
	.word	.L620-.L127,.L43-.L127
	.half	1
	.byte	86
	.word	.L622-.L127,.L623-.L127
	.half	1
	.byte	86
	.word	.L149-.L127,.L614-.L127
	.half	1
	.byte	86
	.word	.L624-.L127,.L625-.L127
	.half	1
	.byte	86
	.word	0,0
.L423:
	.word	-1,.L127,.L618-.L127,.L617-.L127
	.half	1
	.byte	85
	.word	.L611-.L127,.L333-.L127
	.half	1
	.byte	85
	.word	.L443-.L127,.L42-.L127
	.half	1
	.byte	85
	.word	.L621-.L127,.L43-.L127
	.half	1
	.byte	85
	.word	.L622-.L127,.L623-.L127
	.half	1
	.byte	85
	.word	.L149-.L127,.L614-.L127
	.half	1
	.byte	85
	.word	.L624-.L127,.L273-.L127
	.half	1
	.byte	85
	.word	0,0
.L419:
	.word	-1,.L127,.L608-.L127,.L318-.L127
	.half	1
	.byte	82
	.word	.L137-.L127,.L303-.L127
	.half	1
	.byte	82
	.word	.L139-.L127,.L278-.L127
	.half	1
	.byte	82
	.word	.L147-.L127,.L333-.L127
	.half	1
	.byte	82
	.word	.L612-.L127,.L613-.L127
	.half	1
	.byte	82
	.word	.L149-.L127,.L614-.L127
	.half	1
	.byte	82
	.word	.L615-.L127,.L616-.L127
	.half	1
	.byte	82
	.word	.L135-.L127,.L617-.L127
	.half	1
	.byte	82
	.word	.L619-.L127,.L43-.L127
	.half	1
	.byte	82
	.word	.L622-.L127,.L623-.L127
	.half	1
	.byte	82
	.word	.L624-.L127,.L273-.L127
	.half	1
	.byte	82
	.word	.L129-.L127,.L323-.L127
	.half	1
	.byte	82
	.word	.L33-.L127,.L413-.L127
	.half	1
	.byte	82
	.word	0,0
.L414:
	.word	-1,.L127,.L131-.L127,.L318-.L127
	.half	1
	.byte	100
	.word	.L137-.L127,.L303-.L127
	.half	1
	.byte	100
	.word	.L139-.L127,.L278-.L127
	.half	1
	.byte	100
	.word	.L147-.L127,.L333-.L127
	.half	1
	.byte	100
	.word	.L612-.L127,.L613-.L127
	.half	1
	.byte	100
	.word	.L149-.L127,.L614-.L127
	.half	1
	.byte	100
	.word	.L615-.L127,.L616-.L127
	.half	1
	.byte	100
	.word	.L135-.L127,.L617-.L127
	.half	1
	.byte	100
	.word	.L619-.L127,.L43-.L127
	.half	1
	.byte	100
	.word	.L622-.L127,.L623-.L127
	.half	1
	.byte	100
	.word	.L624-.L127,.L273-.L127
	.half	1
	.byte	100
	.word	.L129-.L127,.L323-.L127
	.half	1
	.byte	100
	.word	.L33-.L127,.L413-.L127
	.half	1
	.byte	100
	.word	0,0
.L418:
	.word	-1,.L127,.L609-.L127,.L318-.L127
	.half	1
	.byte	83
	.word	.L137-.L127,.L303-.L127
	.half	1
	.byte	83
	.word	.L139-.L127,.L278-.L127
	.half	1
	.byte	83
	.word	.L147-.L127,.L333-.L127
	.half	1
	.byte	83
	.word	.L612-.L127,.L613-.L127
	.half	1
	.byte	83
	.word	.L149-.L127,.L614-.L127
	.half	1
	.byte	83
	.word	.L615-.L127,.L616-.L127
	.half	1
	.byte	83
	.word	.L135-.L127,.L617-.L127
	.half	1
	.byte	83
	.word	.L619-.L127,.L43-.L127
	.half	1
	.byte	83
	.word	.L622-.L127,.L623-.L127
	.half	1
	.byte	83
	.word	.L624-.L127,.L273-.L127
	.half	1
	.byte	83
	.word	.L129-.L127,.L323-.L127
	.half	1
	.byte	83
	.word	.L33-.L127,.L413-.L127
	.half	1
	.byte	83
	.word	0,0
.L434:
	.word	0,0
.L432:
	.word	0,0
.L415:
	.word	-1,.L127,.L131-.L127,.L318-.L127
	.half	1
	.byte	101
	.word	.L137-.L127,.L303-.L127
	.half	1
	.byte	101
	.word	.L139-.L127,.L278-.L127
	.half	1
	.byte	101
	.word	.L147-.L127,.L333-.L127
	.half	1
	.byte	101
	.word	.L612-.L127,.L613-.L127
	.half	1
	.byte	101
	.word	.L149-.L127,.L614-.L127
	.half	1
	.byte	101
	.word	.L615-.L127,.L616-.L127
	.half	1
	.byte	101
	.word	.L135-.L127,.L617-.L127
	.half	1
	.byte	101
	.word	.L619-.L127,.L43-.L127
	.half	1
	.byte	101
	.word	.L622-.L127,.L623-.L127
	.half	1
	.byte	101
	.word	.L624-.L127,.L273-.L127
	.half	1
	.byte	101
	.word	.L129-.L127,.L323-.L127
	.half	1
	.byte	101
	.word	.L33-.L127,.L413-.L127
	.half	1
	.byte	101
	.word	0,0
.L421:
	.word	-1,.L127,.L137-.L127,.L303-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L139-.L127,.L278-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L610-.L127,.L426-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L147-.L127,.L611-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L40-.L127,.L443-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L135-.L127,.L617-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L42-.L127,.L620-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_updateEdgeAligned')
	.sect	'.debug_loc'
.L144:
	.word	-1,.L145,0,.L445-.L145
	.half	2
	.byte	138,0
	.word	0,0
.L461:
	.word	0,0
.L457:
	.word	0,0
.L462:
	.word	0,0
.L458:
	.word	0,0
.L448:
	.word	-1,.L145,.L627-.L145,.L318-.L145
	.half	1
	.byte	84
	.word	.L139-.L145,.L278-.L145
	.half	1
	.byte	84
	.word	.L147-.L145,.L333-.L145
	.half	1
	.byte	84
	.word	.L149-.L145,.L614-.L145
	.half	1
	.byte	84
	.word	.L612-.L145,.L268-.L145
	.half	1
	.byte	84
	.word	.L629-.L145,.L54-.L145
	.half	1
	.byte	84
	.word	.L129-.L145,.L626-.L145
	.half	1
	.byte	84
	.word	.L626-.L145,.L323-.L145
	.half	1
	.byte	84
	.word	.L466-.L145,.L445-.L145
	.half	1
	.byte	84
	.word	0,0
.L453:
	.word	0,0
.L454:
	.word	-1,.L145,.L611-.L145,.L333-.L145
	.half	1
	.byte	86
	.word	.L628-.L145,.L53-.L145
	.half	1
	.byte	86
	.word	.L53-.L145,.L54-.L145
	.half	1
	.byte	86
	.word	.L149-.L145,.L614-.L145
	.half	1
	.byte	86
	.word	.L466-.L145,.L44-.L145
	.half	1
	.byte	86
	.word	0,0
.L450:
	.word	-1,.L145,.L608-.L145,.L318-.L145
	.half	1
	.byte	82
	.word	.L139-.L145,.L278-.L145
	.half	1
	.byte	82
	.word	.L147-.L145,.L333-.L145
	.half	1
	.byte	82
	.word	.L149-.L145,.L614-.L145
	.half	1
	.byte	82
	.word	.L612-.L145,.L268-.L145
	.half	1
	.byte	82
	.word	.L629-.L145,.L54-.L145
	.half	1
	.byte	82
	.word	.L129-.L145,.L323-.L145
	.half	1
	.byte	82
	.word	.L466-.L145,.L445-.L145
	.half	1
	.byte	82
	.word	0,0
.L446:
	.word	-1,.L145,.L131-.L145,.L318-.L145
	.half	1
	.byte	100
	.word	.L139-.L145,.L278-.L145
	.half	1
	.byte	100
	.word	.L147-.L145,.L333-.L145
	.half	1
	.byte	100
	.word	.L149-.L145,.L614-.L145
	.half	1
	.byte	100
	.word	.L612-.L145,.L268-.L145
	.half	1
	.byte	100
	.word	.L629-.L145,.L54-.L145
	.half	1
	.byte	100
	.word	.L129-.L145,.L323-.L145
	.half	1
	.byte	100
	.word	.L466-.L145,.L445-.L145
	.half	1
	.byte	100
	.word	0,0
.L449:
	.word	-1,.L145,.L609-.L145,.L318-.L145
	.half	1
	.byte	83
	.word	.L139-.L145,.L278-.L145
	.half	1
	.byte	83
	.word	.L147-.L145,.L333-.L145
	.half	1
	.byte	83
	.word	.L149-.L145,.L614-.L145
	.half	1
	.byte	83
	.word	.L612-.L145,.L268-.L145
	.half	1
	.byte	83
	.word	.L629-.L145,.L54-.L145
	.half	1
	.byte	83
	.word	.L129-.L145,.L323-.L145
	.half	1
	.byte	83
	.word	.L466-.L145,.L445-.L145
	.half	1
	.byte	83
	.word	0,0
.L460:
	.word	0,0
.L459:
	.word	0,0
.L447:
	.word	-1,.L145,.L131-.L145,.L318-.L145
	.half	1
	.byte	101
	.word	.L139-.L145,.L278-.L145
	.half	1
	.byte	101
	.word	.L147-.L145,.L333-.L145
	.half	1
	.byte	101
	.word	.L149-.L145,.L614-.L145
	.half	1
	.byte	101
	.word	.L612-.L145,.L268-.L145
	.half	1
	.byte	101
	.word	.L629-.L145,.L54-.L145
	.half	1
	.byte	101
	.word	.L129-.L145,.L323-.L145
	.half	1
	.byte	101
	.word	.L466-.L145,.L445-.L145
	.half	1
	.byte	101
	.word	0,0
.L452:
	.word	-1,.L145,.L139-.L145,.L278-.L145
	.half	1
	.byte	85
	.word	.L147-.L145,.L333-.L145
	.half	1
	.byte	85
	.word	.L149-.L145,.L614-.L145
	.half	1
	.byte	85
	.word	.L612-.L145,.L268-.L145
	.half	1
	.byte	85
	.word	.L630-.L145,.L54-.L145
	.half	1
	.byte	85
	.word	.L466-.L145,.L631-.L145
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_updateOff')
	.sect	'.debug_loc'
.L150:
	.word	-1,.L151,0,.L467-.L151
	.half	2
	.byte	138,0
	.word	0,0
.L475:
	.word	0,0
.L476:
	.word	0,0
.L471:
	.word	-1,.L151,.L153-.L151,.L283-.L151
	.half	1
	.byte	81
	.word	.L473-.L151,.L632-.L151
	.half	1
	.byte	81
	.word	.L55-.L151,.L467-.L151
	.half	1
	.byte	81
	.word	0,0
.L468:
	.word	-1,.L151,.L153-.L151,.L283-.L151
	.half	1
	.byte	100
	.word	0,.L467-.L151
	.half	1
	.byte	100
	.word	0,0
.L472:
	.word	-1,.L151,.L153-.L151,.L283-.L151
	.half	5
	.byte	144,32,157,32,0
	.word	.L633-.L151,.L467-.L151
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L478:
	.word	0,0
.L477:
	.word	0,0
.L469:
	.word	-1,.L151,.L153-.L151,.L283-.L151
	.half	1
	.byte	101
	.word	0,.L467-.L151
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_updatePulse')
	.sect	'.debug_loc'
.L154:
	.word	-1,.L155,0,.L484-.L155
	.half	2
	.byte	138,0
	.word	0,0
.L512:
	.word	0,0
.L507:
	.word	0,0
.L513:
	.word	0,0
.L508:
	.word	0,0
.L488:
	.word	-1,.L155,.L129-.L155,.L626-.L155
	.half	1
	.byte	84
	.word	.L626-.L155,.L323-.L155
	.half	1
	.byte	84
	.word	.L636-.L155,.L303-.L155
	.half	1
	.byte	84
	.word	.L639-.L155,.L484-.L155
	.half	1
	.byte	84
	.word	0,0
.L498:
	.word	0,0
.L492:
	.word	-1,.L155,.L634-.L155,.L67-.L155
	.half	1
	.byte	81
	.word	.L635-.L155,.L66-.L155
	.half	1
	.byte	81
	.word	0,0
.L517:
	.word	-1,.L155,.L637-.L155,.L77-.L155
	.half	5
	.byte	144,32,157,32,0
	.word	.L638-.L155,.L76-.L155
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L493:
	.word	-1,.L155,.L635-.L155,.L57-.L155
	.half	1
	.byte	95
	.word	0,0
.L518:
	.word	-1,.L155,.L638-.L155,.L69-.L155
	.half	1
	.byte	95
	.word	0,0
.L485:
	.word	-1,.L155,.L129-.L155,.L323-.L155
	.half	1
	.byte	100
	.word	.L636-.L155,.L303-.L155
	.half	1
	.byte	100
	.word	0,.L484-.L155
	.half	1
	.byte	100
	.word	0,0
.L487:
	.word	-1,.L155,.L129-.L155,.L323-.L155
	.half	1
	.byte	102
	.word	.L636-.L155,.L303-.L155
	.half	1
	.byte	102
	.word	0,.L484-.L155
	.half	1
	.byte	102
	.word	0,0
.L489:
	.word	-1,.L155,.L129-.L155,.L323-.L155
	.half	1
	.byte	83
	.word	.L636-.L155,.L303-.L155
	.half	1
	.byte	83
	.word	.L640-.L155,.L484-.L155
	.half	1
	.byte	83
	.word	0,0
.L500:
	.word	0,0
.L510:
	.word	0,0
.L509:
	.word	0,0
.L486:
	.word	-1,.L155,.L129-.L155,.L323-.L155
	.half	1
	.byte	101
	.word	.L636-.L155,.L303-.L155
	.half	1
	.byte	101
	.word	0,.L484-.L155
	.half	1
	.byte	101
	.word	0,0
.L491:
	.word	-1,.L155,.L504-.L155,.L634-.L155
	.half	1
	.byte	81
	.word	.L67-.L155,.L68-.L155
	.half	1
	.byte	81
	.word	0,0
.L516:
	.word	-1,.L155,.L636-.L155,.L303-.L155
	.half	5
	.byte	144,32,157,32,0
	.word	.L523-.L155,.L637-.L155
	.half	5
	.byte	144,32,157,32,0
	.word	.L77-.L155,.L78-.L155
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_updatePulseOff')
	.sect	'.debug_loc'
.L156:
	.word	-1,.L157,0,.L528-.L157
	.half	2
	.byte	138,0
	.word	0,0
.L529:
	.word	-1,.L157,0,.L528-.L157
	.half	1
	.byte	100
	.word	0,0
.L531:
	.word	-1,.L157,0,.L528-.L157
	.half	1
	.byte	102
	.word	0,0
.L530:
	.word	-1,.L157,0,.L641-.L157
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxGtm_Atom_PwmHl_updateShiftCenterAligned')
	.sect	'.debug_loc'
.L158:
	.word	-1,.L159,0,.L532-.L159
	.half	2
	.byte	138,0
	.word	0,0
.L549:
	.word	0,0
.L545:
	.word	0,0
.L550:
	.word	0,0
.L546:
	.word	0,0
.L536:
	.word	-1,.L159,.L627-.L159,.L318-.L159
	.half	1
	.byte	84
	.word	.L139-.L159,.L278-.L159
	.half	1
	.byte	84
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	84
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	84
	.word	.L612-.L159,.L268-.L159
	.half	1
	.byte	84
	.word	.L135-.L159,.L617-.L159
	.half	1
	.byte	84
	.word	.L643-.L159,.L89-.L159
	.half	1
	.byte	84
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	84
	.word	.L624-.L159,.L273-.L159
	.half	1
	.byte	84
	.word	.L129-.L159,.L626-.L159
	.half	1
	.byte	84
	.word	.L626-.L159,.L323-.L159
	.half	1
	.byte	84
	.word	.L79-.L159,.L532-.L159
	.half	1
	.byte	84
	.word	0,0
.L541:
	.word	-1,.L159,.L618-.L159,.L617-.L159
	.half	1
	.byte	86
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	86
	.word	.L551-.L159,.L88-.L159
	.half	1
	.byte	86
	.word	.L644-.L159,.L88-.L159
	.half	1
	.byte	95
	.word	.L647-.L159,.L89-.L159
	.half	1
	.byte	86
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	86
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	86
	.word	.L624-.L159,.L624-.L159
	.half	1
	.byte	86
	.word	0,0
.L542:
	.word	-1,.L159,.L618-.L159,.L617-.L159
	.half	1
	.byte	85
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	85
	.word	.L551-.L159,.L88-.L159
	.half	1
	.byte	85
	.word	.L91-.L159,.L89-.L159
	.half	1
	.byte	85
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	85
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	85
	.word	.L624-.L159,.L273-.L159
	.half	1
	.byte	85
	.word	0,0
.L538:
	.word	-1,.L159,.L608-.L159,.L318-.L159
	.half	1
	.byte	82
	.word	.L139-.L159,.L278-.L159
	.half	1
	.byte	82
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	82
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	82
	.word	.L612-.L159,.L268-.L159
	.half	1
	.byte	82
	.word	.L135-.L159,.L617-.L159
	.half	1
	.byte	82
	.word	.L643-.L159,.L89-.L159
	.half	1
	.byte	82
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	82
	.word	.L624-.L159,.L273-.L159
	.half	1
	.byte	82
	.word	.L129-.L159,.L323-.L159
	.half	1
	.byte	82
	.word	.L79-.L159,.L532-.L159
	.half	1
	.byte	82
	.word	0,0
.L533:
	.word	-1,.L159,.L131-.L159,.L318-.L159
	.half	1
	.byte	100
	.word	.L139-.L159,.L278-.L159
	.half	1
	.byte	100
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	100
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	100
	.word	.L612-.L159,.L268-.L159
	.half	1
	.byte	100
	.word	.L135-.L159,.L617-.L159
	.half	1
	.byte	100
	.word	.L643-.L159,.L89-.L159
	.half	1
	.byte	100
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	100
	.word	.L624-.L159,.L273-.L159
	.half	1
	.byte	100
	.word	.L129-.L159,.L323-.L159
	.half	1
	.byte	100
	.word	.L79-.L159,.L532-.L159
	.half	1
	.byte	100
	.word	0,0
.L537:
	.word	-1,.L159,.L609-.L159,.L318-.L159
	.half	1
	.byte	83
	.word	.L139-.L159,.L278-.L159
	.half	1
	.byte	83
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	83
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	83
	.word	.L612-.L159,.L268-.L159
	.half	1
	.byte	83
	.word	.L135-.L159,.L617-.L159
	.half	1
	.byte	83
	.word	.L643-.L159,.L89-.L159
	.half	1
	.byte	83
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	83
	.word	.L624-.L159,.L273-.L159
	.half	1
	.byte	83
	.word	.L129-.L159,.L323-.L159
	.half	1
	.byte	83
	.word	.L79-.L159,.L532-.L159
	.half	1
	.byte	83
	.word	0,0
.L540:
	.word	-1,.L159,.L645-.L159,.L646-.L159
	.half	5
	.byte	144,32,157,32,0
	.word	.L91-.L159,.L89-.L159
	.half	1
	.byte	95
	.word	.L611-.L159,.L333-.L159
	.half	1
	.byte	95
	.word	.L622-.L159,.L648-.L159
	.half	1
	.byte	95
	.word	0,0
.L548:
	.word	0,0
.L547:
	.word	0,0
.L535:
	.word	-1,.L159,.L131-.L159,.L318-.L159
	.half	1
	.byte	102
	.word	.L139-.L159,.L278-.L159
	.half	1
	.byte	102
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	102
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	102
	.word	.L612-.L159,.L268-.L159
	.half	1
	.byte	102
	.word	.L135-.L159,.L617-.L159
	.half	1
	.byte	102
	.word	.L643-.L159,.L89-.L159
	.half	1
	.byte	102
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	102
	.word	.L624-.L159,.L273-.L159
	.half	1
	.byte	102
	.word	.L129-.L159,.L323-.L159
	.half	1
	.byte	102
	.word	.L79-.L159,.L532-.L159
	.half	1
	.byte	102
	.word	0,0
.L534:
	.word	-1,.L159,.L131-.L159,.L318-.L159
	.half	1
	.byte	101
	.word	.L139-.L159,.L278-.L159
	.half	1
	.byte	101
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	101
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	101
	.word	.L612-.L159,.L268-.L159
	.half	1
	.byte	101
	.word	.L135-.L159,.L617-.L159
	.half	1
	.byte	101
	.word	.L643-.L159,.L89-.L159
	.half	1
	.byte	101
	.word	.L622-.L159,.L313-.L159
	.half	1
	.byte	101
	.word	.L624-.L159,.L273-.L159
	.half	1
	.byte	101
	.word	.L129-.L159,.L323-.L159
	.half	1
	.byte	101
	.word	.L79-.L159,.L532-.L159
	.half	1
	.byte	101
	.word	0,0
.L539:
	.word	-1,.L159,.L139-.L159,.L278-.L159
	.half	1
	.byte	86
	.word	.L147-.L159,.L333-.L159
	.half	1
	.byte	86
	.word	.L149-.L159,.L614-.L159
	.half	1
	.byte	86
	.word	.L612-.L159,.L268-.L159
	.half	1
	.byte	86
	.word	.L642-.L159,.L551-.L159
	.half	1
	.byte	86
	.word	.L135-.L159,.L618-.L159
	.half	1
	.byte	86
	.word	.L88-.L159,.L89-.L159
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1036:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_getDeadtime')
	.sect	'.debug_frame'
	.word	24
	.word	.L1036,.L93,.L361-.L93
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_getMinPulse')
	.sect	'.debug_frame'
	.word	24
	.word	.L1036,.L97,.L364-.L97
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_getMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L1036,.L99,.L367-.L99
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_init')
	.sect	'.debug_frame'
	.word	36
	.word	.L1036,.L101,.L337-.L101
	.byte	4
	.word	(.L555-.L101)/2
	.byte	19,40,22,26,3,19,138,40,4
	.word	(.L337-.L555)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_initConfig')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L103,.L357-.L103
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_setDeadtime')
	.sect	'.debug_frame'
	.word	24
	.word	.L1036,.L105,.L369-.L105
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_setMinPulse')
	.sect	'.debug_frame'
	.word	24
	.word	.L1036,.L109,.L373-.L109
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_setMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L111,.L376-.L111
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_setOnTime')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L115,.L387-.L115
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_setOnTimeAndShift')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L117,.L391-.L117
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_setPulse')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L119,.L395-.L119
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_setupChannels')
	.sect	'.debug_frame'
	.word	24
	.word	.L1036,.L121,.L400-.L121
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_stdIfPwmHlInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L123,.L405-.L123
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_updateAndShiftOff')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L125,.L409-.L125
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_updateCenterAligned')
	.sect	'.debug_frame'
	.word	20
	.word	.L1036,.L127,.L413-.L127
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_updateEdgeAligned')
	.sect	'.debug_frame'
	.word	20
	.word	.L1036,.L145,.L445-.L145
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_updateOff')
	.sect	'.debug_frame'
	.word	20
	.word	.L1036,.L151,.L467-.L151
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_updatePulse')
	.sect	'.debug_frame'
	.word	16
	.word	.L1036,.L155,.L484-.L155
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_updatePulseOff')
	.sect	'.debug_frame'
	.word	12
	.word	.L1036,.L157,.L528-.L157
	.sdecl	'.debug_frame',debug,cluster('IfxGtm_Atom_PwmHl_updateShiftCenterAligned')
	.sect	'.debug_frame'
	.word	16
	.word	.L1036,.L159,.L532-.L159
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1037:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L95,.L288-.L95
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L107,.L293-.L107
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L113,.L298-.L113
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L129,.L323-.L129
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L131,.L318-.L131
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L133,.L313-.L133
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_11')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L135,.L308-.L135
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L137,.L303-.L137
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L139,.L278-.L139
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L141,.L273-.L141
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L143,.L268-.L143
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_16')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L147,.L333-.L147
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_15')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L149,.L328-.L149
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L1037,.L153,.L283-.L153
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
