	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\.IfxHssl_Hssl.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.src ..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c'

	
$TC162
	.sdecl	'.zrodata.IfxPort..1.cnt',data,rom
	.sect	'.zrodata.IfxPort..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268192512
	.sdecl	'.zrodata.IfxPort..2.cnt',data,rom
	.sect	'.zrodata.IfxPort..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268192768
	.sdecl	'.zrodata.IfxHssl_Hssl..3.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268192348
	.sdecl	'.zrodata.IfxHssl_Hssl..4.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268192343
	.sdecl	'.zrodata.IfxHssl_Hssl..5.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268434332
	.sdecl	'.zrodata.IfxHssl_Hssl..6.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	459008
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_checkErrors',code,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_checkErrors'
	.align	2
	
	.global	IfxHssl_Hssl_checkErrors

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     2   * \file IfxHssl_Hssl.c
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     4   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     7   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    10   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    15   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    17   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    24   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    31   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    39   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    41   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    42  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    44  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    46  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    47  #include "IfxHssl_Hssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    48  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    50  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    52  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    53  void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl)
; Function IfxHssl_Hssl_checkErrors
.L81:
IfxHssl_Hssl_checkErrors:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    54  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    55      Ifx_HSSL *hsslSFR = hssl->hssl; /* pointer to HSSL registers */
	ld.a	a15,[a4]
.L350:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    56  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    57      /* store the errors in the structure */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    58      if (hsslSFR->MFLAGS.B.NACK != 0)
	ld.bu	d15,[a15]24
	and	d15,#15
.L647:
	jeq	d15,#0,.L2
.L648:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    59      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    60          hssl->errorFlags.notAcknowledgeError = 1;
	ld.bu	d15,[a4]4
.L649:
	or	d15,#1
	st.b	[a4]4,d15
.L2:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    61      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    62  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    63      if (hsslSFR->MFLAGS.B.TTE != 0)
	ld.bu	d15,[a15]24
	extr.u	d15,d15,#4,#4
.L650:
	jeq	d15,#0,.L3
.L651:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    64      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    65          hssl->errorFlags.transactionTagError = 1;
	ld.bu	d15,[a4]4
.L652:
	or	d15,#2
	st.b	[a4]4,d15
.L3:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    66      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    67  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    68      if (hsslSFR->MFLAGS.B.TIMEOUT != 0)
	ld.bu	d15,[a15]25
	and	d15,#15
.L653:
	jeq	d15,#0,.L4
.L654:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    69      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    70          hssl->errorFlags.timeoutError = 1;
	ld.bu	d15,[a4]4
.L655:
	or	d15,#4
	st.b	[a4]4,d15
.L4:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    71      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    72  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    73      if (hsslSFR->MFLAGS.B.UNEXPECTED != 0)
	ld.bu	d15,[a15]25
	extr.u	d15,d15,#4,#4
.L656:
	jeq	d15,#0,.L5
.L657:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    74      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    75          hssl->errorFlags.unexpectedError = 1;
	ld.bu	d15,[a4]4
.L658:
	or	d15,#8
	st.b	[a4]4,d15
.L5:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    76      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    77  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    78      if (hsslSFR->MFLAGS.B.MAV != 0)
	ld.bu	d15,[a15]26
.L659:
	jz.t	d15:5,.L6
.L660:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    79      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    80          hssl->errorFlags.memoryAccessViolation = 1;
	ld.bu	d15,[a4]4
.L661:
	or	d15,#16
	st.b	[a4]4,d15
.L6:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    81      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    82  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    83      if (hsslSFR->MFLAGS.B.SRIE != 0)
	ld.bu	d15,[a15]26
.L662:
	jz.t	d15:6,.L7
.L663:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    84      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    85          hssl->errorFlags.busAccessError = 1;
	ld.bu	d15,[a4]4
.L664:
	or	d15,#32
	st.b	[a4]4,d15
.L7:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    86      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    87  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    88      if (hsslSFR->MFLAGS.B.PIE1 != 0)
	ld.bu	d15,[a15]26
.L665:
	jz.t	d15:7,.L8
.L666:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    89      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    90          hssl->errorFlags.channelNumberCodeError = 1;
	ld.bu	d15,[a4]4
.L667:
	or	d15,#64
	st.b	[a4]4,d15
.L8:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    91      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    92  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    93      if (hsslSFR->MFLAGS.B.PIE2 != 0)
	ld.bu	d15,[a15]27
.L668:
	jz.t	d15:0,.L9
.L669:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    94      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    95          hssl->errorFlags.dataLengthError = 1;
	ld.bu	d15,[a4]4
.L670:
	or	d15,#128
	st.b	[a4]4,d15
.L9:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    96      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    97  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    98      if (hsslSFR->MFLAGS.B.CRCE != 0)
	ld.bu	d15,[a15]27
.L671:
	jz.t	d15:1,.L10
.L672:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    99      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   100          hssl->errorFlags.crcError = 1;
	ld.bu	d15,[a4]5
.L673:
	or	d15,#1
	st.b	[a4]5,d15
.L10:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   101      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   102  }
	ret
.L313:
	
__IfxHssl_Hssl_checkErrors_function_end:
	.size	IfxHssl_Hssl_checkErrors,__IfxHssl_Hssl_checkErrors_function_end-IfxHssl_Hssl_checkErrors
.L179:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_clearErrorFlags',code,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_clearErrorFlags'
	.align	2
	
	.global	IfxHssl_Hssl_clearErrorFlags

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   103  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   104  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   105  void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl)
; Function IfxHssl_Hssl_clearErrorFlags
.L83:
IfxHssl_Hssl_clearErrorFlags:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   106  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   107      hssl->errorFlags.notAcknowledgeError    = 0;
	mov	d15,#0
	st.h	[a4]4,d15
.L678:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   108      hssl->errorFlags.transactionTagError    = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   109      hssl->errorFlags.timeoutError           = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   110      hssl->errorFlags.unexpectedError        = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   111      hssl->errorFlags.memoryAccessViolation  = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   112      hssl->errorFlags.busAccessError         = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   113      hssl->errorFlags.channelNumberCodeError = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   114      hssl->errorFlags.dataLengthError        = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   115      hssl->errorFlags.crcError               = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   116  }
	ret
.L316:
	
__IfxHssl_Hssl_clearErrorFlags_function_end:
	.size	IfxHssl_Hssl_clearErrorFlags,__IfxHssl_Hssl_clearErrorFlags_function_end-IfxHssl_Hssl_clearErrorFlags
.L184:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_delay',code,cluster('IfxHssl_Hssl_delay')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_delay'
	.align	2
	
	.global	IfxHssl_Hssl_delay

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   117  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   118  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   119  void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct)
; Function IfxHssl_Hssl_delay
.L85:
IfxHssl_Hssl_delay:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   120  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   121      uint32 i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   122      IFX_UNUSED_PARAMETER(hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   123  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   124      for (i = 0; i < 8000; i++)
	lea	a15,7999
.L11:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   125      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   126          __nop();
	nop
.L683:
	loop	a15,.L11
.L684:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   127      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   128  }
	ret
.L318:
	
__IfxHssl_Hssl_delay_function_end:
	.size	IfxHssl_Hssl_delay,__IfxHssl_Hssl_delay_function_end-IfxHssl_Hssl_delay
.L189:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannel',code,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannel'
	.align	2
	
	.global	IfxHssl_Hssl_initChannel

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   129  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   130  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   131  void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig)
; Function IfxHssl_Hssl_initChannel
.L87:
IfxHssl_Hssl_initChannel:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   132  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   133      channel->hssl                = channelConfig->hssl;                /* adding HSSL register pointer to channel handle */
	ld.a	a15,[a5]
.L550:
	st.a	[a4],a15
.L551:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   134      channel->hsct                = channelConfig->hsct;                /* adding HSCT register pointer to channel handle */
	ld.a	a15,[a5]4
.L552:
	st.a	[a4]4,a15
.L553:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   135  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   136      channel->channelId           = channelConfig->channelId;           /* adding channel id to channel handle */
	ld.bu	d15,[a5]8
.L554:
	st.b	[a4]8,d15
.L555:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   137      channel->currentFrameRequest = IfxHssl_Hssl_FrameRequest_noAction; /* default request, no action */
	mov	d15,#5
	st.b	[a4]9,d15
.L556:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   138  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   139      channel->streamingModeOn     = FALSE;                              /* command mode (used in waitAcknowledge function) */
	mov	d15,#0
	st.b	[a4]12,d15
.L557:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   140      channel->streamingMode       = channelConfig->streamingMode;       /* adding streaming mode to channel handle */
	ld.bu	d15,[a5]9
.L558:
	st.b	[a4]10,d15
.L559:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   141      channel->loopBack            = channelConfig->loopBack;            /* adding loopback selection to channel handle */
	ld.bu	d15,[a5]10
.L560:
	st.b	[a4]11,d15
.L561:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   142  }
	ret
.L266:
	
__IfxHssl_Hssl_initChannel_function_end:
	.size	IfxHssl_Hssl_initChannel,__IfxHssl_Hssl_initChannel_function_end-IfxHssl_Hssl_initChannel
.L144:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannelConfig',code,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannelConfig'
	.align	2
	
	.global	IfxHssl_Hssl_initChannelConfig

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   143  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   144  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   145  void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct)
; Function IfxHssl_Hssl_initChannelConfig
.L89:
IfxHssl_Hssl_initChannelConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   146  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   147      channelConfig->hssl          = hssl->hssl;
	ld.a	a15,[a5]
.L566:
	st.a	[a4],a15
.L567:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   148      channelConfig->hsct          = hsct->hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   149  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   150      channelConfig->channelId     = IfxHssl_ChannelId_0;          /* default channel 0 */
	mov	d15,#0
.L568:
	ld.a	a15,[a6]
.L569:
	st.a	[a4]4,a15
.L570:
	st.b	[a4]8,d15
.L571:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   151      channelConfig->streamingMode = IfxHssl_StreamingMode_single; /* default streaming mode continuous */
	mov	d15,#1
	st.b	[a4]9,d15
.L572:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   152      channelConfig->loopBack      = hsct->loopBack;
	ld.bu	d15,[a6]4
.L573:
	st.b	[a4]10,d15
.L574:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   153      hssl->loopBack               = hsct->loopBack;               /* copy to hssl handle, used in trasfer apis */
	ld.bu	d15,[a6]4
.L575:
	st.b	[a5]6,d15
.L576:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   154  }
	ret
.L271:
	
__IfxHssl_Hssl_initChannelConfig_function_end:
	.size	IfxHssl_Hssl_initChannelConfig,__IfxHssl_Hssl_initChannelConfig_function_end-IfxHssl_Hssl_initChannelConfig
.L149:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModule',code,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModule'
	.align	2
	
	.global	IfxHssl_Hssl_initHsctModule

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   155  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   156  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   157  void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config)
; Function IfxHssl_Hssl_initHsctModule
.L91:
IfxHssl_Hssl_initHsctModule:	.type	func
	mov.aa	a15,a5
.L360:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   158  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   159      Ifx_HSCT *hsctSFR = config->hsct;   /* pointer to HSCT registers */
	ld.a	a13,[a15]
.L361:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   160  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   161      hsct->hsct     = hsctSFR;           /* adding HSCT register pointer to module handle */
	st.a	[a4],a13
.L219:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	mov	d4,#2
.L220:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   162      hsct->loopBack = config->loopBack;  /* adding loopback selection to module handle */
	ld.bu	d15,[a15]6
.L449:
	st.b	[a4]4,d15
.L229:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	mov	d5,#0
.L450:
	ld.w	d15,.1.cnt
	mov.a	a12,d15
.L451:
	mov.aa	a4,a12
.L351:
	call	IfxPort_setPinMode
.L230:
	mov	d4,#3
	mov.aa	a4,a12
	mov	d5,#0
	call	IfxPort_setPinMode
.L231:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	mov	d4,#4
	mov.aa	a4,a12
	mov	d5,#128
	call	IfxPort_setPinMode
.L233:
	mov	d4,#5
	mov.aa	a4,a12
	mov	d5,#128
	call	IfxPort_setPinMode
.L243:
	ld.w	d15,.2.cnt
.L452:
	mov.a	a12,d15
.L244:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   163  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   164  #ifndef IFXHSSL_HSCT_DISABLE_PINCONFIG
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   165      /* Pad initialisiation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   166      IfxPort_setPinModeInput(&MODULE_P21, 2, IfxPort_InputMode_noPullDevice);                          /* RXDN */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   167      IfxPort_setPinModeInput(&MODULE_P21, 3, IfxPort_InputMode_noPullDevice);                          /* RXDP */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   168      IfxPort_setPinModeOutput(&MODULE_P21, 4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general); /* TXDN */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   169      IfxPort_setPinModeOutput(&MODULE_P21, 5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general); /* TXDP */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   170  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   171      /* select the clock direction */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   172      if (config->interfaceMode == IfxHssl_InterfaceMode_master)
	ld.bu	d15,[a15]4
.L453:
	jne	d15,#0,.L12
.L246:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	mov	d4,#0
	mov.aa	a4,a12
	mov	d5,#168
	call	IfxPort_setPinMode
.L247:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   173      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   174          IfxPort_setPinModeOutput(&MODULE_P20, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_alt5); /* CLKOUT */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   175  #ifdef IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   176          IfxPort_setPinPadDriver(&MODULE_P20, 0, IfxPort_PadDriver_cmosAutomotiveSpeed2);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   177  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   178          IfxPort_setPinPadDriver(&MODULE_P20, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
	mov	d4,#0
	mov.aa	a4,a12
	mov	d5,d4
	call	IfxPort_setPinPadDriver
.L454:
	j	.L13
.L12:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	mov	d4,#0
	mov.aa	a4,a12
	mov	d5,#8
	call	IfxPort_setPinMode

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   179  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   180      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   181      else
.L13:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   182      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   183          IfxPort_setPinModeInput(&MODULE_P20, 0, IfxPort_InputMode_pullDown); /* CLKIN */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   184      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   185  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   186      if (config->loopBack == FALSE)
	ld.bu	d15,[a15]6
.L455:
	jne	d15,#0,.L14
.L248:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   187      /* LVDS configuration */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   188      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   189          uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L352:
	mov	d8,d2
.L354:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   190          IfxScuWdt_clearCpuEndinit(psw);         /* clears the endinit protection */
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L353:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   191  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   192          P21_LPCR1.B.REN_CTRL = 1;
	ld.w	d15,.3.cnt
.L456:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   193          P21_LPCR1.B.RX_EN    = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   194  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   195          P21_LPCR2.B.TEN_CTRL = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   196          P21_LPCR2.B.TX_EN    = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   197          P21_LPCR2.B.TX_PD    = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   198          P21_LPCR1.B.LVDSM    = 0;     /* Setting P21 to LVDS-H mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   199  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   200          IfxScuWdt_setCpuEndinit(psw); /* sets the endinit protection back on */
	mov	d4,d8
.L355:
	mov.a	a2,d15
	ld.bu	d15,[a2]
.L457:
	or	d15,#1
	st.b	[a2],d15
.L458:
	ld.bu	d15,[a2]
.L459:
	or	d15,#2
	st.b	[a2],d15
.L460:
	ld.w	d15,.4.cnt
	mov.a	a4,d15
	ld.bu	d15,[a4]
.L461:
	or	d15,#1
	st.b	[a4],d15
.L462:
	ld.bu	d15,[a4]
.L463:
	or	d15,#2
	st.b	[a4],d15
.L464:
	ld.bu	d15,[a4]
.L465:
	insert	d15,d15,#0,#6,#1
	st.b	[a4],d15
.L466:
	ld.bu	d15,[a2]
.L467:
	insert	d15,d15,#0,#6,#1
	st.b	[a2],d15
.L468:
	call	IfxScuWdt_setCpuEndinit
.L14:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   201      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   202  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   203  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   204  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   205      /* HSCT initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   206      IfxHssl_enableHsctModule(hsctSFR);                                          /* enabling the HSCT module */
	mov.aa	a4,a13
.L356:
	call	IfxHssl_enableHsctModule
.L357:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   207  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   208      hsctSFR->IRQCLR.B.TXTECLR = 1;                                              /* due to AI */
	ld.bu	d15,[a13]73
.L469:
	or	d15,#4
	st.b	[a13]73,d15
.L470:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   209  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   210      /* slave interface initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   211      if (config->interfaceMode == IfxHssl_InterfaceMode_slave)                   /* slave mode initialisation */
	ld.bu	d15,[a15]4
.L471:
	jne	d15,#1,.L15
.L472:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   212      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   213          hsctSFR->INIT.B.IFM        = IfxHssl_InterfaceMode_slave;               /* slave mode */
	ld.bu	d15,[a13]16
.L473:
	or	d15,#8
	fcall	.cocofun_8
.L474:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   214          hsctSFR->INIT.B.SYS_CLK_EN = 0;                                         /* disabling the system clock */
	insert	d15,d15,#0,#1,#1
	fcall	.cocofun_7
.L475:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   215  #ifdef IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   216          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_10Mhz;           /* Reference Clock Frequency rate 10 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   217  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   218          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_20Mhz;           /* Reference Clock Frequency rate 20 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   219  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   220  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   221  #ifdef IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   222          hsctSFR->INIT.B.SSCF     = IfxHssl_SysClockDivider_2;                   /* SysClk divider 1/2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   223  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   224          hsctSFR->INIT.B.SSCF     = IfxHssl_SysClockDivider_1;                   /* SysClk divider 1/1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   225  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   226          hsctSFR->CONFIGPHY.B.PON = 1;                                           /* Peripheral power on */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   227  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   228          hsctSFR->DISABLE.U       = 0;
	mov	d15,#0
	st.w	[a13]32,d15
.L476:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   229      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   230  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   231      /* master interface initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   232      else                                                                        /* master mode initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   233      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   234          hsctSFR->INIT.B.IFM        = IfxHssl_InterfaceMode_master;              /* master mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   235          hsctSFR->INIT.B.SYS_CLK_EN = 1;                                         /* enabling the system clock */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   236  #ifdef IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   237          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_10Mhz;           /* Reference Clock Frequency rate 10 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   238  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   239          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_20Mhz;           /* Reference Clock Frequency rate 20 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   240  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   241  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   242  #ifdef IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   243          hsctSFR->INIT.B.SSCF       = IfxHssl_SysClockDivider_2;                 /* SysClk divider 1/2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   244  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   245          hsctSFR->INIT.B.SSCF       = IfxHssl_SysClockDivider_1;                 /* SysClk divider 1/1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   246  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   247          hsctSFR->CONFIGPHY.B.PON   = 1;                                         /* Peripheral power on */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   248          hsctSFR->IFCTRL.B.MTXSPEED = IfxHssl_MasterModeTxSpeed_lowSpeed;        /* Tx low speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   249          hsctSFR->IFCTRL.B.MRXSPEED = IfxHssl_MasterModeRxSpeed_lowSpeed;        /* Rx low speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   250  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   251          /* change from low speed to high speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   252          if (config->highSpeedMode)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   253          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   254              hsctSFR->IFCTRL.B.MTXSPEED = IfxHssl_MasterModeTxSpeed_highSpeed;      /* Tx high speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   255              hsctSFR->IFCTRL.B.MRXSPEED = IfxHssl_MasterModeRxSpeed_highSpeed;      /* Rx high speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   256          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   257  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   258          hsctSFR->DISABLE.U = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   259  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   260          while (hsctSFR->STATPHY.B.PLOCK == 0)                                      /* wait until pll is locked */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   261          {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   262      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   263  }
	ret
.L15:
	ld.bu	d15,[a13]16
.L477:
	insert	d15,d15,#0,#3,#1
	fcall	.cocofun_8
.L478:
	or	d15,#2
	fcall	.cocofun_7
.L479:
	ld.bu	d15,[a13]22
.L480:
	insert	d15,d15,#0,#2,#2
	st.b	[a13]22,d15
.L481:
	ld.bu	d15,[a13]22
.L482:
	insert	d15,d15,#0,#0,#2
	st.b	[a13]22,d15
.L483:
	ld.bu	d15,[a15]5
.L484:
	jeq	d15,#0,.L17
.L485:
	ld.bu	d15,[a13]22
.L486:
	insert	d15,d15,#2,#2,#2
	st.b	[a13]22,d15
.L487:
	ld.bu	d15,[a13]22
.L488:
	insert	d15,d15,#2,#0,#2
	st.b	[a13]22,d15
.L17:
	mov	d15,#0
	st.w	[a13]32,d15
.L18:
	ld.bu	d15,[a13]52
.L489:
	jz.t	d15:0,.L18
.L490:
	ret
.L210:
	
__IfxHssl_Hssl_initHsctModule_function_end:
	.size	IfxHssl_Hssl_initHsctModule,__IfxHssl_Hssl_initHsctModule_function_end-IfxHssl_Hssl_initHsctModule
.L124:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.IfxHssl_Hssl..cocofun_8'
	.align	2
; Function .cocofun_8
.L93:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:1
	st.b	[a13]16,d15
.L743:
	ld.bu	d15,[a13]16
.L744:
	fret
.L209:
	; End of function
	.sdecl	'.text.IfxHssl_Hssl..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.IfxHssl_Hssl..cocofun_7'
	.align	2
; Function .cocofun_7
.L95:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	fcall	.cocofun_8
.L358:
	insert	d15,d15,#1,#4,#2
.L738:
	fcall	.cocofun_8
.L735:
	insert	d15,d15,#0,#6,#2
	st.b	[a13]16,d15
.L736:
	ld.bu	d15,[a13]48
.L737:
	or	d15,#1
	st.b	[a13]48,d15
.L359:
	fret
.L204:
	; End of function
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModuleConfig',code,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModuleConfig'
	.align	2
	
	.global	IfxHssl_Hssl_initHsctModuleConfig

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   264  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   265  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   266  void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct)
; Function IfxHssl_Hssl_initHsctModuleConfig
.L97:
IfxHssl_Hssl_initHsctModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   267  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   268      config->hsct = hsct;
	st.a	[a4],a5
.L495:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   269  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   270      /* interface mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   271      config->interfaceMode = IfxHssl_InterfaceMode_master;
	mov	d15,#0
	st.b	[a4]4,d15
.L496:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   272  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   273      /* high speed mode disabled */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   274      config->highSpeedMode = FALSE;
	st.b	[a4]5,d15
.L497:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   275  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   276      config->loopBack      = FALSE; /* default with out loopback */
	st.b	[a4]6,d15
.L498:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   277  }
	ret
.L251:
	
__IfxHssl_Hssl_initHsctModuleConfig_function_end:
	.size	IfxHssl_Hssl_initHsctModuleConfig,__IfxHssl_Hssl_initHsctModuleConfig_function_end-IfxHssl_Hssl_initHsctModuleConfig
.L129:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModule',code,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModule'
	.align	2
	
	.global	IfxHssl_Hssl_initHsslModule

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   278  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   279  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   280  void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config)
; Function IfxHssl_Hssl_initHsslModule
.L99:
IfxHssl_Hssl_initHsslModule:	.type	func
	mov.aa	a15,a5
.L364:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   281  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   282      Ifx_HSSL *hsslSFR = config->hssl;                                   /* pointer to HSSL registers */
	ld.a	a12,[a15]
.L365:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   283  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   284      hssl->hssl = hsslSFR;                                               /* adding HSSL register pointer to module handle */
	st.a	[a4],a12
.L503:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   285  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   286      /* HSSL initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   287      IfxHssl_enableHsslModule(hsslSFR);                                  /* enabling the HSSL module */
	mov.aa	a4,a12
.L363:
	call	IfxHssl_enableHsslModule
.L362:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   288      hsslSFR->CFG.B.PREDIV = config->preDivider;                         /* predivivder */
	ld.hu	d15,[a12]16
.L504:
	ld.hu	d0,[a15]36
.L505:
	insert	d15,d15,d0,#0,#14
	st.h	[a12]16,d15
.L506:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   289      hsslSFR->CFG.B.SCM    = 0;                                          /* command mode */
	ld.bu	d15,[a12]18
.L507:
	insert	d15,d15,#0,#2,#1
	st.b	[a12]18,d15
.L508:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   290  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   291      /* Access windows */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   292      hsslSFR->AW[0].AWSTART.U = config->accessWindow0.start;             /* start of access window */
	ld.w	d15,[a15]4
.L509:
	st.w	[a12]192,d15
.L510:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   293      hsslSFR->AW[0].AWEND.U   = config->accessWindow0.end;               /* end of access window */
	ld.w	d15,[a15]8
.L511:
	st.w	[a12]196,d15
.L512:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   294      hsslSFR->AW[1].AWSTART.U = config->accessWindow1.start;             /* start of access window */
	ld.w	d15,[a15]12
.L513:
	st.w	[a12]200,d15
.L514:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   295      hsslSFR->AW[1].AWEND.U   = config->accessWindow1.end;               /* end of access window */
	ld.w	d15,[a15]16
.L515:
	st.w	[a12]204,d15
.L516:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   296      hsslSFR->AW[2].AWSTART.U = config->accessWindow2.start;             /* start of access window */
	ld.w	d15,[a15]20
.L517:
	st.w	[a12]208,d15
.L518:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   297      hsslSFR->AW[2].AWEND.U   = config->accessWindow2.end;               /* end of access window */
	ld.w	d15,[a15]24
.L519:
	st.w	[a12]212,d15
.L520:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   298      hsslSFR->AW[3].AWSTART.U = config->accessWindow3.start;             /* start of access window */
	ld.w	d15,[a15]28
.L521:
	st.w	[a12]216,d15
.L522:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   299      hsslSFR->AW[3].AWEND.U   = config->accessWindow3.end;               /* end of access window */
	ld.w	d15,[a15]32
.L523:
	st.w	[a12]220,d15
.L524:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   300  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   301      hsslSFR->AR.U            = 0x000000ff;                              /* allow read/write access for all windows */
	mov	d15,#255
.L525:
	st.w	[a12]224,d15
.L526:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   302  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   303      hsslSFR->MFLAGSCL.B.INIC = 1;                                       /* chnage into run mode */
	ld.bu	d15,[a12]35
.L527:
	or	d15,#128
	st.b	[a12]35,d15
.L528:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   304      hsslSFR->TIDADD.U        = (Ifx_UReg_32Bit)IFXHSSL_JTAG_ID_ADDRESS; /* Writing JTAG_ID of the device to TIDADD.This'll be used in the response when the other device queries for ID */
	ld.w	d15,.5.cnt
.L529:
	st.w	[a12]148,d15

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   305  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   306      while (hsslSFR->MFLAGS.B.INI)                                       /* wait until the mode changes */
.L19:
	ld.bu	d15,[a12]27
.L530:
	jnz.t	d15:7,.L19
.L531:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   307      {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   308  }
	ret
.L255:
	
__IfxHssl_Hssl_initHsslModule_function_end:
	.size	IfxHssl_Hssl_initHsslModule,__IfxHssl_Hssl_initHsslModule_function_end-IfxHssl_Hssl_initHsslModule
.L134:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModuleConfig',code,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModuleConfig'
	.align	2
	
	.global	IfxHssl_Hssl_initHsslModuleConfig

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   309  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   310  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   311  void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl)
; Function IfxHssl_Hssl_initHsslModuleConfig
.L101:
IfxHssl_Hssl_initHsslModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   312  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   313      config->hssl = hssl;
	st.a	[a4],a5
.L536:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   314  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   315      /* Access windows */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   316      config->accessWindow0.start = 0x00000000; /* start of access window */
	mov	d15,#0
	st.w	[a4]4,d15
.L537:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   317      config->accessWindow0.end   = 0xffffffff; /* end of access window */
	mov	d0,#-1
	lea	a15,[a4]8
	st.w	[a15+],d0
.L538:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   318      config->accessWindow1.start = 0x00000000; /* start of access window */
	st.w	[a15+],d15
.L539:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   319      config->accessWindow1.end   = 0xffffffff; /* end of access window */
	st.w	[a15+],d0
.L540:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   320      config->accessWindow2.start = 0x00000000; /* start of access window */
	st.w	[a15+],d15
.L541:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   321      config->accessWindow2.end   = 0xffffffff; /* end of access window */
	st.w	[a15+],d0
.L542:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   322      config->accessWindow3.start = 0x00000000; /* start of access window */
	st.w	[a15+],d15
.L543:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   323      config->accessWindow3.end   = 0xffffffff; /* end of access window */
	st.w	[a15+],d0
.L544:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   324  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   325      /* predivider */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   326      config->preDivider = 256;
	mov	d15,#256
	st.h	[a4]36,d15
.L545:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   327  }
	ret
.L262:
	
__IfxHssl_Hssl_initHsslModuleConfig_function_end:
	.size	IfxHssl_Hssl_initHsslModuleConfig,__IfxHssl_Hssl_initHsslModuleConfig_function_end-IfxHssl_Hssl_initHsslModuleConfig
.L139:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_prepareStream',code,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_prepareStream'
	.align	2
	
	.global	IfxHssl_Hssl_prepareStream

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   328  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   329  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   330  IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count)
; Function IfxHssl_Hssl_prepareStream
.L103:
IfxHssl_Hssl_prepareStream:	.type	func
	mov.aa	a15,a4
.L368:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   331  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   332      IfxHssl_ChannelId channelId = channel->channelId;
	mov	d6,d4
	ld.bu	d15,[a15]8
.L369:
	mov	d8,d5
.L370:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   333      Ifx_HSSL_TS_FC    tsfcReg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   334  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   335      if (channelId == IfxHssl_ChannelId_2)
	jeq	d15,#2,.L20
.L689:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   336      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   337          return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   338      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   339  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   340      /* target start address to memeroy block 0 on target device (writing into HSSL_TSSA0 of the target) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   341      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->TS.SA[0], slaveTargetAddress, IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L367:
	mov	d7,d4
.L690:
	add	d5,d15,#176
	call	IfxHssl_Hssl_singleFrameRequest
.L366:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   342  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   343      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L21
.L22:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   344      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   345          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L371:
	call	IfxHssl_Hssl_waitAcknowledge
.L372:
	jeq	d2,#2,.L23
.L21:
	mov.aa	a4,a15
.L373:
	call	IfxHssl_Hssl_waitAcknowledge
.L374:
	jne	d2,#0,.L22
.L691:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   346          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   347              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   348          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   349      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   350  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   351      /* Precautionary measure on target for any last streaming interruption */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   352      /* Read count register on the target */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   353      IfxHssl_Hssl_read(channel, (uint32)&channel->hssl->TS.FC, IfxHssl_DataLength_32bit);
	ld.w	d15,[a15]
.L692:
	mov	d5,#2
	mov.aa	a4,a15
.L375:
	add	d4,d15,#188
	call	IfxHssl_Hssl_read
.L376:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   354  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   355      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L24
.L25:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   356      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   357          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L377:
	call	IfxHssl_Hssl_waitAcknowledge
.L378:
	jeq	d2,#2,.L26
.L24:
	mov.aa	a4,a15
.L379:
	call	IfxHssl_Hssl_waitAcknowledge
.L380:
	jne	d2,#0,.L25
.L329:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	ld.a	a2,[a15]
.L693:
	ld.bu	d15,[a15]8
.L330:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   358          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   359              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   360          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   361      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   362  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   363      tsfcReg.U          = IfxHssl_Hssl_getReadData(channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   364      tsfcReg.B.RELCOUNT = tsfcReg.B.CURCOUNT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   365      /* Set the RELCOUNT equal to CURCOUNT on the target */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   366      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->TS.FC, count, IfxHssl_DataLength_16bit);
	mov	d6,d8
.L335:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	sha	d15,#4
.L694:
	addsc.a	a4,a2,d15,#0
.L336:
	mov	d4,#2
	lea	a2,[a2]188
	mov.d	d5,a2
.L695:
	mov	d7,#1

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   796      return hsslI->IRD.U;    /* retutn the data read from the data register */
	ld.w	d15,[a4]60
.L382:
	mov.aa	a4,a15
.L384:
	call	IfxHssl_Hssl_singleFrameRequest
.L381:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   367  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   368      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L27
.L28:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   369      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   370          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L385:
	call	IfxHssl_Hssl_waitAcknowledge
.L386:
	jeq	d2,#2,.L29
.L27:
	mov.aa	a4,a15
.L387:
	call	IfxHssl_Hssl_waitAcknowledge
.L388:
	jne	d2,#0,.L28
.L696:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   371          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   372              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   373          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   374      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   375  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   376      /* Disable the streaming on the target */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   377      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->MFLAGSCL, (1 << IFX_HSSL_MFLAGSCL_TSEC_OFF), IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L383:
	mov	d7,d4
	mov.aa	a4,a15
.L389:
	add	d5,d15,#32
.L697:
	movh	d6,#4096
	call	IfxHssl_Hssl_singleFrameRequest
.L390:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   378  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   379      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L30
.L31:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   380      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   381          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L391:
	call	IfxHssl_Hssl_waitAcknowledge
.L392:
	jeq	d2,#2,.L32
.L30:
	mov.aa	a4,a15
.L393:
	call	IfxHssl_Hssl_waitAcknowledge
.L394:
	jne	d2,#0,.L31
.L698:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   382          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   383              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   384          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   385      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   386  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   387      /* memory count into target reload count register on target device */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   388      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->TS.FC, count, IfxHssl_DataLength_16bit);
	mov	d6,d8
	ld.w	d15,[a15]
.L395:
	mov	d4,#2
	mov.aa	a4,a15
.L397:
	add	d5,d15,#188
.L699:
	mov	d7,#1
	call	IfxHssl_Hssl_singleFrameRequest
.L396:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   389  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   390      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L33
.L34:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   391      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   392          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L398:
	call	IfxHssl_Hssl_waitAcknowledge
.L399:
	jeq	d2,#2,.L35
.L33:
	mov.aa	a4,a15
.L400:
	call	IfxHssl_Hssl_waitAcknowledge
.L401:
	jne	d2,#0,.L34
.L700:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   393          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   394              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   395          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   396      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   397  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   398      /* incase of transfers between two different devices (loopback off) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   399      if (!channel->loopBack)
	ld.bu	d15,[a15]11
.L701:
	jne	d15,#0,.L36
.L702:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   400      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   401          /* Get the target configuration */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   402          IfxHssl_Hssl_read(channel, (uint32)&channel->hssl->CFG, IfxHssl_DataLength_32bit);
	ld.w	d15,[a15]
.L703:
	mov	d5,#2
	mov.aa	a4,a15
.L402:
	add	d4,d15,#16
	call	IfxHssl_Hssl_read
.L403:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   403  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   404          while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L37
.L38:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   405          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   406              if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L404:
	call	IfxHssl_Hssl_waitAcknowledge
.L405:
	jeq	d2,#2,.L39
.L37:
	mov.aa	a4,a15
.L406:
	call	IfxHssl_Hssl_waitAcknowledge
.L407:
	jne	d2,#0,.L38
.L337:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	ld.a	a2,[a15]
.L704:
	ld.bu	d15,[a15]8
.L338:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   407              {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   408                  return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   409              }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   410          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   411  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   412          /* Check if the target streaming is enabled */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   413          if ((IfxHssl_Hssl_getReadData(channel) & (0x00070100)) != 0x00070100)
	ld.w	d6,.6.cnt
.L340:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	sha	d15,#4
.L705:
	addsc.a	a2,a2,d15,#0
.L706:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   796      return hsslI->IRD.U;    /* retutn the data read from the data register */
	ld.w	d15,[a2]60
.L341:
	and	d15,d6
.L707:
	jeq	d15,d6,.L40
.L708:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   414          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   415              /* enable streaming mode (single) of channel 2 on target device */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   416              IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->CFG, 0x00070100, IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L709:
	mov	d7,d4
	mov.aa	a4,a15
.L408:
	add	d5,d15,#16
	call	IfxHssl_Hssl_singleFrameRequest
.L409:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   417  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   418              while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L41
.L42:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   419              {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   420                  if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L410:
	call	IfxHssl_Hssl_waitAcknowledge
.L411:
	jeq	d2,#2,.L43
.L41:
	mov.aa	a4,a15
.L412:
	call	IfxHssl_Hssl_waitAcknowledge
.L413:
	jne	d2,#0,.L42
.L40:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   421                  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   422                      return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   423                  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   424              }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   425          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   426  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   427          /* enable streaming on target device */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   428          IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->MFLAGSSET, 0x10000000, IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L710:
	mov	d7,d4
	mov.aa	a4,a15
.L414:
	add	d5,d15,#28
.L711:
	movh	d6,#4096
	call	IfxHssl_Hssl_singleFrameRequest
.L415:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   429  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   430          while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L44
.L45:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   431          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   432              if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L416:
	call	IfxHssl_Hssl_waitAcknowledge
.L417:
	jne	d2,#2,.L46

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   433              {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   434                  return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   435              }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   436          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   437      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   438  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   439      channel->streamingModeOn = TRUE;    /* for waitAcknowledge function */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   440      /* preperation was successful */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   441      return IfxHssl_Hssl_Status_ok;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   442  }
.L43:
.L39:
.L35:
.L32:
.L29:
.L26:
.L23:
.L20:
	mov	d2,#2
	ret
.L46:
.L44:
	mov.aa	a4,a15
.L418:
	call	IfxHssl_Hssl_waitAcknowledge
.L419:
	jne	d2,#0,.L45
.L36:
	mov	d15,#1
	st.b	[a15]12,d15
.L712:
	ret
.L321:
	
__IfxHssl_Hssl_prepareStream_function_end:
	.size	IfxHssl_Hssl_prepareStream,__IfxHssl_Hssl_prepareStream_function_end-IfxHssl_Hssl_prepareStream
.L194:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_read',code,cluster('IfxHssl_Hssl_read')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_read'
	.align	2
	
	.global	IfxHssl_Hssl_read

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   443  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   444  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   445  IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength)
; Function IfxHssl_Hssl_read
.L105:
IfxHssl_Hssl_read:	.type	func
	mov	d15,d4
.L422:
	mov	d7,d5
.L423:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   446  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   447      uint32 data = 0;                                                                                                 /* not required, data will be read back */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   448      return IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_readFrame, address, data, dataLength); /* initiate the read request */
	mov	d4,#1
.L420:
	mov	d6,#0
.L581:
	mov	d5,d15
.L421:
	j	IfxHssl_Hssl_singleFrameRequest
.L277:
	
__IfxHssl_Hssl_read_function_end:
	.size	IfxHssl_Hssl_read,__IfxHssl_Hssl_read_function_end-IfxHssl_Hssl_read
.L154:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_sendControlCommand',code,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_sendControlCommand'
	.align	2
	
	.global	IfxHssl_Hssl_sendControlCommand

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   449  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   450  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   451  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   452  void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command)
; Function IfxHssl_Hssl_sendControlCommand
.L107:
IfxHssl_Hssl_sendControlCommand:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   453  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   454      Ifx_HSCT *hsctSFR = hsct->hsct;
	ld.a	a15,[a4]
.L424:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   455  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   456      hsctSFR->IFCTRL.B.IFCVS = command; /* write the command into the register */
	st.b	[a15]20,d4
.L586:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   457      hsctSFR->IFCTRL.B.SIFCV = 1;       /* activate the command */
	ld.bu	d15,[a15]21
.L587:
	or	d15,#1
	st.b	[a15]21,d15
.L588:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   458  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   459      IfxHssl_Hssl_delay(hsct);          /* wait until the change happens */
	j	IfxHssl_Hssl_delay
.L283:
	
__IfxHssl_Hssl_sendControlCommand_function_end:
	.size	IfxHssl_Hssl_sendControlCommand,__IfxHssl_Hssl_sendControlCommand_function_end-IfxHssl_Hssl_sendControlCommand
.L159:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_singleFrameRequest',code,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_singleFrameRequest'
	.align	2
	
	.global	IfxHssl_Hssl_singleFrameRequest

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   460  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   461  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   462  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   463  IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength)
; Function IfxHssl_Hssl_singleFrameRequest
.L109:
IfxHssl_Hssl_singleFrameRequest:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   464  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   465      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	ld.a	a15,[a4]
.L593:
	ld.bu	d15,[a4]8
	sha	d15,#4
.L594:
	addsc.a	a15,a15,d15,#0
.L595:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   466  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   467      if (channel->currentFrameRequest != IfxHssl_Hssl_FrameRequest_noAction)
	ld.bu	d15,[a4]9
.L596:
	lea	a15,[a15]48
.L425:
	jeq	d15,#5,.L50
.L597:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   468      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   469          return IfxHssl_Hssl_Status_busy;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   470      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   471  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   472      hsslI->ICON.B.DATLEN = dataLength;               /* 0x2 -> word size */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   473      hsslI->ICON.B.TOREL  = 0xff;                     /* max reload value */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   474  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   475      switch (frameRequest)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   476      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   477      case IfxHssl_Hssl_FrameRequest_readFrame:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   478          hsslI->ICON.B.RWT = IfxHssl_Command_readFrame;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   479          hsslI->IRWA.U     = address;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   480          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   481      case IfxHssl_Hssl_FrameRequest_writeFrame:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   482          hsslI->ICON.B.RWT = IfxHssl_Command_writeFrame;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   483          hsslI->IWD.U      = data;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   484          hsslI->IRWA.U     = address;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   485          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   486      case IfxHssl_Hssl_FrameRequest_triggerFrame:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   487          hsslI->ICON.B.RWT = IfxHssl_Command_triggerFrame;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   488          hsslI->IWD.U      = data;    /* dummy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   489          hsslI->IRWA.U     = address; /* dummy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   490          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   491      case IfxHssl_Hssl_FrameRequest_readId:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   492          /* request an ID frame  */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   493          hsslI->ICON.B.IDQ = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   494          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   495      default:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   496          /* invalid request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   497          return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   498      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   499  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   500      channel->currentFrameRequest = frameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   501  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   502      return IfxHssl_Hssl_Status_ok;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   503  }
	mov	d2,#1
	ret
.L50:
	ld.bu	d15,[a15]6
.L598:
	insert	d15,d15,d7,#0,#2
	st.b	[a15]6,d15
.L599:
	mov	d15,#255
	st.b	[a15]7,d15
.L600:
	jeq	d4,#1,.L52
.L601:
	mov	d2,#2
	jeq	d4,#2,.L53
.L602:
	jeq	d4,#3,.L54
.L603:
	jeq	d4,#4,.L55
.L604:
	ret
.L52:
	ld.bu	d15,[a15]6
.L605:
	insert	d15,d15,#1,#2,#2
	st.b	[a15]6,d15
.L606:
	j	.L57
.L53:
	ld.bu	d15,[a15]6
.L607:
	insert	d15,d15,#2,#2,#2
	j	.L58
.L54:
	ld.bu	d15,[a15]6
.L608:
	or	d15,#12
.L58:
	st.b	[a15]6,d15
.L609:
	st.w	[a15],d6
.L57:
	st.w	[a15]8,d5
.L610:
	j	.L59
.L55:
	ld.bu	d15,[a15]4
.L611:
	or	d15,#1
	st.b	[a15]4,d15
.L59:
	st.b	[a4]9,d4
.L612:
	mov	d2,#0
	ret
.L288:
	
__IfxHssl_Hssl_singleFrameRequest_function_end:
	.size	IfxHssl_Hssl_singleFrameRequest,__IfxHssl_Hssl_singleFrameRequest_function_end-IfxHssl_Hssl_singleFrameRequest
.L164:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_waitAcknowledge',code,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_waitAcknowledge'
	.align	2
	
	.global	IfxHssl_Hssl_waitAcknowledge

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   504  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   506  IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel)
; Function IfxHssl_Hssl_waitAcknowledge
.L111:
IfxHssl_Hssl_waitAcknowledge:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   507  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   508      uint32            requestType = channel->currentFrameRequest;
	ld.bu	d15,[a4]9
.L617:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   509      IfxHssl_ChannelId channelId   = channel->channelId;
	ld.bu	d4,[a4]8
.L618:
	mov	d0,d15
.L426:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   510  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   511      if ((channelId == IfxHssl_ChannelId_2) && (channel->hssl->CFG.B.SCM == 1))
	jne	d4,#2,.L63
.L619:
	ld.a	a15,[a4]
.L620:
	ld.bu	d1,[a15]18
.L621:
	jz.t	d1:2,.L64

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   512      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   513          while (channel->hssl->MFLAGS.B.ISB)
.L65:
	ld.bu	d15,[a15]26
.L622:
	jnz.t	d15:4,.L65
.L623:
	j	.L66
.L64:
.L63:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   514          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   515              /* transfer in progress */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   516          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   517      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   518      else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   519      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   520          if (channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_writeFrame)
	eq	d1,d15,#2
	ld.a	a15,[a4]
.L624:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   521          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   522              requestType = 1;
	seln	d0,d1,d0,#1
.L625:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   523          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   524  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   525          /* expect a read frame when requestType == IfxHssl_Hssl_FrameRequest_readId */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   526          if ((channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_readFrame) || (channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_readId))
	jeq	d15,#1,.L68
.L626:
	jne	d15,#4,.L69
.L68:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   527          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   528              requestType = 2;
	mov	d0,#2
.L69:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   529          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   530  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   531          if (channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_triggerFrame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   532          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   533              requestType = 3;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   534          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   535  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   536          uint32 qFlags               = channel->hssl->QFLAGS.U;
	eq	d15,d15,#3
	ld.w	d1,[a15]20
.L301:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   537          uint32 mFlags               = channel->hssl->MFLAGS.U;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   538          uint32 acknwoledgeFlagsMask = ((requestType << (16 + (channel->channelId * 2))) | (1 << channel->channelId));
	sha	d2,d4,#1
	ld.w	d5,[a15]24
.L302:
	cmov	d0,d15,#3
.L303:
	add	d2,d2,#16
.L627:
	sh	d0,d0,d2
.L427:
	mov	d2,#1
.L628:
	sha	d2,d2,d4
.L430:
	or	d0,d2
.L629:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   539          uint32 errorFlagsMask       = ((0x03E00000) | (4369 << channel->channelId)); /* all the possible errors */
	mov	d2,#4369
.L630:
	sha	d2,d2,d4
.L631:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   540  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   541          if (channel->hssl->I[channelId].ICON.B.BSY == 1)
	sha	d4,#4
.L632:
	addsc.a	a15,a15,d4,#0
.L633:
	movh	d3,#992
.L634:
	ld.bu	d15,[a15]54
.L431:
	or	d2,d3
.L635:
	jnz.t	d15:4,.L71
.L636:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   542          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   543              return IfxHssl_Hssl_Status_busy;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   544          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   545  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   546          if (qFlags & acknwoledgeFlagsMask)     /* transfer in progress? */
	and	d1,d0
.L428:
	jeq	d1,#0,.L72

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   547          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   548              return IfxHssl_Hssl_Status_busy;   /* return busy status in case of no error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   549          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   550  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   551          if (mFlags & errorFlagsMask)           /* check for errors */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   552          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   553              channel->currentFrameRequest = IfxHssl_Hssl_FrameRequest_noAction;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   554              return IfxHssl_Hssl_Status_error;  /* return error status in case of an error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   555          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   556  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   557          /* transfer is finished */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   558          channel->currentFrameRequest = IfxHssl_Hssl_FrameRequest_noAction;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   559      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   560  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   561      return IfxHssl_Hssl_Status_ok;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   562  }
.L71:
	mov	d2,#1
	ret
.L72:
	and	d5,d2
.L429:
	jeq	d5,#0,.L74
.L637:
	mov	d15,#5
	st.b	[a4]9,d15
.L638:
	mov	d2,#2
	ret
.L74:
	mov	d15,#5
	st.b	[a4]9,d15
.L66:
	mov	d2,#0
	ret
.L297:
	
__IfxHssl_Hssl_waitAcknowledge_function_end:
	.size	IfxHssl_Hssl_waitAcknowledge,__IfxHssl_Hssl_waitAcknowledge_function_end-IfxHssl_Hssl_waitAcknowledge
.L169:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_write',code,cluster('IfxHssl_Hssl_write')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_write'
	.align	2
	
	.global	IfxHssl_Hssl_write

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   563  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   564  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   565  IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength)
; Function IfxHssl_Hssl_write
.L113:
IfxHssl_Hssl_write:	.type	func
	mov	d15,d4
.L435:
	mov	d0,d5
.L436:
	mov	d7,d6
.L437:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   566  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   567      return IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, address, data, dataLength);
	mov	d4,#2
.L432:
	mov	d5,d15
.L433:
	mov	d6,d0
.L434:
	j	IfxHssl_Hssl_singleFrameRequest
.L308:
	
__IfxHssl_Hssl_write_function_end:
	.size	IfxHssl_Hssl_write,__IfxHssl_Hssl_write_function_end-IfxHssl_Hssl_write
.L174:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_writeStream',code,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_writeStream'
	.align	2
	
	.global	IfxHssl_Hssl_writeStream

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   568  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   570  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   571  IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count)
; Function IfxHssl_Hssl_writeStream
.L115:
IfxHssl_Hssl_writeStream:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   572  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   573      Ifx_HSSL             *hsslSFR       = hssl->hssl;
	ld.a	a15,[a4]
.L438:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   574      Ifx_HSSL_IS          *hsslIS        = (Ifx_HSSL_IS *)&hsslSFR->IS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   575      IfxHssl_StreamingMode streamingMode = IfxHssl_StreamingMode_single;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   576  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   577      /* single memory block streaming */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   578      hsslIS->SA[0].U                              = (uint32)data;  /* initiator start address to memeroy block 0 */
	mov.d	d15,a5
.L439:
	st.w	[a15]160,d15
.L717:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   579  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   580      hsslIS->FC.B.RELCOUNT                        = count;         /* memory count into initiator reload count register */
	st.h	[a15]172,d4
.L718:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   581  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   582      hsslSFR->CFG.B.SCM                           = 1;             /* enable streaming mode of channel 2 on the initiator */
	ld.bu	d15,[a15]18
.L440:
	or	d15,#4
	st.b	[a15]18,d15
.L719:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   583      hsslSFR->CFG.B.SMT                           = streamingMode; /* set transmitter streaming mode ( single / continuous ) on the initiator */
	ld.bu	d15,[a15]18
.L720:
	or	d15,#1
	st.b	[a15]18,d15
.L721:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   584      hsslSFR->CFG.B.SMR                           = streamingMode; /* set receiver streaming mode ( single / continuous ) on the initiator */
	ld.bu	d15,[a15]18
.L722:
	or	d15,#2
	st.b	[a15]18,d15
.L723:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   585      /* streaming is supported only on IfxHssl_ChannelId_2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   586      hsslSFR->I[IfxHssl_ChannelId_2].ICON.B.TOREL = 0xff;          /* set the transmitter reload value to 0xff.*/
	mov	d15,#255
	st.b	[a15]87,d15
.L724:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   587  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   588      /* incase of transfers within the device(loopback on) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   589      if (hssl->loopBack)
	ld.bu	d15,[a4]6
.L725:
	jeq	d15,#0,.L78
.L726:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   590      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   591          hsslSFR->MFLAGSSET.B.TSES = 1; /* enable target */
	ld.bu	d15,[a15]31
.L727:
	or	d15,#16
	st.b	[a15]31,d15
.L78:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   592      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   593  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   594      /* initiate the transfer */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   595      hsslSFR->MFLAGSSET.B.ISBS = 1;
	ld.bu	d15,[a15]30
.L728:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   596  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   597      /* streaming started */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   598      return IfxHssl_Hssl_Status_ok;
	mov	d2,#0
.L729:
	or	d15,#16
	st.b	[a15]30,d15
.L730:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   599  }
	ret
.L342:
	
__IfxHssl_Hssl_writeStream_function_end:
	.size	IfxHssl_Hssl_writeStream,__IfxHssl_Hssl_writeStream_function_end-IfxHssl_Hssl_writeStream
.L199:
	; End of function
	
	.calls	'IfxHssl_Hssl_initHsctModule','IfxPort_setPinMode'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxPort_setPinPadDriver'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxHssl_enableHsctModule'
	.calls	'IfxHssl_Hssl_initHsslModule','IfxHssl_enableHsslModule'
	.calls	'IfxHssl_Hssl_prepareStream','IfxHssl_Hssl_singleFrameRequest'
	.calls	'IfxHssl_Hssl_prepareStream','IfxHssl_Hssl_waitAcknowledge'
	.calls	'IfxHssl_Hssl_prepareStream','IfxHssl_Hssl_read'
	.calls	'IfxHssl_Hssl_read','IfxHssl_Hssl_singleFrameRequest'
	.calls	'IfxHssl_Hssl_sendControlCommand','IfxHssl_Hssl_delay'
	.calls	'IfxHssl_Hssl_write','IfxHssl_Hssl_singleFrameRequest'
	.calls	'IfxHssl_Hssl_initHsctModule','.cocofun_8'
	.calls	'IfxHssl_Hssl_initHsctModule','.cocofun_7'
	.calls	'.cocofun_7','.cocofun_8'
	.calls	'IfxHssl_Hssl_checkErrors','',0
	.calls	'IfxHssl_Hssl_clearErrorFlags','',0
	.calls	'IfxHssl_Hssl_delay','',0
	.calls	'IfxHssl_Hssl_initChannel','',0
	.calls	'IfxHssl_Hssl_initChannelConfig','',0
	.calls	'IfxHssl_Hssl_initHsctModule','',0
	.calls	'.cocofun_8','',0
	.calls	'.cocofun_7','',0
	.calls	'IfxHssl_Hssl_initHsctModuleConfig','',0
	.calls	'IfxHssl_Hssl_initHsslModule','',0
	.calls	'IfxHssl_Hssl_initHsslModuleConfig','',0
	.calls	'IfxHssl_Hssl_prepareStream','',0
	.calls	'IfxHssl_Hssl_read','',0
	.calls	'IfxHssl_Hssl_sendControlCommand','',0
	.calls	'IfxHssl_Hssl_singleFrameRequest','',0
	.calls	'IfxHssl_Hssl_waitAcknowledge','',0
	.calls	'IfxHssl_Hssl_write','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxHssl_enableHsctModule
	.extern	IfxHssl_enableHsslModule
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.calls	'IfxHssl_Hssl_writeStream','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L117:
	.word	63721
	.half	3
	.word	.L118
	.byte	4
.L116:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L119
	.byte	2,1,1,3
	.word	162
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	165
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	210
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	222
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	302
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	276
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	308
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	308
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	276
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5
.L285:
	.byte	7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,11
	.byte	'SRPN',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	417
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	417
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	417
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,4,93,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	434
	.byte	4,2,35,0,0,14
	.word	724
	.byte	3
	.word	763
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1,5
	.byte	'src',0,3,247,1,60
	.word	768
	.byte	6,0,4
	.byte	'IfxSrc_enable',0,3,3,137,2,17,1,1,5
	.byte	'src',0,3,137,2,54
	.word	768
	.byte	6,0,15,5,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,0
.L249:
	.byte	7
	.byte	'unsigned short int',0,2,7,4
	.byte	'IfxSrc_init',0,3,3,143,2,17,1,1,5
	.byte	'src',0,3,143,2,52
	.word	768
	.byte	5
	.byte	'typOfService',0,3,143,2,68
	.word	853
	.byte	5
	.byte	'priority',0,3,143,2,95
	.word	930
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,7,145,3,16,4,11
	.byte	'P0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,171,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1029
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,7,171,2,16,4,11
	.byte	'PS0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,7,251,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1345
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,7,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,155,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1916
	.byte	4,2,35,0,0,18,4
	.word	417
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,7,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	417
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	417
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	417
	.byte	5,0,2,35,3,0,12,7,171,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2045
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,7,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	417
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	417
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	417
	.byte	5,0,2,35,3,0,12,7,187,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2260
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,7,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	417
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	417
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	417
	.byte	5,0,2,35,3,0,12,7,195,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2475
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,7,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	417
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	417
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	417
	.byte	5,0,2,35,3,0,12,7,179,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2692
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,7,141,1,16,4,11
	.byte	'P0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,163,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2912
	.byte	4,2,35,0,0,18,24
	.word	417
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,7,212,3,16,4,11
	.byte	'PD0',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	417
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	417
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	417
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	417
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	417
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	417
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	417
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	417
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	417
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	417
	.byte	2,0,2,35,3,0,12,7,195,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3236
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,7,233,3,16,4,11
	.byte	'PD8',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	417
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	417
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	417
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	417
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	417
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	417
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	417
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	417
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	417
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	417
	.byte	2,0,2,35,3,0,12,7,203,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3540
	.byte	4,2,35,0,0,18,8
	.word	417
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,7,111,16,4,11
	.byte	'EN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,147,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3865
	.byte	4,2,35,0,0,18,12
	.word	417
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,7,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,187,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4205
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,7,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,7,179,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4571
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,7,230,2,16,4,11
	.byte	'PS0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,12,7,139,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4935
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,7,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	394
	.byte	24,0,2,35,0,0,12,7,155,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5082
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,7,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	394
	.byte	20,0,2,35,0,0,12,7,163,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5251
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,7,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	930
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,147,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5423
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,7,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	930
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	930
	.byte	12,0,2,35,2,0,12,7,219,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5598
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,7,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	8,0,2,35,3,0,12,7,235,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5772
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,7,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	417
	.byte	4,0,2,35,3,0,12,7,243,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5946
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,7,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,7,227,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6122
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,7,208,2,16,4,11
	.byte	'PS0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,131,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6278
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,7,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	930
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,7,211,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6611
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,7,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	417
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	417
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,7,203,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6959
	.byte	4,2,35,0,0,18,32
	.word	7239
	.byte	19,7,0,18,56
	.word	417
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,7,105,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,7,139,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7297
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,7,68,16,4,11
	.byte	'EN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,7,131,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7384
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,7,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1305
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	1876
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	1996
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2036
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2220
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	2435
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	2652
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	2872
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2036
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3187
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3227
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	3500
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	3816
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	3856
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4156
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4196
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	4531
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	4895
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	3856
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5042
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5211
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5383
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	5558
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	5732
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	5906
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6082
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6238
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	6571
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	6919
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3856
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7279
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7288
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7344
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	7911
	.byte	4,3,35,252,1,0,14
	.word	7951
	.byte	3
	.word	8521
	.byte	15,6,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0
.L218:
	.byte	4
	.byte	'IfxPort_setPinModeInput',0,3,6,157,5,17,1,1
.L221:
	.byte	5
	.byte	'port',0,6,157,5,48
	.word	8526
.L223:
	.byte	5
	.byte	'pinIndex',0,6,157,5,60
	.word	417
.L225:
	.byte	5
	.byte	'mode',0,6,157,5,88
	.word	8531
.L227:
	.byte	6,0,15,6,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,6,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L232:
	.byte	4
	.byte	'IfxPort_setPinModeOutput',0,3,6,163,5,17,1,1
.L234:
	.byte	5
	.byte	'port',0,6,163,5,49
	.word	8526
.L236:
	.byte	5
	.byte	'pinIndex',0,6,163,5,61
	.word	417
.L238:
	.byte	5
	.byte	'mode',0,6,163,5,90
	.word	8736
.L240:
	.byte	5
	.byte	'index',0,6,163,5,114
	.word	8832
.L242:
	.byte	6,0,15,6,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,6,169,5,17,1,1,5
	.byte	'port',0,6,169,5,44
	.word	8526
	.byte	5
	.byte	'pinIndex',0,6,169,5,56
	.word	417
	.byte	5
	.byte	'action',0,6,169,5,80
	.word	9145
	.byte	6,0
.L279:
	.byte	7
	.byte	'unsigned long int',0,4,7,10
	.byte	'_Ifx_HSSL_CLC_Bits',0,9,149,1,16,4,11
	.byte	'DISR',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,12,9,247,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9347
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_ID_Bits',0,9,167,1,16,4,11
	.byte	'MODREV',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,9,135,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9505
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_CRC_Bits',0,9,159,1,16,4,11
	.byte	'XORMASK',0,2
	.word	930
	.byte	16,0,2,35,0,11
	.byte	'XEN',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	930
	.byte	15,0,2,35,2,0,12,9,255,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9628
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_CFG_Bits',0,9,137,1,16,4,11
	.byte	'PREDIV',0,2
	.word	930
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'SMT',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'SMR',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'SCM',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'CCC',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	930
	.byte	12,0,2,35,2,0,12,9,239,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9751
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_QFLAGS_Bits',0,9,233,2,16,4,11
	.byte	'I',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'T',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'R',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'E0',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'E1',0,1
	.word	417
	.byte	2,4,2,35,2,11
	.byte	'E2',0,1
	.word	417
	.byte	2,2,2,35,2,11
	.byte	'E3',0,1
	.word	417
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	4,4,2,35,3,11
	.byte	'IS',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'RS',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'TS',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'ES',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,9,143,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9941
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGS_Bits',0,9,251,1,16,4,11
	.byte	'NACK',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'TTE',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUT',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTED',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'TMB',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'IMB',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'ISB',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'MAV',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'SRIE',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'PIE1',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'PIE2',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'CRCE',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	2,4,2,35,3,11
	.byte	'TSE',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'TEI',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'TEO',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'INI',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,9,223,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10207
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGSSET_Bits',0,9,187,2,16,4,11
	.byte	'NACKS',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'TTES',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUTS',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTEDS',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'TMBS',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'IMBS',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'ISBS',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'MAVS',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'SRIES',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'PIE1S',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'PIE2S',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'CRCES',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	2,4,2,35,3,11
	.byte	'TSES',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'TEOS',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'INIS',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,9,247,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10578
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGSCL_Bits',0,9,146,2,16,4,11
	.byte	'NACKC',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'TTEC',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUTC',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTEDC',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'TMBC',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'IMBC',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'ISBC',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'MAVC',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'SRIEC',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'PIE1C',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'PIE2C',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'CRCEC',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	2,4,2,35,3,11
	.byte	'TSEC',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'TEOC',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'INIC',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,9,231,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10975
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGSEN_Bits',0,9,169,2,16,4,11
	.byte	'NACKEN',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'TTEEN',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUTEN',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTEDEN',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	5,3,2,35,2,11
	.byte	'MAVEN',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'SRIEEN',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'PIE1EN',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'PIE2EN',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'CRCEEN',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	3,3,2,35,3,11
	.byte	'TEIEN',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	417
	.byte	2,0,2,35,3,0,12,9,239,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11371
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_SFSFLAGS_Bits',0,9,131,3,16,4,11
	.byte	'RXFL',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'TXFL',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'EXFL',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	9,1,2,35,0,11
	.byte	'ISF',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,9,159,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11697
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_IWD_Bits',0,9,223,1,16,4,11
	.byte	'DATA',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,9,191,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11876
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_ICON_Bits',0,9,196,1,16,4,11
	.byte	'IDQ',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'TQ',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'LETT',0,1
	.word	417
	.byte	3,3,2,35,0,11
	.byte	'CETT',0,1
	.word	417
	.byte	3,0,2,35,0,11
	.byte	'TOCV',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'DATLEN',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'RWT',0,1
	.word	417
	.byte	2,4,2,35,2,11
	.byte	'BSY',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'ITTAG',0,1
	.word	417
	.byte	3,0,2,35,2,11
	.byte	'TOREL',0,1
	.word	417
	.byte	8,0,2,35,3,0,12,9,167,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11960
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_IRWA_Bits',0,9,217,1,16,4,11
	.byte	'ADDRESS',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,9,183,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12188
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_IRD_Bits',0,9,211,1,16,4,11
	.byte	'DATA',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,9,175,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12276
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I',0,9,232,5,25,16,13
	.byte	'IWD',0
	.word	11920
	.byte	4,2,35,0,13
	.byte	'ICON',0
	.word	12148
	.byte	4,2,35,4,13
	.byte	'IRWA',0
	.word	12236
	.byte	4,2,35,8,13
	.byte	'IRD',0
	.word	12320
	.byte	4,2,35,12,0,18,64
	.word	12360
	.byte	19,3,0,14
	.word	12433
	.byte	10
	.byte	'_Ifx_HSSL_T_TCD_Bits',0,9,188,3,16,4,11
	.byte	'D',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,9,215,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12447
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_T_TCA_Bits',0,9,182,3,16,4,11
	.byte	'A',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,9,207,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12528
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_T',0,9,253,5,25,8,13
	.byte	'TCD',0
	.word	12488
	.byte	4,2,35,0,13
	.byte	'TCA',0
	.word	12569
	.byte	4,2,35,4,0,18,32
	.word	12609
	.byte	19,3,0,14
	.word	12654
	.byte	10
	.byte	'_Ifx_HSSL_TSTAT_Bits',0,9,148,3,16,4,11
	.byte	'LASTCC0',0,1
	.word	417
	.byte	5,3,2,35,0,11
	.byte	'LASTTT0',0,1
	.word	417
	.byte	3,0,2,35,0,11
	.byte	'LASTCC1',0,1
	.word	417
	.byte	5,3,2,35,1,11
	.byte	'LASTTT1',0,1
	.word	417
	.byte	3,0,2,35,1,11
	.byte	'LASTCC2',0,1
	.word	417
	.byte	5,3,2,35,2,11
	.byte	'LASTTT2',0,1
	.word	417
	.byte	3,0,2,35,2,11
	.byte	'LASTCC3',0,1
	.word	417
	.byte	5,3,2,35,3,11
	.byte	'LASTTT3',0,1
	.word	417
	.byte	3,0,2,35,3,0,12,9,175,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12668
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_TIDADD_Bits',0,9,142,3,16,4,11
	.byte	'A',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,9,167,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12888
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_SEC_Bits',0,9,251,2,16,4,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'LAW',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	394
	.byte	30,0,2,35,0,0,12,9,151,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12970
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MSCR_Bits',0,9,210,2,16,4,11
	.byte	'EN',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'SLAVETAG',0,1
	.word	417
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	930
	.byte	13,0,2,35,0,11
	.byte	'ITXSTOP',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	930
	.byte	15,0,2,35,2,0,12,9,255,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13088
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_IS_SA_Bits',0,9,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	5,3,2,35,0,11
	.byte	'START',0,4
	.word	394
	.byte	27,0,2,35,0,0,12,9,159,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13253
	.byte	4,2,35,0,0,18,8
	.word	13320
	.byte	19,1,0,10
	.byte	'_Ifx_HSSL_IS_CA_Bits',0,9,175,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	5,3,2,35,0,11
	.byte	'CURR',0,4
	.word	394
	.byte	27,0,2,35,0,0,12,9,143,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13369
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_IS_FC_Bits',0,9,182,1,16,4,11
	.byte	'RELCOUNT',0,2
	.word	930
	.byte	16,0,2,35,0,11
	.byte	'CURCOUNT',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,9,151,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13475
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_IS',0,9,144,6,25,16,13
	.byte	'SA',0
	.word	13360
	.byte	8,2,35,0,13
	.byte	'CA',0
	.word	13435
	.byte	4,2,35,8,13
	.byte	'FC',0
	.word	13543
	.byte	4,2,35,12,0,14
	.word	13583
	.byte	10
	.byte	'_Ifx_HSSL_TS_SA_Bits',0,9,175,3,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	394
	.byte	27,0,2,35,0,0,12,9,199,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13644
	.byte	4,2,35,0,0,18,8
	.word	13710
	.byte	19,1,0,10
	.byte	'_Ifx_HSSL_TS_CA_Bits',0,9,161,3,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	5,3,2,35,0,11
	.byte	'CURR',0,4
	.word	394
	.byte	27,0,2,35,0,0,12,9,183,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13759
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_TS_FC_Bits',0,9,168,3,16,4,11
	.byte	'RELCOUNT',0,2
	.word	930
	.byte	16,0,2,35,0,11
	.byte	'CURCOUNT',0,2
	.word	930
	.byte	16,0,2,35,2,0
.L326:
	.byte	12,9,191,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13865
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_TS',0,9,164,6,25,16,13
	.byte	'SA',0
	.word	13750
	.byte	8,2,35,0,13
	.byte	'CA',0
	.word	13825
	.byte	4,2,35,8,13
	.byte	'FC',0
	.word	13933
	.byte	4,2,35,12,0,14
	.word	13973
	.byte	10
	.byte	'_Ifx_HSSL_AW_AWSTART_Bits',0,9,130,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'AWS',0,4
	.word	394
	.byte	24,0,2,35,0,0,12,9,231,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14034
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_AW_AWEND_Bits',0,9,123,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'AWE',0,4
	.word	394
	.byte	24,0,2,35,0,0,12,9,223,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14144
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_AW',0,9,184,6,25,8,13
	.byte	'AWSTART',0
	.word	14104
	.byte	4,2,35,0,13
	.byte	'AWEND',0
	.word	14211
	.byte	4,2,35,4,0,18,32
	.word	14251
	.byte	19,3,0,14
	.word	14303
	.byte	10
	.byte	'_Ifx_HSSL_AR_Bits',0,9,111,16,4,11
	.byte	'ARW0',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'ARW1',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'ARW2',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'ARW3',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'MAVCH',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	930
	.byte	14,0,2,35,2,0,12,9,215,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14317
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_OCS_Bits',0,9,220,2,16,4,11
	.byte	'TGS',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	417
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	417
	.byte	2,0,2,35,3,0,12,9,135,5,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14507
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_KRSTCLR_Bits',0,9,244,1,16,4,11
	.byte	'CLR',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	394
	.byte	31,0,2,35,0,0,12,9,215,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14714
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_KRST1_Bits',0,9,237,1,16,4,11
	.byte	'RST',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	394
	.byte	31,0,2,35,0,0,12,9,207,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14821
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_KRST0_Bits',0,9,229,1,16,4,11
	.byte	'RST',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	394
	.byte	30,0,2,35,0,0,12,9,199,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14926
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_ACCEN1_Bits',0,9,105,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,9,207,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15050
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_ACCEN0_Bits',0,9,68,16,4,11
	.byte	'EN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,9,199,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15140
	.byte	4,2,35,0,0,18,255,5
	.word	417
	.byte	19,254,5,0,10
	.byte	'_Ifx_HSSL',0,9,203,6,25,128,8,13
	.byte	'CLC',0
	.word	9465
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2036
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	9588
	.byte	4,2,35,8,13
	.byte	'CRC',0
	.word	9711
	.byte	4,2,35,12,13
	.byte	'CFG',0
	.word	9901
	.byte	4,2,35,16,13
	.byte	'QFLAGS',0
	.word	10167
	.byte	4,2,35,20,13
	.byte	'MFLAGS',0
	.word	10538
	.byte	4,2,35,24,13
	.byte	'MFLAGSSET',0
	.word	10935
	.byte	4,2,35,28,13
	.byte	'MFLAGSCL',0
	.word	11331
	.byte	4,2,35,32,13
	.byte	'MFLAGSEN',0
	.word	11657
	.byte	4,2,35,36,13
	.byte	'SFSFLAGS',0
	.word	11836
	.byte	4,2,35,40,13
	.byte	'reserved_2C',0
	.word	2036
	.byte	4,2,35,44,13
	.byte	'I',0
	.word	12442
	.byte	64,2,35,48,13
	.byte	'T',0
	.word	12663
	.byte	32,2,35,112,13
	.byte	'TSTAT',0
	.word	12848
	.byte	4,3,35,144,1,13
	.byte	'TIDADD',0
	.word	12930
	.byte	4,3,35,148,1,13
	.byte	'SEC',0
	.word	13048
	.byte	4,3,35,152,1,13
	.byte	'MSCR',0
	.word	13213
	.byte	4,3,35,156,1,13
	.byte	'IS',0
	.word	13639
	.byte	16,3,35,160,1,13
	.byte	'TS',0
	.word	14029
	.byte	16,3,35,176,1,13
	.byte	'AW',0
	.word	14312
	.byte	32,3,35,192,1,13
	.byte	'AR',0
	.word	14467
	.byte	4,3,35,224,1,13
	.byte	'reserved_E4',0
	.word	2036
	.byte	4,3,35,228,1,13
	.byte	'OCS',0
	.word	14674
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	14781
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	14886
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	15010
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	15100
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	15670
	.byte	4,3,35,252,1,13
	.byte	'reserved_100',0
	.word	15710
	.byte	255,5,3,35,128,2,0,14
	.word	15721
.L260:
	.byte	3
	.word	16216
	.byte	10
	.byte	'_Ifx_HSCT_CLC_Bits',0,10,111,16,4,11
	.byte	'DISR',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,12,10,238,2,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16226
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_ID_Bits',0,10,149,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUM',0,2
	.word	930
	.byte	16,0,2,35,2,0,12,10,142,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16383
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_INIT_Bits',0,10,178,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'SYS_CLK_EN',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'IFM',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'SRCF',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'SSCF',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'TXHD',0,1
	.word	417
	.byte	3,5,2,35,2,11
	.byte	'RXHD',0,1
	.word	417
	.byte	3,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	930
	.byte	10,0,2,35,2,0,12,10,166,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16506
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IFCTRL_Bits',0,10,157,1,16,4,11
	.byte	'IFCVS',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'SIFCV',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'MRXSPEED',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'MTXSPEED',0,1
	.word	417
	.byte	2,4,2,35,2,11
	.byte	'IFTESTMD',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	930
	.byte	11,0,2,35,2,0,12,10,150,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16763
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_SLEEPCTRL_Bits',0,10,160,2,16,4,11
	.byte	'SLPEN',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'SLPCLKG',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	930
	.byte	14,0,2,35,0,11
	.byte	'WKUPCNT',0,1
	.word	417
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	8,0,2,35,3,0,12,10,230,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16971
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_CTSCTRL_Bits',0,10,130,1,16,4,11
	.byte	'CTS_FRAME',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'CTS_TXD',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'CTS_RXD',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'HSSL_CTS_FBD',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,12,10,254,2,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17143
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_DISABLE_Bits',0,10,140,1,16,4,11
	.byte	'TX_DIS',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'RX_HEPD',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	394
	.byte	29,0,2,35,0,0,12,10,134,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17318
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_STAT_Bits',0,10,170,2,16,4,11
	.byte	'RX_PSIZE',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'RX_CHANNEL',0,1
	.word	417
	.byte	4,1,2,35,0,11
	.byte	'RX_SLEEP',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'TX_SLEEP',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	417
	.byte	3,4,2,35,1,11
	.byte	'TX_PSIZE',0,1
	.word	417
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'TX_CHANNEL_TYPE',0,1
	.word	417
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	417
	.byte	4,0,2,35,2,11
	.byte	'LIFCCMDR',0,1
	.word	417
	.byte	8,0,2,35,3,0,12,10,238,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17465
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IFSTAT_Bits',0,10,169,1,16,4,11
	.byte	'RX_STAT',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'TX_STAT',0,1
	.word	417
	.byte	2,3,2,35,0,11
	.byte	'TX_EN',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,12,10,158,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17749
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_CONFIGPHY_Bits',0,10,121,16,4,11
	.byte	'PON',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	930
	.byte	15,0,2,35,0,11
	.byte	'CORCEN',0,1
	.word	417
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	930
	.byte	11,0,2,35,2,0,12,10,246,2,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17895
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_STATPHY_Bits',0,10,185,2,16,4,11
	.byte	'PLOCK',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'TXSA',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'RXSA',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,12,10,246,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18044
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IRQ_Bits',0,10,193,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'HER',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PYER',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'CER',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'IFCFS',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'SMER',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'USMSF',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PLER',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'USM',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PAR',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'TXTE',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'SFO',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'SFU',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'MSCE',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	394
	.byte	18,0,2,35,0,0,12,10,174,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18207
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IRQEN_Bits',0,10,233,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'HEREN',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PYEREN',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'CEREN',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'IFCFSEN',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'SMEREN',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'USMSFEN',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PLEREN',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'USMEN',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PAREN',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'TXTEEN',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'SFOEN',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'SFUEN',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'MSCEEN',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	394
	.byte	18,0,2,35,0,0,12,10,190,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18522
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IRQCLR_Bits',0,10,213,1,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'HERCLR',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PYERCLR',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'CERCLR',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'IFCFSCLR',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'SMERCLR',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'USMSFCLR',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PLERCLR',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'USMCLR',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PARCLR',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'TXTECLR',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'SFOCLR',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'SFUCLR',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'MSCELR',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	394
	.byte	18,0,2,35,0,0,12,10,182,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18865
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_USMR_Bits',0,10,205,2,16,4,11
	.byte	'USMR',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,10,134,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19221
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_USMS_Bits',0,10,211,2,16,4,11
	.byte	'USMS',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,10,142,4,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19304
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_TESTCTRL_Bits',0,10,195,2,16,4,11
	.byte	'TXENS',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'TXDISS',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'LLOPTXRX',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'PRBSEN',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,12,10,254,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19387
	.byte	4,2,35,0,0,18,132,255,3
	.word	417
	.byte	19,131,255,3,0,10
	.byte	'_Ifx_HSCT_OCS_Bits',0,10,147,2,16,4,11
	.byte	'TGS',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	417
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	417
	.byte	2,0,2,35,3,0,12,10,222,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19566
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_KRSTCLR_Bits',0,10,140,2,16,4,11
	.byte	'CLR',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	394
	.byte	31,0,2,35,0,0,12,10,214,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19773
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_KRST1_Bits',0,10,133,2,16,4,11
	.byte	'RST',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	394
	.byte	31,0,2,35,0,0,12,10,206,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19880
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_KRST0_Bits',0,10,253,1,16,4,11
	.byte	'RST',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	394
	.byte	30,0,2,35,0,0,12,10,198,3,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19985
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_ACCEN1_Bits',0,10,105,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	32,0,2,35,0,0,12,10,230,2,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20109
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_ACCEN0_Bits',0,10,68,16,4,11
	.byte	'EN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	417
	.byte	1,0,2,35,3,0,12,10,222,2,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20199
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT',0,10,159,4,25,128,128,4,13
	.byte	'CLC',0
	.word	16343
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2036
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	16466
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2036
	.byte	4,2,35,12,13
	.byte	'INIT',0
	.word	16723
	.byte	4,2,35,16,13
	.byte	'IFCTRL',0
	.word	16931
	.byte	4,2,35,20,13
	.byte	'SLEEPCTRL',0
	.word	17103
	.byte	4,2,35,24,13
	.byte	'CTSCTRL',0
	.word	17278
	.byte	4,2,35,28,13
	.byte	'DISABLE',0
	.word	17425
	.byte	4,2,35,32,13
	.byte	'STAT',0
	.word	17709
	.byte	4,2,35,36,13
	.byte	'IFSTAT',0
	.word	17855
	.byte	4,2,35,40,13
	.byte	'reserved_2C',0
	.word	2036
	.byte	4,2,35,44,13
	.byte	'CONFIGPHY',0
	.word	18004
	.byte	4,2,35,48,13
	.byte	'STATPHY',0
	.word	18167
	.byte	4,2,35,52,13
	.byte	'reserved_38',0
	.word	3856
	.byte	8,2,35,56,13
	.byte	'IRQ',0
	.word	18482
	.byte	4,2,35,64,13
	.byte	'IRQEN',0
	.word	18825
	.byte	4,2,35,68,13
	.byte	'IRQCLR',0
	.word	19181
	.byte	4,2,35,72,13
	.byte	'reserved_4C',0
	.word	2036
	.byte	4,2,35,76,13
	.byte	'USMR',0
	.word	19264
	.byte	4,2,35,80,13
	.byte	'USMS',0
	.word	19347
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	3856
	.byte	8,2,35,88,13
	.byte	'TESTCTRL',0
	.word	19513
	.byte	4,2,35,96,13
	.byte	'reserved_64',0
	.word	19553
	.byte	132,255,3,2,35,100,13
	.byte	'OCS',0
	.word	19733
	.byte	4,4,35,232,255,3,13
	.byte	'KRSTCLR',0
	.word	19840
	.byte	4,4,35,236,255,3,13
	.byte	'KRST1',0
	.word	19945
	.byte	4,4,35,240,255,3,13
	.byte	'KRST0',0
	.word	20069
	.byte	4,4,35,244,255,3,13
	.byte	'ACCEN1',0
	.word	20159
	.byte	4,4,35,248,255,3,13
	.byte	'ACCEN0',0
	.word	20729
	.byte	4,4,35,252,255,3,0,14
	.word	20769
.L216:
	.byte	3
	.word	21303
	.byte	15,11,74,9,1,16
	.byte	'IfxHssl_ChannelId_0',0,0,16
	.byte	'IfxHssl_ChannelId_1',0,1,16
	.byte	'IfxHssl_ChannelId_2',0,2,16
	.byte	'IfxHssl_ChannelId_3',0,3,0
.L290:
	.byte	15,8,216,3,9,1,16
	.byte	'IfxHssl_Hssl_FrameRequest_readFrame',0,1,16
	.byte	'IfxHssl_Hssl_FrameRequest_writeFrame',0,2,16
	.byte	'IfxHssl_Hssl_FrameRequest_triggerFrame',0,3,16
	.byte	'IfxHssl_Hssl_FrameRequest_readId',0,4,16
	.byte	'IfxHssl_Hssl_FrameRequest_noAction',0,5,0,15,11,212,1,9,1,16
	.byte	'IfxHssl_StreamingMode_continuous',0,0,16
	.byte	'IfxHssl_StreamingMode_single',0,1,0,20,8,152,4,9,16,13
	.byte	'hssl',0
	.word	16221
	.byte	4,2,35,0,13
	.byte	'hsct',0
	.word	21308
	.byte	4,2,35,4,13
	.byte	'channelId',0
	.word	21313
	.byte	1,2,35,8,13
	.byte	'currentFrameRequest',0
	.word	21407
	.byte	1,2,35,9,13
	.byte	'streamingMode',0
	.word	21604
	.byte	1,2,35,10,13
	.byte	'loopBack',0
	.word	417
	.byte	1,2,35,11,13
	.byte	'streamingModeOn',0
	.word	417
	.byte	1,2,35,12,0
.L267:
	.byte	3
	.word	21677
.L328:
	.byte	8
	.byte	'IfxHssl_Hssl_getReadData',0,3,8,153,6,19
	.word	9326
	.byte	1,1
.L331:
	.byte	5
	.byte	'channel',0,8,153,6,66
	.word	21826
.L333:
	.byte	6,0,21
	.word	410
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	21887
	.byte	0,14
	.word	394
	.byte	3
	.word	394
	.byte	24
	.byte	'__cmpswapw',0
	.word	21929
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	21934
	.byte	25
	.byte	'value',0
	.word	394
	.byte	25
	.byte	'compare',0
	.word	394
	.byte	0,26
	.byte	'__nop',0,1,1,1,1,27
	.word	170
	.byte	28
	.word	196
	.byte	6,0,27
	.word	231
	.byte	28
	.word	263
	.byte	6,0,27
	.word	313
	.byte	28
	.word	332
	.byte	6,0,27
	.word	348
	.byte	28
	.word	363
	.byte	28
	.word	377
	.byte	6,0,29
	.byte	'IfxScuWdt_clearCpuEndinit',0,12,237,1,17,1,1,1,1,5
	.byte	'password',0,12,237,1,50
	.word	930
	.byte	0,29
	.byte	'IfxScuWdt_setCpuEndinit',0,12,157,2,17,1,1,1,1,5
	.byte	'password',0,12,157,2,48
	.word	930
	.byte	0,30
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,12,215,3,19
	.word	930
	.byte	1,1,1,1,27
	.word	773
	.byte	28
	.word	801
	.byte	6,0,27
	.word	816
	.byte	28
	.word	838
	.byte	6,0,27
	.word	952
	.byte	28
	.word	972
	.byte	28
	.word	985
	.byte	28
	.word	1007
	.byte	17,31
	.word	773
	.byte	28
	.word	801
	.byte	32
	.word	814
	.byte	0,6,0,0,29
	.byte	'IfxHssl_enableHsctModule',0,11,154,3,17,1,1,1,1,5
	.byte	'hsct',0,11,154,3,52
	.word	21308
	.byte	0,29
	.byte	'IfxHssl_enableHsslModule',0,11,130,5,17,1,1,1,1,5
	.byte	'hssl',0,11,130,5,52
	.word	16221
	.byte	0,27
	.word	8656
	.byte	28
	.word	8688
	.byte	28
	.word	8702
	.byte	28
	.word	8720
	.byte	6,0,27
	.word	9049
	.byte	28
	.word	9082
	.byte	28
	.word	9096
	.byte	28
	.word	9114
	.byte	28
	.word	9128
	.byte	6,0,27
	.word	9248
	.byte	28
	.word	9276
	.byte	28
	.word	9290
	.byte	28
	.word	9308
	.byte	6,0,15,6,101,9,1,16
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,16
	.byte	'IfxPort_Mode_inputPullDown',0,8,16
	.byte	'IfxPort_Mode_inputPullUp',0,16,16
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,16
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,29
	.byte	'IfxPort_setPinMode',0,6,183,3,17,1,1,1,1,5
	.byte	'port',0,6,183,3,43
	.word	8526
	.byte	5
	.byte	'pinIndex',0,6,183,3,55
	.word	417
	.byte	5
	.byte	'mode',0,6,183,3,78
	.word	22440
	.byte	0,15,6,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,29
	.byte	'IfxPort_setPinPadDriver',0,6,207,3,17,1,1,1,1,5
	.byte	'port',0,6,207,3,48
	.word	8526
	.byte	5
	.byte	'pinIndex',0,6,207,3,60
	.word	417
	.byte	5
	.byte	'padDriver',0,6,207,3,88
	.word	23184
	.byte	0,20,11,143,2,9,8,13
	.byte	'hsct',0
	.word	21308
	.byte	4,2,35,0,13
	.byte	'loopBack',0
	.word	417
	.byte	1,2,35,4,0
.L211:
	.byte	3
	.word	23692
	.byte	15,11,165,1,9,1,16
	.byte	'IfxHssl_InterfaceMode_master',0,0,16
	.byte	'IfxHssl_InterfaceMode_slave',0,1,0,20,11,151,2,9,8,13
	.byte	'hsct',0
	.word	21308
	.byte	4,2,35,0,13
	.byte	'interfaceMode',0
	.word	23736
	.byte	1,2,35,4,13
	.byte	'highSpeedMode',0
	.word	417
	.byte	1,2,35,5,13
	.byte	'loopBack',0
	.word	417
	.byte	1,2,35,6,0,21
	.word	23804
.L213:
	.byte	3
	.word	23889
.L252:
	.byte	3
	.word	23804
	.byte	20,8,254,3,9,2,11
	.byte	'notAcknowledgeError',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'transactionTagError',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'timeoutError',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'unexpectedError',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'memoryAccessViolation',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'busAccessError',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'channelNumberCodeError',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'dataLengthError',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'crcError',0,1
	.word	417
	.byte	1,7,2,35,1,0,20,8,143,4,9,8,13
	.byte	'hssl',0
	.word	16221
	.byte	4,2,35,0,13
	.byte	'errorFlags',0
	.word	23904
	.byte	2,2,35,4,13
	.byte	'loopBack',0
	.word	417
	.byte	1,2,35,6,0
.L256:
	.byte	3
	.word	24164
	.byte	20,8,244,3,9,8,13
	.byte	'start',0
	.word	9326
	.byte	4,2,35,0,13
	.byte	'end',0
	.word	9326
	.byte	4,2,35,4,0,20,8,176,4,9,40,13
	.byte	'hssl',0
	.word	16221
	.byte	4,2,35,0,13
	.byte	'accessWindow0',0
	.word	24228
	.byte	8,2,35,4,13
	.byte	'accessWindow1',0
	.word	24228
	.byte	8,2,35,12,13
	.byte	'accessWindow2',0
	.word	24228
	.byte	8,2,35,20,13
	.byte	'accessWindow3',0
	.word	24228
	.byte	8,2,35,28,13
	.byte	'preDivider',0
	.word	930
	.byte	2,2,35,36,0,21
	.word	24263
.L258:
	.byte	3
	.word	24396
.L263:
	.byte	3
	.word	24263
	.byte	20,8,165,4,9,12,13
	.byte	'hssl',0
	.word	16221
	.byte	4,2,35,0,13
	.byte	'hsct',0
	.word	21308
	.byte	4,2,35,4,13
	.byte	'channelId',0
	.word	21313
	.byte	1,2,35,8,13
	.byte	'streamingMode',0
	.word	21604
	.byte	1,2,35,9,13
	.byte	'loopBack',0
	.word	417
	.byte	1,2,35,10,0,21
	.word	24411
.L269:
	.byte	3
	.word	24506
.L272:
	.byte	3
	.word	24411
	.byte	27
	.word	21831
	.byte	28
	.word	21868
	.byte	6,0
.L276:
	.byte	15,8,227,3,9,1,16
	.byte	'IfxHssl_Hssl_Status_ok',0,0,16
	.byte	'IfxHssl_Hssl_Status_busy',0,1,16
	.byte	'IfxHssl_Hssl_Status_error',0,2,0
.L281:
	.byte	15,11,115,9,1,16
	.byte	'IfxHssl_DataLength_8bit',0,0,16
	.byte	'IfxHssl_DataLength_16bit',0,1,16
	.byte	'IfxHssl_DataLength_32bit',0,2,0,14
	.word	12360
.L295:
	.byte	3
	.word	24706
.L324:
	.byte	7
	.byte	'short int',0,2,5
.L344:
	.byte	3
	.word	9326
	.byte	14
	.word	13583
.L348:
	.byte	3
	.word	24734
	.byte	33
	.byte	'__wchar_t',0,13,1,1
	.word	24716
	.byte	33
	.byte	'__size_t',0,13,1,1
	.word	394
	.byte	33
	.byte	'__ptrdiff_t',0,13,1,1
	.word	410
	.byte	34,1,3
	.word	24799
	.byte	33
	.byte	'__codeptr',0,13,1,1
	.word	24801
	.byte	33
	.byte	'boolean',0,14,104,29
	.word	417
	.byte	33
	.byte	'uint8',0,14,108,29
	.word	417
	.byte	33
	.byte	'uint16',0,14,112,29
	.word	930
	.byte	33
	.byte	'uint32',0,14,116,29
	.word	9326
	.byte	33
	.byte	'uint64',0,14,121,29
	.word	276
	.byte	33
	.byte	'sint16',0,14,129,1,29
	.word	24716
	.byte	7
	.byte	'long int',0,4,5,33
	.byte	'sint32',0,14,134,1,29
	.word	24915
	.byte	7
	.byte	'long long int',0,8,5,33
	.byte	'sint64',0,14,141,1,29
	.word	24943
	.byte	33
	.byte	'float32',0,14,170,1,29
	.word	222
	.byte	33
	.byte	'pvoid',0,15,54,28
	.word	308
	.byte	33
	.byte	'Ifx_TickTime',0,15,76,28
	.word	24943
	.byte	33
	.byte	'Ifx_SizeT',0,15,89,16
	.word	24716
	.byte	33
	.byte	'Ifx_Priority',0,15,100,16
	.word	930
	.byte	33
	.byte	'Ifx_UReg_8Bit',0,16,96,24
	.word	417
	.byte	33
	.byte	'Ifx_UReg_32Bit',0,16,98,24
	.word	394
	.byte	33
	.byte	'Ifx_SReg_32Bit',0,16,101,24
	.word	410
	.byte	33
	.byte	'Ifx_HSSL_ACCEN0_Bits',0,9,102,3
	.word	15140
	.byte	33
	.byte	'Ifx_HSSL_ACCEN1_Bits',0,9,108,3
	.word	15050
	.byte	33
	.byte	'Ifx_HSSL_AR_Bits',0,9,120,3
	.word	14317
	.byte	33
	.byte	'Ifx_HSSL_AW_AWEND_Bits',0,9,127,3
	.word	14144
	.byte	33
	.byte	'Ifx_HSSL_AW_AWSTART_Bits',0,9,134,1,3
	.word	14034
	.byte	33
	.byte	'Ifx_HSSL_CFG_Bits',0,9,146,1,3
	.word	9751
	.byte	33
	.byte	'Ifx_HSSL_CLC_Bits',0,9,156,1,3
	.word	9347
	.byte	33
	.byte	'Ifx_HSSL_CRC_Bits',0,9,164,1,3
	.word	9628
	.byte	33
	.byte	'Ifx_HSSL_ID_Bits',0,9,172,1,3
	.word	9505
	.byte	33
	.byte	'Ifx_HSSL_IS_CA_Bits',0,9,179,1,3
	.word	13369
	.byte	33
	.byte	'Ifx_HSSL_IS_FC_Bits',0,9,186,1,3
	.word	13475
	.byte	33
	.byte	'Ifx_HSSL_IS_SA_Bits',0,9,193,1,3
	.word	13253
	.byte	33
	.byte	'Ifx_HSSL_I_ICON_Bits',0,9,208,1,3
	.word	11960
	.byte	33
	.byte	'Ifx_HSSL_I_IRD_Bits',0,9,214,1,3
	.word	12276
	.byte	33
	.byte	'Ifx_HSSL_I_IRWA_Bits',0,9,220,1,3
	.word	12188
	.byte	33
	.byte	'Ifx_HSSL_I_IWD_Bits',0,9,226,1,3
	.word	11876
	.byte	33
	.byte	'Ifx_HSSL_KRST0_Bits',0,9,234,1,3
	.word	14926
	.byte	33
	.byte	'Ifx_HSSL_KRST1_Bits',0,9,241,1,3
	.word	14821
	.byte	33
	.byte	'Ifx_HSSL_KRSTCLR_Bits',0,9,248,1,3
	.word	14714
	.byte	33
	.byte	'Ifx_HSSL_MFLAGS_Bits',0,9,143,2,3
	.word	10207
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSCL_Bits',0,9,166,2,3
	.word	10975
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSEN_Bits',0,9,184,2,3
	.word	11371
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSSET_Bits',0,9,207,2,3
	.word	10578
	.byte	33
	.byte	'Ifx_HSSL_MSCR_Bits',0,9,217,2,3
	.word	13088
	.byte	33
	.byte	'Ifx_HSSL_OCS_Bits',0,9,230,2,3
	.word	14507
	.byte	33
	.byte	'Ifx_HSSL_QFLAGS_Bits',0,9,248,2,3
	.word	9941
	.byte	33
	.byte	'Ifx_HSSL_SEC_Bits',0,9,128,3,3
	.word	12970
	.byte	33
	.byte	'Ifx_HSSL_SFSFLAGS_Bits',0,9,139,3,3
	.word	11697
	.byte	33
	.byte	'Ifx_HSSL_TIDADD_Bits',0,9,145,3,3
	.word	12888
	.byte	33
	.byte	'Ifx_HSSL_TSTAT_Bits',0,9,158,3,3
	.word	12668
	.byte	33
	.byte	'Ifx_HSSL_TS_CA_Bits',0,9,165,3,3
	.word	13759
	.byte	33
	.byte	'Ifx_HSSL_TS_FC_Bits',0,9,172,3,3
	.word	13865
	.byte	33
	.byte	'Ifx_HSSL_TS_SA_Bits',0,9,179,3,3
	.word	13644
	.byte	33
	.byte	'Ifx_HSSL_T_TCA_Bits',0,9,185,3,3
	.word	12528
	.byte	33
	.byte	'Ifx_HSSL_T_TCD_Bits',0,9,191,3,3
	.word	12447
	.byte	33
	.byte	'Ifx_HSSL_ACCEN0',0,9,204,3,3
	.word	15670
	.byte	33
	.byte	'Ifx_HSSL_ACCEN1',0,9,212,3,3
	.word	15100
	.byte	33
	.byte	'Ifx_HSSL_AR',0,9,220,3,3
	.word	14467
	.byte	33
	.byte	'Ifx_HSSL_AW_AWEND',0,9,228,3,3
	.word	14211
	.byte	33
	.byte	'Ifx_HSSL_AW_AWSTART',0,9,236,3,3
	.word	14104
	.byte	33
	.byte	'Ifx_HSSL_CFG',0,9,244,3,3
	.word	9901
	.byte	33
	.byte	'Ifx_HSSL_CLC',0,9,252,3,3
	.word	9465
	.byte	33
	.byte	'Ifx_HSSL_CRC',0,9,132,4,3
	.word	9711
	.byte	33
	.byte	'Ifx_HSSL_ID',0,9,140,4,3
	.word	9588
	.byte	33
	.byte	'Ifx_HSSL_IS_CA',0,9,148,4,3
	.word	13435
	.byte	33
	.byte	'Ifx_HSSL_IS_FC',0,9,156,4,3
	.word	13543
	.byte	33
	.byte	'Ifx_HSSL_IS_SA',0,9,164,4,3
	.word	13320
	.byte	33
	.byte	'Ifx_HSSL_I_ICON',0,9,172,4,3
	.word	12148
	.byte	33
	.byte	'Ifx_HSSL_I_IRD',0,9,180,4,3
	.word	12320
	.byte	33
	.byte	'Ifx_HSSL_I_IRWA',0,9,188,4,3
	.word	12236
	.byte	33
	.byte	'Ifx_HSSL_I_IWD',0,9,196,4,3
	.word	11920
	.byte	33
	.byte	'Ifx_HSSL_KRST0',0,9,204,4,3
	.word	15010
	.byte	33
	.byte	'Ifx_HSSL_KRST1',0,9,212,4,3
	.word	14886
	.byte	33
	.byte	'Ifx_HSSL_KRSTCLR',0,9,220,4,3
	.word	14781
	.byte	33
	.byte	'Ifx_HSSL_MFLAGS',0,9,228,4,3
	.word	10538
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSCL',0,9,236,4,3
	.word	11331
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSEN',0,9,244,4,3
	.word	11657
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSSET',0,9,252,4,3
	.word	10935
	.byte	33
	.byte	'Ifx_HSSL_MSCR',0,9,132,5,3
	.word	13213
	.byte	33
	.byte	'Ifx_HSSL_OCS',0,9,140,5,3
	.word	14674
	.byte	33
	.byte	'Ifx_HSSL_QFLAGS',0,9,148,5,3
	.word	10167
	.byte	33
	.byte	'Ifx_HSSL_SEC',0,9,156,5,3
	.word	13048
	.byte	33
	.byte	'Ifx_HSSL_SFSFLAGS',0,9,164,5,3
	.word	11836
	.byte	33
	.byte	'Ifx_HSSL_TIDADD',0,9,172,5,3
	.word	12930
	.byte	33
	.byte	'Ifx_HSSL_TSTAT',0,9,180,5,3
	.word	12848
	.byte	33
	.byte	'Ifx_HSSL_TS_CA',0,9,188,5,3
	.word	13825
	.byte	33
	.byte	'Ifx_HSSL_TS_FC',0,9,196,5,3
	.word	13933
	.byte	33
	.byte	'Ifx_HSSL_TS_SA',0,9,204,5,3
	.word	13710
	.byte	33
	.byte	'Ifx_HSSL_T_TCA',0,9,212,5,3
	.word	12569
	.byte	33
	.byte	'Ifx_HSSL_T_TCD',0,9,220,5,3
	.word	12488
	.byte	14
	.word	12360
	.byte	33
	.byte	'Ifx_HSSL_I',0,9,238,5,3
	.word	27012
	.byte	14
	.word	12609
	.byte	33
	.byte	'Ifx_HSSL_T',0,9,129,6,3
	.word	27037
	.byte	14
	.word	13583
	.byte	33
	.byte	'Ifx_HSSL_IS',0,9,149,6,3
	.word	27062
	.byte	14
	.word	13973
	.byte	33
	.byte	'Ifx_HSSL_TS',0,9,169,6,3
	.word	27088
	.byte	14
	.word	14251
	.byte	33
	.byte	'Ifx_HSSL_AW',0,9,188,6,3
	.word	27114
	.byte	14
	.word	15721
	.byte	33
	.byte	'Ifx_HSSL',0,9,235,6,3
	.word	27140
	.byte	33
	.byte	'Ifx_HSCT_ACCEN0_Bits',0,10,102,3
	.word	20199
	.byte	33
	.byte	'Ifx_HSCT_ACCEN1_Bits',0,10,108,3
	.word	20109
	.byte	33
	.byte	'Ifx_HSCT_CLC_Bits',0,10,118,3
	.word	16226
	.byte	33
	.byte	'Ifx_HSCT_CONFIGPHY_Bits',0,10,127,3
	.word	17895
	.byte	33
	.byte	'Ifx_HSCT_CTSCTRL_Bits',0,10,137,1,3
	.word	17143
	.byte	33
	.byte	'Ifx_HSCT_DISABLE_Bits',0,10,146,1,3
	.word	17318
	.byte	33
	.byte	'Ifx_HSCT_ID_Bits',0,10,154,1,3
	.word	16383
	.byte	33
	.byte	'Ifx_HSCT_IFCTRL_Bits',0,10,166,1,3
	.word	16763
	.byte	33
	.byte	'Ifx_HSCT_IFSTAT_Bits',0,10,175,1,3
	.word	17749
	.byte	33
	.byte	'Ifx_HSCT_INIT_Bits',0,10,190,1,3
	.word	16506
	.byte	33
	.byte	'Ifx_HSCT_IRQ_Bits',0,10,210,1,3
	.word	18207
	.byte	33
	.byte	'Ifx_HSCT_IRQCLR_Bits',0,10,230,1,3
	.word	18865
	.byte	33
	.byte	'Ifx_HSCT_IRQEN_Bits',0,10,250,1,3
	.word	18522
	.byte	33
	.byte	'Ifx_HSCT_KRST0_Bits',0,10,130,2,3
	.word	19985
	.byte	33
	.byte	'Ifx_HSCT_KRST1_Bits',0,10,137,2,3
	.word	19880
	.byte	33
	.byte	'Ifx_HSCT_KRSTCLR_Bits',0,10,144,2,3
	.word	19773
	.byte	33
	.byte	'Ifx_HSCT_OCS_Bits',0,10,157,2,3
	.word	19566
	.byte	33
	.byte	'Ifx_HSCT_SLEEPCTRL_Bits',0,10,167,2,3
	.word	16971
	.byte	33
	.byte	'Ifx_HSCT_STAT_Bits',0,10,182,2,3
	.word	17465
	.byte	33
	.byte	'Ifx_HSCT_STATPHY_Bits',0,10,192,2,3
	.word	18044
	.byte	33
	.byte	'Ifx_HSCT_TESTCTRL_Bits',0,10,202,2,3
	.word	19387
	.byte	33
	.byte	'Ifx_HSCT_USMR_Bits',0,10,208,2,3
	.word	19221
	.byte	33
	.byte	'Ifx_HSCT_USMS_Bits',0,10,214,2,3
	.word	19304
	.byte	33
	.byte	'Ifx_HSCT_ACCEN0',0,10,227,2,3
	.word	20729
	.byte	33
	.byte	'Ifx_HSCT_ACCEN1',0,10,235,2,3
	.word	20159
	.byte	33
	.byte	'Ifx_HSCT_CLC',0,10,243,2,3
	.word	16343
	.byte	33
	.byte	'Ifx_HSCT_CONFIGPHY',0,10,251,2,3
	.word	18004
	.byte	33
	.byte	'Ifx_HSCT_CTSCTRL',0,10,131,3,3
	.word	17278
	.byte	33
	.byte	'Ifx_HSCT_DISABLE',0,10,139,3,3
	.word	17425
	.byte	33
	.byte	'Ifx_HSCT_ID',0,10,147,3,3
	.word	16466
	.byte	33
	.byte	'Ifx_HSCT_IFCTRL',0,10,155,3,3
	.word	16931
	.byte	33
	.byte	'Ifx_HSCT_IFSTAT',0,10,163,3,3
	.word	17855
	.byte	33
	.byte	'Ifx_HSCT_INIT',0,10,171,3,3
	.word	16723
	.byte	33
	.byte	'Ifx_HSCT_IRQ',0,10,179,3,3
	.word	18482
	.byte	33
	.byte	'Ifx_HSCT_IRQCLR',0,10,187,3,3
	.word	19181
	.byte	33
	.byte	'Ifx_HSCT_IRQEN',0,10,195,3,3
	.word	18825
	.byte	33
	.byte	'Ifx_HSCT_KRST0',0,10,203,3,3
	.word	20069
	.byte	33
	.byte	'Ifx_HSCT_KRST1',0,10,211,3,3
	.word	19945
	.byte	33
	.byte	'Ifx_HSCT_KRSTCLR',0,10,219,3,3
	.word	19840
	.byte	33
	.byte	'Ifx_HSCT_OCS',0,10,227,3,3
	.word	19733
	.byte	33
	.byte	'Ifx_HSCT_SLEEPCTRL',0,10,235,3,3
	.word	17103
	.byte	33
	.byte	'Ifx_HSCT_STAT',0,10,243,3,3
	.word	17709
	.byte	33
	.byte	'Ifx_HSCT_STATPHY',0,10,251,3,3
	.word	18167
	.byte	33
	.byte	'Ifx_HSCT_TESTCTRL',0,10,131,4,3
	.word	19513
	.byte	33
	.byte	'Ifx_HSCT_USMR',0,10,139,4,3
	.word	19264
	.byte	33
	.byte	'Ifx_HSCT_USMS',0,10,147,4,3
	.word	19347
	.byte	14
	.word	20769
	.byte	33
	.byte	'Ifx_HSCT',0,10,191,4,3
	.word	28400
	.byte	15,17,254,9,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,33
	.byte	'IfxScu_WDTCON1_IR',0,17,131,10,3
	.word	28423
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,18,68,16,4,11
	.byte	'EN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN00_Bits',0,18,102,3
	.word	28545
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,18,105,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01_Bits',0,18,108,3
	.word	29104
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,18,111,16,4,11
	.byte	'EN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN10_Bits',0,18,145,1,3
	.word	29183
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,18,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11_Bits',0,18,151,1,3
	.word	29743
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,18,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	394
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,18,164,1,3
	.word	29824
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,18,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	417
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	417
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	417
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	417
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	417
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	417
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON0_Bits',0,18,181,1,3
	.word	30050
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,18,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	417
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	417
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	417
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	417
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	417
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON1_Bits',0,18,199,1,3
	.word	30323
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,18,202,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	417
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	394
	.byte	10,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	417
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON2_Bits',0,18,214,1,3
	.word	30649
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,18,217,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	417
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	394
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON3_Bits',0,18,234,1,3
	.word	30927
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,18,237,1,16,4,11
	.byte	'LOTHR',0,2
	.word	930
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	394
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON4_Bits',0,18,246,1,3
	.word	31296
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,18,249,1,16,4,11
	.byte	'GETHDIV',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	394
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON5_Bits',0,18,129,2,3
	.word	31476
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,18,132,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	417
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6_Bits',0,18,136,2,3
	.word	31648
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,18,139,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	417
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7_Bits',0,18,143,2,3
	.word	31748
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,18,146,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	417
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8_Bits',0,18,150,2,3
	.word	31848
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,18,153,2,16,4,11
	.byte	'CHREV',0,1
	.word	417
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	417
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	417
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	417
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CHIPID_Bits',0,18,164,2,3
	.word	31948
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,18,167,2,16,4,11
	.byte	'LOWER',0,2
	.word	930
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	930
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,18,179,2,3
	.word	32151
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,18,182,2,16,4,11
	.byte	'RESULT',0,2
	.word	930
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	394
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,18,186,2,3
	.word	32383
	.byte	7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_EICON0_Bits',0,18,189,2,16,4,11
	.byte	'reserved_0',0,4
	.word	32485
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	32485
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	32485
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32485
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0_Bits',0,18,195,2,3
	.word	32501
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,18,198,2,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1_Bits',0,18,207,2,3
	.word	32629
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,18,210,2,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	417
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	417
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	394
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	417
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	417
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EICR_Bits',0,18,229,2,3
	.word	32818
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,18,232,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	417
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	417
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	417
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EIFILT_Bits',0,18,254,2,3
	.word	33182
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,18,129,3,16,4,11
	.byte	'INTF0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	394
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR_Bits',0,18,140,3,3
	.word	33621
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,18,143,3,16,4,11
	.byte	'AE',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_EISR_Bits',0,18,153,3,3
	.word	33832
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,18,156,3,16,4,11
	.byte	'POL',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	930
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	930
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_EMSR_Bits',0,18,166,3,3
	.word	34008
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,18,169,3,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	417
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	417
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	417
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EMSSW_Bits',0,18,175,3,3
	.word	34202
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,18,178,3,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	930
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	394
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,18,183,3,3
	.word	34337
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,18,186,3,16,4,11
	.byte	'ARI',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	394
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG_Bits',0,18,191,3,3
	.word	34473
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,18,194,3,16,4,11
	.byte	'EN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	417
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	417
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	417
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	417
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_EXTCON_Bits',0,18,205,3,3
	.word	34584
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,18,208,3,16,4,11
	.byte	'STEP',0,2
	.word	930
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	417
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	930
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_FDR_Bits',0,18,216,3,3
	.word	34802
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,18,219,3,16,4,11
	.byte	'FS0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_FMR_Bits',0,18,239,3,3
	.word	34965
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,18,242,3,16,4,11
	.byte	'MODREV',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_ID_Bits',0,18,247,3,3
	.word	35301
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,18,250,3,16,4,11
	.byte	'IPEN00',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	417
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_IGCR_Bits',0,18,146,4,3
	.word	35408
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,18,149,4,16,4,11
	.byte	'P0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	394
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_IN_Bits',0,18,154,4,3
	.word	35860
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,18,157,4,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_IOCR_Bits',0,18,164,4,3
	.word	35959
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,18,167,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	394
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	930
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,18,177,4,3
	.word	36109
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,18,180,4,16,4,11
	.byte	'SEED',0,4
	.word	394
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	417
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,18,187,4,3
	.word	36347
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,18,190,4,16,4,11
	.byte	'LENGTH',0,2
	.word	930
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	394
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,18,194,4,3
	.word	36508
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,18,197,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,18,200,4,3
	.word	36614
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,18,203,4,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	930
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	930
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON0_Bits',0,18,211,4,3
	.word	36700
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,18,214,4,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	930
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	930
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON1_Bits',0,18,222,4,3
	.word	36881
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,18,225,4,16,4,11
	.byte	'LCLT0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	930
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_LCLTEST_Bits',0,18,241,4,3
	.word	37062
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,18,244,4,16,4,11
	.byte	'DEPT',0,1
	.word	417
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	930
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_MANID_Bits',0,18,249,4,3
	.word	37406
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,18,252,4,16,4,11
	.byte	'PS0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	930
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	930
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_OMR_Bits',0,18,132,5,3
	.word	37517
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,18,135,5,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	417
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	417
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	417
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	417
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	417
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	417
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	417
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_OSCCON_Bits',0,18,156,5,3
	.word	37675
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,18,159,5,16,4,11
	.byte	'P0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	394
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_OUT_Bits',0,18,164,5,3
	.word	38086
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,18,167,5,16,4,11
	.byte	'CSEL0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_OVCCON_Bits',0,18,183,5,3
	.word	38187
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,18,186,5,16,4,11
	.byte	'OVEN0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,18,195,5,3
	.word	38520
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,18,198,5,16,4,11
	.byte	'PDIS0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	394
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC_Bits',0,18,203,5,3
	.word	38722
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,18,206,5,16,4,11
	.byte	'PD0',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	394
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDR_Bits',0,18,213,5,3
	.word	38833
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,18,216,5,16,4,11
	.byte	'PDR0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	394
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR_Bits',0,18,227,5,3
	.word	38966
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,18,230,5,16,4,11
	.byte	'DIVBY',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	930
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	417
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,18,241,5,3
	.word	39169
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,18,244,5,16,4,11
	.byte	'K2DIV',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	394
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,18,250,5,3
	.word	39409
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,18,253,5,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	394
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,18,135,6,3
	.word	39553
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,18,138,6,16,4,11
	.byte	'REQSLP',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	394
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0_Bits',0,18,144,6,3
	.word	39775
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,18,147,6,16,4,11
	.byte	'REQSLP',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	394
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1_Bits',0,18,153,6,3
	.word	39911
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,18,156,6,16,4,11
	.byte	'REQSLP',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	394
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2_Bits',0,18,162,6,3
	.word	40047
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,18,165,6,16,4,11
	.byte	'REQSLP',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	394
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3_Bits',0,18,171,6,3
	.word	40183
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,18,174,6,16,4,11
	.byte	'REQSLP',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	394
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4_Bits',0,18,180,6,3
	.word	40319
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,18,183,6,16,4,11
	.byte	'REQSLP',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	394
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5_Bits',0,18,189,6,3
	.word	40455
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,18,192,6,16,4,11
	.byte	'CPU0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	930
	.byte	12,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,18,206,6,3
	.word	40591
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,18,209,6,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	417
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	394
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	417
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,18,220,6,3
	.word	40863
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,18,223,6,16,4,11
	.byte	'LJTEN',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	930
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	417
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,18,242,6,3
	.word	41108
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,18,245,6,16,4,11
	.byte	'LJTCV',0,2
	.word	930
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	930
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,18,250,6,3
	.word	41496
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,18,253,6,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	417
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	417
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,18,136,7,3
	.word	41614
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,18,139,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	417
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	417
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	417
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	930
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	417
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,18,151,7,3
	.word	41857
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,18,154,7,16,4,11
	.byte	'ESR0',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	417
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	417
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	417
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	417
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	417
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	417
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	417
	.byte	2,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	417
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	930
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON_Bits',0,18,168,7,3
	.word	42124
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,18,171,7,16,4,11
	.byte	'FRTO',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	930
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON2_Bits',0,18,185,7,3
	.word	42404
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,18,188,7,16,4,11
	.byte	'reserved_0',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3_Bits',0,18,191,7,3
	.word	42709
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,18,194,7,16,4,11
	.byte	'ESR0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	417
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	417
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	417
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	417
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	417
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	417
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	417
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	417
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,18,224,7,3
	.word	42790
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,18,227,7,16,4,11
	.byte	'reserved_0',0,4
	.word	32485
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	32485
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	32485
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32485
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0_Bits',0,18,233,7,3
	.word	43358
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,18,236,7,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	394
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1_Bits',0,18,245,7,3
	.word	43488
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,18,248,7,16,4,11
	.byte	'AE',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	930
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SEISR_Bits',0,18,130,8,3
	.word	43679
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,18,133,8,16,4,11
	.byte	'reserved_0',0,2
	.word	930
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	417
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	417
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_STCON_Bits',0,18,140,8,3
	.word	43857
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,18,143,8,16,4,11
	.byte	'MEM',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1_Bits',0,18,146,8,3
	.word	44008
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,18,149,8,16,4,11
	.byte	'MEM',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2_Bits',0,18,152,8,3
	.word	44080
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,18,155,8,16,4,11
	.byte	'MEM',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3_Bits',0,18,158,8,3
	.word	44152
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,18,161,8,16,4,11
	.byte	'MEM',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4_Bits',0,18,164,8,3
	.word	44224
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,18,167,8,16,4,11
	.byte	'MEM',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5_Bits',0,18,170,8,3
	.word	44296
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,18,173,8,16,4,11
	.byte	'MEM',0,4
	.word	394
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6_Bits',0,18,176,8,3
	.word	44368
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,18,179,8,16,4,11
	.byte	'HWCFG',0,1
	.word	417
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	417
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	417
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	417
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	417
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	417
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	417
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	417
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	417
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	417
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_STSTAT_Bits',0,18,195,8,3
	.word	44440
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,18,198,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	930
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,18,203,8,3
	.word	44769
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,18,206,8,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	417
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,18,213,8,3
	.word	44889
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,18,216,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	417
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSCON_Bits',0,18,228,8,3
	.word	45059
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,18,231,8,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	930
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	417
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	417
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	417
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	417
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,18,244,8,3
	.word	45322
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,18,247,8,16,4,11
	.byte	'K2DIV',0,1
	.word	417
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	394
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,18,251,8,3
	.word	45601
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,18,254,8,16,4,11
	.byte	'MODCFG',0,2
	.word	930
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,18,130,9,3
	.word	45705
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,18,133,9,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	417
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	394
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,18,143,9,3
	.word	45811
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,18,146,9,16,4,11
	.byte	'ESR0T',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,18,153,9,3
	.word	46034
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,18,156,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	417
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	417
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	417
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	417
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	417
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	417
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	417
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	417
	.byte	4,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	417
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	417
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,18,175,9,3
	.word	46182
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,18,178,9,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	417
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	417
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,18,185,9,3
	.word	46609
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,18,188,9,16,4,11
	.byte	'ESR0T',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET_Bits',0,18,195,9,3
	.word	46782
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,18,198,9,16,4,11
	.byte	'ESR0T',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	394
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,18,205,9,3
	.word	46930
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,18,208,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	32485
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	32485
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	32485
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32485
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,18,214,9,3
	.word	47080
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,18,217,9,16,4,11
	.byte	'reserved_0',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,18,230,9,3
	.word	47210
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,18,233,9,16,4,11
	.byte	'AE',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,18,246,9,3
	.word	47470
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,18,249,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	32485
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	32485
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	32485
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32485
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,18,255,9,3
	.word	47693
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,18,130,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,18,143,10,3
	.word	47819
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,18,146,10,16,4,11
	.byte	'AE',0,1
	.word	417
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	417
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	417
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	417
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	417
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	417
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	417
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	417
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	417
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	417
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	930
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,18,159,10,3
	.word	48071
	.byte	12,18,167,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28545
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN00',0,18,172,10,3
	.word	48290
	.byte	12,18,175,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29104
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01',0,18,180,10,3
	.word	48355
	.byte	12,18,183,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29183
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN10',0,18,188,10,3
	.word	48420
	.byte	12,18,191,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29743
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11',0,18,196,10,3
	.word	48485
	.byte	12,18,199,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29824
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS',0,18,204,10,3
	.word	48550
	.byte	12,18,207,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30050
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON0',0,18,212,10,3
	.word	48615
	.byte	12,18,215,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30323
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON1',0,18,220,10,3
	.word	48680
	.byte	12,18,223,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30649
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON2',0,18,228,10,3
	.word	48745
	.byte	12,18,231,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30927
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON3',0,18,236,10,3
	.word	48810
	.byte	12,18,239,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31296
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON4',0,18,244,10,3
	.word	48875
	.byte	12,18,247,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31476
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON5',0,18,252,10,3
	.word	48940
	.byte	12,18,255,10,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31648
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6',0,18,132,11,3
	.word	49005
	.byte	12,18,135,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31748
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7',0,18,140,11,3
	.word	49070
	.byte	12,18,143,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31848
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8',0,18,148,11,3
	.word	49135
	.byte	12,18,151,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31948
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CHIPID',0,18,156,11,3
	.word	49200
	.byte	12,18,159,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32151
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCLIM',0,18,164,11,3
	.word	49264
	.byte	12,18,167,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32383
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT',0,18,172,11,3
	.word	49329
	.byte	12,18,175,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32501
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0',0,18,180,11,3
	.word	49395
	.byte	12,18,183,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32629
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1',0,18,188,11,3
	.word	49459
	.byte	12,18,191,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32818
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICR',0,18,196,11,3
	.word	49523
	.byte	12,18,199,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33182
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFILT',0,18,204,11,3
	.word	49585
	.byte	12,18,207,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33621
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR',0,18,212,11,3
	.word	49649
	.byte	12,18,215,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33832
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EISR',0,18,220,11,3
	.word	49711
	.byte	12,18,223,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34008
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSR',0,18,228,11,3
	.word	49773
	.byte	12,18,231,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34202
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSSW',0,18,236,11,3
	.word	49835
	.byte	12,18,239,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34337
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,18,244,11,3
	.word	49898
	.byte	12,18,247,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34473
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG',0,18,252,11,3
	.word	49971
	.byte	12,18,255,11,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34584
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EXTCON',0,18,132,12,3
	.word	50036
	.byte	12,18,135,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34802
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FDR',0,18,140,12,3
	.word	50100
	.byte	12,18,143,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34965
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FMR',0,18,148,12,3
	.word	50161
	.byte	12,18,151,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35301
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ID',0,18,156,12,3
	.word	50222
	.byte	12,18,159,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35408
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IGCR',0,18,164,12,3
	.word	50282
	.byte	12,18,167,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35860
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IN',0,18,172,12,3
	.word	50344
	.byte	12,18,175,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35959
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IOCR',0,18,180,12,3
	.word	50404
	.byte	12,18,183,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36109
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL0',0,18,188,12,3
	.word	50466
	.byte	12,18,191,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36347
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL1',0,18,196,12,3
	.word	50534
	.byte	12,18,199,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36508
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2',0,18,204,12,3
	.word	50602
	.byte	12,18,207,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36614
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3',0,18,212,12,3
	.word	50670
	.byte	12,18,215,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36700
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON0',0,18,220,12,3
	.word	50738
	.byte	12,18,223,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36881
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON1',0,18,228,12,3
	.word	50803
	.byte	12,18,231,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37062
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST',0,18,236,12,3
	.word	50868
	.byte	12,18,239,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37406
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_MANID',0,18,244,12,3
	.word	50933
	.byte	12,18,247,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37517
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OMR',0,18,252,12,3
	.word	50996
	.byte	12,18,255,12,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37675
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OSCCON',0,18,132,13,3
	.word	51057
	.byte	12,18,135,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38086
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OUT',0,18,140,13,3
	.word	51121
	.byte	12,18,143,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38187
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCCON',0,18,148,13,3
	.word	51182
	.byte	12,18,151,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38520
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE',0,18,156,13,3
	.word	51246
	.byte	12,18,159,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38722
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC',0,18,164,13,3
	.word	51313
	.byte	12,18,167,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38833
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDR',0,18,172,13,3
	.word	51376
	.byte	12,18,175,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38966
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR',0,18,180,13,3
	.word	51437
	.byte	12,18,183,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39169
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON0',0,18,188,13,3
	.word	51499
	.byte	12,18,191,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39409
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1',0,18,196,13,3
	.word	51567
	.byte	12,18,199,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39553
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT',0,18,204,13,3
	.word	51635
	.byte	12,18,207,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39775
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0',0,18,212,13,3
	.word	51703
	.byte	12,18,215,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39911
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1',0,18,220,13,3
	.word	51767
	.byte	12,18,223,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40047
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2',0,18,228,13,3
	.word	51831
	.byte	12,18,231,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40183
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3',0,18,236,13,3
	.word	51895
	.byte	12,18,239,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40319
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4',0,18,244,13,3
	.word	51959
	.byte	12,18,247,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40455
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5',0,18,252,13,3
	.word	52023
	.byte	12,18,255,13,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40591
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSTAT0',0,18,132,14,3
	.word	52087
	.byte	12,18,135,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40863
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR1',0,18,140,14,3
	.word	52152
	.byte	12,18,143,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41108
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR0',0,18,148,14,3
	.word	52217
	.byte	12,18,151,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41496
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR1',0,18,156,14,3
	.word	52283
	.byte	12,18,159,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41614
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR2',0,18,164,14,3
	.word	52349
	.byte	12,18,167,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41857
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR3',0,18,172,14,3
	.word	52415
	.byte	12,18,175,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42124
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON',0,18,180,14,3
	.word	52481
	.byte	12,18,183,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42404
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON2',0,18,188,14,3
	.word	52545
	.byte	12,18,191,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42709
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3',0,18,196,14,3
	.word	52610
	.byte	12,18,199,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42790
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTSTAT',0,18,204,14,3
	.word	52675
	.byte	12,18,207,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43358
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0',0,18,212,14,3
	.word	52740
	.byte	12,18,215,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43488
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1',0,18,220,14,3
	.word	52805
	.byte	12,18,223,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43679
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEISR',0,18,228,14,3
	.word	52870
	.byte	12,18,231,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43857
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STCON',0,18,236,14,3
	.word	52933
	.byte	12,18,239,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44008
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1',0,18,244,14,3
	.word	52996
	.byte	12,18,247,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44080
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2',0,18,252,14,3
	.word	53060
	.byte	12,18,255,14,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44152
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3',0,18,132,15,3
	.word	53124
	.byte	12,18,135,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44224
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4',0,18,140,15,3
	.word	53188
	.byte	12,18,143,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44296
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5',0,18,148,15,3
	.word	53252
	.byte	12,18,151,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44368
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6',0,18,156,15,3
	.word	53316
	.byte	12,18,159,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44440
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STSTAT',0,18,164,15,3
	.word	53380
	.byte	12,18,167,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44769
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWAPCTRL',0,18,172,15,3
	.word	53444
	.byte	12,18,175,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44889
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON',0,18,180,15,3
	.word	53510
	.byte	12,18,183,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45059
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON',0,18,188,15,3
	.word	53576
	.byte	12,18,191,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45322
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON0',0,18,196,15,3
	.word	53640
	.byte	12,18,199,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45601
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1',0,18,204,15,3
	.word	53708
	.byte	12,18,207,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45705
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON2',0,18,212,15,3
	.word	53776
	.byte	12,18,215,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45811
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT',0,18,220,15,3
	.word	53844
	.byte	12,18,223,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46034
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR',0,18,228,15,3
	.word	53912
	.byte	12,18,231,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46182
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS0',0,18,236,15,3
	.word	53977
	.byte	12,18,239,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46609
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS1',0,18,244,15,3
	.word	54043
	.byte	12,18,247,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46782
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET',0,18,252,15,3
	.word	54109
	.byte	12,18,255,15,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46930
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT',0,18,132,16,3
	.word	54174
	.byte	12,18,135,16,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47080
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_CON0',0,18,140,16,3
	.word	54240
	.byte	12,18,143,16,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47210
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_CON1',0,18,148,16,3
	.word	54309
	.byte	12,18,151,16,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47470
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_SR',0,18,156,16,3
	.word	54378
	.byte	12,18,159,16,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47693
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0',0,18,164,16,3
	.word	54445
	.byte	12,18,167,16,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47819
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON1',0,18,172,16,3
	.word	54512
	.byte	12,18,175,16,9,4,13
	.byte	'U',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	410
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48071
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_SR',0,18,180,16,3
	.word	54579
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,18,192,16,25,4,13
	.byte	'ESRCFGX',0
	.word	49898
	.byte	4,2,35,0,0,14
	.word	54644
	.byte	33
	.byte	'Ifx_SCU_ESRCFGX',0,18,195,16,3
	.word	54685
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU',0,18,210,16,25,12,13
	.byte	'CON0',0
	.word	54240
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	54309
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	54378
	.byte	4,2,35,8,0,14
	.word	54715
	.byte	33
	.byte	'Ifx_SCU_WDTCPU',0,18,215,16,3
	.word	54778
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,18,230,16,25,12,13
	.byte	'CON0',0
	.word	54445
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	54512
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	54579
	.byte	4,2,35,8,0,14
	.word	54807
	.byte	33
	.byte	'Ifx_SCU_WDTS',0,18,235,16,3
	.word	54868
	.byte	33
	.byte	'IfxSrc_Tos',0,5,72,3
	.word	853
	.byte	33
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	434
	.byte	33
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	724
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,13
	.byte	'SB',0
	.word	724
	.byte	4,2,35,0,0,14
	.word	54961
	.byte	33
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	54996
	.byte	18,12
	.word	54961
	.byte	19,2,0,14
	.word	55025
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,12,13
	.byte	'CPU',0
	.word	55034
	.byte	12,2,35,0,0,14
	.word	55039
	.byte	33
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	55072
	.byte	18,8
	.word	724
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,146,1,25,8,13
	.byte	'SR',0
	.word	55098
	.byte	8,2,35,0,0,14
	.word	55107
	.byte	33
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,149,1,3
	.word	55153
	.byte	14
	.word	55107
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,4,164,1,25,8,13
	.byte	'CERBERUS',0
	.word	55193
	.byte	8,2,35,0,0,14
	.word	55198
	.byte	33
	.byte	'Ifx_SRC_CERBERUS',0,4,167,1,3
	.word	55241
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,182,1,25,12,13
	.byte	'TX',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	724
	.byte	4,2,35,8,0,14
	.word	55272
	.byte	33
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,187,1,3
	.word	55339
	.byte	18,144,1
	.word	55272
	.byte	19,11,0,14
	.word	55375
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,202,1,25,144,1,13
	.byte	'ASCLIN',0
	.word	55385
	.byte	144,1,2,35,0,0,14
	.word	55390
	.byte	33
	.byte	'Ifx_SRC_ASCLIN',0,4,205,1,3
	.word	55431
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,220,1,25,20,13
	.byte	'TX',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	724
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	724
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	724
	.byte	4,2,35,16,0,14
	.word	55460
	.byte	33
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,227,1,3
	.word	55546
	.byte	18,100
	.word	55460
	.byte	19,4,0,14
	.word	55578
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,242,1,25,100,13
	.byte	'QSPI',0
	.word	55587
	.byte	100,2,35,0,0,14
	.word	55592
	.byte	33
	.byte	'Ifx_SRC_QSPI',0,4,245,1,3
	.word	55627
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,132,2,25,4,13
	.byte	'SR',0
	.word	724
	.byte	4,2,35,0,0,14
	.word	55654
	.byte	33
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,135,2,3
	.word	55692
	.byte	18,4
	.word	55654
	.byte	19,0,0,14
	.word	55724
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,150,2,25,4,13
	.byte	'HSCT',0
	.word	55733
	.byte	4,2,35,0,0,14
	.word	55738
	.byte	33
	.byte	'Ifx_SRC_HSCT',0,4,153,2,3
	.word	55773
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,168,2,25,16,13
	.byte	'COK',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	724
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	724
	.byte	4,2,35,12,0,14
	.word	55800
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,174,2,3
	.word	55881
	.byte	18,64
	.word	55800
	.byte	19,3,0,14
	.word	55916
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,189,2,25,68,13
	.byte	'CH',0
	.word	55925
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	724
	.byte	4,2,35,64,0,14
	.word	55930
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,193,2,3
	.word	55981
	.byte	18,68
	.word	55930
	.byte	19,0,0,14
	.word	56013
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,208,2,25,68,13
	.byte	'HSSL',0
	.word	56022
	.byte	68,2,35,0,0,14
	.word	56027
	.byte	33
	.byte	'Ifx_SRC_HSSL',0,4,211,2,3
	.word	56062
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,4,226,2,25,16,13
	.byte	'DTR',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	724
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2036
	.byte	4,2,35,12,0,14
	.word	56089
	.byte	33
	.byte	'Ifx_SRC_I2C_I2C',0,4,232,2,3
	.word	56170
	.byte	18,16
	.word	56089
	.byte	19,0,0,14
	.word	56200
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,4,247,2,25,16,13
	.byte	'I2C',0
	.word	56209
	.byte	16,2,35,0,0,14
	.word	56214
	.byte	33
	.byte	'Ifx_SRC_I2C',0,4,250,2,3
	.word	56247
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,4,137,3,25,4,13
	.byte	'SR',0
	.word	724
	.byte	4,2,35,0,0,14
	.word	56273
	.byte	33
	.byte	'Ifx_SRC_SENT_SENT',0,4,140,3,3
	.word	56311
	.byte	18,40
	.word	56273
	.byte	19,9,0,14
	.word	56343
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,4,155,3,25,40,13
	.byte	'SENT',0
	.word	56352
	.byte	40,2,35,0,0,14
	.word	56357
	.byte	33
	.byte	'Ifx_SRC_SENT',0,4,158,3,3
	.word	56392
	.byte	18,20
	.word	724
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,4,173,3,25,20,13
	.byte	'SR',0
	.word	56419
	.byte	20,2,35,0,0,14
	.word	56428
	.byte	33
	.byte	'Ifx_SRC_MSC_MSC',0,4,176,3,3
	.word	56464
	.byte	18,40
	.word	56428
	.byte	19,1,0,14
	.word	56494
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,191,3,25,40,13
	.byte	'MSC',0
	.word	56503
	.byte	40,2,35,0,0,14
	.word	56508
	.byte	33
	.byte	'Ifx_SRC_MSC',0,4,194,3,3
	.word	56541
	.byte	18,16
	.word	724
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,209,3,25,16,13
	.byte	'SR',0
	.word	56567
	.byte	16,2,35,0,0,14
	.word	56576
	.byte	33
	.byte	'Ifx_SRC_CCU6_CCU',0,4,212,3,3
	.word	56613
	.byte	18,32
	.word	56576
	.byte	19,1,0,14
	.word	56644
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,227,3,25,32,13
	.byte	'CCU',0
	.word	56653
	.byte	32,2,35,0,0,14
	.word	56658
	.byte	33
	.byte	'Ifx_SRC_CCU6',0,4,230,3,3
	.word	56692
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,245,3,25,24,13
	.byte	'CIRQ',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	724
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	724
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	724
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	724
	.byte	4,2,35,20,0,14
	.word	56719
	.byte	33
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,253,3,3
	.word	56821
	.byte	18,24
	.word	56719
	.byte	19,0,0,14
	.word	56855
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,140,4,25,24,13
	.byte	'GPT12',0
	.word	56864
	.byte	24,2,35,0,0,14
	.word	56869
	.byte	33
	.byte	'Ifx_SRC_GPT12',0,4,143,4,3
	.word	56906
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,4,158,4,25,8,13
	.byte	'SR',0
	.word	55098
	.byte	8,2,35,0,0,14
	.word	56934
	.byte	33
	.byte	'Ifx_SRC_STM_STM',0,4,161,4,3
	.word	56970
	.byte	18,24
	.word	56934
	.byte	19,2,0,14
	.word	57000
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,176,4,25,24,13
	.byte	'STM',0
	.word	57009
	.byte	24,2,35,0,0,14
	.word	57014
	.byte	33
	.byte	'Ifx_SRC_STM',0,4,179,4,3
	.word	57047
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,194,4,25,4,13
	.byte	'SR',0
	.word	724
	.byte	4,2,35,0,0,14
	.word	57073
	.byte	33
	.byte	'Ifx_SRC_FCE_FCE0',0,4,197,4,3
	.word	57110
	.byte	14
	.word	57073
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,212,4,25,4,13
	.byte	'FCE0',0
	.word	57141
	.byte	4,2,35,0,0,14
	.word	57146
	.byte	33
	.byte	'Ifx_SRC_FCE',0,4,215,4,3
	.word	57180
	.byte	18,32
	.word	417
	.byte	19,31,0,18,128,4
	.word	724
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,4,230,4,25,176,4,13
	.byte	'ERR',0
	.word	56567
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	57206
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	57215
	.byte	128,4,2,35,48,0,14
	.word	57225
	.byte	33
	.byte	'Ifx_SRC_DMA_DMA',0,4,235,4,3
	.word	57297
	.byte	18,176,4
	.word	57225
	.byte	19,0,0,14
	.word	57327
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,4,250,4,25,176,4,13
	.byte	'DMA',0
	.word	57337
	.byte	176,4,2,35,0,0,14
	.word	57342
	.byte	33
	.byte	'Ifx_SRC_DMA',0,4,253,4,3
	.word	57377
	.byte	18,40
	.word	724
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,4,140,5,25,40,13
	.byte	'SR',0
	.word	57403
	.byte	40,2,35,0,0,14
	.word	57412
	.byte	33
	.byte	'Ifx_SRC_GETH_GETH',0,4,143,5,3
	.word	57450
	.byte	18,40
	.word	57412
	.byte	19,0,0,14
	.word	57482
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,158,5,25,40,13
	.byte	'GETH',0
	.word	57491
	.byte	40,2,35,0,0,14
	.word	57496
	.byte	33
	.byte	'Ifx_SRC_GETH',0,4,161,5,3
	.word	57531
	.byte	18,64
	.word	724
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,4,176,5,25,64,13
	.byte	'INT',0
	.word	57558
	.byte	64,2,35,0,0,14
	.word	57567
	.byte	33
	.byte	'Ifx_SRC_CAN_CAN',0,4,179,5,3
	.word	57604
	.byte	18,128,1
	.word	57567
	.byte	19,1,0,14
	.word	57634
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,4,194,5,25,128,1,13
	.byte	'CAN',0
	.word	57644
	.byte	128,1,2,35,0,0,14
	.word	57649
	.byte	33
	.byte	'Ifx_SRC_CAN',0,4,197,5,3
	.word	57684
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,4,212,5,25,16,13
	.byte	'SR0',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	724
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	724
	.byte	4,2,35,12,0,14
	.word	57710
	.byte	33
	.byte	'Ifx_SRC_VADC_G',0,4,218,5,3
	.word	57785
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,4,237,5,25,4,13
	.byte	'SR0',0
	.word	724
	.byte	4,2,35,0,0,14
	.word	57814
	.byte	33
	.byte	'Ifx_SRC_VADC_FC',0,4,240,5,3
	.word	57851
	.byte	18,64
	.word	57710
	.byte	19,3,0,14
	.word	57881
	.byte	18,64
	.word	417
	.byte	19,63,0,14
	.word	57710
	.byte	14
	.word	57710
	.byte	14
	.word	57710
	.byte	14
	.word	57710
	.byte	18,16
	.word	57814
	.byte	19,3,0,14
	.word	57924
	.byte	18,16
	.word	417
	.byte	19,15,0,18,32
	.word	57710
	.byte	19,1,0,14
	.word	57947
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,4,128,6,25,128,2,13
	.byte	'G',0
	.word	57890
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	57895
	.byte	64,2,35,64,13
	.byte	'G8',0
	.word	57904
	.byte	16,3,35,128,1,13
	.byte	'G9',0
	.word	57909
	.byte	16,3,35,144,1,13
	.byte	'G10',0
	.word	57914
	.byte	16,3,35,160,1,13
	.byte	'G11',0
	.word	57919
	.byte	16,3,35,176,1,13
	.byte	'FC',0
	.word	57933
	.byte	16,3,35,192,1,13
	.byte	'reserved_D0',0
	.word	57938
	.byte	16,3,35,208,1,13
	.byte	'CG',0
	.word	57956
	.byte	32,3,35,224,1,0,14
	.word	57961
	.byte	33
	.byte	'Ifx_SRC_VADC',0,4,139,6,3
	.word	58117
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,154,6,25,8,13
	.byte	'SRM',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	724
	.byte	4,2,35,4,0,14
	.word	58144
	.byte	33
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,158,6,3
	.word	58198
	.byte	18,48
	.word	58144
	.byte	19,5,0,14
	.word	58232
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,173,6,25,48,13
	.byte	'DSADC',0
	.word	58241
	.byte	48,2,35,0,0,14
	.word	58246
	.byte	33
	.byte	'Ifx_SRC_DSADC',0,4,176,6,3
	.word	58283
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,191,6,25,48,13
	.byte	'INT0',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	724
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	724
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	724
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	724
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	724
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	724
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	724
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	724
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3856
	.byte	8,2,35,40,0,14
	.word	58311
	.byte	33
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,204,6,3
	.word	58506
	.byte	18,48
	.word	58311
	.byte	19,0,0,14
	.word	58538
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,4,219,6,25,48,13
	.byte	'ERAY',0
	.word	58547
	.byte	48,2,35,0,0,14
	.word	58552
	.byte	33
	.byte	'Ifx_SRC_ERAY',0,4,222,6,3
	.word	58587
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,4,237,6,25,8,13
	.byte	'HSM',0
	.word	55098
	.byte	8,2,35,0,0,14
	.word	58614
	.byte	33
	.byte	'Ifx_SRC_HSM_HSM',0,4,240,6,3
	.word	58651
	.byte	18,8
	.word	58614
	.byte	19,0,0,14
	.word	58681
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,4,255,6,25,8,13
	.byte	'HSM',0
	.word	58690
	.byte	8,2,35,0,0,14
	.word	58695
	.byte	33
	.byte	'Ifx_SRC_HSM',0,4,130,7,3
	.word	58728
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,145,7,25,16,13
	.byte	'SCUERU',0
	.word	56567
	.byte	16,2,35,0,0,14
	.word	58754
	.byte	33
	.byte	'Ifx_SRC_SCU',0,4,148,7,3
	.word	58790
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,4,163,7,25,4,13
	.byte	'SR',0
	.word	724
	.byte	4,2,35,0,0,14
	.word	58816
	.byte	33
	.byte	'Ifx_SRC_PMS_PMS',0,4,166,7,3
	.word	58852
	.byte	18,16
	.word	58816
	.byte	19,3,0,14
	.word	58882
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,4,181,7,25,16,13
	.byte	'PMS',0
	.word	58891
	.byte	16,2,35,0,0,14
	.word	58896
	.byte	33
	.byte	'Ifx_SRC_PMS',0,4,184,7,3
	.word	58929
	.byte	18,12
	.word	724
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,4,199,7,25,12,13
	.byte	'SR',0
	.word	58955
	.byte	12,2,35,0,0,14
	.word	58964
	.byte	33
	.byte	'Ifx_SRC_SMU_SMU',0,4,202,7,3
	.word	59000
	.byte	18,12
	.word	58964
	.byte	19,0,0,14
	.word	59030
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,217,7,25,12,13
	.byte	'SMU',0
	.word	59039
	.byte	12,2,35,0,0,14
	.word	59044
	.byte	33
	.byte	'Ifx_SRC_SMU',0,4,220,7,3
	.word	59077
	.byte	18,32
	.word	724
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,235,7,25,32,13
	.byte	'SR',0
	.word	59103
	.byte	32,2,35,0,0,14
	.word	59112
	.byte	33
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,238,7,3
	.word	59150
	.byte	18,32
	.word	59112
	.byte	19,0,0,14
	.word	59182
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,253,7,25,32,13
	.byte	'PSI5',0
	.word	59191
	.byte	32,2,35,0,0,14
	.word	59196
	.byte	33
	.byte	'Ifx_SRC_PSI5',0,4,128,8,3
	.word	59231
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,4,143,8,25,24,13
	.byte	'LI0',0
	.word	724
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	724
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	724
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	724
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	724
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	724
	.byte	4,2,35,20,0,14
	.word	59258
	.byte	33
	.byte	'Ifx_SRC_DAM_DAM',0,4,151,8,3
	.word	59359
	.byte	18,24
	.word	59258
	.byte	19,0,0,14
	.word	59389
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,4,166,8,25,24,13
	.byte	'DAM',0
	.word	59398
	.byte	24,2,35,0,0,14
	.word	59403
	.byte	33
	.byte	'Ifx_SRC_DAM',0,4,169,8,3
	.word	59436
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,184,8,25,32,13
	.byte	'SR',0
	.word	59103
	.byte	32,2,35,0,0,14
	.word	59462
	.byte	33
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,187,8,3
	.word	59502
	.byte	18,32
	.word	59462
	.byte	19,0,0,14
	.word	59536
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,202,8,25,32,13
	.byte	'PSI5S',0
	.word	59545
	.byte	32,2,35,0,0,14
	.word	59550
	.byte	33
	.byte	'Ifx_SRC_PSI5S',0,4,205,8,3
	.word	59587
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,220,8,25,32,13
	.byte	'SR',0
	.word	59103
	.byte	32,2,35,0,0,14
	.word	59615
	.byte	33
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,223,8,3
	.word	59653
	.byte	18,96
	.word	59615
	.byte	19,2,0,14
	.word	59685
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,4,238,8,25,96,13
	.byte	'GPSR',0
	.word	59694
	.byte	96,2,35,0,0,14
	.word	59699
	.byte	33
	.byte	'Ifx_SRC_GPSR',0,4,241,8,3
	.word	59734
	.byte	33
	.byte	'IfxHssl_ChannelId',0,11,80,3
	.word	21313
	.byte	33
	.byte	'IfxHssl_DataLength',0,11,120,3
	.word	24620
	.byte	15,11,125,9,1,16
	.byte	'IfxHssl_Hsct_InterruptSource_headerError',0,1,16
	.byte	'IfxHssl_Hsct_InterruptSource_payloadError',0,2,16
	.byte	'IfxHssl_Hsct_InterruptSource_commandError',0,3,16
	.byte	'IfxHssl_Hsct_InterruptSource_interfaceControlFrameSend',0,4,16
	.byte	'IfxHssl_Hsct_InterruptSource_speedModeSwitchError',0,5,16
	.byte	'IfxHssl_Hsct_InterruptSource_unsolicitedMessageSendFinished',0,6,16
	.byte	'IfxHssl_Hsct_InterruptSource_pllLockLosterror',0,7,16
	.byte	'IfxHssl_Hsct_InterruptSource_UnsolicitedMessageReceived',0,8,16
	.byte	'IfxHssl_Hsct_InterruptSource_pingAnswerReceived',0,9,16
	.byte	'IfxHssl_Hsct_InterruptSource_txTransferError',0,10,16
	.byte	'IfxHssl_Hsct_InterruptSource_synchronizationFifoOverflow',0,11,16
	.byte	'IfxHssl_Hsct_InterruptSource_synchronizationFifoUnderflow',0,12,0,33
	.byte	'IfxHssl_Hsct_InterruptSource',0,11,142,1,3
	.word	59814
	.byte	15,11,147,1,9,1,16
	.byte	'IfxHssl_Hsct_SleepMode_enable',0,0,16
	.byte	'IfxHssl_Hsct_SleepMode_disable',0,1,0,33
	.byte	'IfxHssl_Hsct_SleepMode',0,11,151,1,3
	.word	60482
	.byte	15,11,156,1,9,1,16
	.byte	'IfxHssl_Hssl_SleepMode_enable',0,0,16
	.byte	'IfxHssl_Hssl_SleepMode_disable',0,1,0,33
	.byte	'IfxHssl_Hssl_SleepMode',0,11,160,1,3
	.word	60586
	.byte	33
	.byte	'IfxHssl_InterfaceMode',0,11,169,1,3
	.word	23736
	.byte	15,11,174,1,9,1,16
	.byte	'IfxHssl_MasterModeRxSpeed_lowSpeed',0,0,16
	.byte	'IfxHssl_MasterModeRxSpeed_mediumSpeed',0,1,16
	.byte	'IfxHssl_MasterModeRxSpeed_highSpeed',0,2,0,33
	.byte	'IfxHssl_MasterModeRxSpeed',0,11,179,1,3
	.word	60721
	.byte	15,11,184,1,9,1,16
	.byte	'IfxHssl_MasterModeTxSpeed_lowSpeed',0,0,16
	.byte	'IfxHssl_MasterModeTxSpeed_highSpeed',0,2,0,33
	.byte	'IfxHssl_MasterModeTxSpeed',0,11,188,1,3
	.word	60878
	.byte	33
	.byte	'IfxHssl_StreamingMode',0,11,216,1,3
	.word	21604
	.byte	15,11,220,1,9,1,16
	.byte	'IfxHssl_SuspendMode_none',0,0,16
	.byte	'IfxHssl_SuspendMode_hard',0,1,16
	.byte	'IfxHssl_SuspendMode_soft',0,2,0,33
	.byte	'IfxHssl_SuspendMode',0,11,225,1,3
	.word	61026
	.byte	15,11,242,1,9,1,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_notAcknowledgeError',0,0,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_transactionTagError',0,4,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_timeoutError',0,8,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_unexpectedError',0,12,0,33
	.byte	'IfxHssl_Hssl_ERRInterruptSource',0,11,248,1,3
	.word	61143
	.byte	15,11,253,1,9,1,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_memoryAccessViolation',0,21,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_busAccessError',0,22,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_channelNumberCodeError',0,23,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_dataLengthError',0,24,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_crcError',0,25,0,33
	.byte	'IfxHssl_Hssl_EXIInterruptSource',0,11,133,2,3
	.word	61396
	.byte	33
	.byte	'IfxHssl_Hsct',0,11,147,2,3
	.word	23692
	.byte	33
	.byte	'IfxHssl_Hsct_Config',0,11,157,2,3
	.word	23804
	.byte	33
	.byte	'Ifx_P_ACCEN0_Bits',0,7,102,3
	.word	7384
	.byte	33
	.byte	'Ifx_P_ACCEN1_Bits',0,7,108,3
	.word	7297
	.byte	33
	.byte	'Ifx_P_ESR_Bits',0,7,130,1,3
	.word	3865
	.byte	33
	.byte	'Ifx_P_ID_Bits',0,7,138,1,3
	.word	1916
	.byte	33
	.byte	'Ifx_P_IN_Bits',0,7,160,1,3
	.word	2912
	.byte	33
	.byte	'Ifx_P_IOCR0_Bits',0,7,173,1,3
	.word	2045
	.byte	33
	.byte	'Ifx_P_IOCR12_Bits',0,7,186,1,3
	.word	2692
	.byte	33
	.byte	'Ifx_P_IOCR4_Bits',0,7,199,1,3
	.word	2260
	.byte	33
	.byte	'Ifx_P_IOCR8_Bits',0,7,212,1,3
	.word	2475
	.byte	33
	.byte	'Ifx_P_LPCR_Bits',0,7,231,1,3
	.word	6959
	.byte	33
	.byte	'Ifx_P_OMCR_Bits',0,7,253,1,3
	.word	6611
	.byte	33
	.byte	'Ifx_P_OMCR0_Bits',0,7,136,2,3
	.word	5598
	.byte	33
	.byte	'Ifx_P_OMCR12_Bits',0,7,146,2,3
	.word	6122
	.byte	33
	.byte	'Ifx_P_OMCR4_Bits',0,7,157,2,3
	.word	5772
	.byte	33
	.byte	'Ifx_P_OMCR8_Bits',0,7,168,2,3
	.word	5946
	.byte	33
	.byte	'Ifx_P_OMR_Bits',0,7,205,2,3
	.word	1345
	.byte	33
	.byte	'Ifx_P_OMSR_Bits',0,7,227,2,3
	.word	6278
	.byte	33
	.byte	'Ifx_P_OMSR0_Bits',0,7,237,2,3
	.word	4935
	.byte	33
	.byte	'Ifx_P_OMSR12_Bits',0,7,248,2,3
	.word	5423
	.byte	33
	.byte	'Ifx_P_OMSR4_Bits',0,7,131,3,3
	.word	5082
	.byte	33
	.byte	'Ifx_P_OMSR8_Bits',0,7,142,3,3
	.word	5251
	.byte	33
	.byte	'Ifx_P_OUT_Bits',0,7,164,3,3
	.word	1029
	.byte	33
	.byte	'Ifx_P_PCSR_Bits',0,7,187,3,3
	.word	4571
	.byte	33
	.byte	'Ifx_P_PDISC_Bits',0,7,209,3,3
	.word	4205
	.byte	33
	.byte	'Ifx_P_PDR0_Bits',0,7,230,3,3
	.word	3236
	.byte	33
	.byte	'Ifx_P_PDR1_Bits',0,7,251,3,3
	.word	3540
	.byte	33
	.byte	'Ifx_P_ACCEN0',0,7,136,4,3
	.word	7911
	.byte	33
	.byte	'Ifx_P_ACCEN1',0,7,144,4,3
	.word	7344
	.byte	33
	.byte	'Ifx_P_ESR',0,7,152,4,3
	.word	4156
	.byte	33
	.byte	'Ifx_P_ID',0,7,160,4,3
	.word	1996
	.byte	33
	.byte	'Ifx_P_IN',0,7,168,4,3
	.word	3187
	.byte	33
	.byte	'Ifx_P_IOCR0',0,7,176,4,3
	.word	2220
	.byte	33
	.byte	'Ifx_P_IOCR12',0,7,184,4,3
	.word	2872
	.byte	33
	.byte	'Ifx_P_IOCR4',0,7,192,4,3
	.word	2435
	.byte	33
	.byte	'Ifx_P_IOCR8',0,7,200,4,3
	.word	2652
	.byte	33
	.byte	'Ifx_P_LPCR',0,7,208,4,3
	.word	7239
	.byte	33
	.byte	'Ifx_P_OMCR',0,7,216,4,3
	.word	6919
	.byte	33
	.byte	'Ifx_P_OMCR0',0,7,224,4,3
	.word	5732
	.byte	33
	.byte	'Ifx_P_OMCR12',0,7,232,4,3
	.word	6238
	.byte	33
	.byte	'Ifx_P_OMCR4',0,7,240,4,3
	.word	5906
	.byte	33
	.byte	'Ifx_P_OMCR8',0,7,248,4,3
	.word	6082
	.byte	33
	.byte	'Ifx_P_OMR',0,7,128,5,3
	.word	1876
	.byte	33
	.byte	'Ifx_P_OMSR',0,7,136,5,3
	.word	6571
	.byte	33
	.byte	'Ifx_P_OMSR0',0,7,144,5,3
	.word	5042
	.byte	33
	.byte	'Ifx_P_OMSR12',0,7,152,5,3
	.word	5558
	.byte	33
	.byte	'Ifx_P_OMSR4',0,7,160,5,3
	.word	5211
	.byte	33
	.byte	'Ifx_P_OMSR8',0,7,168,5,3
	.word	5383
	.byte	33
	.byte	'Ifx_P_OUT',0,7,176,5,3
	.word	1305
	.byte	33
	.byte	'Ifx_P_PCSR',0,7,184,5,3
	.word	4895
	.byte	33
	.byte	'Ifx_P_PDISC',0,7,192,5,3
	.word	4531
	.byte	33
	.byte	'Ifx_P_PDR0',0,7,200,5,3
	.word	3500
	.byte	33
	.byte	'Ifx_P_PDR1',0,7,208,5,3
	.word	3816
	.byte	14
	.word	7951
	.byte	33
	.byte	'Ifx_P',0,7,128,6,3
	.word	62944
	.byte	15,6,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,33
	.byte	'IfxPort_ControlledBy',0,6,77,3
	.word	62964
	.byte	33
	.byte	'IfxPort_InputMode',0,6,87,3
	.word	8531
	.byte	15,6,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,33
	.byte	'IfxPort_LvdsMode',0,6,95,3
	.word	63081
	.byte	33
	.byte	'IfxPort_Mode',0,6,122,3
	.word	22440
	.byte	33
	.byte	'IfxPort_OutputIdx',0,6,136,1,3
	.word	8832
	.byte	33
	.byte	'IfxPort_OutputMode',0,6,145,1,3
	.word	8736
	.byte	33
	.byte	'IfxPort_PadDriver',0,6,165,1,3
	.word	23184
	.byte	15,6,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,33
	.byte	'IfxPort_PadSupply',0,6,173,1,3
	.word	63265
	.byte	15,6,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,33
	.byte	'IfxPort_PinFunctionMode',0,6,181,1,3
	.word	63345
	.byte	33
	.byte	'IfxPort_State',0,6,193,1,3
	.word	9145
	.byte	33
	.byte	'IfxHssl_Hssl_FrameRequest',0,8,223,3,3
	.word	21407
	.byte	33
	.byte	'IfxHssl_Hssl_Status',0,8,232,3,3
	.word	24533
	.byte	33
	.byte	'IfxHssl_Hssl_AccessWindow',0,8,248,3,3
	.word	24228
	.byte	33
	.byte	'IfxHssl_Hssl_errorFlags',0,8,137,4,3
	.word	23904
	.byte	33
	.byte	'IfxHssl_Hssl',0,8,148,4,3
	.word	24164
	.byte	33
	.byte	'IfxHssl_Hssl_Channel',0,8,161,4,3
	.word	21677
	.byte	33
	.byte	'IfxHssl_Hssl_ChannelConfig',0,8,172,4,3
	.word	24411
	.byte	33
	.byte	'IfxHssl_Hssl_Config',0,8,184,4,3
	.word	24263
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L118:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,19,1,58,15,59,15,57,15,11,15,0,0,21,38,0,73,19
	.byte	0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,3,8,73,19,0,0,26,46,0,3,8,54,15,39,12,63,12,60,12,0,0,27,46,1,49,19,0,0,28,5,0,49,19,0,0,29
	.byte	46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,30,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,31,29,1,49,19,0,0,32,11,0,49,19,0,0,33,22,0,3,8,58,15,59,15,57,15,73,19,0,0,34,21,0,54
	.byte	15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L119:
	.word	.L442-.L441
.L441:
	.half	3
	.word	.L444-.L443
.L443:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.h',0,0,0,0
	.byte	'IfxHssl_regdef.h',0,3,0,0
	.byte	'IfxHsct_regdef.h',0,3,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std\\IfxHssl.h',0,0,0
	.byte	0
	.byte	'IfxScuWdt.h',0,6,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0,0
.L444:
.L442:
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_info'
.L120:
	.word	743
	.half	3
	.word	.L121
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L123,.L122
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_initHsctModule',0,1,157,1,6,1,1,1
	.word	.L91,.L210,.L90
	.byte	4
	.byte	'hsct',0,1,157,1,48
	.word	.L211,.L212
	.byte	4
	.byte	'config',0,1,157,1,81
	.word	.L213,.L214
	.byte	5
	.word	.L215
	.byte	6
	.byte	'hsctSFR',0,1,159,1,15
	.word	.L216,.L217
	.byte	7
	.word	.L218,.L219,.L220
	.byte	8
	.word	.L221,.L222
	.byte	8
	.word	.L223,.L224
	.byte	8
	.word	.L225,.L226
	.byte	9
	.word	.L227,.L228
	.byte	0,7
	.word	.L218,.L229,.L230
	.byte	8
	.word	.L221,.L222
	.byte	8
	.word	.L223,.L224
	.byte	8
	.word	.L225,.L226
	.byte	0,7
	.word	.L218,.L230,.L231
	.byte	8
	.word	.L221,.L222
	.byte	8
	.word	.L223,.L224
	.byte	8
	.word	.L225,.L226
	.byte	10
	.word	.L227,.L230,.L231
	.byte	0,7
	.word	.L232,.L231,.L233
	.byte	8
	.word	.L234,.L235
	.byte	8
	.word	.L236,.L237
	.byte	8
	.word	.L238,.L239
	.byte	8
	.word	.L240,.L241
	.byte	10
	.word	.L242,.L231,.L233
	.byte	0,7
	.word	.L232,.L233,.L243
	.byte	8
	.word	.L234,.L235
	.byte	8
	.word	.L236,.L237
	.byte	8
	.word	.L238,.L239
	.byte	8
	.word	.L240,.L241
	.byte	10
	.word	.L242,.L233,.L243
	.byte	0,7
	.word	.L232,.L243,.L244
	.byte	8
	.word	.L234,.L235
	.byte	8
	.word	.L236,.L237
	.byte	8
	.word	.L238,.L239
	.byte	8
	.word	.L240,.L241
	.byte	9
	.word	.L242,.L245
	.byte	0,7
	.word	.L232,.L246,.L247
	.byte	8
	.word	.L234,.L235
	.byte	8
	.word	.L236,.L237
	.byte	8
	.word	.L238,.L239
	.byte	8
	.word	.L240,.L241
	.byte	0,7
	.word	.L218,.L12,.L13
	.byte	8
	.word	.L221,.L222
	.byte	8
	.word	.L223,.L224
	.byte	8
	.word	.L225,.L226
	.byte	10
	.word	.L227,.L12,.L13
	.byte	0,11
	.word	.L248,.L14
	.byte	6
	.byte	'psw',0,1,189,1,16
	.word	.L249,.L250
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_abbrev'
.L121:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0,10,11
	.byte	0,49,16,17,1,18,1,0,0,11,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_line'
.L122:
	.word	.L446-.L445
.L445:
	.half	3
	.word	.L448-.L447
.L447:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0
	.byte	'IfxPort.h',0,1,0,0,0
.L448:
	.byte	5,6,7,0,5,2
	.word	.L91
	.byte	3,156,1,1,5,31,9
	.half	.L360-.L91
	.byte	3,2,1,5,20,9
	.half	.L361-.L360
	.byte	3,2,1,4,2,5,30,9
	.half	.L219-.L361
	.byte	3,254,3,1,4,1,5,28,9
	.half	.L220-.L219
	.byte	3,131,124,1,5,20,9
	.half	.L449-.L220
	.byte	1,4,2,5,40,9
	.half	.L229-.L449
	.byte	3,253,3,1,5,24,9
	.half	.L450-.L229
	.byte	1,5,40,9
	.half	.L451-.L450
	.byte	1,5,30,9
	.half	.L230-.L451
	.byte	1,5,40,1,5,30,9
	.half	.L231-.L230
	.byte	3,6,1,5,40,1,5,30,9
	.half	.L233-.L231
	.byte	1,5,40,1,5,24,9
	.half	.L243-.L233
	.byte	1,4,1,5,23,9
	.half	.L452-.L243
	.byte	3,250,123,1,5,15,9
	.half	.L244-.L452
	.byte	3,13,1,5,5,9
	.half	.L453-.L244
	.byte	1,4,2,5,30,7,9
	.half	.L246-.L453
	.byte	3,249,3,1,5,40,1,4,1,5,46,9
	.half	.L247-.L246
	.byte	3,141,124,1,5,49,1,5,102,9
	.half	.L454-.L247
	.byte	3,124,1,4,2,5,30,9
	.half	.L12-.L454
	.byte	3,241,3,1,5,40,1,4,1,5,15,9
	.half	.L13-.L12
	.byte	3,155,124,1,5,5,9
	.half	.L455-.L13
	.byte	1,5,54,7,9
	.half	.L248-.L455
	.byte	3,3,1,5,20,9
	.half	.L352-.L248
	.byte	1,5,35,9
	.half	.L354-.L352
	.byte	3,1,1,5,20,9
	.half	.L353-.L354
	.byte	3,2,1,5,33,9
	.half	.L456-.L353
	.byte	3,8,1,5,20,9
	.half	.L355-.L456
	.byte	3,120,1,5,30,9
	.half	.L457-.L355
	.byte	1,5,20,9
	.half	.L458-.L457
	.byte	3,1,1,5,30,9
	.half	.L459-.L458
	.byte	1,5,20,9
	.half	.L460-.L459
	.byte	3,2,1,5,30,9
	.half	.L461-.L460
	.byte	1,5,20,9
	.half	.L462-.L461
	.byte	3,1,1,5,30,9
	.half	.L463-.L462
	.byte	1,5,20,9
	.half	.L464-.L463
	.byte	3,1,1,5,30,9
	.half	.L465-.L464
	.byte	1,5,20,9
	.half	.L466-.L465
	.byte	3,1,1,5,30,9
	.half	.L467-.L466
	.byte	1,5,33,9
	.half	.L468-.L467
	.byte	3,2,1,5,30,9
	.half	.L14-.L468
	.byte	3,6,1,5,22,9
	.half	.L357-.L14
	.byte	3,2,1,5,31,9
	.half	.L469-.L357
	.byte	1,5,15,9
	.half	.L470-.L469
	.byte	3,3,1,5,5,9
	.half	.L471-.L470
	.byte	1,5,24,7,9
	.half	.L472-.L471
	.byte	3,2,1,5,36,9
	.half	.L473-.L472
	.byte	1,9
	.half	.L474-.L473
	.byte	3,1,1,9
	.half	.L475-.L474
	.byte	3,14,1,5,34,1,5,1,9
	.half	.L476-.L475
	.byte	3,35,1,5,24,7,9
	.half	.L15-.L476
	.byte	3,99,1,5,36,9
	.half	.L477-.L15
	.byte	1,9
	.half	.L478-.L477
	.byte	3,1,1,5,26,9
	.half	.L479-.L478
	.byte	3,13,1,5,36,9
	.half	.L480-.L479
	.byte	1,5,26,9
	.half	.L481-.L480
	.byte	3,1,1,5,36,9
	.half	.L482-.L481
	.byte	1,5,19,9
	.half	.L483-.L482
	.byte	3,3,1,5,9,9
	.half	.L484-.L483
	.byte	1,5,30,7,9
	.half	.L485-.L484
	.byte	3,2,1,5,40,9
	.half	.L486-.L485
	.byte	1,5,30,9
	.half	.L487-.L486
	.byte	3,1,1,5,40,9
	.half	.L488-.L487
	.byte	1,5,30,9
	.half	.L17-.L488
	.byte	3,3,1,5,28,1,5,34,9
	.half	.L18-.L17
	.byte	3,2,1,5,45,9
	.half	.L489-.L18
	.byte	1,5,1,7,9
	.half	.L490-.L489
	.byte	3,3,1,7,9
	.half	.L124-.L490
	.byte	0,1,1
.L446:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_ranges'
.L123:
	.word	-1,.L91,0,.L124-.L91,0,0
.L215:
	.word	-1,.L91,0,.L210-.L91,-1,.L93,0,.L209-.L93,-1,.L95,0,.L204-.L95,0,0
.L228:
	.word	-1,.L91,.L219-.L91,.L220-.L91,.L229-.L91,.L230-.L91,0,0
.L245:
	.word	-1,.L91,.L243-.L91,.L244-.L91,.L246-.L91,.L247-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_info'
.L125:
	.word	270
	.half	3
	.word	.L126
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L128,.L127
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_initHsctModuleConfig',0,1,138,2,6,1,1,1
	.word	.L97,.L251,.L96
	.byte	4
	.byte	'config',0,1,138,2,61
	.word	.L252,.L253
	.byte	4
	.byte	'hsct',0,1,138,2,79
	.word	.L216,.L254
	.byte	5
	.word	.L97,.L251
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_abbrev'
.L126:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_line'
.L127:
	.word	.L492-.L491
.L491:
	.half	3
	.word	.L494-.L493
.L493:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L494:
	.byte	5,18,7,0,5,2
	.word	.L97
	.byte	3,139,2,1,5,29,9
	.half	.L495-.L97
	.byte	3,3,1,5,27,1,9
	.half	.L496-.L495
	.byte	3,3,1,9
	.half	.L497-.L496
	.byte	3,2,1,5,1,9
	.half	.L498-.L497
	.byte	3,1,1,7,9
	.half	.L129-.L498
	.byte	0,1,1
.L492:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_ranges'
.L128:
	.word	-1,.L97,0,.L129-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_info'
.L130:
	.word	286
	.half	3
	.word	.L131
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L133,.L132
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_initHsslModule',0,1,152,2,6,1,1,1
	.word	.L99,.L255,.L98
	.byte	4
	.byte	'hssl',0,1,152,2,48
	.word	.L256,.L257
	.byte	4
	.byte	'config',0,1,152,2,81
	.word	.L258,.L259
	.byte	5
	.word	.L99,.L255
	.byte	6
	.byte	'hsslSFR',0,1,154,2,15
	.word	.L260,.L261
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_abbrev'
.L131:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_line'
.L132:
	.word	.L500-.L499
.L499:
	.half	3
	.word	.L502-.L501
.L501:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L502:
	.byte	5,6,7,0,5,2
	.word	.L99
	.byte	3,151,2,1,5,31,9
	.half	.L364-.L99
	.byte	3,2,1,5,16,9
	.half	.L365-.L364
	.byte	3,2,1,5,30,9
	.half	.L503-.L365
	.byte	3,3,1,5,19,9
	.half	.L362-.L503
	.byte	3,1,1,5,35,9
	.half	.L504-.L362
	.byte	1,5,27,9
	.half	.L505-.L504
	.byte	1,5,19,9
	.half	.L506-.L505
	.byte	3,1,1,5,27,9
	.half	.L507-.L506
	.byte	1,5,53,9
	.half	.L508-.L507
	.byte	3,3,1,5,30,9
	.half	.L509-.L508
	.byte	1,5,53,9
	.half	.L510-.L509
	.byte	3,1,1,5,30,9
	.half	.L511-.L510
	.byte	1,5,53,9
	.half	.L512-.L511
	.byte	3,1,1,5,30,9
	.half	.L513-.L512
	.byte	1,5,53,9
	.half	.L514-.L513
	.byte	3,1,1,5,30,9
	.half	.L515-.L514
	.byte	1,5,53,9
	.half	.L516-.L515
	.byte	3,1,1,5,30,9
	.half	.L517-.L516
	.byte	1,5,53,9
	.half	.L518-.L517
	.byte	3,1,1,5,30,9
	.half	.L519-.L518
	.byte	1,5,53,9
	.half	.L520-.L519
	.byte	3,1,1,5,30,9
	.half	.L521-.L520
	.byte	1,5,53,9
	.half	.L522-.L521
	.byte	3,1,1,5,30,9
	.half	.L523-.L522
	.byte	1,5,32,9
	.half	.L524-.L523
	.byte	3,2,1,5,30,9
	.half	.L525-.L524
	.byte	1,5,24,9
	.half	.L526-.L525
	.byte	3,2,1,5,30,9
	.half	.L527-.L526
	.byte	1,5,48,9
	.half	.L528-.L527
	.byte	3,1,1,5,30,9
	.half	.L529-.L528
	.byte	1,5,29,9
	.half	.L19-.L529
	.byte	3,2,1,5,33,9
	.half	.L530-.L19
	.byte	1,5,1,7,9
	.half	.L531-.L530
	.byte	3,2,1,7,9
	.half	.L134-.L531
	.byte	0,1,1
.L500:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_ranges'
.L133:
	.word	-1,.L99,0,.L134-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_info'
.L135:
	.word	270
	.half	3
	.word	.L136
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L138,.L137
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_initHsslModuleConfig',0,1,183,2,6,1,1,1
	.word	.L101,.L262,.L100
	.byte	4
	.byte	'config',0,1,183,2,61
	.word	.L263,.L264
	.byte	4
	.byte	'hssl',0,1,183,2,79
	.word	.L260,.L265
	.byte	5
	.word	.L101,.L262
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_abbrev'
.L136:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_line'
.L137:
	.word	.L533-.L532
.L532:
	.half	3
	.word	.L535-.L534
.L534:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L535:
	.byte	5,18,7,0,5,2
	.word	.L101
	.byte	3,184,2,1,5,35,9
	.half	.L536-.L101
	.byte	3,3,1,5,33,1,5,35,9
	.half	.L537-.L536
	.byte	3,1,1,5,33,1,9
	.half	.L538-.L537
	.byte	3,1,1,9
	.half	.L539-.L538
	.byte	3,1,1,9
	.half	.L540-.L539
	.byte	3,1,1,9
	.half	.L541-.L540
	.byte	3,1,1,9
	.half	.L542-.L541
	.byte	3,1,1,9
	.half	.L543-.L542
	.byte	3,1,1,5,26,9
	.half	.L544-.L543
	.byte	3,3,1,5,24,1,5,1,9
	.half	.L545-.L544
	.byte	3,1,1,7,9
	.half	.L139-.L545
	.byte	0,1,1
.L533:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_ranges'
.L138:
	.word	-1,.L101,0,.L139-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_info'
.L140:
	.word	271
	.half	3
	.word	.L141
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L143,.L142
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_initChannel',0,1,131,1,6,1,1,1
	.word	.L87,.L266,.L86
	.byte	4
	.byte	'channel',0,1,131,1,53
	.word	.L267,.L268
	.byte	4
	.byte	'channelConfig',0,1,131,1,96
	.word	.L269,.L270
	.byte	5
	.word	.L87,.L266
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_abbrev'
.L141:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_line'
.L142:
	.word	.L547-.L546
.L546:
	.half	3
	.word	.L549-.L548
.L548:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L549:
	.byte	5,49,7,0,5,2
	.word	.L87
	.byte	3,132,1,1,5,34,9
	.half	.L550-.L87
	.byte	1,5,49,9
	.half	.L551-.L550
	.byte	3,1,1,5,34,9
	.half	.L552-.L551
	.byte	1,5,49,9
	.half	.L553-.L552
	.byte	3,2,1,5,34,9
	.half	.L554-.L553
	.byte	1,5,36,9
	.half	.L555-.L554
	.byte	3,1,1,5,34,1,5,36,9
	.half	.L556-.L555
	.byte	3,2,1,5,34,1,5,49,9
	.half	.L557-.L556
	.byte	3,1,1,5,34,9
	.half	.L558-.L557
	.byte	1,5,49,9
	.half	.L559-.L558
	.byte	3,1,1,5,34,9
	.half	.L560-.L559
	.byte	1,5,1,9
	.half	.L561-.L560
	.byte	3,1,1,7,9
	.half	.L144-.L561
	.byte	0,1,1
.L547:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_ranges'
.L143:
	.word	-1,.L87,0,.L144-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_info'
.L145:
	.word	292
	.half	3
	.word	.L146
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L148,.L147
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_initChannelConfig',0,1,145,1,6,1,1,1
	.word	.L89,.L271,.L88
	.byte	4
	.byte	'channelConfig',0,1,145,1,65
	.word	.L272,.L273
	.byte	4
	.byte	'hssl',0,1,145,1,94
	.word	.L256,.L274
	.byte	4
	.byte	'hsct',0,1,145,1,114
	.word	.L211,.L275
	.byte	5
	.word	.L89,.L271
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_abbrev'
.L146:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_line'
.L147:
	.word	.L563-.L562
.L562:
	.half	3
	.word	.L565-.L564
.L564:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L565:
	.byte	5,40,7,0,5,2
	.word	.L89
	.byte	3,146,1,1,5,34,9
	.half	.L566-.L89
	.byte	1,5,36,9
	.half	.L567-.L566
	.byte	3,3,1,5,40,9
	.half	.L568-.L567
	.byte	3,126,1,5,34,9
	.half	.L569-.L568
	.byte	1,9
	.half	.L570-.L569
	.byte	3,2,1,5,36,9
	.half	.L571-.L570
	.byte	3,1,1,5,34,1,5,40,9
	.half	.L572-.L571
	.byte	3,1,1,5,34,9
	.half	.L573-.L572
	.byte	1,5,40,9
	.half	.L574-.L573
	.byte	3,1,1,5,34,9
	.half	.L575-.L574
	.byte	1,5,1,9
	.half	.L576-.L575
	.byte	3,1,1,7,9
	.half	.L149-.L576
	.byte	0,1,1
.L563:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_ranges'
.L148:
	.word	-1,.L89,0,.L149-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_info'
.L150:
	.word	286
	.half	3
	.word	.L151
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L153,.L152
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_read',0,1,189,3,21
	.word	.L276
	.byte	1,1,1
	.word	.L105,.L277,.L104
	.byte	4
	.byte	'channel',0,1,189,3,61
	.word	.L267,.L278
	.byte	4
	.byte	'address',0,1,189,3,77
	.word	.L279,.L280
	.byte	4
	.byte	'dataLength',0,1,189,3,105
	.word	.L281,.L282
	.byte	5
	.word	.L105,.L277
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_abbrev'
.L151:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_line'
.L152:
	.word	.L578-.L577
.L577:
	.half	3
	.word	.L580-.L579
.L579:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L580:
	.byte	5,21,7,0,5,2
	.word	.L105
	.byte	3,188,3,1,5,53,9
	.half	.L423-.L105
	.byte	3,3,1,5,99,9
	.half	.L420-.L423
	.byte	1,5,105,9
	.half	.L581-.L420
	.byte	1,5,1,9
	.half	.L154-.L581
	.byte	3,1,0,1,1
.L578:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_ranges'
.L153:
	.word	-1,.L105,0,.L154-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_info'
.L155:
	.word	291
	.half	3
	.word	.L156
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L158,.L157
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_sendControlCommand',0,1,196,3,6,1,1,1
	.word	.L107,.L283,.L106
	.byte	4
	.byte	'hsct',0,1,196,3,52
	.word	.L211,.L284
	.byte	4
	.byte	'command',0,1,196,3,64
	.word	.L285,.L286
	.byte	5
	.word	.L107,.L283
	.byte	6
	.byte	'hsctSFR',0,1,198,3,15
	.word	.L216,.L287
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_abbrev'
.L156:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_line'
.L157:
	.word	.L583-.L582
.L582:
	.half	3
	.word	.L585-.L584
.L584:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L585:
	.byte	5,29,7,0,5,2
	.word	.L107
	.byte	3,197,3,1,9
	.half	.L424-.L107
	.byte	3,2,1,5,22,9
	.half	.L586-.L424
	.byte	3,1,1,5,29,9
	.half	.L587-.L586
	.byte	1,5,24,9
	.half	.L588-.L587
	.byte	3,2,1,5,1,7,9
	.half	.L159-.L588
	.byte	3,1,0,1,1
.L583:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_ranges'
.L158:
	.word	-1,.L107,0,.L159-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_info'
.L160:
	.word	367
	.half	3
	.word	.L161
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L163,.L162
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_singleFrameRequest',0,1,207,3,21
	.word	.L276
	.byte	1,1,1
	.word	.L109,.L288,.L108
	.byte	4
	.byte	'channel',0,1,207,3,75
	.word	.L267,.L289
	.byte	4
	.byte	'frameRequest',0,1,207,3,110
	.word	.L290,.L291
	.byte	4
	.byte	'address',0,1,207,3,131,1
	.word	.L279,.L292
	.byte	4
	.byte	'data',0,1,207,3,147,1
	.word	.L279,.L293
	.byte	4
	.byte	'dataLength',0,1,207,3,172,1
	.word	.L281,.L294
	.byte	5
	.word	.L109,.L288
	.byte	6
	.byte	'hsslI',0,1,209,3,17
	.word	.L295,.L296
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_abbrev'
.L161:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_line'
.L162:
	.word	.L590-.L589
.L589:
	.half	3
	.word	.L592-.L591
.L591:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L592:
	.byte	5,47,7,0,5,2
	.word	.L109
	.byte	3,208,3,1,5,64,9
	.half	.L593-.L109
	.byte	1,5,56,9
	.half	.L594-.L593
	.byte	1,5,16,9
	.half	.L595-.L594
	.byte	3,2,1,5,56,9
	.half	.L596-.L595
	.byte	3,126,1,5,5,9
	.half	.L425-.L596
	.byte	3,2,1,5,16,7,9
	.half	.L597-.L425
	.byte	3,2,1,5,1,3,34,1,5,18,7,9
	.half	.L50-.L597
	.byte	3,97,1,5,26,9
	.half	.L598-.L50
	.byte	1,5,28,9
	.half	.L599-.L598
	.byte	3,1,1,5,26,1,5,10,9
	.half	.L600-.L599
	.byte	3,4,1,7,9
	.half	.L601-.L600
	.byte	3,4,1,9
	.half	.L602-.L601
	.byte	3,5,1,7,9
	.half	.L603-.L602
	.byte	3,5,1,5,1,7,9
	.half	.L604-.L603
	.byte	3,12,1,5,22,7,9
	.half	.L52-.L604
	.byte	3,103,1,5,27,9
	.half	.L605-.L52
	.byte	1,5,9,9
	.half	.L606-.L605
	.byte	3,2,1,5,22,9
	.half	.L53-.L606
	.byte	3,2,1,5,27,9
	.half	.L607-.L53
	.byte	1,5,9,3,3,1,5,22,9
	.half	.L54-.L607
	.byte	3,2,1,5,27,9
	.half	.L608-.L54
	.byte	1,9
	.half	.L609-.L608
	.byte	3,1,1,9
	.half	.L57-.L609
	.byte	3,1,1,5,9,9
	.half	.L610-.L57
	.byte	3,1,1,5,22,9
	.half	.L55-.L610
	.byte	3,3,1,5,27,9
	.half	.L611-.L55
	.byte	1,5,34,9
	.half	.L59-.L611
	.byte	3,7,1,5,12,9
	.half	.L612-.L59
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L164-.L612
	.byte	0,1,1
.L590:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_ranges'
.L163:
	.word	-1,.L109,0,.L164-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_info'
.L165:
	.word	386
	.half	3
	.word	.L166
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L168,.L167
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_waitAcknowledge',0,1,250,3,21
	.word	.L276
	.byte	1,1,1
	.word	.L111,.L297,.L110
	.byte	4
	.byte	'channel',0,1,250,3,72
	.word	.L267,.L298
	.byte	5
	.word	.L111,.L297
	.byte	6
	.byte	'requestType',0,1,252,3,23
	.word	.L279,.L299
	.byte	7
	.word	.L300
	.byte	6
	.byte	'qFlags',0,1,152,4,16
	.word	.L279,.L304
	.byte	6
	.byte	'mFlags',0,1,153,4,16
	.word	.L279,.L305
	.byte	6
	.byte	'acknwoledgeFlagsMask',0,1,154,4,16
	.word	.L279,.L306
	.byte	6
	.byte	'errorFlagsMask',0,1,155,4,16
	.word	.L279,.L307
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_abbrev'
.L166:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_line'
.L167:
	.word	.L614-.L613
.L613:
	.half	3
	.word	.L616-.L615
.L615:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L616:
	.byte	5,44,7,0,5,2
	.word	.L111
	.byte	3,251,3,1,9
	.half	.L617-.L111
	.byte	3,1,1,5,35,9
	.half	.L618-.L617
	.byte	3,127,1,5,9,9
	.half	.L426-.L618
	.byte	3,3,1,5,55,7,9
	.half	.L619-.L426
	.byte	1,5,68,9
	.half	.L620-.L619
	.byte	1,5,73,9
	.half	.L621-.L620
	.byte	1,5,39,7,9
	.half	.L65-.L621
	.byte	3,2,1,5,43,9
	.half	.L622-.L65
	.byte	1,7,9
	.half	.L623-.L622
	.byte	1,5,9,9
	.half	.L63-.L623
	.byte	3,7,1,5,55,3,119,1,5,25,9
	.half	.L624-.L63
	.byte	3,11,1,5,13,9
	.half	.L625-.L624
	.byte	3,4,1,5,116,7,9
	.half	.L626-.L625
	.byte	1,5,25,7,9
	.half	.L68-.L626
	.byte	3,2,1,5,9,9
	.half	.L69-.L68
	.byte	3,3,1,5,60,3,5,1,5,70,9
	.half	.L301-.L69
	.byte	3,2,1,5,60,3,127,1,5,25,9
	.half	.L302-.L301
	.byte	3,124,1,5,60,9
	.half	.L303-.L302
	.byte	3,5,1,5,53,9
	.half	.L627-.L303
	.byte	1,5,92,9
	.half	.L427-.L627
	.byte	1,5,94,9
	.half	.L628-.L427
	.byte	1,5,89,9
	.half	.L430-.L628
	.byte	1,5,56,9
	.half	.L629-.L430
	.byte	3,1,1,5,61,9
	.half	.L630-.L629
	.byte	1,5,30,9
	.half	.L631-.L630
	.byte	3,2,1,5,29,9
	.half	.L632-.L631
	.byte	1,5,41,9
	.half	.L633-.L632
	.byte	3,126,1,5,47,9
	.half	.L634-.L633
	.byte	3,2,1,5,53,9
	.half	.L431-.L634
	.byte	3,126,1,5,9,9
	.half	.L635-.L431
	.byte	3,2,1,5,20,7,9
	.half	.L636-.L635
	.byte	3,5,1,5,9,9
	.half	.L428-.L636
	.byte	1,5,20,7,9
	.half	.L71-.L428
	.byte	3,2,1,5,1,3,14,1,5,20,7,9
	.half	.L72-.L71
	.byte	3,117,1,5,9,9
	.half	.L429-.L72
	.byte	1,5,44,7,9
	.half	.L637-.L429
	.byte	3,2,1,5,42,1,5,20,9
	.half	.L638-.L637
	.byte	3,1,1,5,1,3,8,1,5,40,7,9
	.half	.L74-.L638
	.byte	3,124,1,5,38,1,5,12,9
	.half	.L66-.L74
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L169-.L66
	.byte	0,1,1
.L614:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_ranges'
.L168:
	.word	-1,.L111,0,.L169-.L111,0,0
.L300:
	.word	-1,.L111,.L301-.L111,.L302-.L111,.L303-.L111,.L66-.L111,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_info'
.L170:
	.word	305
	.half	3
	.word	.L171
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L173,.L172
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_write',0,1,181,4,21
	.word	.L276
	.byte	1,1,1
	.word	.L113,.L308,.L112
	.byte	4
	.byte	'channel',0,1,181,4,62
	.word	.L267,.L309
	.byte	4
	.byte	'address',0,1,181,4,78
	.word	.L279,.L310
	.byte	4
	.byte	'data',0,1,181,4,94
	.word	.L279,.L311
	.byte	4
	.byte	'dataLength',0,1,181,4,119
	.word	.L281,.L312
	.byte	5
	.word	.L113,.L308
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_abbrev'
.L171:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_line'
.L172:
	.word	.L640-.L639
.L639:
	.half	3
	.word	.L642-.L641
.L641:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L642:
	.byte	5,21,7,0,5,2
	.word	.L113
	.byte	3,180,4,1,5,53,9
	.half	.L437-.L113
	.byte	3,2,1,5,106,9
	.half	.L432-.L437
	.byte	1,5,1,9
	.half	.L174-.L432
	.byte	3,1,0,1,1
.L640:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_ranges'
.L173:
	.word	-1,.L113,0,.L174-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_info'
.L175:
	.word	260
	.half	3
	.word	.L176
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L178,.L177
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_checkErrors',0,1,53,6,1,1,1
	.word	.L81,.L313,.L80
	.byte	4
	.byte	'hssl',0,1,53,45
	.word	.L256,.L314
	.byte	5
	.word	.L81,.L313
	.byte	6
	.byte	'hsslSFR',0,1,55,15
	.word	.L260,.L315
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_abbrev'
.L176:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_line'
.L177:
	.word	.L644-.L643
.L643:
	.half	3
	.word	.L646-.L645
.L645:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L646:
	.byte	5,29,7,0,5,2
	.word	.L81
	.byte	3,54,1,5,26,9
	.half	.L350-.L81
	.byte	3,3,1,5,5,9
	.half	.L647-.L350
	.byte	1,5,25,7,9
	.half	.L648-.L647
	.byte	3,2,1,5,46,9
	.half	.L649-.L648
	.byte	1,5,26,9
	.half	.L2-.L649
	.byte	3,3,1,5,5,9
	.half	.L650-.L2
	.byte	1,5,25,7,9
	.half	.L651-.L650
	.byte	3,2,1,5,46,9
	.half	.L652-.L651
	.byte	1,5,26,9
	.half	.L3-.L652
	.byte	3,3,1,5,5,9
	.half	.L653-.L3
	.byte	1,5,25,7,9
	.half	.L654-.L653
	.byte	3,2,1,5,39,9
	.half	.L655-.L654
	.byte	1,5,26,9
	.half	.L4-.L655
	.byte	3,3,1,5,5,9
	.half	.L656-.L4
	.byte	1,5,25,7,9
	.half	.L657-.L656
	.byte	3,2,1,5,42,9
	.half	.L658-.L657
	.byte	1,5,26,9
	.half	.L5-.L658
	.byte	3,3,1,5,5,9
	.half	.L659-.L5
	.byte	1,5,25,7,9
	.half	.L660-.L659
	.byte	3,2,1,5,48,9
	.half	.L661-.L660
	.byte	1,5,26,9
	.half	.L6-.L661
	.byte	3,3,1,5,5,9
	.half	.L662-.L6
	.byte	1,5,25,7,9
	.half	.L663-.L662
	.byte	3,2,1,5,41,9
	.half	.L664-.L663
	.byte	1,5,26,9
	.half	.L7-.L664
	.byte	3,3,1,5,5,9
	.half	.L665-.L7
	.byte	1,5,25,7,9
	.half	.L666-.L665
	.byte	3,2,1,5,49,9
	.half	.L667-.L666
	.byte	1,5,26,9
	.half	.L8-.L667
	.byte	3,3,1,5,5,9
	.half	.L668-.L8
	.byte	1,5,25,7,9
	.half	.L669-.L668
	.byte	3,2,1,5,42,9
	.half	.L670-.L669
	.byte	1,5,26,9
	.half	.L9-.L670
	.byte	3,3,1,5,5,9
	.half	.L671-.L9
	.byte	1,5,25,7,9
	.half	.L672-.L671
	.byte	3,2,1,5,35,9
	.half	.L673-.L672
	.byte	1,5,1,9
	.half	.L10-.L673
	.byte	3,2,1,7,9
	.half	.L179-.L10
	.byte	0,1,1
.L644:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_ranges'
.L178:
	.word	-1,.L81,0,.L179-.L81,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_info'
.L180:
	.word	243
	.half	3
	.word	.L181
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L183,.L182
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_clearErrorFlags',0,1,105,6,1,1,1
	.word	.L83,.L316,.L82
	.byte	4
	.byte	'hssl',0,1,105,49
	.word	.L256,.L317
	.byte	5
	.word	.L83,.L316
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_abbrev'
.L181:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_line'
.L182:
	.word	.L675-.L674
.L674:
	.half	3
	.word	.L677-.L676
.L676:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L677:
	.byte	5,47,7,0,5,2
	.word	.L83
	.byte	3,234,0,1,5,45,1,5,1,9
	.half	.L678-.L83
	.byte	3,9,1,7,9
	.half	.L184-.L678
	.byte	0,1,1
.L675:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_ranges'
.L183:
	.word	-1,.L83,0,.L184-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_info'
.L185:
	.word	248
	.half	3
	.word	.L186
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L188,.L187
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_delay',0,1,119,6,1,1,1
	.word	.L85,.L318,.L84
	.byte	4
	.byte	'hsct',0,1,119,39
	.word	.L211,.L319
	.byte	5
	.word	.L85,.L318
	.byte	6
	.byte	'i',0,1,121,12
	.word	.L279,.L320
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_abbrev'
.L186:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_line'
.L187:
	.word	.L680-.L679
.L679:
	.half	3
	.word	.L682-.L681
.L681:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L682:
	.byte	5,25,7,0,5,2
	.word	.L85
	.byte	3,251,0,1,5,14,9
	.half	.L11-.L85
	.byte	3,2,1,5,25,9
	.half	.L683-.L11
	.byte	3,126,1,5,1,7,9
	.half	.L684-.L683
	.byte	3,4,1,7,9
	.half	.L189-.L684
	.byte	0,1,1
.L680:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_ranges'
.L188:
	.word	-1,.L85,0,.L189-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_info'
.L190:
	.word	433
	.half	3
	.word	.L191
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L193,.L192
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_prepareStream',0,1,202,2,21
	.word	.L276
	.byte	1,1,1
	.word	.L103,.L321,.L102
	.byte	4
	.byte	'channel',0,1,202,2,70
	.word	.L267,.L322
	.byte	4
	.byte	'slaveTargetAddress',0,1,202,2,86
	.word	.L279,.L323
	.byte	4
	.byte	'count',0,1,202,2,116
	.word	.L324,.L325
	.byte	5
	.word	.L103,.L321
	.byte	6
	.byte	'tsfcReg',0,1,205,2,23
	.word	.L326,.L327
	.byte	7
	.word	.L328,.L329,.L330
	.byte	8
	.word	.L331,.L332
	.byte	9
	.word	.L333,.L334
	.byte	0,7
	.word	.L328,.L335,.L336
	.byte	8
	.word	.L331,.L332
	.byte	0,7
	.word	.L328,.L337,.L338
	.byte	8
	.word	.L331,.L332
	.byte	9
	.word	.L333,.L339
	.byte	0,7
	.word	.L328,.L340,.L341
	.byte	8
	.word	.L331,.L332
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_abbrev'
.L191:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_line'
.L192:
	.word	.L686-.L685
.L685:
	.half	3
	.word	.L688-.L687
.L687:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.h',0,0,0,0,0
.L688:
	.byte	5,21,7,0,5,2
	.word	.L103
	.byte	3,201,2,1,5,42,9
	.half	.L368-.L103
	.byte	3,2,1,5,21,9
	.half	.L369-.L368
	.byte	3,126,1,5,5,9
	.half	.L370-.L369
	.byte	3,5,1,5,46,7,9
	.half	.L689-.L370
	.byte	3,6,1,5,100,1,5,138,1,9
	.half	.L367-.L689
	.byte	1,5,106,9
	.half	.L690-.L367
	.byte	1,5,138,1,1,5,75,9
	.half	.L366-.L690
	.byte	3,2,1,5,42,9
	.half	.L22-.L366
	.byte	3,2,1,5,9,9
	.half	.L372-.L22
	.byte	1,5,41,7,9
	.half	.L21-.L372
	.byte	3,126,1,5,75,9
	.half	.L374-.L21
	.byte	1,5,48,7,9
	.half	.L691-.L374
	.byte	3,10,1,5,63,9
	.half	.L692-.L691
	.byte	1,5,54,9
	.half	.L375-.L692
	.byte	1,5,63,1,5,75,9
	.half	.L376-.L375
	.byte	3,2,1,5,42,9
	.half	.L25-.L376
	.byte	3,2,1,5,9,9
	.half	.L378-.L25
	.byte	1,5,41,7,9
	.half	.L24-.L378
	.byte	3,126,1,5,75,9
	.half	.L380-.L24
	.byte	1,4,2,5,47,7,9
	.half	.L329-.L380
	.byte	3,184,3,1,5,64,9
	.half	.L693-.L329
	.byte	1,4,1,5,122,9
	.half	.L330-.L693
	.byte	3,211,124,1,4,2,5,64,9
	.half	.L335-.L330
	.byte	3,173,3,1,5,56,9
	.half	.L694-.L335
	.byte	1,4,1,5,46,9
	.half	.L336-.L694
	.byte	3,211,124,1,5,106,1,5,122,9
	.half	.L695-.L336
	.byte	1,4,2,5,22,3,174,3,1,4,1,5,122,9
	.half	.L382-.L695
	.byte	3,210,124,1,5,75,9
	.half	.L381-.L382
	.byte	3,2,1,5,42,9
	.half	.L28-.L381
	.byte	3,2,1,5,9,9
	.half	.L386-.L28
	.byte	1,5,41,7,9
	.half	.L27-.L386
	.byte	3,126,1,5,75,9
	.half	.L388-.L27
	.byte	1,5,46,7,9
	.half	.L696-.L388
	.byte	3,9,1,5,100,1,5,153,1,9
	.half	.L383-.L696
	.byte	1,5,106,9
	.half	.L389-.L383
	.byte	1,5,121,9
	.half	.L697-.L389
	.byte	1,5,153,1,1,5,75,9
	.half	.L390-.L697
	.byte	3,2,1,5,42,9
	.half	.L31-.L390
	.byte	3,2,1,5,9,9
	.half	.L392-.L31
	.byte	1,5,41,7,9
	.half	.L30-.L392
	.byte	3,126,1,5,75,9
	.half	.L394-.L30
	.byte	1,5,122,7,9
	.half	.L698-.L394
	.byte	3,9,1,5,100,1,5,46,9
	.half	.L395-.L698
	.byte	1,5,122,1,5,106,9
	.half	.L397-.L395
	.byte	1,5,122,9
	.half	.L699-.L397
	.byte	1,5,75,9
	.half	.L396-.L699
	.byte	3,2,1,5,42,9
	.half	.L34-.L396
	.byte	3,2,1,5,9,9
	.half	.L399-.L34
	.byte	1,5,41,7,9
	.half	.L33-.L399
	.byte	3,126,1,5,75,9
	.half	.L401-.L33
	.byte	1,5,17,7,9
	.half	.L700-.L401
	.byte	3,9,1,5,10,9
	.half	.L701-.L700
	.byte	1,5,52,7,9
	.half	.L702-.L701
	.byte	3,3,1,5,65,9
	.half	.L703-.L702
	.byte	1,5,58,9
	.half	.L402-.L703
	.byte	1,5,65,1,5,79,9
	.half	.L403-.L402
	.byte	3,2,1,5,46,9
	.half	.L38-.L403
	.byte	3,2,1,5,13,9
	.half	.L405-.L38
	.byte	1,5,45,7,9
	.half	.L37-.L405
	.byte	3,126,1,5,79,9
	.half	.L407-.L37
	.byte	1,4,2,5,47,7,9
	.half	.L337-.L407
	.byte	3,135,3,1,5,64,9
	.half	.L704-.L337
	.byte	1,4,1,5,67,9
	.half	.L338-.L704
	.byte	3,130,125,1,4,2,5,64,9
	.half	.L340-.L338
	.byte	3,254,2,1,5,56,9
	.half	.L705-.L340
	.byte	1,5,22,9
	.half	.L706-.L705
	.byte	3,1,1,4,1,5,48,9
	.half	.L341-.L706
	.byte	3,129,125,1,5,9,9
	.half	.L707-.L341
	.byte	1,5,54,7,9
	.half	.L708-.L707
	.byte	3,3,1,5,108,1,5,133,1,9
	.half	.L709-.L708
	.byte	1,5,114,9
	.half	.L408-.L709
	.byte	1,5,133,1,1,5,83,9
	.half	.L409-.L408
	.byte	3,2,1,5,50,9
	.half	.L42-.L409
	.byte	3,2,1,5,17,9
	.half	.L411-.L42
	.byte	1,5,49,7,9
	.half	.L41-.L411
	.byte	3,126,1,5,83,9
	.half	.L413-.L41
	.byte	1,5,50,7,9
	.half	.L40-.L413
	.byte	3,10,1,5,104,1,5,135,1,9
	.half	.L710-.L40
	.byte	1,5,110,9
	.half	.L414-.L710
	.byte	1,5,121,9
	.half	.L711-.L414
	.byte	3,77,1,5,135,1,3,51,1,5,79,9
	.half	.L415-.L711
	.byte	3,2,1,5,46,9
	.half	.L45-.L415
	.byte	3,2,1,5,13,9
	.half	.L417-.L45
	.byte	1,5,24,7,9
	.half	.L20-.L417
	.byte	3,2,1,5,1,3,8,1,5,45,7,9
	.half	.L44-.L20
	.byte	3,116,1,5,79,9
	.half	.L419-.L44
	.byte	1,5,32,7,9
	.half	.L36-.L419
	.byte	3,9,1,5,30,1,5,1,9
	.half	.L712-.L36
	.byte	3,3,1,7,9
	.half	.L194-.L712
	.byte	0,1,1
.L686:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_ranges'
.L193:
	.word	-1,.L103,0,.L194-.L103,0,0
.L334:
	.word	-1,.L103,.L329-.L103,.L330-.L103,.L335-.L103,.L336-.L103,0,0
.L339:
	.word	-1,.L103,.L337-.L103,.L338-.L103,.L340-.L103,.L341-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_info'
.L195:
	.word	324
	.half	3
	.word	.L196
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L198,.L197
	.byte	2
	.word	.L116
	.byte	3
	.byte	'IfxHssl_Hssl_writeStream',0,1,187,4,21
	.word	.L276
	.byte	1,1,1
	.word	.L115,.L342,.L114
	.byte	4
	.byte	'hssl',0,1,187,4,60
	.word	.L256,.L343
	.byte	4
	.byte	'data',0,1,187,4,74
	.word	.L344,.L345
	.byte	4
	.byte	'count',0,1,187,4,90
	.word	.L324,.L346
	.byte	5
	.word	.L115,.L342
	.byte	6
	.byte	'hsslSFR',0,1,189,4,27
	.word	.L260,.L347
	.byte	6
	.byte	'hsslIS',0,1,190,4,27
	.word	.L348,.L349
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_abbrev'
.L196:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_line'
.L197:
	.word	.L714-.L713
.L713:
	.half	3
	.word	.L716-.L715
.L715:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L716:
	.byte	5,47,7,0,5,2
	.word	.L115
	.byte	3,188,4,1,5,60,9
	.half	.L438-.L115
	.byte	3,5,1,5,50,9
	.half	.L439-.L438
	.byte	1,9
	.half	.L717-.L439
	.byte	3,2,1,5,19,9
	.half	.L718-.L717
	.byte	3,2,1,5,50,9
	.half	.L440-.L718
	.byte	1,5,19,9
	.half	.L719-.L440
	.byte	3,1,1,5,50,9
	.half	.L720-.L719
	.byte	1,5,19,9
	.half	.L721-.L720
	.byte	3,1,1,5,50,9
	.half	.L722-.L721
	.byte	1,5,52,9
	.half	.L723-.L722
	.byte	3,2,1,5,50,1,5,13,9
	.half	.L724-.L723
	.byte	3,3,1,5,5,9
	.half	.L725-.L724
	.byte	1,5,29,7,9
	.half	.L726-.L725
	.byte	3,2,1,5,35,9
	.half	.L727-.L726
	.byte	1,5,25,9
	.half	.L78-.L727
	.byte	3,4,1,5,12,9
	.half	.L728-.L78
	.byte	3,3,1,5,31,9
	.half	.L729-.L728
	.byte	3,125,1,5,1,9
	.half	.L730-.L729
	.byte	3,4,1,7,9
	.half	.L199-.L730
	.byte	0,1,1
.L714:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_ranges'
.L198:
	.word	-1,.L115,0,.L199-.L115,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L200:
	.word	197
	.half	3
	.word	.L201
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L203,.L202
	.byte	2
	.word	.L116
	.byte	3
	.byte	'.cocofun_7',0,1,157,1,6,1
	.word	.L95,.L204,.L94
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L201:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L202:
	.word	.L732-.L731
.L731:
	.half	3
	.word	.L734-.L733
.L733:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L734:
	.byte	5,36,7,0,5,2
	.word	.L95
	.byte	3,213,1,1,9
	.half	.L358-.L95
	.byte	3,4,1,5,34,9
	.half	.L735-.L358
	.byte	3,6,1,5,29,9
	.half	.L736-.L735
	.byte	3,2,1,5,34,9
	.half	.L737-.L736
	.byte	1,9
	.half	.L204-.L737
	.byte	0,1,1,5,36,0,5,2
	.word	.L95
	.byte	3,213,1,1,9
	.half	.L358-.L95
	.byte	3,25,1,9
	.half	.L738-.L358
	.byte	3,107,1,9
	.half	.L735-.L738
	.byte	3,27,1,5,29,9
	.half	.L736-.L735
	.byte	3,2,1,5,36,9
	.half	.L737-.L736
	.byte	1,5,34,9
	.half	.L359-.L737
	.byte	3,107,1,7,9
	.half	.L204-.L359
	.byte	0,1,1
.L732:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L203:
	.word	-1,.L95,0,.L204-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L205:
	.word	197
	.half	3
	.word	.L206
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L208,.L207
	.byte	2
	.word	.L116
	.byte	3
	.byte	'.cocofun_8',0,1,157,1,6,1
	.word	.L93,.L209,.L92
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L206:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L207:
	.word	.L740-.L739
.L739:
	.half	3
	.word	.L742-.L741
.L741:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L742:
	.byte	5,36,7,0,5,2
	.word	.L93
	.byte	3,212,1,1,5,24,9
	.half	.L743-.L93
	.byte	3,1,1,9
	.half	.L209-.L743
	.byte	0,1,1,5,36,0,5,2
	.word	.L93
	.byte	3,233,1,1,5,24,9
	.half	.L743-.L93
	.byte	3,1,1,9
	.half	.L744-.L743
	.byte	3,107,1,7,9
	.half	.L209-.L744
	.byte	0,1,1,5,36,0,5,2
	.word	.L93
	.byte	3,213,1,1,5,24,9
	.half	.L743-.L93
	.byte	3,4,1,9
	.half	.L744-.L743
	.byte	3,124,1,7,9
	.half	.L209-.L744
	.byte	0,1,1,5,36,0,5,2
	.word	.L93
	.byte	3,234,1,1,5,24,9
	.half	.L743-.L93
	.byte	3,4,1,9
	.half	.L744-.L743
	.byte	3,103,1,7,9
	.half	.L209-.L744
	.byte	0,1,1,5,36,0,5,2
	.word	.L93
	.byte	3,217,1,1,5,24,9
	.half	.L743-.L93
	.byte	3,6,1,9
	.half	.L744-.L743
	.byte	3,118,1,7,9
	.half	.L209-.L744
	.byte	0,1,1,5,36,0,5,2
	.word	.L93
	.byte	3,238,1,1,5,24,9
	.half	.L743-.L93
	.byte	3,6,1,9
	.half	.L744-.L743
	.byte	3,97,1,7,9
	.half	.L209-.L744
	.byte	0,1,1
.L740:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L208:
	.word	-1,.L93,0,.L209-.L93,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L204-.L95
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L209-.L93
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_loc'
.L80:
	.word	-1,.L81,0,.L313-.L81
	.half	2
	.byte	138,0
	.word	0,0
.L314:
	.word	-1,.L81,0,.L313-.L81
	.half	1
	.byte	100
	.word	0,0
.L315:
	.word	-1,.L81,.L350-.L81,.L313-.L81
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_loc'
.L82:
	.word	-1,.L83,0,.L316-.L83
	.half	2
	.byte	138,0
	.word	0,0
.L317:
	.word	-1,.L83,0,.L316-.L83
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L85,0,.L318-.L85
	.half	2
	.byte	138,0
	.word	0,0
.L319:
	.word	-1,.L85,0,.L318-.L85
	.half	1
	.byte	100
	.word	0,0
.L320:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L266-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L268:
	.word	-1,.L87,0,.L266-.L87
	.half	1
	.byte	100
	.word	0,0
.L270:
	.word	-1,.L87,0,.L266-.L87
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L271-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L273:
	.word	-1,.L89,0,.L271-.L89
	.half	1
	.byte	100
	.word	0,0
.L275:
	.word	-1,.L89,0,.L271-.L89
	.half	1
	.byte	102
	.word	0,0
.L274:
	.word	-1,.L89,0,.L271-.L89
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L210-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L214:
	.word	-1,.L91,0,.L230-.L91
	.half	1
	.byte	101
	.word	.L93-.L91,.L209-.L91
	.half	1
	.byte	111
	.word	.L358-.L91,.L359-.L91
	.half	1
	.byte	111
	.word	.L358-.L91,.L204-.L91
	.half	1
	.byte	111
	.word	.L360-.L91,.L210-.L91
	.half	1
	.byte	111
	.word	0,0
.L212:
	.word	-1,.L91,0,.L351-.L91
	.half	1
	.byte	100
	.word	0,0
.L217:
	.word	-1,.L91,.L356-.L91,.L357-.L91
	.half	1
	.byte	100
	.word	.L93-.L91,.L209-.L91
	.half	1
	.byte	109
	.word	.L358-.L91,.L359-.L91
	.half	1
	.byte	109
	.word	.L358-.L91,.L204-.L91
	.half	1
	.byte	109
	.word	.L361-.L91,.L210-.L91
	.half	1
	.byte	109
	.word	0,0
.L241:
	.word	0,0
.L226:
	.word	0,0
.L239:
	.word	0,0
.L224:
	.word	0,0
.L237:
	.word	0,0
.L222:
	.word	0,0
.L235:
	.word	0,0
.L250:
	.word	-1,.L91,.L352-.L91,.L353-.L91
	.half	1
	.byte	82
	.word	.L354-.L91,.L14-.L91
	.half	1
	.byte	88
	.word	.L355-.L91,.L14-.L91
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L251-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L253:
	.word	-1,.L97,0,.L251-.L97
	.half	1
	.byte	100
	.word	0,0
.L254:
	.word	-1,.L97,0,.L251-.L97
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L255-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L259:
	.word	-1,.L99,0,.L362-.L99
	.half	1
	.byte	101
	.word	.L364-.L99,.L255-.L99
	.half	1
	.byte	111
	.word	0,0
.L257:
	.word	-1,.L99,0,.L363-.L99
	.half	1
	.byte	100
	.word	0,0
.L261:
	.word	-1,.L99,.L365-.L99,.L255-.L99
	.half	1
	.byte	108
	.word	.L363-.L99,.L362-.L99
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L262-.L101
	.half	2
	.byte	138,0
	.word	0,0
.L264:
	.word	-1,.L101,0,.L262-.L101
	.half	1
	.byte	100
	.word	0,0
.L265:
	.word	-1,.L101,0,.L262-.L101
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_loc'
.L102:
	.word	-1,.L103,0,.L321-.L103
	.half	2
	.byte	138,0
	.word	0,0
.L322:
	.word	-1,.L103,0,.L366-.L103
	.half	1
	.byte	100
	.word	.L368-.L103,.L321-.L103
	.half	1
	.byte	111
	.word	.L371-.L103,.L372-.L103
	.half	1
	.byte	100
	.word	.L373-.L103,.L374-.L103
	.half	1
	.byte	100
	.word	.L375-.L103,.L376-.L103
	.half	1
	.byte	100
	.word	.L377-.L103,.L378-.L103
	.half	1
	.byte	100
	.word	.L379-.L103,.L380-.L103
	.half	1
	.byte	100
	.word	.L384-.L103,.L381-.L103
	.half	1
	.byte	100
	.word	.L385-.L103,.L386-.L103
	.half	1
	.byte	100
	.word	.L387-.L103,.L388-.L103
	.half	1
	.byte	100
	.word	.L389-.L103,.L390-.L103
	.half	1
	.byte	100
	.word	.L391-.L103,.L392-.L103
	.half	1
	.byte	100
	.word	.L393-.L103,.L394-.L103
	.half	1
	.byte	100
	.word	.L397-.L103,.L396-.L103
	.half	1
	.byte	100
	.word	.L398-.L103,.L399-.L103
	.half	1
	.byte	100
	.word	.L400-.L103,.L401-.L103
	.half	1
	.byte	100
	.word	.L402-.L103,.L403-.L103
	.half	1
	.byte	100
	.word	.L404-.L103,.L405-.L103
	.half	1
	.byte	100
	.word	.L406-.L103,.L407-.L103
	.half	1
	.byte	100
	.word	.L408-.L103,.L409-.L103
	.half	1
	.byte	100
	.word	.L410-.L103,.L411-.L103
	.half	1
	.byte	100
	.word	.L412-.L103,.L413-.L103
	.half	1
	.byte	100
	.word	.L414-.L103,.L415-.L103
	.half	1
	.byte	100
	.word	.L416-.L103,.L417-.L103
	.half	1
	.byte	100
	.word	.L418-.L103,.L419-.L103
	.half	1
	.byte	100
	.word	0,0
.L332:
	.word	0,0
.L325:
	.word	-1,.L103,0,.L366-.L103
	.half	1
	.byte	85
	.word	.L370-.L103,.L321-.L103
	.half	1
	.byte	88
	.word	.L335-.L103,.L381-.L103
	.half	1
	.byte	86
	.word	.L395-.L103,.L396-.L103
	.half	1
	.byte	86
	.word	0,0
.L323:
	.word	-1,.L103,0,.L367-.L103
	.half	1
	.byte	84
	.word	.L369-.L103,.L366-.L103
	.half	1
	.byte	86
	.word	0,0
.L327:
	.word	-1,.L103,.L382-.L103,.L383-.L103
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L277-.L105
	.half	2
	.byte	138,0
	.word	0,0
.L280:
	.word	-1,.L105,0,.L420-.L105
	.half	1
	.byte	84
	.word	.L422-.L105,.L277-.L105
	.half	1
	.byte	95
	.word	.L421-.L105,.L277-.L105
	.half	1
	.byte	85
	.word	0,0
.L278:
	.word	-1,.L105,0,.L277-.L105
	.half	1
	.byte	100
	.word	0,0
.L282:
	.word	-1,.L105,0,.L421-.L105
	.half	1
	.byte	85
	.word	.L423-.L105,.L277-.L105
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L283-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L286:
	.word	-1,.L107,0,.L283-.L107
	.half	1
	.byte	84
	.word	0,0
.L284:
	.word	-1,.L107,0,.L283-.L107
	.half	1
	.byte	100
	.word	0,0
.L287:
	.word	-1,.L107,.L424-.L107,.L283-.L107
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L288-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L292:
	.word	-1,.L109,0,.L288-.L109
	.half	1
	.byte	85
	.word	0,0
.L289:
	.word	-1,.L109,0,.L288-.L109
	.half	1
	.byte	100
	.word	0,0
.L293:
	.word	-1,.L109,0,.L288-.L109
	.half	1
	.byte	86
	.word	0,0
.L294:
	.word	-1,.L109,0,.L288-.L109
	.half	1
	.byte	87
	.word	0,0
.L291:
	.word	-1,.L109,0,.L288-.L109
	.half	1
	.byte	84
	.word	0,0
.L296:
	.word	-1,.L109,.L425-.L109,.L288-.L109
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L297-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L306:
	.word	-1,.L111,.L430-.L111,.L66-.L111
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L298:
	.word	-1,.L111,0,.L297-.L111
	.half	1
	.byte	100
	.word	0,0
.L307:
	.word	-1,.L111,.L431-.L111,.L66-.L111
	.half	1
	.byte	82
	.word	0,0
.L305:
	.word	-1,.L111,.L302-.L111,.L429-.L111
	.half	1
	.byte	85
	.word	0,0
.L304:
	.word	-1,.L111,.L301-.L111,.L428-.L111
	.half	1
	.byte	81
	.word	0,0
.L299:
	.word	-1,.L111,.L426-.L111,.L427-.L111
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_loc'
.L112:
	.word	-1,.L113,0,.L308-.L113
	.half	2
	.byte	138,0
	.word	0,0
.L310:
	.word	-1,.L113,0,.L432-.L113
	.half	1
	.byte	84
	.word	.L435-.L113,.L308-.L113
	.half	1
	.byte	95
	.word	.L433-.L113,.L308-.L113
	.half	1
	.byte	85
	.word	0,0
.L309:
	.word	-1,.L113,0,.L308-.L113
	.half	1
	.byte	100
	.word	0,0
.L311:
	.word	-1,.L113,0,.L433-.L113
	.half	1
	.byte	85
	.word	.L436-.L113,.L308-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	.L434-.L113,.L308-.L113
	.half	1
	.byte	86
	.word	0,0
.L312:
	.word	-1,.L113,0,.L434-.L113
	.half	1
	.byte	86
	.word	.L437-.L113,.L308-.L113
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_loc'
.L114:
	.word	-1,.L115,0,.L342-.L115
	.half	2
	.byte	138,0
	.word	0,0
.L346:
	.word	-1,.L115,0,.L342-.L115
	.half	1
	.byte	84
	.word	0,0
.L345:
	.word	-1,.L115,0,.L342-.L115
	.half	1
	.byte	101
	.word	.L439-.L115,.L440-.L115
	.half	1
	.byte	95
	.word	0,0
.L343:
	.word	-1,.L115,0,.L342-.L115
	.half	1
	.byte	100
	.word	0,0
.L349:
	.word	0,0
.L347:
	.word	-1,.L115,.L438-.L115,.L342-.L115
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L745:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_frame'
	.word	24
	.word	.L745,.L81,.L313-.L81
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_frame'
	.word	24
	.word	.L745,.L83,.L316-.L83
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_frame'
	.word	24
	.word	.L745,.L85,.L318-.L85
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_frame'
	.word	20
	.word	.L745,.L87,.L266-.L87
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L745,.L89,.L271-.L89
	.byte	8,18,8,19,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L745,.L91,.L210-.L91
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L745,.L97,.L251-.L97
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L745,.L99,.L255-.L99
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L745,.L101,.L262-.L101
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_frame'
	.word	12
	.word	.L745,.L103,.L321-.L103
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_frame'
	.word	12
	.word	.L745,.L105,.L277-.L105
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_frame'
	.word	12
	.word	.L745,.L107,.L283-.L107
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_frame'
	.word	24
	.word	.L745,.L109,.L288-.L109
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_frame'
	.word	24
	.word	.L745,.L111,.L297-.L111
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_frame'
	.word	12
	.word	.L745,.L113,.L308-.L113
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_frame'
	.word	20
	.word	.L745,.L115,.L342-.L115
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L746:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L746,.L93,.L209-.L93
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L746,.L95,.L204-.L95
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
