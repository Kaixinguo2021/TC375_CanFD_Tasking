	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Scu\\Std\\.IfxScuRcu.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.src ..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c'

	
$TC162
	.sdecl	'.zrodata.IfxScuWdt..2.cnt',data,rom
	.sect	'.zrodata.IfxScuWdt..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268213592
	.sdecl	'.zrodata.IfxScuRcu..3.cnt',data,rom
	.sect	'.zrodata.IfxScuRcu..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268214183
	.sdecl	'.zrodata.IfxScuRcu..4.cnt',data,rom
	.sect	'.zrodata.IfxScuRcu..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268213684
	.sdecl	'.zrodata.IfxScuRcu..5.cnt',data,rom
	.sect	'.zrodata.IfxScuRcu..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268214176
	
	.sdecl	'.text.IfxScuRcu.IfxScuRcu_evaluateReset',code,cluster('IfxScuRcu_evaluateReset')
	.sect	'.text.IfxScuRcu.IfxScuRcu_evaluateReset'
	.align	2
	
	.global	IfxScuRcu_evaluateReset

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     2   * \file IfxScuRcu.c
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     3   * \brief SCU  basic functionality
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     4   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     7   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     8   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    10   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    15   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    17   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    24   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    31   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    39   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    40   *
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    41   */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    42  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    44  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    46  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    47  #include "IfxScuRcu.h"
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    48  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    50  /*----------------------------------Macros------------------------------------*/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    52  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    53  #define IFXSCURCU_PERFORM_RESET_DELAY (90000U)
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    54  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    56  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    58  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    59  IfxScuRcu_ResetCode IfxScuRcu_evaluateReset(void)
; Function IfxScuRcu_evaluateReset
.L39:
IfxScuRcu_evaluateReset:	.type	func

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    60  {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    61      Ifx_SCU_RSTCON      Rstcon;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    62      Ifx_SCU_RSTSTAT     RstStat;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    63      IfxScuRcu_ResetCode resetCode;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    64      resetCode.cpuSafeState = (((MODULE_SCU.RSTCON2.U >> IFX_SCU_RSTCON2_CSSX_OFF) & IFX_SCU_RSTCON2_CSSX_MSK) == IFX_SCU_RSTCON2_CSSX_MSK);
	mov	d0,#8064
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf0036064)
.L126:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    65      resetCode.resetType    = IfxScuRcu_ResetType_undefined;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    66      resetCode.resetTrigger = IfxScuRcu_Trigger_undefined;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    67      resetCode.resetReason  = 0;
	insert	d3,d3,#0,#0,#16
.L127:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    68  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    69      RstStat.U              = MODULE_SCU.RSTSTAT.U;
	and	d15,d0
	ld.w	d4,[a15]@los(0xf0036050)
.L106:
	eq	d15,d15,d0
.L128:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    70      Rstcon.U               = MODULE_SCU.RSTCON.U;
	insert	d2,d2,d15,#0,#8
	ld.w	d1,[a15]@los(0xf0036058)
.L107:
	mov	d15,#255
.L129:
	mov	d0,#0
.L130:
	insert	d2,d2,#5,#8,#8
.L131:
	insert	d2,d2,d15,#16,#8
.L132:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    71  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    72      /* Evaluate the warm reset conditions first */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    73      if (RstStat.B.ESR0)
	jz.t	d4:0,.L2
.L133:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    74      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    75          resetCode.resetType    = (IfxScuRcu_ResetType)Rstcon.B.ESR0;
	extr.u	d1,d1,#0,#2
.L108:
	insert	d2,d2,d1,#8,#8
.L134:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    76          resetCode.resetTrigger = IfxScuRcu_Trigger_esr0;
	insert	d2,d2,d0,#16,#8
	j	.L3
.L2:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    77          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    78      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    79      else if (RstStat.B.ESR1)
	jz.t	d4:1,.L4
.L135:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    80      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    81          resetCode.resetType    = (IfxScuRcu_ResetType)Rstcon.B.ESR1;
	extr.u	d0,d1,#2,#2
.L136:
	insert	d2,d2,d0,#8,#8
.L137:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    82          resetCode.resetTrigger = IfxScuRcu_Trigger_esr1;
	insert	d2,d2,#1,#16,#8
	j	.L5
.L4:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    83          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    84      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    85      else if (RstStat.B.SMU)
	jz.t	d4:3,.L6
.L138:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    86      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    87          resetCode.resetType    = (IfxScuRcu_ResetType)Rstcon.B.SMU;
	extr.u	d0,d1,#6,#2
.L139:
	insert	d2,d2,d0,#8,#8
.L140:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    88          resetCode.resetTrigger = IfxScuRcu_Trigger_smu;
	insert	d2,d2,#3,#16,#8
	j	.L7
.L6:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    89          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    90      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    91      else if (RstStat.B.SW)
	jz.t	d4:4,.L8
.L141:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    92      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    93          resetCode.resetType    = (IfxScuRcu_ResetType)Rstcon.B.SW;
	extr.u	d0,d1,#8,#2
.L142:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    94          resetCode.resetTrigger = IfxScuRcu_Trigger_sw;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    95          resetCode.resetReason  = MODULE_SCU.RSTCON2.B.USRINFO;
	insert	d2,d2,d0,#8,#8
	ld.hu	d0,[a15]@los(0xf0036066)
.L143:
	insert	d3,d3,d0,#0,#16
.L144:
	insert	d2,d2,#4,#16,#8
	j	.L9
.L8:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    96      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    97      else if (RstStat.B.STM0)
	jz.t	d4:5,.L10
.L145:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    98      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	    99          resetCode.resetType    = (IfxScuRcu_ResetType)Rstcon.B.STM0;
	extr.u	d0,d1,#10,#2
.L146:
	insert	d2,d2,d0,#8,#8
.L147:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   100          resetCode.resetTrigger = IfxScuRcu_Trigger_stm0;
	insert	d2,d2,#5,#16,#8
	j	.L11
.L10:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   101          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   102      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   103      else if (RstStat.B.STM1)
	jz.t	d4:6,.L12
.L148:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   104      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   105          resetCode.resetType    = (IfxScuRcu_ResetType)Rstcon.B.STM1;
	extr.u	d0,d1,#12,#2
.L149:
	insert	d2,d2,d0,#8,#8
.L150:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   106          resetCode.resetTrigger = IfxScuRcu_Trigger_stm1;
	insert	d2,d2,#6,#16,#8
	j	.L13
.L12:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   107          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   108      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   109      else if (RstStat.B.STM2)
	jz.t	d4:7,.L14
.L151:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   110      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   111          resetCode.resetType    = (IfxScuRcu_ResetType)Rstcon.B.STM2;
	extr.u	d0,d1,#14,#2
.L152:
	insert	d2,d2,d0,#8,#8
.L153:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   112          resetCode.resetTrigger = IfxScuRcu_Trigger_stm2;
	insert	d2,d2,#7,#16,#8
	j	.L15
.L14:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   113          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   114      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   115  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   116      else if (RstStat.B.CB0)
	extr.u	d15,d4,#16,#8
.L154:
	jz.t	d15:2,.L16
.L155:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   117      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   118          resetCode.resetType    = IfxScuRcu_ResetType_system;
	insert	d2,d2,#1,#8,#8
.L156:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   119          resetCode.resetTrigger = IfxScuRcu_Trigger_cb0;
	mov	d15,#18
	j	.L17
.L16:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   120          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   121      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   122      else if (RstStat.B.CB1)
	extr.u	d15,d4,#16,#8
.L157:
	jz.t	d15:3,.L18
.L158:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   123      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   124          resetCode.resetType    = IfxScuRcu_ResetType_debug;
	insert	d2,d2,#4,#8,#8
.L159:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   125          resetCode.resetTrigger = IfxScuRcu_Trigger_cb1;
	mov	d15,#19
	j	.L19
.L18:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   126          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   127      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   128      else if (RstStat.B.CB3)
	extr.u	d15,d4,#16,#8
.L160:
	jz.t	d15:4,.L20
.L161:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   129      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   130          resetCode.resetType    = IfxScuRcu_ResetType_application;
	insert	d2,d2,#2,#8,#8
.L162:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   131          resetCode.resetTrigger = IfxScuRcu_Trigger_cb3;
	mov	d15,#20
	j	.L21
.L20:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   132          resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   133      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   134      else
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   135      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   136          /* Now evaluate for Cold reset conditions */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   137          if (RstStat.B.EVRC)
	extr.u	d15,d4,#16,#8
.L163:
	jz.t	d15:7,.L22
.L164:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   138          {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   139              resetCode.resetType    = IfxScuRcu_ResetType_coldpoweron;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   140              resetCode.resetTrigger = IfxScuRcu_Trigger_evrc;
	mov	d15,#23
	j	.L23
.L22:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   141              resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   142          }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   143          else if (RstStat.B.EVR33)
	extr.u	d15,d4,#24,#8
.L165:
	jz.t	d15:0,.L24
.L166:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   144          {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   145              resetCode.resetType    = IfxScuRcu_ResetType_coldpoweron;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   146              resetCode.resetTrigger = IfxScuRcu_Trigger_evr33;
	mov	d15,#24
	j	.L25
.L24:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   147              resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   148          }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   149          else if (RstStat.B.SWD)
	jz.t	d15:1,.L26
.L167:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   150          {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   151              resetCode.resetType    = IfxScuRcu_ResetType_coldpoweron;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   152              resetCode.resetTrigger = IfxScuRcu_Trigger_swd;
	mov	d15,#25
	j	.L27
.L26:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   153              resetCode.resetReason  = 0;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   154          }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   155          else if (RstStat.B.STBYR)
	jz.t	d15:4,.L28
.L168:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   156          {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   157              resetCode.resetType    = IfxScuRcu_ResetType_coldpoweron;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   158              resetCode.resetTrigger = IfxScuRcu_Trigger_stbyr;
	mov	d15,#28
.L23:
.L25:
.L27:
	insert	d2,d2,#0,#8,#8
.L17:
.L19:
.L21:
	insert	d2,d2,d15,#16,#8
.L15:
.L13:
.L11:
.L7:
.L5:
.L3:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   159              resetCode.resetReason  = 0;
	insert	d3,d3,#0,#0,#16
.L28:
.L9:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   160          }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   161      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   162  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   163  /* Finally - Evaluate selectively for PORST */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   164      if (RstStat.B.PORST)
	extr.u	d15,d4,#16,#8
.L169:
	jz.t	d15:0,.L29
.L170:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   165      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   166          if (resetCode.resetType != IfxScuRcu_ResetType_coldpoweron)
	extr.u	d15,d2,#8,#8
.L171:
	jeq	d15,#0,.L30
.L172:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   167          {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   168              resetCode.resetType    = IfxScuRcu_ResetType_warmpoweron;
	insert	d2,d2,#3,#8,#8
.L173:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   169              resetCode.resetTrigger = IfxScuRcu_Trigger_portst;
	mov	d15,#16
.L174:
	insert	d2,d2,d15,#16,#8
.L30:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   170          }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   171  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   172          resetCode.resetReason = 0;
	insert	d3,d3,#0,#0,#16
.L29:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   173      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   174  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   175      return resetCode;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   176  }
	ret
.L64:
	
__IfxScuRcu_evaluateReset_function_end:
	.size	IfxScuRcu_evaluateReset,__IfxScuRcu_evaluateReset_function_end-IfxScuRcu_evaluateReset
.L52:
	; End of function
	
	.sdecl	'.text.IfxScuRcu.IfxScuRcu_performReset',code,cluster('IfxScuRcu_performReset')
	.sect	'.text.IfxScuRcu.IfxScuRcu_performReset'
	.align	2
	
	.global	IfxScuRcu_performReset

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   177  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   178  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   179  void IfxScuRcu_performReset(IfxScuRcu_ResetType resetType, uint16 userResetInfo)
; Function IfxScuRcu_performReset
.L41:
IfxScuRcu_performReset:	.type	func

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   180  {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   181      uint32 index;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   182      uint16 password;
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   183  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   184      password = IfxScuWdt_getSafetyWatchdogPassword();
	mov	e8,d5,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L77:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
	ld.w	d0,.2.cnt
	mov.a	a15,d0
	ld.w	d15,[a15]
.L179:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L32
.L180:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d2,#2
	or	d15,#1
.L181:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	fcall	.cocofun_6

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L32:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d2,#2
.L110:
	or	d15,d2,#2
.L182:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	fcall	.cocofun_6

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
.L33:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
.L183:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L33
.L78:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   185      IfxScuWdt_clearSafetyEndinitInline(password);
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   186  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   187      /* Write the Reset Type - Application or System Reset */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   188      if (IfxScuRcu_ResetType_system == resetType)
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   189      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   190          MODULE_SCU.RSTCON.B.SW = 1; /* System Reset */
	ld.w	d15,.3.cnt
.L184:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
	mov.a	a15,d15
.L111:
	jne	d8,#1,.L34
.L112:
	ld.bu	d15,[a15]
.L185:
	insert	d15,d15,#1,#0,#2
	j	.L35
.L34:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   191      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   192      else
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   193      {
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   194          MODULE_SCU.RSTCON.B.SW = 2; /* Application Reset */
	ld.bu	d15,[a15]
.L186:
	insert	d15,d15,#2,#0,#2
.L35:
	st.b	[a15],d15
.L84:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L113:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   195      }
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   196  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   197      /* SWRSTCON and RSTCON2 are CPU endinit protected - clear end init protection */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   198      password = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
	ld.w	d0,.4.cnt
.L85:
	mov.a	a15,d0
.L187:
	mul	d15,d15,#12
	addsc.a	a2,a15,d15,#0
.L90:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a2]
	extr.u	d15,d15,#2,#14
.L188:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
	xor	d0,d15,#63
.L91:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2   /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  #endif
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   *    }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * Note:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \code
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      __enable();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      __disable();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828      __nop();
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      else
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      return module;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L115:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L96:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   199  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   200      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
	mul	d15,d15,#12
	addsc.a	a15,a15,d15,#0
.L99:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L189:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L36
.L190:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d1,[a15]
.L191:
	sha	d15,d0,#2
.L192:
	insert	d1,d1,#0,#0,#16
.L193:
	or	d15,#1
.L194:
	or	d15,d1
	st.w	[a15],d15

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)      (inlined)
.L36:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d0,#2
.L114:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	or	d15,d0,#2
	ld.w	d0,[a15]
	insert	d0,d0,#0,#0,#16
.L195:
	or	d15,d0
	st.w	[a15],d15

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L37:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
.L196:

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L37
.L100:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   201      /* Write the user DATA to reset evaluation */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   202      MODULE_SCU.RSTCON2.B.USRINFO = userResetInfo;
	movh.a	a15,#61443
.L116:
	st.h	[a15]@los(0xf0036066),d9
.L117:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   203  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   204      /* software Reset can be performed by writing to Reset Request register  SWRSTCON */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   205      MODULE_SCU.SWRSTCON.B.SWRSTREQ = 1U;
	ld.w	d15,.5.cnt
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L197:
	or	d15,#2
	st.b	[a15],d15
.L198:

; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   206  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   207      /* Add some delay for HW to reset */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   208      for (index = 0U; index < (uint32)IFXSCURCU_PERFORM_RESET_DELAY; index++)
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   209      {}
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   210  
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   211      /*IfxScu_Wdt_enableSafetyEndinit() is not needed, as the micro would RESET */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   212      /* IfxScuWdt_setCpuEndinitInline() is not needed, as the micro would RESET */
; ..\0_Src\4_McHal\Tricore\Scu\Std\IfxScuRcu.c	   213  }
	ret
.L70:
	
__IfxScuRcu_performReset_function_end:
	.size	IfxScuRcu_performReset,__IfxScuRcu_performReset_function_end-IfxScuRcu_performReset
.L57:
	; End of function
	
	.sdecl	'.text.IfxScuRcu..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxScuRcu..cocofun_6'
	.align	2
; Function .cocofun_6
.L43:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0

; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC375_Ethernet\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a15]
.L203:
	movh.a	a2,#61443
.L204:
	insert	d0,d0,#0,#0,#16
.L205:
	or	d15,d0
	st.w	[a2]@los(0xf00362a8),d15
.L109:
	fret
.L62:
	; End of function
	.calls	'IfxScuRcu_performReset','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxScuRcu_performReset','.cocofun_6'
	.calls	'IfxScuRcu_evaluateReset','',0
	.calls	'IfxScuRcu_performReset','',0
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.calls	'.cocofun_6','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L45:
	.word	96063
	.half	3
	.word	.L46
	.byte	4
.L44:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L47
	.byte	2,1,1,3
	.word	157
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	160
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	205
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	217
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	329
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	303
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	335
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	335
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	303
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,208,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,12,4,135,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	460
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8
.L73:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,217,9,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,4,143,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	635
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,233,9,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,4,151,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	901
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,210,16,25,12,13
	.byte	'CON0',0
	.word	556
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	861
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1092
	.byte	4,2,35,8,0,14
	.word	1132
	.byte	3
	.word	1195
.L98:
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1
.L101:
	.byte	5
	.byte	'watchdog',0,3,164,4,65
	.word	1200
.L103:
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	613
.L105:
	.byte	6,0
.L76:
	.byte	4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1
.L79:
	.byte	5
	.byte	'password',0,3,197,4,59
	.word	613
.L81:
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1200
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	613
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	613
	.byte	6,0
.L89:
	.byte	8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	613
	.byte	1,1
.L92:
	.byte	5
	.byte	'watchdog',0,3,220,4,74
	.word	1200
.L94:
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	613
	.byte	1,1,6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,145,3,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1610
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,171,2,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1926
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2497
	.byte	4,2,35,0,0,15,4
	.word	596
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2626
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2841
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3056
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3273
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,141,1,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3493
	.byte	4,2,35,0,0,15,24
	.word	596
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,212,3,16,4,11
	.byte	'PD0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	596
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	596
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	596
	.byte	2,0,2,35,3,0,12,6,195,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3817
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,233,3,16,4,11
	.byte	'PD8',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	596
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	596
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	596
	.byte	2,0,2,35,3,0,12,6,203,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4121
	.byte	4,2,35,0,0,15,8
	.word	596
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4446
	.byte	4,2,35,0,0,15,12
	.word	596
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4786
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5152
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,230,2,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5516
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5663
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	20,0,2,35,0,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5832
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6004
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	613
	.byte	12,0,2,35,2,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6179
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6353
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6527
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6703
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,208,2,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6859
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7192
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,6,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	596
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7540
	.byte	4,2,35,0,0,15,32
	.word	7820
	.byte	16,7,0,15,56
	.word	596
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7878
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7965
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1886
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2457
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2577
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2617
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2801
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3016
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3233
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3453
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2617
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3768
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3808
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4081
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4397
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4437
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4737
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4777
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5112
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5476
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4437
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5623
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5792
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5964
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6139
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6313
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6487
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6663
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6819
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7152
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7500
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4437
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7860
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7869
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7925
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8492
	.byte	4,3,35,252,1,0,14
	.word	8532
	.byte	3
	.word	9102
	.byte	17,5,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,169,5,17,1,1,5
	.byte	'port',0,5,169,5,44
	.word	9107
	.byte	5
	.byte	'pinIndex',0,5,169,5,56
	.word	596
	.byte	5
	.byte	'action',0,5,169,5,80
	.word	9112
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,7,205,13,17,1,1,5
	.byte	'timeSec',0,7,205,13,40
	.word	217
	.byte	19,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,7,128,13,20
	.word	217
	.byte	1,1,6,0,17,9,155,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_none',0,3,0
.L83:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,8,229,6,31
	.word	9377
	.byte	1,1
.L86:
	.byte	6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,227,5,20
	.word	596
	.byte	1,1,6,0,7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,249,6,19
	.word	9555
	.byte	1,1,5
	.byte	'address',0,8,249,6,55
	.word	613
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,150,7,20
	.word	596
	.byte	1,1,5
	.byte	'address',0,8,150,7,70
	.word	613
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,132,9,17,1,1,5
	.byte	'address',0,8,132,9,56
	.word	9555
	.byte	5
	.byte	'count',0,8,132,9,72
	.word	9555
	.byte	19,6,0,0,20
	.word	437
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	9786
	.byte	0,14
	.word	421
	.byte	3
	.word	421
	.byte	23
	.byte	'__cmpswapw',0
	.word	9828
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	9833
	.byte	24
	.byte	'value',0
	.word	421
	.byte	24
	.byte	'compare',0
	.word	421
	.byte	0,14
	.word	437
	.byte	23
	.byte	'__mfcr',0
	.word	9890
	.byte	1,1,1,1,22
	.word	437
	.byte	0,25
	.word	165
	.byte	26
	.word	191
	.byte	6,0,25
	.word	226
	.byte	26
	.word	258
	.byte	6,0,25
	.word	271
	.byte	6,0,25
	.word	340
	.byte	26
	.word	359
	.byte	6,0,25
	.word	375
	.byte	26
	.word	390
	.byte	26
	.word	404
	.byte	6,0,25
	.word	1205
	.byte	26
	.word	1245
	.byte	26
	.word	1263
	.byte	6,0,25
	.word	1283
	.byte	26
	.word	1326
	.byte	6,0,25
	.word	1346
	.byte	26
	.word	1384
	.byte	26
	.word	1402
	.byte	6,0,25
	.word	1422
	.byte	26
	.word	1463
	.byte	6,0,25
	.word	1483
	.byte	26
	.word	1534
	.byte	6,0,25
	.word	1554
	.byte	6,0,27
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,249,3,19
	.word	613
	.byte	1,1,1,1,25
	.word	9215
	.byte	26
	.word	9243
	.byte	26
	.word	9257
	.byte	26
	.word	9275
	.byte	6,0,25
	.word	9293
	.byte	26
	.word	9316
	.byte	19,28
	.word	9337
	.byte	29
	.word	9375
	.byte	0,6,0,0,25
	.word	9337
	.byte	6,0,25
	.word	9479
	.byte	6,0,25
	.word	9513
	.byte	6,0,25
	.word	9576
	.byte	26
	.word	9617
	.byte	6,0,25
	.word	9636
	.byte	26
	.word	9691
	.byte	6,0,25
	.word	9710
	.byte	26
	.word	9750
	.byte	26
	.word	9767
	.byte	19,6,0,0
.L71:
	.byte	17,10,94,9,1,18
	.byte	'IfxScuRcu_ResetType_coldpoweron',0,0,18
	.byte	'IfxScuRcu_ResetType_system',0,1,18
	.byte	'IfxScuRcu_ResetType_application',0,2,18
	.byte	'IfxScuRcu_ResetType_warmpoweron',0,3,18
	.byte	'IfxScuRcu_ResetType_debug',0,4,18
	.byte	'IfxScuRcu_ResetType_undefined',0,5,0,17,10,106,9,1,18
	.byte	'IfxScuRcu_Trigger_esr0',0,0,18
	.byte	'IfxScuRcu_Trigger_esr1',0,1,18
	.byte	'IfxScuRcu_Trigger_smu',0,3,18
	.byte	'IfxScuRcu_Trigger_sw',0,4,18
	.byte	'IfxScuRcu_Trigger_stm0',0,5,18
	.byte	'IfxScuRcu_Trigger_stm1',0,6,18
	.byte	'IfxScuRcu_Trigger_stm2',0,7,18
	.byte	'IfxScuRcu_Trigger_portst',0,16,18
	.byte	'IfxScuRcu_Trigger_cb0',0,18,18
	.byte	'IfxScuRcu_Trigger_cb1',0,19,18
	.byte	'IfxScuRcu_Trigger_cb3',0,20,18
	.byte	'IfxScuRcu_Trigger_tp',0,21,18
	.byte	'IfxScuRcu_Trigger_tcu',0,22,18
	.byte	'IfxScuRcu_Trigger_evrc',0,23,18
	.byte	'IfxScuRcu_Trigger_evr33',0,24,18
	.byte	'IfxScuRcu_Trigger_swd',0,25,18
	.byte	'IfxScuRcu_Trigger_hsms',0,26,18
	.byte	'IfxScuRcu_Trigger_hsma',0,27,18
	.byte	'IfxScuRcu_Trigger_stbyr',0,28,18
	.byte	'IfxScuRcu_Trigger_undefined',0,255,1,0
.L63:
	.byte	30,10,134,1,9,6,13
	.byte	'cpuSafeState',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'resetType',0
	.word	10214
	.byte	1,2,35,1,13
	.byte	'resetTrigger',0
	.word	10411
	.byte	1,2,35,2,13
	.byte	'resetReason',0
	.word	613
	.byte	2,2,35,4,0,10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,154,7,16,4,11
	.byte	'ESR0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	596
	.byte	2,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	613
	.byte	10,0,2,35,2,0
.L65:
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11008
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,194,7,16,4,11
	.byte	'ESR0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0
.L67:
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11299
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,11,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	29,0,2,35,0,0
.L87:
	.byte	12,11,244,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11877
	.byte	4,2,35,0,0,7
	.byte	'short int',0,2,5,31
	.byte	'__wchar_t',0,12,1,1
	.word	11987
	.byte	31
	.byte	'__size_t',0,12,1,1
	.word	421
	.byte	31
	.byte	'__ptrdiff_t',0,12,1,1
	.word	437
	.byte	32,1,3
	.word	12055
	.byte	31
	.byte	'__codeptr',0,12,1,1
	.word	12057
	.byte	17,13,254,9,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,31
	.byte	'IfxScu_WDTCON1_IR',0,13,131,10,3
	.word	12080
	.byte	31
	.byte	'boolean',0,14,104,29
	.word	596
	.byte	31
	.byte	'uint8',0,14,108,29
	.word	596
	.byte	31
	.byte	'uint16',0,14,112,29
	.word	613
	.byte	31
	.byte	'uint32',0,14,116,29
	.word	9555
	.byte	31
	.byte	'uint64',0,14,121,29
	.word	303
	.byte	31
	.byte	'sint16',0,14,129,1,29
	.word	11987
	.byte	7
	.byte	'long int',0,4,5,31
	.byte	'sint32',0,14,134,1,29
	.word	12293
	.byte	7
	.byte	'long long int',0,8,5,31
	.byte	'sint64',0,14,141,1,29
	.word	12321
	.byte	31
	.byte	'float32',0,14,170,1,29
	.word	217
	.byte	31
	.byte	'pvoid',0,15,54,28
	.word	335
	.byte	31
	.byte	'Ifx_TickTime',0,15,76,28
	.word	12321
	.byte	17,15,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,31
	.byte	'Ifx_RxSel',0,15,137,1,3
	.word	12406
	.byte	31
	.byte	'Ifx_UReg_8Bit',0,16,96,24
	.word	596
	.byte	31
	.byte	'Ifx_UReg_32Bit',0,16,98,24
	.word	421
	.byte	31
	.byte	'Ifx_SReg_32Bit',0,16,101,24
	.word	437
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	12611
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	13170
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	13249
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	13809
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	13890
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	596
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	596
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	596
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	14116
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	596
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	14389
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,202,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	421
	.byte	10,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	596
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,214,1,3
	.word	14715
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,217,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	421
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,234,1,3
	.word	14993
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,237,1,16,4,11
	.byte	'LOTHR',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	421
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,246,1,3
	.word	15362
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,249,1,16,4,11
	.byte	'GETHDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,129,2,3
	.word	15542
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,132,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,136,2,3
	.word	15714
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,139,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,143,2,3
	.word	15814
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,146,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,150,2,3
	.word	15914
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,153,2,16,4,11
	.byte	'CHREV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	596
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	596
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,164,2,3
	.word	16014
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,167,2,16,4,11
	.byte	'LOWER',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	613
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,179,2,3
	.word	16217
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,182,2,16,4,11
	.byte	'RESULT',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	20,0,2,35,0,0,31
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,186,2,3
	.word	16449
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,189,2,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_SCU_EICON0_Bits',0,4,195,2,3
	.word	16551
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,198,2,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_EICON1_Bits',0,4,207,2,3
	.word	16679
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	596
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	596
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	421
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	596
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	596
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EICR_Bits',0,4,229,2,3
	.word	16868
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,232,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	596
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,254,2,3
	.word	17232
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,129,3,16,4,11
	.byte	'INTF0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_EIFR_Bits',0,4,140,3,3
	.word	17671
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,143,3,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_EISR_Bits',0,4,153,3,3
	.word	17882
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,156,3,16,4,11
	.byte	'POL',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	613
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	613
	.byte	14,0,2,35,2,0,31
	.byte	'Ifx_SCU_EMSR_Bits',0,4,166,3,3
	.word	18058
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,169,3,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,175,3,3
	.word	18252
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,178,3,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	613
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	421
	.byte	23,0,2,35,0,0,31
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,183,3,3
	.word	18387
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,186,3,16,4,11
	.byte	'ARI',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,191,3,3
	.word	18523
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,194,3,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	596
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	596
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	596
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,205,3,3
	.word	18634
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,208,3,16,4,11
	.byte	'STEP',0,2
	.word	613
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	596
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	613
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_FDR_Bits',0,4,216,3,3
	.word	18852
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,219,3,16,4,11
	.byte	'FS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_SCU_FMR_Bits',0,4,239,3,3
	.word	19015
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,242,3,16,4,11
	.byte	'MODREV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_ID_Bits',0,4,247,3,3
	.word	19351
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,250,3,16,4,11
	.byte	'IPEN00',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	596
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_SCU_IGCR_Bits',0,4,146,4,3
	.word	19458
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,149,4,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_IN_Bits',0,4,154,4,3
	.word	19910
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,157,4,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_IOCR_Bits',0,4,164,4,3
	.word	20009
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,167,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	421
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	613
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,177,4,3
	.word	20159
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,180,4,16,4,11
	.byte	'SEED',0,4
	.word	421
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	596
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,187,4,3
	.word	20397
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,190,4,16,4,11
	.byte	'LENGTH',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	20,0,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,194,4,3
	.word	20558
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,197,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,200,4,3
	.word	20664
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,203,4,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	613
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	613
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,211,4,3
	.word	20750
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,214,4,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	613
	.byte	14,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	613
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,222,4,3
	.word	20931
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,225,4,16,4,11
	.byte	'LCLT0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	613
	.byte	10,0,2,35,2,0,31
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,241,4,3
	.word	21112
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,244,4,16,4,11
	.byte	'DEPT',0,1
	.word	596
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	613
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_MANID_Bits',0,4,249,4,3
	.word	21456
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,252,4,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	613
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	613
	.byte	14,0,2,35,2,0,31
	.byte	'Ifx_SCU_OMR_Bits',0,4,132,5,3
	.word	21567
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,135,5,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	596
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	596
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	596
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,156,5,3
	.word	21725
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,159,5,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_OUT_Bits',0,4,164,5,3
	.word	22136
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,167,5,16,4,11
	.byte	'CSEL0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	6,0,2,35,3,0,31
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,183,5,3
	.word	22237
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,186,5,16,4,11
	.byte	'OVEN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,195,5,3
	.word	22570
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,198,5,16,4,11
	.byte	'PDIS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDISC_Bits',0,4,203,5,3
	.word	22772
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,206,5,16,4,11
	.byte	'PD0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDR_Bits',0,4,213,5,3
	.word	22883
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,216,5,16,4,11
	.byte	'PDR0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDRR_Bits',0,4,227,5,3
	.word	23016
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,230,5,16,4,11
	.byte	'DIVBY',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	613
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	596
	.byte	5,0,2,35,3,0,31
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,241,5,3
	.word	23219
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,244,5,16,4,11
	.byte	'K2DIV',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,250,5,3
	.word	23459
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,253,5,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	421
	.byte	25,0,2,35,0,0,31
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,135,6,3
	.word	23603
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,138,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,144,6,3
	.word	23825
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,147,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,153,6,3
	.word	23961
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,156,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,162,6,3
	.word	24097
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,165,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,171,6,3
	.word	24233
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,174,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,180,6,3
	.word	24369
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,183,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,189,6,3
	.word	24505
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,192,6,16,4,11
	.byte	'CPU0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	613
	.byte	12,0,2,35,2,0,31
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,206,6,3
	.word	24641
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,209,6,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	421
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	596
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,220,6,3
	.word	24913
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,223,6,16,4,11
	.byte	'LJTEN',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	613
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,242,6,3
	.word	25158
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,245,6,16,4,11
	.byte	'LJTCV',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	613
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	6,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,250,6,3
	.word	25546
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,253,6,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	596
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,136,7,3
	.word	25664
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,139,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	596
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	613
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	6,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,151,7,3
	.word	25907
	.byte	31
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,168,7,3
	.word	11008
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,171,7,16,4,11
	.byte	'FRTO',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	613
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,185,7,3
	.word	26203
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,188,7,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,191,7,3
	.word	26508
	.byte	31
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,224,7,3
	.word	11299
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,227,7,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,233,7,3
	.word	26619
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,236,7,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,245,7,3
	.word	26749
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,248,7,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_SEISR_Bits',0,4,130,8,3
	.word	26940
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,133,8,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_STCON_Bits',0,4,140,8,3
	.word	27118
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,143,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,146,8,3
	.word	27269
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,149,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,152,8,3
	.word	27341
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,155,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,158,8,3
	.word	27413
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,161,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,164,8,3
	.word	27485
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,167,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,170,8,3
	.word	27557
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,173,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,176,8,3
	.word	27629
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,179,8,16,4,11
	.byte	'HWCFG',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	596
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	596
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,195,8,3
	.word	27701
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,198,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	613
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,203,8,3
	.word	28030
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,206,8,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,213,8,3
	.word	28150
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,216,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,228,8,3
	.word	28320
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,231,8,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	613
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	596
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	596
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,244,8,3
	.word	28583
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,247,8,16,4,11
	.byte	'K2DIV',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	421
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,251,8,3
	.word	28862
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,254,8,16,4,11
	.byte	'MODCFG',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,130,9,3
	.word	28966
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,133,9,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,143,9,3
	.word	29072
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,146,9,16,4,11
	.byte	'ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,153,9,3
	.word	29295
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,156,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	596
	.byte	4,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,175,9,3
	.word	29443
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,178,9,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,185,9,3
	.word	29870
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,188,9,16,4,11
	.byte	'ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,195,9,3
	.word	30043
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,198,9,16,4,11
	.byte	'ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,205,9,3
	.word	30191
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,214,9,3
	.word	460
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,230,9,3
	.word	635
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,246,9,3
	.word	901
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,249,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,255,9,3
	.word	30441
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,130,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,143,10,3
	.word	30567
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,146,10,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,159,10,3
	.word	30819
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12611
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN00',0,4,172,10,3
	.word	31038
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13170
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN01',0,4,180,10,3
	.word	31103
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13249
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN10',0,4,188,10,3
	.word	31168
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13809
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN11',0,4,196,10,3
	.word	31233
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13890
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ARSTDIS',0,4,204,10,3
	.word	31298
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14116
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON0',0,4,212,10,3
	.word	31363
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14389
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON1',0,4,220,10,3
	.word	31428
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14715
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON2',0,4,228,10,3
	.word	31493
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14993
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON3',0,4,236,10,3
	.word	31558
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15362
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON4',0,4,244,10,3
	.word	31623
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15542
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON5',0,4,252,10,3
	.word	31688
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15714
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON6',0,4,132,11,3
	.word	31753
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15814
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON7',0,4,140,11,3
	.word	31818
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15914
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON8',0,4,148,11,3
	.word	31883
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16014
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CHIPID',0,4,156,11,3
	.word	31948
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16217
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSCLIM',0,4,164,11,3
	.word	32012
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16449
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSCSTAT',0,4,172,11,3
	.word	32077
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16551
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EICON0',0,4,180,11,3
	.word	32143
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16679
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EICON1',0,4,188,11,3
	.word	32207
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16868
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EICR',0,4,196,11,3
	.word	32271
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17232
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EIFILT',0,4,204,11,3
	.word	32333
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17671
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EIFR',0,4,212,11,3
	.word	32397
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17882
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EISR',0,4,220,11,3
	.word	32459
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18058
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EMSR',0,4,228,11,3
	.word	32521
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18252
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EMSSW',0,4,236,11,3
	.word	32583
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18387
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,244,11,3
	.word	32646
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18523
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ESROCFG',0,4,252,11,3
	.word	32719
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18634
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EXTCON',0,4,132,12,3
	.word	32784
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18852
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_FDR',0,4,140,12,3
	.word	32848
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19015
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_FMR',0,4,148,12,3
	.word	32909
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19351
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ID',0,4,156,12,3
	.word	32970
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19458
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IGCR',0,4,164,12,3
	.word	33030
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19910
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IN',0,4,172,12,3
	.word	33092
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20009
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IOCR',0,4,180,12,3
	.word	33152
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20159
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,188,12,3
	.word	33214
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20397
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,196,12,3
	.word	33282
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20558
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,204,12,3
	.word	33350
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20664
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,212,12,3
	.word	33418
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20750
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LCLCON0',0,4,220,12,3
	.word	33486
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20931
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LCLCON1',0,4,228,12,3
	.word	33551
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21112
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	33616
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21456
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	33681
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21567
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	33744
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21725
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	33805
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22136
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	33869
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22237
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	33930
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22570
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	33994
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22772
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	34061
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22883
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	34124
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23016
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	34185
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23219
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PERPLLCON0',0,4,188,13,3
	.word	34247
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23459
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PERPLLCON1',0,4,196,13,3
	.word	34315
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23603
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,204,13,3
	.word	34383
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23825
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR0',0,4,212,13,3
	.word	34451
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23961
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR1',0,4,220,13,3
	.word	34515
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24097
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR2',0,4,228,13,3
	.word	34579
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24233
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR3',0,4,236,13,3
	.word	34643
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24369
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR4',0,4,244,13,3
	.word	34707
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24505
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR5',0,4,252,13,3
	.word	34771
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24641
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSTAT0',0,4,132,14,3
	.word	34835
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24913
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWCR1',0,4,140,14,3
	.word	34900
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25158
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMTRCSR0',0,4,148,14,3
	.word	34965
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25546
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMTRCSR1',0,4,156,14,3
	.word	35031
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25664
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMTRCSR2',0,4,164,14,3
	.word	35097
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25907
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMTRCSR3',0,4,172,14,3
	.word	35163
	.byte	31
	.byte	'Ifx_SCU_RSTCON',0,4,180,14,3
	.word	11259
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26203
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTCON2',0,4,188,14,3
	.word	35253
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26508
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTCON3',0,4,196,14,3
	.word	35318
	.byte	31
	.byte	'Ifx_SCU_RSTSTAT',0,4,204,14,3
	.word	11837
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26619
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SEICON0',0,4,212,14,3
	.word	35408
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26749
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SEICON1',0,4,220,14,3
	.word	35473
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26940
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SEISR',0,4,228,14,3
	.word	35538
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27118
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STCON',0,4,236,14,3
	.word	35601
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27269
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM1',0,4,244,14,3
	.word	35664
	.byte	12,4,247,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27341
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM2',0,4,252,14,3
	.word	35728
	.byte	12,4,255,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27413
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM3',0,4,132,15,3
	.word	35792
	.byte	12,4,135,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27485
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM4',0,4,140,15,3
	.word	35856
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27557
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM5',0,4,148,15,3
	.word	35920
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27629
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STMEM6',0,4,156,15,3
	.word	35984
	.byte	12,4,159,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27701
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STSTAT',0,4,164,15,3
	.word	36048
	.byte	12,4,167,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28030
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SWAPCTRL',0,4,172,15,3
	.word	36112
	.byte	12,4,175,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28150
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SWRSTCON',0,4,180,15,3
	.word	36178
	.byte	12,4,183,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28320
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SYSCON',0,4,188,15,3
	.word	36244
	.byte	12,4,191,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28583
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,196,15,3
	.word	36308
	.byte	12,4,199,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28862
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,204,15,3
	.word	36376
	.byte	12,4,207,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28966
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,212,15,3
	.word	36444
	.byte	12,4,215,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29072
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,220,15,3
	.word	36512
	.byte	12,4,223,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29295
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPCLR',0,4,228,15,3
	.word	36580
	.byte	12,4,231,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29443
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPDIS0',0,4,236,15,3
	.word	36645
	.byte	12,4,239,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29870
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPDIS1',0,4,244,15,3
	.word	36711
	.byte	12,4,247,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30043
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSET',0,4,252,15,3
	.word	36777
	.byte	12,4,255,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30191
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSTAT',0,4,132,16,3
	.word	36842
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,140,16,3
	.word	556
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,148,16,3
	.word	861
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,156,16,3
	.word	1092
	.byte	12,4,159,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30441
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON0',0,4,164,16,3
	.word	36993
	.byte	12,4,167,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30567
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON1',0,4,172,16,3
	.word	37060
	.byte	12,4,175,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30819
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_SR',0,4,180,16,3
	.word	37127
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,192,16,25,4,13
	.byte	'ESRCFGX',0
	.word	32646
	.byte	4,2,35,0,0,14
	.word	37192
	.byte	31
	.byte	'Ifx_SCU_ESRCFGX',0,4,195,16,3
	.word	37233
	.byte	14
	.word	1132
	.byte	31
	.byte	'Ifx_SCU_WDTCPU',0,4,215,16,3
	.word	37263
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,230,16,25,12,13
	.byte	'CON0',0
	.word	36993
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	37060
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	37127
	.byte	4,2,35,8,0,14
	.word	37292
	.byte	31
	.byte	'Ifx_SCU_WDTS',0,4,235,16,3
	.word	37353
	.byte	15,8
	.word	37192
	.byte	16,1,0,14
	.word	37380
	.byte	15,16
	.word	596
	.byte	16,15,0,15,20
	.word	596
	.byte	16,19,0,15,36
	.word	596
	.byte	16,35,0,15,16
	.word	32271
	.byte	16,3,0,15,16
	.word	33030
	.byte	16,3,0,15,36
	.word	1132
	.byte	16,2,0,14
	.word	37439
	.byte	15,44
	.word	596
	.byte	16,43,0,14
	.word	37292
	.byte	15,176,2
	.word	596
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,4,250,16,25,128,8,13
	.byte	'reserved_0',0
	.word	4437
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	32970
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2617
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	33805
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	36512
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	36308
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	36376
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	36444
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	34383
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	34247
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	34315
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	31363
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	31428
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	32848
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	32784
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	31493
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	31558
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	31623
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	31688
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	11837
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2617
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	11259
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	31298
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	36178
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	35253
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	35318
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2617
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	37389
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	32719
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	36244
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	31753
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	31818
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	31883
	.byte	4,3,35,136,1,13
	.byte	'reserved_8C',0
	.word	37394
	.byte	16,3,35,140,1,13
	.byte	'PDR',0
	.word	34124
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	33152
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	33869
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	33744
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	33092
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	37394
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	36048
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	35601
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	34451
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	34515
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	34579
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	34643
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	34707
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	34771
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2617
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	34835
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	34900
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	37394
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	32521
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	32583
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	32077
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	32012
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	37403
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	36711
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	36842
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	36777
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	36580
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	36645
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	33486
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	33551
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	33616
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	31948
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	33681
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2617
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	36112
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	37403
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	33214
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	33282
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	33350
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	33418
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	37394
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	35664
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	35728
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	34061
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4437
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	34965
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	35031
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	35097
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	35163
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	3808
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	35792
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	35856
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	35920
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	35984
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	37394
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	33994
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	33930
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	37412
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	32333
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	37421
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	32397
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	32909
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	34185
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	37430
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	37394
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	37448
	.byte	36,3,35,204,4,13
	.byte	'reserved_270',0
	.word	37453
	.byte	44,3,35,240,4,13
	.byte	'EICON0',0
	.word	32143
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	32207
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	32459
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	37462
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	35408
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	35473
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	35538
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	37467
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	31233
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	31168
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	31103
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	31038
	.byte	4,3,35,252,7,0,14
	.word	37478
	.byte	31
	.byte	'Ifx_SCU',0,4,237,17,3
	.word	39543
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,11,68,16,4,11
	.byte	'ADDR',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_A_Bits',0,11,71,3
	.word	39565
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,11,74,16,4,11
	.byte	'VSS',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_BIV_Bits',0,11,78,3
	.word	39626
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,11,81,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	444
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	444
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	4,0,2,35,0,0,31
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,11,87,3
	.word	39705
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,11,90,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	444
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	4,0,2,35,0,0,31
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,11,95,3
	.word	39843
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,11,98,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	444
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	444
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,11,106,3
	.word	39964
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,11,109,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_BTV_Bits',0,11,113,3
	.word	40140
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,11,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_CCNT_Bits',0,11,120,3
	.word	40226
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,11,123,16,4,11
	.byte	'CM',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	444
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	444
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	444
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_CPU_CCTRL_Bits',0,11,131,1,3
	.word	40315
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,11,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_COMPAT_Bits',0,11,140,1,3
	.word	40462
	.byte	31
	.byte	'Ifx_CPU_CORE_ID_Bits',0,11,147,1,3
	.word	11877
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,11,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_L_Bits',0,11,154,1,3
	.word	40621
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,11,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_U_Bits',0,11,161,1,3
	.word	40716
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,11,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	444
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPU_ID_Bits',0,11,169,1,3
	.word	40811
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,11,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	444
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPXE_Bits',0,11,176,1,3
	.word	40921
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,11,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_CREVT_Bits',0,11,187,1,3
	.word	41013
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,11,190,1,16,4,11
	.byte	'CID',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CUS_ID_Bits',0,11,194,1,3
	.word	41167
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,11,197,1,16,4,11
	.byte	'DATA',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_D_Bits',0,11,200,1,3
	.word	41261
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,11,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DATR_Bits',0,11,214,1,3
	.word	41324
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,11,217,1,16,4,11
	.byte	'DE',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	444
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	444
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	19,0,2,35,0,0,31
	.byte	'Ifx_CPU_DBGSR_Bits',0,11,228,1,3
	.word	41550
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,11,231,1,16,4,11
	.byte	'DTA',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_DBGTCR_Bits',0,11,235,1,3
	.word	41765
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,11,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCON0_Bits',0,11,243,1,3
	.word	41859
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,11,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCON2_Bits',0,11,250,1,3
	.word	41975
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,11,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	444
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCX_Bits',0,11,129,2,3
	.word	42076
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,11,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_DEADD_Bits',0,11,135,2,3
	.word	42169
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,11,138,2,16,4,11
	.byte	'TA',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_DIEAR_Bits',0,11,141,2,3
	.word	42249
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,11,144,2,16,4,11
	.byte	'IED',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	444
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	15,0,2,35,0,0,31
	.byte	'Ifx_CPU_DIETR_Bits',0,11,159,2,3
	.word	42318
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,11,162,2,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,11,196,2,3
	.word	42602
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,11,199,2,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,11,233,2,3
	.word	43193
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,11,236,2,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,11,142,3,3
	.word	43784
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,11,145,3,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,11,179,3,3
	.word	44385
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,11,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,11,186,3,3
	.word	44986
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,11,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,11,193,3,3
	.word	45101
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,11,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_DMS_Bits',0,11,200,3,3
	.word	45216
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,11,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	444
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	14,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPRE_Bits',0,11,207,3,3
	.word	45309
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,11,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	444
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_L_Bits',0,11,214,3,3
	.word	45401
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,11,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	444
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_U_Bits',0,11,221,3,3
	.word	45496
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,11,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	444
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	14,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPWE_Bits',0,11,228,3,3
	.word	45591
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,11,231,3,16,4,11
	.byte	'SRE',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	444
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_CPU_DSTR_Bits',0,11,250,3,3
	.word	45683
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,11,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_EXEVT_Bits',0,11,133,4,3
	.word	46022
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,11,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_FCX_Bits',0,11,141,4,3
	.word	46176
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,11,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	444
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	444
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	444
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	444
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	2,0,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,11,154,4,3
	.word	46282
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,11,157,4,16,4,11
	.byte	'STALL',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	444
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	6,0,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,11,165,4,3
	.word	46500
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,11,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	444
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	444
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	444
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	444
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	444
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	444
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	444
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	444
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	444
	.byte	2,0,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,11,182,4,3
	.word	46691
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,11,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,11,198,4,3
	.word	46991
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,11,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,11,205,4,3
	.word	47296
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,11,208,4,16,4,11
	.byte	'TST',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	444
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,11,227,4,3
	.word	47397
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,11,230,4,16,4,11
	.byte	'OPC',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,11,237,4,3
	.word	47746
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,11,240,4,16,4,11
	.byte	'PC',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,11,243,4,3
	.word	47906
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,11,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,11,249,4,3
	.word	47987
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,11,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,11,255,4,3
	.word	48074
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,11,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,11,133,5,3
	.word	48161
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,11,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_ICNT_Bits',0,11,140,5,3
	.word	48248
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,11,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	444
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	8,0,2,35,0,0,31
	.byte	'Ifx_CPU_ICR_Bits',0,11,150,5,3
	.word	48339
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,11,153,5,16,4,11
	.byte	'ISP',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_ISP_Bits',0,11,156,5,3
	.word	48481
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,11,159,5,16,4,11
	.byte	'RST',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	444
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_KRST0_Bits',0,11,164,5,3
	.word	48547
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,11,167,5,16,4,11
	.byte	'RST',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_KRST1_Bits',0,11,171,5,3
	.word	48658
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,11,174,5,16,4,11
	.byte	'CLR',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,11,178,5,3
	.word	48750
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,11,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_LCX_Bits',0,11,186,5,3
	.word	48846
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,11,189,5,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,11,223,5,3
	.word	48952
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,11,226,5,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,11,132,6,3
	.word	49535
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,11,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M1CNT_Bits',0,11,139,6,3
	.word	50128
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,11,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M2CNT_Bits',0,11,146,6,3
	.word	50221
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,11,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M3CNT_Bits',0,11,153,6,3
	.word	50314
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,11,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_OSEL_Bits',0,11,159,6,3
	.word	50407
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,11,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	444
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_PC_Bits',0,11,166,6,3
	.word	50480
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,11,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON0_Bits',0,11,174,6,3
	.word	50565
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,11,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON1_Bits',0,11,182,6,3
	.word	50681
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,11,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON2_Bits',0,11,189,6,3
	.word	50792
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,11,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	444
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	2,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCXI_Bits',0,11,200,6,3
	.word	50893
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,11,203,6,16,4,11
	.byte	'TA',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_PIEAR_Bits',0,11,206,6,3
	.word	51046
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,11,209,6,16,4,11
	.byte	'IED',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	444
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	15,0,2,35,0,0,31
	.byte	'Ifx_CPU_PIETR_Bits',0,11,224,6,3
	.word	51115
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,11,227,6,16,4,11
	.byte	'DAC',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA0_Bits',0,11,231,6,3
	.word	51399
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,11,234,6,16,4,11
	.byte	'CAC',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA1_Bits',0,11,238,6,3
	.word	51490
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,11,241,6,16,4,11
	.byte	'PSI',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA2_Bits',0,11,245,6,3
	.word	51581
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,11,248,6,16,4,11
	.byte	'FRE',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	17,0,2,35,0,0,31
	.byte	'Ifx_CPU_PSTR_Bits',0,11,130,7,3
	.word	51672
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,11,133,7,16,4,11
	.byte	'CDC',0,4
	.word	444
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	444
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	444
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	444
	.byte	8,0,2,35,0,0,31
	.byte	'Ifx_CPU_PSW_Bits',0,11,145,7,3
	.word	51875
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,11,148,7,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,11,182,7,3
	.word	52080
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,11,185,7,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,11,219,7,3
	.word	52647
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,11,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_LA_Bits',0,11,226,7,3
	.word	53224
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,11,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_UA_Bits',0,11,233,7,3
	.word	53319
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,11,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	444
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_SEGEN_Bits',0,11,242,7,3
	.word	53414
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,11,245,7,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,11,151,8,3
	.word	53542
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,11,154,8,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,11,188,8,3
	.word	54125
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,11,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_CPU_SMACON_Bits',0,11,196,8,3
	.word	54718
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,11,199,8,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,11,233,8,3
	.word	54836
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,11,236,8,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,11,142,9,3
	.word	55425
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,11,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_SWEVT_Bits',0,11,153,9,3
	.word	56024
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,11,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_CPU_SYSCON_Bits',0,11,171,9,3
	.word	56178
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,11,174,9,16,4,11
	.byte	'ASI',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,11,178,9,3
	.word	56477
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,11,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	15,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_CON_Bits',0,11,189,9,3
	.word	56575
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,11,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,11,196,9,3
	.word	56747
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,11,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	444
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	20,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,11,203,9,3
	.word	56876
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,11,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	444
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	20,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,11,211,9,3
	.word	57006
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,11,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	444
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	8,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,11,218,9,3
	.word	57158
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,11,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	444
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	8,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,11,226,9,3
	.word	57285
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,11,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	444
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,11,233,9,3
	.word	57434
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,11,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	444
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	444
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	444
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,11,246,9,3
	.word	57548
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,11,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,11,252,9,3
	.word	57792
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,11,255,9,16,4,11
	.byte	'T0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,11,138,10,3
	.word	57872
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,11,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	444
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_TR_ADR_Bits',0,11,144,10,3
	.word	58067
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,11,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	444
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	3,0,2,35,0,0,31
	.byte	'Ifx_CPU_TR_EVT_Bits',0,11,164,10,3
	.word	58140
	.byte	12,11,172,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39565
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_A',0,11,177,10,3
	.word	58458
	.byte	12,11,180,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39626
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BIV',0,11,185,10,3
	.word	58517
	.byte	12,11,188,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39705
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BLK_OMASK',0,11,193,10,3
	.word	58578
	.byte	12,11,196,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39843
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BLK_OTAR',0,11,201,10,3
	.word	58645
	.byte	12,11,204,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39964
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BLK_RABR',0,11,209,10,3
	.word	58711
	.byte	12,11,212,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40140
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BTV',0,11,217,10,3
	.word	58777
	.byte	12,11,220,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40226
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CCNT',0,11,225,10,3
	.word	58838
	.byte	12,11,228,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40315
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CCTRL',0,11,233,10,3
	.word	58900
	.byte	12,11,236,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40462
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_COMPAT',0,11,241,10,3
	.word	58963
	.byte	31
	.byte	'Ifx_CPU_CORE_ID',0,11,249,10,3
	.word	11947
	.byte	12,11,252,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40621
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_L',0,11,129,11,3
	.word	59052
	.byte	12,11,132,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40716
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_U',0,11,137,11,3
	.word	59115
	.byte	12,11,140,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40811
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPU_ID',0,11,145,11,3
	.word	59178
	.byte	12,11,148,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40921
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPXE',0,11,153,11,3
	.word	59242
	.byte	12,11,156,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41013
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CREVT',0,11,161,11,3
	.word	59304
	.byte	12,11,164,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41167
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CUS_ID',0,11,169,11,3
	.word	59367
	.byte	12,11,172,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41261
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_D',0,11,177,11,3
	.word	59431
	.byte	12,11,180,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41324
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DATR',0,11,185,11,3
	.word	59490
	.byte	12,11,188,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41550
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DBGSR',0,11,193,11,3
	.word	59552
	.byte	12,11,196,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41765
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DBGTCR',0,11,201,11,3
	.word	59615
	.byte	12,11,204,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41859
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCON0',0,11,209,11,3
	.word	59679
	.byte	12,11,212,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41975
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCON2',0,11,217,11,3
	.word	59742
	.byte	12,11,220,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42076
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCX',0,11,225,11,3
	.word	59805
	.byte	12,11,228,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42169
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DEADD',0,11,233,11,3
	.word	59866
	.byte	12,11,236,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42249
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DIEAR',0,11,241,11,3
	.word	59929
	.byte	12,11,244,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42318
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DIETR',0,11,249,11,3
	.word	59992
	.byte	12,11,252,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42602
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,11,129,12,3
	.word	60055
	.byte	12,11,132,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43193
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,11,137,12,3
	.word	60135
	.byte	12,11,140,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43784
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,11,145,12,3
	.word	60215
	.byte	12,11,148,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44385
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,11,153,12,3
	.word	60295
	.byte	12,11,156,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44986
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,11,161,12,3
	.word	60375
	.byte	12,11,164,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45101
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,11,169,12,3
	.word	60449
	.byte	12,11,172,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45216
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DMS',0,11,177,12,3
	.word	60523
	.byte	12,11,180,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45309
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPRE',0,11,185,12,3
	.word	60584
	.byte	12,11,188,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45401
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_L',0,11,193,12,3
	.word	60646
	.byte	12,11,196,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45496
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_U',0,11,201,12,3
	.word	60709
	.byte	12,11,204,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45591
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPWE',0,11,209,12,3
	.word	60772
	.byte	12,11,212,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45683
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DSTR',0,11,217,12,3
	.word	60834
	.byte	12,11,220,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46022
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_EXEVT',0,11,225,12,3
	.word	60896
	.byte	12,11,228,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46176
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FCX',0,11,233,12,3
	.word	60959
	.byte	12,11,236,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46282
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON0',0,11,241,12,3
	.word	61020
	.byte	12,11,244,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46500
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON1',0,11,249,12,3
	.word	61087
	.byte	12,11,252,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46691
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON2',0,11,129,13,3
	.word	61154
	.byte	12,11,132,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46991
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON3',0,11,137,13,3
	.word	61221
	.byte	12,11,140,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47296
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FLASHCON4',0,11,145,13,3
	.word	61288
	.byte	12,11,148,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47397
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,11,153,13,3
	.word	61355
	.byte	12,11,156,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47746
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,11,161,13,3
	.word	61425
	.byte	12,11,164,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47906
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,11,169,13,3
	.word	61495
	.byte	12,11,172,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47987
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,11,177,13,3
	.word	61564
	.byte	12,11,180,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48074
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,11,185,13,3
	.word	61635
	.byte	12,11,188,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48161
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,11,193,13,3
	.word	61706
	.byte	12,11,196,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48248
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ICNT',0,11,201,13,3
	.word	61777
	.byte	12,11,204,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48339
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ICR',0,11,209,13,3
	.word	61839
	.byte	12,11,212,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48481
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ISP',0,11,217,13,3
	.word	61900
	.byte	12,11,220,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48547
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_KRST0',0,11,225,13,3
	.word	61961
	.byte	12,11,228,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48658
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_KRST1',0,11,233,13,3
	.word	62024
	.byte	12,11,236,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48750
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_KRSTCLR',0,11,241,13,3
	.word	62087
	.byte	12,11,244,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48846
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_LCX',0,11,249,13,3
	.word	62152
	.byte	12,11,252,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48952
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,11,129,14,3
	.word	62213
	.byte	12,11,132,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49535
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,11,137,14,3
	.word	62289
	.byte	12,11,140,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50128
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M1CNT',0,11,145,14,3
	.word	62365
	.byte	12,11,148,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50221
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M2CNT',0,11,153,14,3
	.word	62428
	.byte	12,11,156,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50314
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M3CNT',0,11,161,14,3
	.word	62491
	.byte	12,11,164,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50407
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_OSEL',0,11,169,14,3
	.word	62554
	.byte	12,11,172,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50480
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PC',0,11,177,14,3
	.word	62616
	.byte	12,11,180,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50565
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON0',0,11,185,14,3
	.word	62676
	.byte	12,11,188,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50681
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON1',0,11,193,14,3
	.word	62739
	.byte	12,11,196,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50792
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON2',0,11,201,14,3
	.word	62802
	.byte	12,11,204,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50893
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCXI',0,11,209,14,3
	.word	62865
	.byte	12,11,212,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51046
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PIEAR',0,11,217,14,3
	.word	62927
	.byte	12,11,220,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51115
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PIETR',0,11,225,14,3
	.word	62990
	.byte	12,11,228,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51399
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA0',0,11,233,14,3
	.word	63053
	.byte	12,11,236,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51490
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA1',0,11,241,14,3
	.word	63115
	.byte	12,11,244,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51581
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA2',0,11,249,14,3
	.word	63177
	.byte	12,11,252,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51672
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PSTR',0,11,129,15,3
	.word	63239
	.byte	12,11,132,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51875
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PSW',0,11,137,15,3
	.word	63301
	.byte	12,11,140,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52080
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_ACCENA',0,11,145,15,3
	.word	63362
	.byte	12,11,148,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52647
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_ACCENB',0,11,153,15,3
	.word	63430
	.byte	12,11,156,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53224
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_LA',0,11,161,15,3
	.word	63498
	.byte	12,11,164,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53319
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_RGN_UA',0,11,169,15,3
	.word	63562
	.byte	12,11,172,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53414
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SEGEN',0,11,177,15,3
	.word	63626
	.byte	12,11,180,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53542
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,11,185,15,3
	.word	63689
	.byte	12,11,188,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54125
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,11,193,15,3
	.word	63765
	.byte	12,11,196,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54718
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SMACON',0,11,201,15,3
	.word	63841
	.byte	12,11,204,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54836
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,11,209,15,3
	.word	63905
	.byte	12,11,212,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55425
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,11,217,15,3
	.word	63984
	.byte	12,11,220,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56024
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SWEVT',0,11,225,15,3
	.word	64063
	.byte	12,11,228,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56178
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SYSCON',0,11,233,15,3
	.word	64126
	.byte	12,11,236,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56477
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TASK_ASI',0,11,241,15,3
	.word	64190
	.byte	12,11,244,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56575
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_CON',0,11,249,15,3
	.word	64256
	.byte	12,11,252,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56747
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,11,129,16,3
	.word	64321
	.byte	12,11,132,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56876
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,11,137,16,3
	.word	64397
	.byte	12,11,140,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57006
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,11,145,16,3
	.word	64475
	.byte	12,11,148,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57158
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,11,153,16,3
	.word	64553
	.byte	12,11,156,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57285
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,11,161,16,3
	.word	64630
	.byte	12,11,164,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57434
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,11,169,16,3
	.word	64707
	.byte	12,11,172,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57548
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,11,177,16,3
	.word	64778
	.byte	12,11,180,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57792
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_TIMER',0,11,185,16,3
	.word	64850
	.byte	12,11,188,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57872
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TRIG_ACC',0,11,193,16,3
	.word	64917
	.byte	12,11,196,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58067
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TR_ADR',0,11,201,16,3
	.word	64983
	.byte	12,11,204,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58140
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TR_EVT',0,11,209,16,3
	.word	65047
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,11,221,16,25,16,13
	.byte	'LA',0
	.word	63498
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	63562
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	63362
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	63430
	.byte	4,2,35,12,0,14
	.word	65111
	.byte	31
	.byte	'Ifx_CPU_RGN',0,11,227,16,3
	.word	65187
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,11,242,16,25,12,13
	.byte	'RABR',0
	.word	58711
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	58645
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	58578
	.byte	4,2,35,8,0,14
	.word	65213
	.byte	31
	.byte	'Ifx_CPU_BLK',0,11,247,16,3
	.word	65276
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,11,134,17,25,28,13
	.byte	'CON',0
	.word	61355
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	61495
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	61425
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2617
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	61564
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	61635
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	61706
	.byte	4,2,35,24,0,14
	.word	65302
	.byte	31
	.byte	'Ifx_CPU_FPU_TRAP',0,11,143,17,3
	.word	65427
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,11,158,17,25,8,13
	.byte	'L',0
	.word	60646
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	60709
	.byte	4,2,35,4,0,14
	.word	65458
	.byte	31
	.byte	'Ifx_CPU_DPR',0,11,162,17,3
	.word	65500
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,11,177,17,25,8,13
	.byte	'L',0
	.word	59052
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	59115
	.byte	4,2,35,4,0,14
	.word	65526
	.byte	31
	.byte	'Ifx_CPU_CPR',0,11,181,17,3
	.word	65568
	.byte	15,12
	.word	64850
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,11,196,17,25,16,13
	.byte	'CON',0
	.word	64256
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	65594
	.byte	12,2,35,4,0,14
	.word	65603
	.byte	31
	.byte	'Ifx_CPU_TPS',0,11,200,17,3
	.word	65651
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,11,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	64475
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	64397
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	64630
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	64553
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	64321
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	64778
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	64707
	.byte	4,2,35,24,0,14
	.word	65677
	.byte	31
	.byte	'Ifx_CPU_TPS_EXTIM',0,11,224,17,3
	.word	65826
	.byte	10
	.byte	'_Ifx_CPU_TR',0,11,239,17,25,8,13
	.byte	'EVT',0
	.word	65047
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	64983
	.byte	4,2,35,4,0,14
	.word	65858
	.byte	31
	.byte	'Ifx_CPU_TR',0,11,243,17,3
	.word	65903
	.byte	15,128,34
	.word	596
	.byte	16,255,33,0,15,236,253,2
	.word	596
	.byte	16,235,253,2,0,15,244,31
	.word	596
	.byte	16,243,31,0,15,128,1
	.word	65111
	.byte	16,7,0,14
	.word	65963
	.byte	15,232,1
	.word	596
	.byte	16,231,1,0,15,128,48
	.word	596
	.byte	16,255,47,0,15,128,3
	.word	65213
	.byte	16,31,0,14
	.word	66000
	.byte	15,160,39
	.word	596
	.byte	16,159,39,0,15,208,223,1
	.word	596
	.byte	16,207,223,1,0,15,248,1
	.word	596
	.byte	16,247,1,0,15,244,29
	.word	596
	.byte	16,243,29,0,15,188,3
	.word	596
	.byte	16,187,3,0,15,232,3
	.word	596
	.byte	16,231,3,0,15,252,23
	.word	596
	.byte	16,251,23,0,14
	.word	65302
	.byte	15,228,63
	.word	596
	.byte	16,227,63,0,15,144,1
	.word	65458
	.byte	16,17,0,14
	.word	66110
	.byte	15,240,30
	.word	596
	.byte	16,239,30,0,15,80
	.word	65526
	.byte	16,9,0,14
	.word	66136
	.byte	15,176,31
	.word	596
	.byte	16,175,31,0,15,152,7
	.word	596
	.byte	16,151,7,0,14
	.word	65603
	.byte	15,48
	.word	596
	.byte	16,47,0,14
	.word	65677
	.byte	15,164,23
	.word	596
	.byte	16,163,23,0,15,64
	.word	65858
	.byte	16,7,0,14
	.word	66202
	.byte	15,192,23
	.word	596
	.byte	16,191,23,0,15,28
	.word	596
	.byte	16,27,0,15,180,1
	.word	596
	.byte	16,179,1,0,15,172,1
	.word	596
	.byte	16,171,1,0,15,64
	.word	59431
	.byte	16,15,0,15,64
	.word	596
	.byte	16,63,0,15,64
	.word	58458
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,11,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	65928
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	61020
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	61087
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	61154
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	61221
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	61288
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	65939
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	61961
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	62024
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	62087
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	65952
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	65973
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4437
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	63905
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	63984
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4437
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	63905
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	63984
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4437
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	63905
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	63984
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4437
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	63905
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	63984
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4437
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	63905
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	63984
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4437
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	63905
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	63984
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4437
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	63905
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	63984
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4437
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	63905
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	63984
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	63689
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	63765
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4437
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	62213
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	62289
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	65978
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	60375
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	60449
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	60135
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	60295
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	60375
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	60449
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	60135
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	60295
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	60375
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	60449
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	60135
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	60295
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	60375
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	60449
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	60135
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	60295
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	60375
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	60449
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	60135
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	60295
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	60375
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	60449
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	60135
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	60295
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	60375
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	60449
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	60135
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	60295
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	60375
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	60449
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	60135
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	60295
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4437
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	60055
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	60215
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4437
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	60055
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	60215
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4437
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	60055
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	60215
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4437
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	60055
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	60215
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4437
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	60055
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	60215
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4437
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	60055
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	60215
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4437
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	60055
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	60215
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4437
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	60055
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	60215
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	65989
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	62554
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	4777
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	66010
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	66015
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	63626
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	66026
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	64190
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	66039
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	63053
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	63115
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	63177
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	66050
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	59742
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4437
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	63841
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	60834
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2617
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	59490
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	59866
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	59929
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	59992
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	3808
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	59679
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	66061
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	63239
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	62739
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	62802
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	62676
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	62927
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	62990
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	66072
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	58963
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	66083
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	66094
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	66099
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	66120
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	66125
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	66145
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	66150
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	59242
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	59242
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	59242
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	59242
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	60584
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	60584
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	60584
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	60584
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	60772
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	60772
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	60772
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	60772
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	37394
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	59242
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	59242
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4437
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	60584
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	60584
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4437
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	60772
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	60772
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	66161
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	66172
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	66177
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	66186
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	66191
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	66211
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	66216
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	58900
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	58838
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	61777
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	62365
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	62428
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	62491
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	65978
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	59552
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2617
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	60896
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	59304
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	64063
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	66227
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	64917
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	4777
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	60523
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	59805
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	59615
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	66236
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	62865
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	63301
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	62616
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4437
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	64126
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	59178
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	11947
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	58517
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	58777
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	61900
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	61839
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4437
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	60959
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	62152
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	37394
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	59367
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	66247
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	66258
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	66267
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	66276
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	66267
	.byte	64,4,35,192,255,7,0,14
	.word	66285
	.byte	31
	.byte	'Ifx_CPU',0,11,210,19,3
	.word	71383
	.byte	17,9,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_none',0,3,0,31
	.byte	'IfxCpu_Id',0,9,130,1,3
	.word	71405
	.byte	31
	.byte	'IfxCpu_ResourceCpu',0,9,161,1,3
	.word	9377
	.byte	10
	.byte	'_Ifx_SRC_SRCR_Bits',0,17,68,16,4,11
	.byte	'SRPN',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	596
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	596
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SRC_SRCR_Bits',0,17,85,3
	.word	71517
	.byte	12,17,93,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71517
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SRC_SRCR',0,17,98,3
	.word	71833
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,17,110,25,4,13
	.byte	'SB',0
	.word	71833
	.byte	4,2,35,0,0,14
	.word	71893
	.byte	31
	.byte	'Ifx_SRC_CPU_CPU',0,17,113,3
	.word	71928
	.byte	15,12
	.word	71893
	.byte	16,2,0,14
	.word	71957
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,17,128,1,25,12,13
	.byte	'CPU',0
	.word	71966
	.byte	12,2,35,0,0,14
	.word	71971
	.byte	31
	.byte	'Ifx_SRC_CPU',0,17,131,1,3
	.word	72004
	.byte	15,8
	.word	71833
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,17,146,1,25,8,13
	.byte	'SR',0
	.word	72030
	.byte	8,2,35,0,0,14
	.word	72039
	.byte	31
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,17,149,1,3
	.word	72085
	.byte	14
	.word	72039
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,17,164,1,25,8,13
	.byte	'CERBERUS',0
	.word	72125
	.byte	8,2,35,0,0,14
	.word	72130
	.byte	31
	.byte	'Ifx_SRC_CERBERUS',0,17,167,1,3
	.word	72173
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,17,182,1,25,12,13
	.byte	'TX',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	71833
	.byte	4,2,35,8,0,14
	.word	72204
	.byte	31
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,17,187,1,3
	.word	72271
	.byte	15,144,1
	.word	72204
	.byte	16,11,0,14
	.word	72307
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,17,202,1,25,144,1,13
	.byte	'ASCLIN',0
	.word	72317
	.byte	144,1,2,35,0,0,14
	.word	72322
	.byte	31
	.byte	'Ifx_SRC_ASCLIN',0,17,205,1,3
	.word	72363
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,17,220,1,25,20,13
	.byte	'TX',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	71833
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	71833
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	71833
	.byte	4,2,35,16,0,14
	.word	72392
	.byte	31
	.byte	'Ifx_SRC_QSPI_QSPI',0,17,227,1,3
	.word	72478
	.byte	15,100
	.word	72392
	.byte	16,4,0,14
	.word	72510
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,17,242,1,25,100,13
	.byte	'QSPI',0
	.word	72519
	.byte	100,2,35,0,0,14
	.word	72524
	.byte	31
	.byte	'Ifx_SRC_QSPI',0,17,245,1,3
	.word	72559
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,17,132,2,25,4,13
	.byte	'SR',0
	.word	71833
	.byte	4,2,35,0,0,14
	.word	72586
	.byte	31
	.byte	'Ifx_SRC_HSCT_HSCT',0,17,135,2,3
	.word	72624
	.byte	15,4
	.word	72586
	.byte	16,0,0,14
	.word	72656
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,17,150,2,25,4,13
	.byte	'HSCT',0
	.word	72665
	.byte	4,2,35,0,0,14
	.word	72670
	.byte	31
	.byte	'Ifx_SRC_HSCT',0,17,153,2,3
	.word	72705
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,17,168,2,25,16,13
	.byte	'COK',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	71833
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	71833
	.byte	4,2,35,12,0,14
	.word	72732
	.byte	31
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,17,174,2,3
	.word	72813
	.byte	15,64
	.word	72732
	.byte	16,3,0,14
	.word	72848
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,17,189,2,25,68,13
	.byte	'CH',0
	.word	72857
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	71833
	.byte	4,2,35,64,0,14
	.word	72862
	.byte	31
	.byte	'Ifx_SRC_HSSL_HSSL',0,17,193,2,3
	.word	72913
	.byte	15,68
	.word	72862
	.byte	16,0,0,14
	.word	72945
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,17,208,2,25,68,13
	.byte	'HSSL',0
	.word	72954
	.byte	68,2,35,0,0,14
	.word	72959
	.byte	31
	.byte	'Ifx_SRC_HSSL',0,17,211,2,3
	.word	72994
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,17,226,2,25,16,13
	.byte	'DTR',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	71833
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2617
	.byte	4,2,35,12,0,14
	.word	73021
	.byte	31
	.byte	'Ifx_SRC_I2C_I2C',0,17,232,2,3
	.word	73102
	.byte	15,16
	.word	73021
	.byte	16,0,0,14
	.word	73132
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,17,247,2,25,16,13
	.byte	'I2C',0
	.word	73141
	.byte	16,2,35,0,0,14
	.word	73146
	.byte	31
	.byte	'Ifx_SRC_I2C',0,17,250,2,3
	.word	73179
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,17,137,3,25,4,13
	.byte	'SR',0
	.word	71833
	.byte	4,2,35,0,0,14
	.word	73205
	.byte	31
	.byte	'Ifx_SRC_SENT_SENT',0,17,140,3,3
	.word	73243
	.byte	15,40
	.word	73205
	.byte	16,9,0,14
	.word	73275
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,17,155,3,25,40,13
	.byte	'SENT',0
	.word	73284
	.byte	40,2,35,0,0,14
	.word	73289
	.byte	31
	.byte	'Ifx_SRC_SENT',0,17,158,3,3
	.word	73324
	.byte	15,20
	.word	71833
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,17,173,3,25,20,13
	.byte	'SR',0
	.word	73351
	.byte	20,2,35,0,0,14
	.word	73360
	.byte	31
	.byte	'Ifx_SRC_MSC_MSC',0,17,176,3,3
	.word	73396
	.byte	15,40
	.word	73360
	.byte	16,1,0,14
	.word	73426
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,17,191,3,25,40,13
	.byte	'MSC',0
	.word	73435
	.byte	40,2,35,0,0,14
	.word	73440
	.byte	31
	.byte	'Ifx_SRC_MSC',0,17,194,3,3
	.word	73473
	.byte	15,16
	.word	71833
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,17,209,3,25,16,13
	.byte	'SR',0
	.word	73499
	.byte	16,2,35,0,0,14
	.word	73508
	.byte	31
	.byte	'Ifx_SRC_CCU6_CCU',0,17,212,3,3
	.word	73545
	.byte	15,32
	.word	73508
	.byte	16,1,0,14
	.word	73576
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,17,227,3,25,32,13
	.byte	'CCU',0
	.word	73585
	.byte	32,2,35,0,0,14
	.word	73590
	.byte	31
	.byte	'Ifx_SRC_CCU6',0,17,230,3,3
	.word	73624
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,17,245,3,25,24,13
	.byte	'CIRQ',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	71833
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	71833
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	71833
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	71833
	.byte	4,2,35,20,0,14
	.word	73651
	.byte	31
	.byte	'Ifx_SRC_GPT12_GPT12',0,17,253,3,3
	.word	73753
	.byte	15,24
	.word	73651
	.byte	16,0,0,14
	.word	73787
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,17,140,4,25,24,13
	.byte	'GPT12',0
	.word	73796
	.byte	24,2,35,0,0,14
	.word	73801
	.byte	31
	.byte	'Ifx_SRC_GPT12',0,17,143,4,3
	.word	73838
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,17,158,4,25,8,13
	.byte	'SR',0
	.word	72030
	.byte	8,2,35,0,0,14
	.word	73866
	.byte	31
	.byte	'Ifx_SRC_STM_STM',0,17,161,4,3
	.word	73902
	.byte	15,24
	.word	73866
	.byte	16,2,0,14
	.word	73932
	.byte	10
	.byte	'_Ifx_SRC_STM',0,17,176,4,25,24,13
	.byte	'STM',0
	.word	73941
	.byte	24,2,35,0,0,14
	.word	73946
	.byte	31
	.byte	'Ifx_SRC_STM',0,17,179,4,3
	.word	73979
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,17,194,4,25,4,13
	.byte	'SR',0
	.word	71833
	.byte	4,2,35,0,0,14
	.word	74005
	.byte	31
	.byte	'Ifx_SRC_FCE_FCE0',0,17,197,4,3
	.word	74042
	.byte	14
	.word	74005
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,17,212,4,25,4,13
	.byte	'FCE0',0
	.word	74073
	.byte	4,2,35,0,0,14
	.word	74078
	.byte	31
	.byte	'Ifx_SRC_FCE',0,17,215,4,3
	.word	74112
	.byte	15,32
	.word	596
	.byte	16,31,0,15,128,4
	.word	71833
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,17,230,4,25,176,4,13
	.byte	'ERR',0
	.word	73499
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	74138
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	74147
	.byte	128,4,2,35,48,0,14
	.word	74157
	.byte	31
	.byte	'Ifx_SRC_DMA_DMA',0,17,235,4,3
	.word	74229
	.byte	15,176,4
	.word	74157
	.byte	16,0,0,14
	.word	74259
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,17,250,4,25,176,4,13
	.byte	'DMA',0
	.word	74269
	.byte	176,4,2,35,0,0,14
	.word	74274
	.byte	31
	.byte	'Ifx_SRC_DMA',0,17,253,4,3
	.word	74309
	.byte	15,40
	.word	71833
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,17,140,5,25,40,13
	.byte	'SR',0
	.word	74335
	.byte	40,2,35,0,0,14
	.word	74344
	.byte	31
	.byte	'Ifx_SRC_GETH_GETH',0,17,143,5,3
	.word	74382
	.byte	15,40
	.word	74344
	.byte	16,0,0,14
	.word	74414
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,17,158,5,25,40,13
	.byte	'GETH',0
	.word	74423
	.byte	40,2,35,0,0,14
	.word	74428
	.byte	31
	.byte	'Ifx_SRC_GETH',0,17,161,5,3
	.word	74463
	.byte	15,64
	.word	71833
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,17,176,5,25,64,13
	.byte	'INT',0
	.word	74490
	.byte	64,2,35,0,0,14
	.word	74499
	.byte	31
	.byte	'Ifx_SRC_CAN_CAN',0,17,179,5,3
	.word	74536
	.byte	15,128,1
	.word	74499
	.byte	16,1,0,14
	.word	74566
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,17,194,5,25,128,1,13
	.byte	'CAN',0
	.word	74576
	.byte	128,1,2,35,0,0,14
	.word	74581
	.byte	31
	.byte	'Ifx_SRC_CAN',0,17,197,5,3
	.word	74616
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,17,212,5,25,16,13
	.byte	'SR0',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	71833
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	71833
	.byte	4,2,35,12,0,14
	.word	74642
	.byte	31
	.byte	'Ifx_SRC_VADC_G',0,17,218,5,3
	.word	74717
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,17,237,5,25,4,13
	.byte	'SR0',0
	.word	71833
	.byte	4,2,35,0,0,14
	.word	74746
	.byte	31
	.byte	'Ifx_SRC_VADC_FC',0,17,240,5,3
	.word	74783
	.byte	15,64
	.word	74642
	.byte	16,3,0,14
	.word	74813
	.byte	14
	.word	74642
	.byte	14
	.word	74642
	.byte	14
	.word	74642
	.byte	14
	.word	74642
	.byte	15,16
	.word	74746
	.byte	16,3,0,14
	.word	74847
	.byte	15,32
	.word	74642
	.byte	16,1,0,14
	.word	74861
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,17,128,6,25,128,2,13
	.byte	'G',0
	.word	74822
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	66267
	.byte	64,2,35,64,13
	.byte	'G8',0
	.word	74827
	.byte	16,3,35,128,1,13
	.byte	'G9',0
	.word	74832
	.byte	16,3,35,144,1,13
	.byte	'G10',0
	.word	74837
	.byte	16,3,35,160,1,13
	.byte	'G11',0
	.word	74842
	.byte	16,3,35,176,1,13
	.byte	'FC',0
	.word	74856
	.byte	16,3,35,192,1,13
	.byte	'reserved_D0',0
	.word	37394
	.byte	16,3,35,208,1,13
	.byte	'CG',0
	.word	74870
	.byte	32,3,35,224,1,0,14
	.word	74875
	.byte	31
	.byte	'Ifx_SRC_VADC',0,17,139,6,3
	.word	75031
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,17,154,6,25,8,13
	.byte	'SRM',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	71833
	.byte	4,2,35,4,0,14
	.word	75058
	.byte	31
	.byte	'Ifx_SRC_DSADC_DSADC',0,17,158,6,3
	.word	75112
	.byte	15,48
	.word	75058
	.byte	16,5,0,14
	.word	75146
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,17,173,6,25,48,13
	.byte	'DSADC',0
	.word	75155
	.byte	48,2,35,0,0,14
	.word	75160
	.byte	31
	.byte	'Ifx_SRC_DSADC',0,17,176,6,3
	.word	75197
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,17,191,6,25,48,13
	.byte	'INT0',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	71833
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	71833
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	71833
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	71833
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	71833
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	71833
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	71833
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	71833
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4437
	.byte	8,2,35,40,0,14
	.word	75225
	.byte	31
	.byte	'Ifx_SRC_ERAY_ERAY',0,17,204,6,3
	.word	75420
	.byte	15,48
	.word	75225
	.byte	16,0,0,14
	.word	75452
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,17,219,6,25,48,13
	.byte	'ERAY',0
	.word	75461
	.byte	48,2,35,0,0,14
	.word	75466
	.byte	31
	.byte	'Ifx_SRC_ERAY',0,17,222,6,3
	.word	75501
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,17,237,6,25,8,13
	.byte	'HSM',0
	.word	72030
	.byte	8,2,35,0,0,14
	.word	75528
	.byte	31
	.byte	'Ifx_SRC_HSM_HSM',0,17,240,6,3
	.word	75565
	.byte	15,8
	.word	75528
	.byte	16,0,0,14
	.word	75595
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,17,255,6,25,8,13
	.byte	'HSM',0
	.word	75604
	.byte	8,2,35,0,0,14
	.word	75609
	.byte	31
	.byte	'Ifx_SRC_HSM',0,17,130,7,3
	.word	75642
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,17,145,7,25,16,13
	.byte	'SCUERU',0
	.word	73499
	.byte	16,2,35,0,0,14
	.word	75668
	.byte	31
	.byte	'Ifx_SRC_SCU',0,17,148,7,3
	.word	75704
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,17,163,7,25,4,13
	.byte	'SR',0
	.word	71833
	.byte	4,2,35,0,0,14
	.word	75730
	.byte	31
	.byte	'Ifx_SRC_PMS_PMS',0,17,166,7,3
	.word	75766
	.byte	15,16
	.word	75730
	.byte	16,3,0,14
	.word	75796
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,17,181,7,25,16,13
	.byte	'PMS',0
	.word	75805
	.byte	16,2,35,0,0,14
	.word	75810
	.byte	31
	.byte	'Ifx_SRC_PMS',0,17,184,7,3
	.word	75843
	.byte	15,12
	.word	71833
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,17,199,7,25,12,13
	.byte	'SR',0
	.word	75869
	.byte	12,2,35,0,0,14
	.word	75878
	.byte	31
	.byte	'Ifx_SRC_SMU_SMU',0,17,202,7,3
	.word	75914
	.byte	15,12
	.word	75878
	.byte	16,0,0,14
	.word	75944
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,17,217,7,25,12,13
	.byte	'SMU',0
	.word	75953
	.byte	12,2,35,0,0,14
	.word	75958
	.byte	31
	.byte	'Ifx_SRC_SMU',0,17,220,7,3
	.word	75991
	.byte	15,32
	.word	71833
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,17,235,7,25,32,13
	.byte	'SR',0
	.word	76017
	.byte	32,2,35,0,0,14
	.word	76026
	.byte	31
	.byte	'Ifx_SRC_PSI5_PSI5',0,17,238,7,3
	.word	76064
	.byte	15,32
	.word	76026
	.byte	16,0,0,14
	.word	76096
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,17,253,7,25,32,13
	.byte	'PSI5',0
	.word	76105
	.byte	32,2,35,0,0,14
	.word	76110
	.byte	31
	.byte	'Ifx_SRC_PSI5',0,17,128,8,3
	.word	76145
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,17,143,8,25,24,13
	.byte	'LI0',0
	.word	71833
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	71833
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	71833
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	71833
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	71833
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	71833
	.byte	4,2,35,20,0,14
	.word	76172
	.byte	31
	.byte	'Ifx_SRC_DAM_DAM',0,17,151,8,3
	.word	76273
	.byte	15,24
	.word	76172
	.byte	16,0,0,14
	.word	76303
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,17,166,8,25,24,13
	.byte	'DAM',0
	.word	76312
	.byte	24,2,35,0,0,14
	.word	76317
	.byte	31
	.byte	'Ifx_SRC_DAM',0,17,169,8,3
	.word	76350
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,17,184,8,25,32,13
	.byte	'SR',0
	.word	76017
	.byte	32,2,35,0,0,14
	.word	76376
	.byte	31
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,17,187,8,3
	.word	76416
	.byte	15,32
	.word	76376
	.byte	16,0,0,14
	.word	76450
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,17,202,8,25,32,13
	.byte	'PSI5S',0
	.word	76459
	.byte	32,2,35,0,0,14
	.word	76464
	.byte	31
	.byte	'Ifx_SRC_PSI5S',0,17,205,8,3
	.word	76501
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,17,220,8,25,32,13
	.byte	'SR',0
	.word	76017
	.byte	32,2,35,0,0,14
	.word	76529
	.byte	31
	.byte	'Ifx_SRC_GPSR_GPSR',0,17,223,8,3
	.word	76567
	.byte	15,96
	.word	76529
	.byte	16,2,0,14
	.word	76599
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,17,238,8,25,96,13
	.byte	'GPSR',0
	.word	76608
	.byte	96,2,35,0,0,14
	.word	76613
	.byte	31
	.byte	'Ifx_SRC_GPSR',0,17,241,8,3
	.word	76648
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,18,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_STM_ACCEN0_Bits',0,18,102,3
	.word	76675
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,18,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN1_Bits',0,18,108,3
	.word	77232
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,18,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CAP_Bits',0,18,114,3
	.word	77309
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,18,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CAPSV_Bits',0,18,120,3
	.word	77382
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,18,123,16,4,11
	.byte	'DISR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_STM_CLC_Bits',0,18,130,1,3
	.word	77459
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,18,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	596
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	596
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	596
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	596
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	596
	.byte	3,0,2,35,3,0,31
	.byte	'Ifx_STM_CMCON_Bits',0,18,143,1,3
	.word	77601
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,18,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CMP_Bits',0,18,149,1,3
	.word	77821
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,18,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	421
	.byte	25,0,2,35,0,0,31
	.byte	'Ifx_STM_ICR_Bits',0,18,162,1,3
	.word	77890
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,18,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_STM_ID_Bits',0,18,170,1,3
	.word	78093
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,18,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_STM_ISCR_Bits',0,18,180,1,3
	.word	78197
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,18,183,1,16,4,11
	.byte	'RST',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_STM_KRST0_Bits',0,18,188,1,3
	.word	78348
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,18,191,1,16,4,11
	.byte	'RST',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	421
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_STM_KRST1_Bits',0,18,195,1,3
	.word	78459
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,18,198,1,16,4,11
	.byte	'CLR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	421
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_STM_KRSTCLR_Bits',0,18,202,1,3
	.word	78551
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,18,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	421
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_STM_OCS_Bits',0,18,213,1,3
	.word	78647
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,18,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM0_Bits',0,18,219,1,3
	.word	78815
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,18,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM0SV_Bits',0,18,225,1,3
	.word	78888
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,18,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM1_Bits',0,18,231,1,3
	.word	78965
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,18,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM2_Bits',0,18,237,1,3
	.word	79038
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,18,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM3_Bits',0,18,243,1,3
	.word	79111
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,18,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM4_Bits',0,18,249,1,3
	.word	79185
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,18,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM5_Bits',0,18,255,1,3
	.word	79259
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,18,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM6_Bits',0,18,133,2,3
	.word	79333
	.byte	12,18,141,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76675
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN0',0,18,146,2,3
	.word	79407
	.byte	12,18,149,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77232
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN1',0,18,154,2,3
	.word	79471
	.byte	12,18,157,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77309
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CAP',0,18,162,2,3
	.word	79535
	.byte	12,18,165,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77382
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CAPSV',0,18,170,2,3
	.word	79596
	.byte	12,18,173,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77459
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CLC',0,18,178,2,3
	.word	79659
	.byte	12,18,181,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77601
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CMCON',0,18,186,2,3
	.word	79720
	.byte	12,18,189,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77821
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CMP',0,18,194,2,3
	.word	79783
	.byte	12,18,197,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77890
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ICR',0,18,202,2,3
	.word	79844
	.byte	12,18,205,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78093
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ID',0,18,210,2,3
	.word	79905
	.byte	12,18,213,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78197
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ISCR',0,18,218,2,3
	.word	79965
	.byte	12,18,221,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78348
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRST0',0,18,226,2,3
	.word	80027
	.byte	12,18,229,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78459
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRST1',0,18,234,2,3
	.word	80090
	.byte	12,18,237,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78551
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRSTCLR',0,18,242,2,3
	.word	80153
	.byte	12,18,245,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78647
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_OCS',0,18,250,2,3
	.word	80218
	.byte	12,18,253,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78815
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM0',0,18,130,3,3
	.word	80279
	.byte	12,18,133,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78888
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM0SV',0,18,138,3,3
	.word	80341
	.byte	12,18,141,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78965
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM1',0,18,146,3,3
	.word	80405
	.byte	12,18,149,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79038
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM2',0,18,154,3,3
	.word	80467
	.byte	12,18,157,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79111
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM3',0,18,162,3,3
	.word	80529
	.byte	12,18,165,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79185
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM4',0,18,170,3,3
	.word	80591
	.byte	12,18,173,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79259
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM5',0,18,178,3,3
	.word	80653
	.byte	12,18,181,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79333
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM6',0,18,186,3,3
	.word	80715
	.byte	31
	.byte	'Ifx_P_ACCEN0_Bits',0,6,102,3
	.word	7965
	.byte	31
	.byte	'Ifx_P_ACCEN1_Bits',0,6,108,3
	.word	7878
	.byte	31
	.byte	'Ifx_P_ESR_Bits',0,6,130,1,3
	.word	4446
	.byte	31
	.byte	'Ifx_P_ID_Bits',0,6,138,1,3
	.word	2497
	.byte	31
	.byte	'Ifx_P_IN_Bits',0,6,160,1,3
	.word	3493
	.byte	31
	.byte	'Ifx_P_IOCR0_Bits',0,6,173,1,3
	.word	2626
	.byte	31
	.byte	'Ifx_P_IOCR12_Bits',0,6,186,1,3
	.word	3273
	.byte	31
	.byte	'Ifx_P_IOCR4_Bits',0,6,199,1,3
	.word	2841
	.byte	31
	.byte	'Ifx_P_IOCR8_Bits',0,6,212,1,3
	.word	3056
	.byte	31
	.byte	'Ifx_P_LPCR_Bits',0,6,231,1,3
	.word	7540
	.byte	31
	.byte	'Ifx_P_OMCR_Bits',0,6,253,1,3
	.word	7192
	.byte	31
	.byte	'Ifx_P_OMCR0_Bits',0,6,136,2,3
	.word	6179
	.byte	31
	.byte	'Ifx_P_OMCR12_Bits',0,6,146,2,3
	.word	6703
	.byte	31
	.byte	'Ifx_P_OMCR4_Bits',0,6,157,2,3
	.word	6353
	.byte	31
	.byte	'Ifx_P_OMCR8_Bits',0,6,168,2,3
	.word	6527
	.byte	31
	.byte	'Ifx_P_OMR_Bits',0,6,205,2,3
	.word	1926
	.byte	31
	.byte	'Ifx_P_OMSR_Bits',0,6,227,2,3
	.word	6859
	.byte	31
	.byte	'Ifx_P_OMSR0_Bits',0,6,237,2,3
	.word	5516
	.byte	31
	.byte	'Ifx_P_OMSR12_Bits',0,6,248,2,3
	.word	6004
	.byte	31
	.byte	'Ifx_P_OMSR4_Bits',0,6,131,3,3
	.word	5663
	.byte	31
	.byte	'Ifx_P_OMSR8_Bits',0,6,142,3,3
	.word	5832
	.byte	31
	.byte	'Ifx_P_OUT_Bits',0,6,164,3,3
	.word	1610
	.byte	31
	.byte	'Ifx_P_PCSR_Bits',0,6,187,3,3
	.word	5152
	.byte	31
	.byte	'Ifx_P_PDISC_Bits',0,6,209,3,3
	.word	4786
	.byte	31
	.byte	'Ifx_P_PDR0_Bits',0,6,230,3,3
	.word	3817
	.byte	31
	.byte	'Ifx_P_PDR1_Bits',0,6,251,3,3
	.word	4121
	.byte	31
	.byte	'Ifx_P_ACCEN0',0,6,136,4,3
	.word	8492
	.byte	31
	.byte	'Ifx_P_ACCEN1',0,6,144,4,3
	.word	7925
	.byte	31
	.byte	'Ifx_P_ESR',0,6,152,4,3
	.word	4737
	.byte	31
	.byte	'Ifx_P_ID',0,6,160,4,3
	.word	2577
	.byte	31
	.byte	'Ifx_P_IN',0,6,168,4,3
	.word	3768
	.byte	31
	.byte	'Ifx_P_IOCR0',0,6,176,4,3
	.word	2801
	.byte	31
	.byte	'Ifx_P_IOCR12',0,6,184,4,3
	.word	3453
	.byte	31
	.byte	'Ifx_P_IOCR4',0,6,192,4,3
	.word	3016
	.byte	31
	.byte	'Ifx_P_IOCR8',0,6,200,4,3
	.word	3233
	.byte	31
	.byte	'Ifx_P_LPCR',0,6,208,4,3
	.word	7820
	.byte	31
	.byte	'Ifx_P_OMCR',0,6,216,4,3
	.word	7500
	.byte	31
	.byte	'Ifx_P_OMCR0',0,6,224,4,3
	.word	6313
	.byte	31
	.byte	'Ifx_P_OMCR12',0,6,232,4,3
	.word	6819
	.byte	31
	.byte	'Ifx_P_OMCR4',0,6,240,4,3
	.word	6487
	.byte	31
	.byte	'Ifx_P_OMCR8',0,6,248,4,3
	.word	6663
	.byte	31
	.byte	'Ifx_P_OMR',0,6,128,5,3
	.word	2457
	.byte	31
	.byte	'Ifx_P_OMSR',0,6,136,5,3
	.word	7152
	.byte	31
	.byte	'Ifx_P_OMSR0',0,6,144,5,3
	.word	5623
	.byte	31
	.byte	'Ifx_P_OMSR12',0,6,152,5,3
	.word	6139
	.byte	31
	.byte	'Ifx_P_OMSR4',0,6,160,5,3
	.word	5792
	.byte	31
	.byte	'Ifx_P_OMSR8',0,6,168,5,3
	.word	5964
	.byte	31
	.byte	'Ifx_P_OUT',0,6,176,5,3
	.word	1886
	.byte	31
	.byte	'Ifx_P_PCSR',0,6,184,5,3
	.word	5476
	.byte	31
	.byte	'Ifx_P_PDISC',0,6,192,5,3
	.word	5112
	.byte	31
	.byte	'Ifx_P_PDR0',0,6,200,5,3
	.word	4081
	.byte	31
	.byte	'Ifx_P_PDR1',0,6,208,5,3
	.word	4397
	.byte	14
	.word	8532
	.byte	31
	.byte	'Ifx_P',0,6,128,6,3
	.word	81971
	.byte	17,5,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,31
	.byte	'IfxPort_ControlledBy',0,5,77,3
	.word	81991
	.byte	17,5,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,31
	.byte	'IfxPort_InputMode',0,5,87,3
	.word	82082
	.byte	17,5,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,31
	.byte	'IfxPort_LvdsMode',0,5,95,3
	.word	82233
	.byte	17,5,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,31
	.byte	'IfxPort_OutputIdx',0,5,136,1,3
	.word	82314
	.byte	17,5,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,31
	.byte	'IfxPort_OutputMode',0,5,145,1,3
	.word	82558
	.byte	17,5,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,31
	.byte	'IfxPort_PadDriver',0,5,165,1,3
	.word	82682
	.byte	17,5,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,31
	.byte	'IfxPort_PadSupply',0,5,173,1,3
	.word	83132
	.byte	17,5,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,31
	.byte	'IfxPort_PinFunctionMode',0,5,181,1,3
	.word	83212
	.byte	31
	.byte	'IfxPort_State',0,5,193,1,3
	.word	9112
	.byte	30,5,246,1,9,8,13
	.byte	'port',0
	.word	9107
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	596
	.byte	1,2,35,4,0,31
	.byte	'IfxPort_Pin',0,5,250,1,3
	.word	83342
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,19,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SMU_ACCEN0_Bits',0,19,102,3
	.word	83402
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,19,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SMU_ACCEN1_Bits',0,19,108,3
	.word	83959
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,19,111,16,4,11
	.byte	'DF0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SMU_AD_Bits',0,19,145,1,3
	.word	84036
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,19,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SMU_AEX_Bits',0,19,176,1,3
	.word	84586
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,19,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	4,0,2,35,0,0,31
	.byte	'Ifx_SMU_AEXCLR_Bits',0,19,207,1,3
	.word	85143
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,19,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	613
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	596
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SMU_AFCNT_Bits',0,19,217,1,3
	.word	85739
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,19,220,1,16,4,11
	.byte	'SF0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_SMU_AG_Bits',0,19,254,1,3
	.word	85879
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,19,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	444
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	444
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	444
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	444
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	2,0,2,35,0,0,31
	.byte	'Ifx_SMU_AGC_Bits',0,19,142,2,3
	.word	86430
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,19,145,2,16,4,11
	.byte	'CF0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_SMU_AGCF_Bits',0,19,179,2,3
	.word	86692
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,19,182,2,16,4,11
	.byte	'FE0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_SMU_AGFSP_Bits',0,19,216,2,3
	.word	87247
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,19,219,2,16,4,11
	.byte	'DISR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SMU_CLC_Bits',0,19,226,2,3
	.word	87804
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,19,229,2,16,4,11
	.byte	'CMD',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	444
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SMU_CMD_Bits',0,19,234,2,3
	.word	87947
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,19,237,2,16,4,11
	.byte	'SSM',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SMU_DBG_Bits',0,19,241,2,3
	.word	88050
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,19,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	444
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	444
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	444
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	444
	.byte	10,0,2,35,0,0,31
	.byte	'Ifx_SMU_FSP_Bits',0,19,252,2,3
	.word	88138
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,19,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	613
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SMU_ID_Bits',0,19,132,3,3
	.word	88293
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,19,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	444
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_SMU_KEYS_Bits',0,19,140,3,3
	.word	88403
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,19,143,3,16,4,11
	.byte	'TGS',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_SMU_OCS_Bits',0,19,153,3,3
	.word	88515
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,19,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	444
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	444
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	9,0,2,35,0,0,31
	.byte	'Ifx_SMU_PCTL_Bits',0,19,167,3,3
	.word	88707
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,19,170,3,16,4,11
	.byte	'TE0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_SMU_RMCTL_Bits',0,19,204,3,3
	.word	88938
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,19,207,3,16,4,11
	.byte	'EF0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_SMU_RMEF_Bits',0,19,241,3,3
	.word	89642
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,19,244,3,16,4,11
	.byte	'STS0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_SMU_RMSTS_Bits',0,19,150,4,3
	.word	90344
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,19,153,4,16,4,11
	.byte	'GID0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC00_Bits',0,19,161,4,3
	.word	91059
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,19,164,4,16,4,11
	.byte	'GID2',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC01_Bits',0,19,172,4,3
	.word	91227
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,19,175,4,16,4,11
	.byte	'GID0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC10_Bits',0,19,183,4,3
	.word	91395
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,19,186,4,16,4,11
	.byte	'GID2',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC11_Bits',0,19,194,4,3
	.word	91563
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,19,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	444
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SMU_RTC_Bits',0,19,203,4,3
	.word	91731
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,19,206,4,16,4,11
	.byte	'CMD',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	444
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	444
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_SMU_STS_Bits',0,19,220,4,3
	.word	91851
	.byte	12,19,228,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83402
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_ACCEN0',0,19,233,4,3
	.word	92106
	.byte	12,19,236,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83959
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_ACCEN1',0,19,241,4,3
	.word	92170
	.byte	12,19,244,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84036
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AD',0,19,249,4,3
	.word	92234
	.byte	12,19,252,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84586
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AEX',0,19,129,5,3
	.word	92294
	.byte	12,19,132,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85143
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AEXCLR',0,19,137,5,3
	.word	92355
	.byte	12,19,140,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85739
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AFCNT',0,19,145,5,3
	.word	92419
	.byte	12,19,148,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85879
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AG',0,19,153,5,3
	.word	92482
	.byte	12,19,156,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86430
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AGC',0,19,161,5,3
	.word	92542
	.byte	12,19,164,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86692
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AGCF',0,19,169,5,3
	.word	92603
	.byte	12,19,172,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87247
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_AGFSP',0,19,177,5,3
	.word	92665
	.byte	12,19,180,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87804
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_CLC',0,19,185,5,3
	.word	92728
	.byte	12,19,188,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87947
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_CMD',0,19,193,5,3
	.word	92789
	.byte	12,19,196,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88050
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_DBG',0,19,201,5,3
	.word	92850
	.byte	12,19,204,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88138
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_FSP',0,19,209,5,3
	.word	92911
	.byte	12,19,212,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88293
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_ID',0,19,217,5,3
	.word	92972
	.byte	12,19,220,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88403
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_KEYS',0,19,225,5,3
	.word	93032
	.byte	12,19,228,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88515
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_OCS',0,19,233,5,3
	.word	93094
	.byte	12,19,236,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88707
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_PCTL',0,19,241,5,3
	.word	93155
	.byte	12,19,244,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88938
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RMCTL',0,19,249,5,3
	.word	93217
	.byte	12,19,252,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89642
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RMEF',0,19,129,6,3
	.word	93280
	.byte	12,19,132,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90344
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RMSTS',0,19,137,6,3
	.word	93342
	.byte	12,19,140,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91059
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC00',0,19,145,6,3
	.word	93405
	.byte	12,19,148,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91227
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC01',0,19,153,6,3
	.word	93469
	.byte	12,19,156,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91395
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC10',0,19,161,6,3
	.word	93533
	.byte	12,19,164,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91563
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RTAC11',0,19,169,6,3
	.word	93597
	.byte	12,19,172,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91731
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_RTC',0,19,177,6,3
	.word	93661
	.byte	12,19,180,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91851
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SMU_STS',0,19,185,6,3
	.word	93722
	.byte	17,7,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,31
	.byte	'IfxScuCcu_LowPowerDivRatio',0,7,216,2,3
	.word	93783
	.byte	17,7,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,31
	.byte	'IfxScuCcu_ModulationAmplitude',0,7,229,2,3
	.word	93976
	.byte	17,7,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,31
	.byte	'IfxScuCcu_PllInputClockSelection',0,7,131,4,3
	.word	94277
	.byte	17,7,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,31
	.byte	'IfxScuCcu_Traprequest',0,7,141,4,3
	.word	94451
	.byte	17,7,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,31
	.byte	'IfxScuCcu_ModEn',0,7,151,4,3
	.word	94605
	.byte	30,7,162,4,9,6,13
	.byte	'pDivider',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	596
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	596
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	596
	.byte	1,2,35,4,0,31
	.byte	'IfxScuCcu_PerPllConfig',0,7,171,4,3
	.word	94690
	.byte	30,7,176,4,9,4,13
	.byte	'pDivider',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	596
	.byte	1,2,35,2,0,31
	.byte	'IfxScuCcu_SysPllConfig',0,7,181,4,3
	.word	94828
	.byte	30,7,189,4,9,8,13
	.byte	'value',0
	.word	9555
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9555
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_CcuconRegConfig',0,7,193,4,3
	.word	94922
	.byte	30,7,197,4,9,6,13
	.byte	'k2Step',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	217
	.byte	4,2,35,2,0,31
	.byte	'IfxScuCcu_PllStepConfig',0,7,201,4,3
	.word	94993
	.byte	30,7,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	9555
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	94277
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	94828
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	94690
	.byte	6,2,35,10,0,31
	.byte	'IfxScuCcu_pllsParameterConfig',0,7,211,4,3
	.word	95067
	.byte	30,7,219,4,9,8,13
	.byte	'value',0
	.word	9555
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9555
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,7,223,4,3
	.word	95212
	.byte	30,7,231,4,9,56,13
	.byte	'ccucon0',0
	.word	94922
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	94922
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	94922
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	94922
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	94922
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	94922
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	94922
	.byte	8,2,35,48,0,31
	.byte	'IfxScuCcu_ClockDistributionConfig',0,7,240,4,3
	.word	95288
	.byte	30,7,244,4,9,20,13
	.byte	'pllsParameters',0
	.word	95067
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	217
	.byte	4,2,35,16,0,31
	.byte	'IfxScuCcu_InitialStepConfig',0,7,248,4,3
	.word	95457
	.byte	20
	.word	94993
	.byte	3
	.word	95543
	.byte	30,7,252,4,9,8,13
	.byte	'numOfSteps',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	95548
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_PllThrottleConfig',0,7,128,5,3
	.word	95553
	.byte	30,7,134,5,9,2,13
	.byte	'Mod_Enable',0
	.word	94605
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	93976
	.byte	1,2,35,1,0,31
	.byte	'IfxScuCcu_Mod_Config',0,7,138,5,3
	.word	95635
	.byte	17,8,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,31
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	95709
	.byte	30,8,192,1,9,6,13
	.byte	'counter',0
	.word	9555
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	596
	.byte	1,2,35,4,0,31
	.byte	'IfxCpu_Counter',0,8,196,1,3
	.word	95798
	.byte	30,8,204,1,9,32,13
	.byte	'instruction',0
	.word	95798
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	95798
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	95798
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	95798
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	95798
	.byte	6,2,35,24,0,31
	.byte	'IfxCpu_Perf',0,8,211,1,3
	.word	95864
	.byte	31
	.byte	'IfxScuRcu_ResetType',0,10,102,3
	.word	10214
	.byte	31
	.byte	'IfxScuRcu_Trigger',0,10,128,1,3
	.word	10411
	.byte	31
	.byte	'IfxScuRcu_ResetCode',0,10,140,1,3
	.word	10917
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L46:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,28,29,1,49,19
	.byte	0,0,29,11,0,49,19,0,0,30,19,1,58,15,59,15,57,15,11,15,0,0,31,22,0,3,8,58,15,59,15,57,15,73,19,0,0,32,21
	.byte	0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L47:
	.word	.L119-.L118
.L118:
	.half	3
	.word	.L121-.L120
.L120:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.h',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0,0,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L121:
.L119:
	.sdecl	'.debug_info',debug,cluster('IfxScuRcu_evaluateReset')
	.sect	'.debug_info'
.L48:
	.word	282
	.half	3
	.word	.L49
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L51,.L50
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxScuRcu_evaluateReset',0,1,59,21
	.word	.L63
	.byte	1,1,1
	.word	.L39,.L64,.L38
	.byte	4
	.word	.L39,.L64
	.byte	5
	.byte	'Rstcon',0,1,61,25
	.word	.L65,.L66
	.byte	5
	.byte	'RstStat',0,1,62,25
	.word	.L67,.L68
	.byte	5
	.byte	'resetCode',0,1,63,25
	.word	.L63,.L69
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuRcu_evaluateReset')
	.sect	'.debug_abbrev'
.L49:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuRcu_evaluateReset')
	.sect	'.debug_line'
.L50:
	.word	.L123-.L122
.L122:
	.half	3
	.word	.L125-.L124
.L124:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0,0,0,0,0
.L125:
	.byte	5,111,7,0,5,2
	.word	.L39
	.byte	3,63,1,5,51,1,5,28,9
	.half	.L126-.L39
	.byte	3,3,1,5,83,9
	.half	.L127-.L126
	.byte	3,125,1,5,48,3,5,1,5,111,9
	.half	.L106-.L127
	.byte	3,123,1,5,28,9
	.half	.L128-.L106
	.byte	1,5,47,3,6,1,5,30,9
	.half	.L107-.L128
	.byte	3,124,1,9
	.half	.L129-.L107
	.byte	3,1,1,5,28,9
	.half	.L130-.L129
	.byte	3,126,1,9
	.half	.L131-.L130
	.byte	3,1,1,5,5,9
	.half	.L132-.L131
	.byte	3,7,1,5,63,7,9
	.half	.L133-.L132
	.byte	3,2,1,5,32,9
	.half	.L108-.L133
	.byte	1,9
	.half	.L134-.L108
	.byte	3,1,1,5,68,3,127,1,5,10,9
	.half	.L2-.L134
	.byte	3,4,1,5,63,7,9
	.half	.L135-.L2
	.byte	3,2,1,5,32,9
	.half	.L136-.L135
	.byte	1,9
	.half	.L137-.L136
	.byte	3,1,1,5,68,3,127,1,5,10,9
	.half	.L4-.L137
	.byte	3,4,1,5,63,7,9
	.half	.L138-.L4
	.byte	3,2,1,5,32,9
	.half	.L139-.L138
	.byte	1,9
	.half	.L140-.L139
	.byte	3,1,1,5,67,3,127,1,5,10,9
	.half	.L6-.L140
	.byte	3,4,1,5,63,7,9
	.half	.L141-.L6
	.byte	3,2,1,5,32,9
	.half	.L142-.L141
	.byte	1,5,54,3,2,1,5,32,9
	.half	.L143-.L142
	.byte	1,9
	.half	.L144-.L143
	.byte	3,127,1,5,66,3,127,1,5,10,9
	.half	.L8-.L144
	.byte	3,4,1,5,63,7,9
	.half	.L145-.L8
	.byte	3,2,1,5,32,9
	.half	.L146-.L145
	.byte	1,9
	.half	.L147-.L146
	.byte	3,1,1,5,68,3,127,1,5,10,9
	.half	.L10-.L147
	.byte	3,4,1,5,63,7,9
	.half	.L148-.L10
	.byte	3,2,1,5,32,9
	.half	.L149-.L148
	.byte	1,9
	.half	.L150-.L149
	.byte	3,1,1,5,68,3,127,1,5,10,9
	.half	.L12-.L150
	.byte	3,4,1,5,63,7,9
	.half	.L151-.L12
	.byte	3,2,1,5,32,9
	.half	.L152-.L151
	.byte	1,9
	.half	.L153-.L152
	.byte	3,1,1,5,68,3,127,1,5,23,9
	.half	.L14-.L153
	.byte	3,5,1,5,10,9
	.half	.L154-.L14
	.byte	1,5,32,7,9
	.half	.L155-.L154
	.byte	3,2,1,5,34,9
	.half	.L156-.L155
	.byte	3,1,1,5,60,3,127,1,5,23,9
	.half	.L16-.L156
	.byte	3,4,1,5,10,9
	.half	.L157-.L16
	.byte	1,5,32,7,9
	.half	.L158-.L157
	.byte	3,2,1,5,34,9
	.half	.L159-.L158
	.byte	3,1,1,5,59,3,127,1,5,23,9
	.half	.L18-.L159
	.byte	3,4,1,5,10,9
	.half	.L160-.L18
	.byte	1,5,32,7,9
	.half	.L161-.L160
	.byte	3,2,1,5,34,9
	.half	.L162-.L161
	.byte	3,1,1,5,65,3,127,1,5,22,9
	.half	.L20-.L162
	.byte	3,7,1,5,9,9
	.half	.L163-.L20
	.byte	1,5,38,7,9
	.half	.L164-.L163
	.byte	3,3,1,5,69,3,127,1,5,27,9
	.half	.L22-.L164
	.byte	3,4,1,5,14,9
	.half	.L165-.L22
	.byte	1,5,38,7,9
	.half	.L166-.L165
	.byte	3,3,1,5,69,3,127,1,5,14,9
	.half	.L24-.L166
	.byte	3,4,1,5,38,7,9
	.half	.L167-.L24
	.byte	3,3,1,5,69,3,127,1,5,14,9
	.half	.L26-.L167
	.byte	3,4,1,5,38,7,9
	.half	.L168-.L26
	.byte	3,3,1,5,36,9
	.half	.L27-.L168
	.byte	3,127,1,9
	.half	.L21-.L27
	.byte	3,1,1,9
	.half	.L3-.L21
	.byte	3,1,1,5,18,9
	.half	.L9-.L3
	.byte	3,5,1,5,5,9
	.half	.L169-.L9
	.byte	1,5,22,7,9
	.half	.L170-.L169
	.byte	3,2,1,5,9,9
	.half	.L171-.L170
	.byte	1,5,36,7,9
	.half	.L172-.L171
	.byte	3,2,1,5,38,9
	.half	.L173-.L172
	.byte	3,1,1,5,36,9
	.half	.L174-.L173
	.byte	1,5,31,9
	.half	.L30-.L174
	.byte	3,3,1,5,1,9
	.half	.L29-.L30
	.byte	3,4,1,7,9
	.half	.L52-.L29
	.byte	0,1,1
.L123:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuRcu_evaluateReset')
	.sect	'.debug_ranges'
.L51:
	.word	-1,.L39,0,.L52-.L39,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuRcu_performReset')
	.sect	'.debug_info'
.L53:
	.word	515
	.half	3
	.word	.L54
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L56,.L55
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxScuRcu_performReset',0,1,179,1,6,1,1,1
	.word	.L41,.L70,.L40
	.byte	4
	.byte	'resetType',0,1,179,1,49
	.word	.L71,.L72
	.byte	4
	.byte	'userResetInfo',0,1,179,1,67
	.word	.L73,.L74
	.byte	5
	.word	.L41,.L70
	.byte	6
	.byte	'password',0,1,182,1,12
	.word	.L73,.L75
	.byte	7
	.word	.L76,.L77,.L78
	.byte	8
	.word	.L79,.L80
	.byte	9
	.word	.L81,.L82
	.byte	0,7
	.word	.L83,.L84,.L85
	.byte	10
	.word	.L86,.L84,.L85
	.byte	6
	.byte	'reg',0,2,231,6,21
	.word	.L87,.L88
	.byte	0,0,7
	.word	.L89,.L90,.L91
	.byte	8
	.word	.L92,.L93
	.byte	10
	.word	.L94,.L90,.L91
	.byte	6
	.byte	'password',0,3,222,4,12
	.word	.L73,.L95
	.byte	0,0,7
	.word	.L83,.L91,.L96
	.byte	10
	.word	.L86,.L91,.L96
	.byte	6
	.byte	'reg',0,2,231,6,21
	.word	.L87,.L97
	.byte	0,0,7
	.word	.L98,.L99,.L100
	.byte	8
	.word	.L101,.L102
	.byte	8
	.word	.L103,.L104
	.byte	11
	.word	.L105,.L99,.L100
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuRcu_performReset')
	.sect	'.debug_abbrev'
.L54:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuRcu_performReset')
	.sect	'.debug_line'
.L55:
	.word	.L176-.L175
.L175:
	.half	3
	.word	.L178-.L177
.L177:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0,0
.L178:
	.byte	5,6,7,0,5,2
	.word	.L41
	.byte	3,178,1,1,5,51,3,5,1,4,3,5,24,9
	.half	.L77-.L41
	.byte	3,143,3,1,5,5,9
	.half	.L179-.L77
	.byte	1,5,37,7,9
	.half	.L180-.L179
	.byte	3,5,1,5,43,9
	.half	.L181-.L180
	.byte	3,1,1,5,33,9
	.half	.L32-.L181
	.byte	3,6,1,5,39,9
	.half	.L182-.L32
	.byte	3,1,1,5,27,9
	.half	.L33-.L182
	.byte	3,3,1,5,40,9
	.half	.L183-.L33
	.byte	1,4,1,5,28,7,9
	.half	.L78-.L183
	.byte	3,231,124,1,4,3,5,40,9
	.half	.L184-.L78
	.byte	3,153,3,1,4,1,5,5,9
	.half	.L111-.L184
	.byte	3,229,124,1,5,28,7,9
	.half	.L112-.L111
	.byte	3,2,1,5,32,9
	.half	.L185-.L112
	.byte	1,5,35,1,5,28,9
	.half	.L34-.L185
	.byte	3,4,1,5,32,9
	.half	.L186-.L34
	.byte	1,4,2,5,19,9
	.half	.L84-.L186
	.byte	3,166,5,1,5,37,9
	.half	.L113-.L84
	.byte	3,1,1,4,1,5,66,3,221,122,1,5,73,9
	.half	.L187-.L113
	.byte	1,4,3,5,33,9
	.half	.L90-.L187
	.byte	3,157,3,1,5,14,9
	.half	.L188-.L90
	.byte	3,1,1,4,2,5,19,9
	.half	.L91-.L188
	.byte	3,132,2,1,5,37,9
	.half	.L115-.L91
	.byte	3,1,1,4,1,5,55,9
	.half	.L96-.L115
	.byte	3,223,122,1,4,3,5,25,9
	.half	.L99-.L96
	.byte	3,222,2,1,5,5,9
	.half	.L189-.L99
	.byte	1,5,45,7,9
	.half	.L190-.L189
	.byte	3,6,1,5,38,9
	.half	.L191-.L190
	.byte	3,127,1,5,45,9
	.half	.L192-.L191
	.byte	3,1,1,5,38,9
	.half	.L193-.L192
	.byte	3,127,1,5,69,9
	.half	.L194-.L193
	.byte	1,5,26,3,126,1,5,34,9
	.half	.L36-.L194
	.byte	3,9,1,5,41,9
	.half	.L114-.L36
	.byte	3,1,1,5,65,9
	.half	.L195-.L114
	.byte	3,127,1,5,22,3,126,1,5,28,9
	.half	.L37-.L195
	.byte	3,6,1,5,41,9
	.half	.L196-.L37
	.byte	1,4,1,5,34,7,9
	.half	.L100-.L196
	.byte	3,148,125,1,5,26,9
	.half	.L117-.L100
	.byte	3,3,1,5,36,9
	.half	.L197-.L117
	.byte	1,5,1,9
	.half	.L198-.L197
	.byte	3,8,1,7,9
	.half	.L57-.L198
	.byte	0,1,1
.L176:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuRcu_performReset')
	.sect	'.debug_ranges'
.L56:
	.word	-1,.L41,0,.L57-.L41,0,0
.L82:
	.word	-1,.L41,.L77-.L41,.L78-.L41,-1,.L43,0,.L62-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L58:
	.word	192
	.half	3
	.word	.L59
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L61,.L60
	.byte	2
	.word	.L44
	.byte	3
	.byte	'.cocofun_6',0,1,179,1,6,1
	.word	.L43,.L62,.L42
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L59:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L60:
	.word	.L200-.L199
.L199:
	.half	3
	.word	.L202-.L201
.L201:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuRcu.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L202:
	.byte	4,2,5,43,7,0,5,2
	.word	.L43
	.byte	3,204,4,1,5,25,9
	.half	.L203-.L43
	.byte	3,125,1,5,43,9
	.half	.L204-.L203
	.byte	3,3,1,5,66,9
	.half	.L205-.L204
	.byte	3,127,1,5,25,3,126,1,9
	.half	.L62-.L205
	.byte	0,1,1,4,2,5,39,0,5,2
	.word	.L43
	.byte	3,211,4,1,5,21,9
	.half	.L203-.L43
	.byte	3,125,1,5,39,9
	.half	.L204-.L203
	.byte	3,3,1,5,62,9
	.half	.L205-.L204
	.byte	3,127,1,5,21,3,126,1,5,25,9
	.half	.L109-.L205
	.byte	3,121,1,7,9
	.half	.L62-.L109
	.byte	0,1,1
.L200:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L61:
	.word	-1,.L43,0,.L62-.L43,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L42:
	.word	-1,.L43,0,.L62-.L43
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuRcu_evaluateReset')
	.sect	'.debug_loc'
.L38:
	.word	-1,.L39,0,.L64-.L39
	.half	2
	.byte	138,0
	.word	0,0
.L68:
	.word	-1,.L39,.L106-.L39,.L64-.L39
	.half	1
	.byte	84
	.word	0,0
.L66:
	.word	-1,.L39,.L107-.L39,.L108-.L39
	.half	1
	.byte	81
	.word	.L2-.L39,.L3-.L39
	.half	1
	.byte	81
	.word	0,0
.L69:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuRcu_performReset')
	.sect	'.debug_loc'
.L40:
	.word	-1,.L41,0,.L70-.L41
	.half	2
	.byte	138,0
	.word	0,0
.L75:
	.word	-1,.L41,.L43-.L41,.L109-.L41
	.half	1
	.byte	82
	.word	.L77-.L41,.L110-.L41
	.half	1
	.byte	82
	.word	0,0
.L104:
	.word	0,0
.L80:
	.word	0,0
.L95:
	.word	-1,.L41,.L91-.L41,.L114-.L41
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L88:
	.word	-1,.L41,.L113-.L41,.L85-.L41
	.half	1
	.byte	95
	.word	0,0
.L97:
	.word	-1,.L41,.L115-.L41,.L96-.L41
	.half	1
	.byte	95
	.word	0,0
.L72:
	.word	-1,.L41,0,.L77-.L41
	.half	1
	.byte	84
	.word	.L111-.L41,.L112-.L41
	.half	1
	.byte	88
	.word	0,0
.L74:
	.word	-1,.L41,0,.L77-.L41
	.half	1
	.byte	85
	.word	.L116-.L41,.L117-.L41
	.half	1
	.byte	89
	.word	0,0
.L102:
	.word	0,0
.L93:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L206:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxScuRcu_evaluateReset')
	.sect	'.debug_frame'
	.word	24
	.word	.L206,.L39,.L64-.L39
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuRcu_performReset')
	.sect	'.debug_frame'
	.word	12
	.word	.L206,.L41,.L70-.L41
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L207:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L207,.L43,.L62-.L43
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
